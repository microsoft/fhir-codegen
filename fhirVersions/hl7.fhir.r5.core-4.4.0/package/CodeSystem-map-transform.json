{"resourceType":"CodeSystem","id":"map-transform","meta":{"lastUpdated":"2020-05-12T23:09:08.669+10:00"},"text":{"status":"generated","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\">\n            <h2>StructureMapTransform</h2>\n            <div>\n              <p>How data is copied/created.</p>\n\n            </div>\n            <p>This code system http://hl7.org/fhir/map-transform defines the following codes:</p>\n            <table class=\"codes\">\n              <tr>\n                <td style=\"white-space:nowrap\">\n                  <b>Code</b>\n                </td>\n                <td>\n                  <b>Display</b>\n                </td>\n                <td>\n                  <b>Definition</b>\n                </td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">create\n                  <a name=\"map-transform-create\"> </a>\n                </td>\n                <td>create</td>\n                <td>create(type : string) - type is passed through to the application on the standard API, and must be known by it.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">copy\n                  <a name=\"map-transform-copy\"> </a>\n                </td>\n                <td>copy</td>\n                <td>copy(source).</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">truncate\n                  <a name=\"map-transform-truncate\"> </a>\n                </td>\n                <td>truncate</td>\n                <td>truncate(source, length) - source must be stringy type.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">escape\n                  <a name=\"map-transform-escape\"> </a>\n                </td>\n                <td>escape</td>\n                <td>escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">cast\n                  <a name=\"map-transform-cast\"> </a>\n                </td>\n                <td>cast</td>\n                <td>cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">append\n                  <a name=\"map-transform-append\"> </a>\n                </td>\n                <td>append</td>\n                <td>append(source...) - source is element or string.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">translate\n                  <a name=\"map-transform-translate\"> </a>\n                </td>\n                <td>translate</td>\n                <td>translate(source, uri_of_map) - use the translate operation.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">reference\n                  <a name=\"map-transform-reference\"> </a>\n                </td>\n                <td>reference</td>\n                <td>reference(source : object) - return a string that references the provided tree properly.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">dateOp\n                  <a name=\"map-transform-dateOp\"> </a>\n                </td>\n                <td>dateOp</td>\n                <td>Perform a date operation. *Parameters to be documented*.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">uuid\n                  <a name=\"map-transform-uuid\"> </a>\n                </td>\n                <td>uuid</td>\n                <td>Generate a random UUID (in lowercase). No Parameters.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">pointer\n                  <a name=\"map-transform-pointer\"> </a>\n                </td>\n                <td>pointer</td>\n                <td>Return the appropriate string to put in a reference that refers to the resource provided as a parameter.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">evaluate\n                  <a name=\"map-transform-evaluate\"> </a>\n                </td>\n                <td>evaluate</td>\n                <td>Execute the supplied FHIRPath expression and use the value returned by that.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">cc\n                  <a name=\"map-transform-cc\"> </a>\n                </td>\n                <td>cc</td>\n                <td>Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">c\n                  <a name=\"map-transform-c\"> </a>\n                </td>\n                <td>c</td>\n                <td>Create a Coding. Parameters = (system. Code[, display]).</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">qty\n                  <a name=\"map-transform-qty\"> </a>\n                </td>\n                <td>qty</td>\n                <td>Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">id\n                  <a name=\"map-transform-id\"> </a>\n                </td>\n                <td>id</td>\n                <td>Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.</td>\n              </tr>\n              <tr>\n                <td style=\"white-space:nowrap\">cp\n                  <a name=\"map-transform-cp\"> </a>\n                </td>\n                <td>cp</td>\n                <td>Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.</td>\n              </tr>\n            </table>\n          </div>"},"extension":[{"url":"http://hl7.org/fhir/StructureDefinition/structuredefinition-wg","valueCode":"fhir"},{"url":"http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status","valueCode":"trial-use"},{"url":"http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm","valueInteger":2}],"url":"http://hl7.org/fhir/map-transform","identifier":[{"system":"urn:ietf:rfc:3986","value":"urn:oid:2.16.840.1.113883.4.642.1.682"}],"version":"4.4.0","name":"StructureMapTransform","title":"StructureMapTransform","status":"draft","experimental":false,"date":"2020-05-12T23:09:08+10:00","publisher":"HL7 (FHIR Project)","contact":[{"telecom":[{"system":"url","value":"http://hl7.org/fhir"},{"system":"email","value":"fhir@lists.hl7.org"}]}],"description":"How data is copied/created.","caseSensitive":true,"valueSet":"http://hl7.org/fhir/ValueSet/map-transform","content":"complete","concept":[{"code":"create","display":"create","definition":"create(type : string) - type is passed through to the application on the standard API, and must be known by it."},{"code":"copy","display":"copy","definition":"copy(source)."},{"code":"truncate","display":"truncate","definition":"truncate(source, length) - source must be stringy type."},{"code":"escape","display":"escape","definition":"escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped."},{"code":"cast","display":"cast","definition":"cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known."},{"code":"append","display":"append","definition":"append(source...) - source is element or string."},{"code":"translate","display":"translate","definition":"translate(source, uri_of_map) - use the translate operation."},{"code":"reference","display":"reference","definition":"reference(source : object) - return a string that references the provided tree properly."},{"code":"dateOp","display":"dateOp","definition":"Perform a date operation. *Parameters to be documented*."},{"code":"uuid","display":"uuid","definition":"Generate a random UUID (in lowercase). No Parameters."},{"code":"pointer","display":"pointer","definition":"Return the appropriate string to put in a reference that refers to the resource provided as a parameter."},{"code":"evaluate","display":"evaluate","definition":"Execute the supplied FHIRPath expression and use the value returned by that."},{"code":"cc","display":"cc","definition":"Create a CodeableConcept. Parameters = (text) or (system. Code[, display])."},{"code":"c","display":"c","definition":"Create a Coding. Parameters = (system. Code[, display])."},{"code":"qty","display":"qty","definition":"Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit."},{"code":"id","display":"id","definition":"Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set."},{"code":"cp","display":"cp","definition":"Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value."}]}