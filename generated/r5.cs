// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 4.4.0
  // Using Model Inheritance: True
  // Hiding Removed Parent Fields: False
  // Nesting Type Definitions: False
  // Primitive Naming Sylte: None
  // Complex Type Naming Sylte: PascalCase
  // Resource Naming Sylte: None
  // Interaction Naming Sylte: None
  // Extension Support: NonPrimitives

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

/// <summary>
/// Need to be able to record postal addresses, along with notes about their use.
/// </summary>
public class Address : DataType {
  /// <summary>
  /// The name of the city, town, suburb, village or other community or delivery center.
  /// </summary>
  [JsonPropertyName("city")]
  public string? City { get; set; }
  [JsonPropertyName("_city")]
  public Element _City { get; set; }
  /// <summary>
  /// ISO 3166 3 letter codes can be used in place of a human readable country name.
  /// </summary>
  [JsonPropertyName("country")]
  public string? Country { get; set; }
  [JsonPropertyName("_country")]
  public Element _Country { get; set; }
  /// <summary>
  /// District is sometimes known as county, but in some regions 'county' is used in place of city (municipality), so county name should be conveyed in city instead.
  /// </summary>
  [JsonPropertyName("district")]
  public string? District { get; set; }
  [JsonPropertyName("_district")]
  public Element _District { get; set; }
  /// <summary>
  /// This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
  /// </summary>
  [JsonPropertyName("line")]
  public string?[] Line { get; set; }
  [JsonPropertyName("_line")]
  public Element[] _Line { get; set; }
  /// <summary>
  /// Time period when address was/is in use.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// A postal code designating a region defined by the postal service.
  /// </summary>
  [JsonPropertyName("postalCode")]
  public string? PostalCode { get; set; }
  [JsonPropertyName("_postalCode")]
  public Element _PostalCode { get; set; }
  /// <summary>
  /// Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
  /// </summary>
  [JsonPropertyName("state")]
  public string? State { get; set; }
  [JsonPropertyName("_state")]
  public Element _State { get; set; }
  /// <summary>
  /// Can provide both a text representation and parts. Applications updating an address SHALL ensure that  when both text and parts are present,  no content is included in the text that isn't found in a part.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// The definition of Address states that "address is intended to describe postal addresses, not physical locations". However, many applications track whether an address has a dual purpose of being a location that can be visited as well as being a valid delivery destination, and Postal addresses are often used as proxies for physical locations (also see the [Location](location.html#) resource).
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Applications can assume that an address is current unless it explicitly says that it is temporary or old.
  /// </summary>
  [JsonPropertyName("use")]
  public string? Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// Code Values for the Address.type field
/// </summary>
public sealed class AddressTypeCodes {
  public const string POSTAL = "postal";
  public const string PHYSICAL = "physical";
  public const string BOTH = "both";
}
/// <summary>
/// Code Values for the Address.use field
/// </summary>
public sealed class AddressUseCodes {
  public const string HOME = "home";
  public const string WORK = "work";
  public const string TEMP = "temp";
  public const string OLD = "old";
  public const string BILLING = "billing";
}
public class Age : Quantity {
}
public class Annotation : DataType {
  /// <summary>
  /// Organization is used when there's no need for specific attribution as to who made the comment.
  /// </summary>
  [JsonPropertyName("authorReference")]
  public Reference? AuthorReference { get; set; }
  [JsonPropertyName("_authorReference")]
  public Element _AuthorReference { get; set; }
  /// <summary>
  /// Organization is used when there's no need for specific attribution as to who made the comment.
  /// </summary>
  [JsonPropertyName("authorString")]
  public string? AuthorString { get; set; }
  [JsonPropertyName("_authorString")]
  public Element _AuthorString { get; set; }
  /// <summary>
  /// The text of the annotation in markdown format.
  /// </summary>
  [JsonPropertyName("text")]
  public string Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// Indicates when this particular annotation was made.
  /// </summary>
  [JsonPropertyName("time")]
  public string? Time { get; set; }
  [JsonPropertyName("_time")]
  public Element _Time { get; set; }
}
/// <summary>
/// Many models need to include data defined in other specifications that is complex and opaque to the healthcare model. This includes documents, media recordings, structured data, etc.
/// </summary>
public class Attachment : DataType {
  /// <summary>
  /// Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
  /// </summary>
  [JsonPropertyName("contentType")]
  public string? ContentType { get; set; }
  [JsonPropertyName("_contentType")]
  public Element _ContentType { get; set; }
  /// <summary>
  /// The date that the attachment was first created.
  /// </summary>
  [JsonPropertyName("creation")]
  public string? Creation { get; set; }
  [JsonPropertyName("_creation")]
  public Element _Creation { get; set; }
  /// <summary>
  /// The base64-encoded data SHALL be expressed in the same character set as the base resource XML or JSON.
  /// </summary>
  [JsonPropertyName("data")]
  public string? Data { get; set; }
  [JsonPropertyName("_data")]
  public Element _Data { get; set; }
  /// <summary>
  /// The duration might differ from occurrencePeriod if recording was paused.
  /// </summary>
  [JsonPropertyName("duration")]
  public decimal? Duration { get; set; }
  [JsonPropertyName("_duration")]
  public Element _Duration { get; set; }
  /// <summary>
  /// if the number of frames is not supplied, the value may be unknown. Applications should not assume that there is only one frame unless it is explicitly stated.
  /// </summary>
  [JsonPropertyName("frames")]
  public uint? Frames { get; set; }
  [JsonPropertyName("_frames")]
  public Element _Frames { get; set; }
  /// <summary>
  /// The hash is calculated on the data prior to base64 encoding, if the data is based64 encoded. The hash is not intended to support digital signatures. Where protection against malicious threats a digital signature should be considered, see [Provenance.signature](provenance-definitions.html#Provenance.signature) for mechanism to protect a resource with a digital signature.
  /// </summary>
  [JsonPropertyName("hash")]
  public string? Hash { get; set; }
  [JsonPropertyName("_hash")]
  public Element _Hash { get; set; }
  /// <summary>
  /// Height of the image in pixels (photo/video).
  /// </summary>
  [JsonPropertyName("height")]
  public uint? Height { get; set; }
  [JsonPropertyName("_height")]
  public Element _Height { get; set; }
  /// <summary>
  /// The human language of the content. The value can be any valid value according to BCP 47.
  /// </summary>
  [JsonPropertyName("language")]
  public string? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// The number of pages when printed.
  /// </summary>
  [JsonPropertyName("pages")]
  public uint? Pages { get; set; }
  [JsonPropertyName("_pages")]
  public Element _Pages { get; set; }
  /// <summary>
  /// The number of bytes is redundant if the data is provided as a base64binary, but is useful if the data is provided as a url reference.
  /// </summary>
  [JsonPropertyName("size")]
  public string? Size { get; set; }
  [JsonPropertyName("_size")]
  public Element _Size { get; set; }
  /// <summary>
  /// A label or set of text to display in place of the data.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// If both data and url are provided, the url SHALL point to the same content as the data contains. Urls may be relative references or may reference transient locations such as a wrapping envelope using cid: though this has ramifications for using signatures. Relative URLs are interpreted relative to the service url, like a resource reference, rather than relative to the resource itself. If a URL is provided, it SHALL resolve to actual data.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// Width of the image in pixels (photo/video).
  /// </summary>
  [JsonPropertyName("width")]
  public uint? Width { get; set; }
  [JsonPropertyName("_width")]
  public Element _Width { get; set; }
}
/// <summary>
/// Code Values for the Attachment.contentType field
/// </summary>
public sealed class AttachmentContentTypeCodes {
  public const string MIME = "Mime";
}
/// <summary>
/// Code Values for the Attachment.language field
/// </summary>
public sealed class AttachmentLanguageCodes {
  public const string HUMAN = "Human";
}
public class BackboneElement : Element {
  /// <summary>
  /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
  /// </summary>
  [JsonPropertyName("modifierExtension")]
  public Extension?[] ModifierExtension { get; set; }
  [JsonPropertyName("_modifierExtension")]
  public Element[] _ModifierExtension { get; set; }
}
public class BackboneType : DataType {
  /// <summary>
  /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
  /// </summary>
  [JsonPropertyName("modifierExtension")]
  public Extension?[] ModifierExtension { get; set; }
  [JsonPropertyName("_modifierExtension")]
  public Element[] _ModifierExtension { get; set; }
}
public class Base : Element {
}
/// <summary>
/// This is a common pattern in healthcare - a concept that may be defined by one or more codes from formal definitions including LOINC and SNOMED CT, and/or defined by the provision of text that captures a human sense of the concept.
/// </summary>
public class CodeableConcept : DataType {
  /// <summary>
  /// Codes may be defined very casually in enumerations, or code lists, up to very formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more information.  Ordering of codings is undefined and SHALL NOT be used to infer meaning. Generally, at most only one of the coding values will be labeled as UserSelected = true.
  /// </summary>
  [JsonPropertyName("coding")]
  public Coding?[] Coding { get; set; }
  [JsonPropertyName("_coding")]
  public Element[] _Coding { get; set; }
  /// <summary>
  /// Very often the text is the same as a displayName of one of the codings.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
}
/// <summary>
/// This is a common pattern in record keeping - a reference may be made to a specific condition, observation, plan, or definition, or a reference may be made to a general concept defined in a knowledge base somewhere.
/// </summary>
public class CodeableReference : DataType {
  /// <summary>
  /// A reference to a concept - e.g. the information is identified by it's general classto the degree of precision found in the terminology.
  /// </summary>
  [JsonPropertyName("concept")]
  public CodeableConcept? Concept { get; set; }
  [JsonPropertyName("_concept")]
  public Element _Concept { get; set; }
  /// <summary>
  /// A reference to a resource the provides exact details about the information being referenced.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
}
/// <summary>
/// References to codes are very common in healthcare models.
/// </summary>
public class Coding : DataType {
  /// <summary>
  /// A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
  /// </summary>
  [JsonPropertyName("code")]
  public string? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A representation of the meaning of the code in the system, following the rules of the system.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// The URI may be an OID (urn:oid:...) or a UUID (urn:uuid:...).  OIDs and UUIDs SHALL be references to the HL7 OID registry. Otherwise, the URI should come from HL7's list of FHIR defined special URIs or it should reference to some definition that establishes the system clearly and unambiguously.
  /// </summary>
  [JsonPropertyName("system")]
  public string? System { get; set; }
  [JsonPropertyName("_system")]
  public Element _System { get; set; }
  /// <summary>
  /// Amongst a set of alternatives, a directly chosen code is the most appropriate starting point for new translations. There is some ambiguity about what exactly 'directly chosen' implies, and trading partner agreement may be needed to clarify the use of this element and its consequences more completely.
  /// </summary>
  [JsonPropertyName("userSelected")]
  public bool? UserSelected { get; set; }
  [JsonPropertyName("_userSelected")]
  public Element _UserSelected { get; set; }
  /// <summary>
  /// Where the terminology does not clearly define what string should be used to identify code system versions, the recommendation is to use the date (expressed in FHIR date format) on which that version was officially published as the version date.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the Coding.code field
/// </summary>
public sealed class CodingCodeCodes {
  public const string SYMBOL = "Symbol";
}
/// <summary>
/// Need to track contact information in the same way across multiple resources.
/// </summary>
public class ContactDetail : DataType {
  /// <summary>
  /// If there is no named individual, the telecom information is for the organization as a whole.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The contact details for the individual (if a name was provided) or the organization.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Need to track phone, fax, mobile, sms numbers, email addresses, twitter tags, etc.
/// </summary>
public class ContactPoint : DataType {
  /// <summary>
  /// Time period when the contact point was/is in use.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Note that rank does not necessarily follow the order in which the contacts are represented in the instance.
  /// </summary>
  [JsonPropertyName("rank")]
  public uint? Rank { get; set; }
  [JsonPropertyName("_rank")]
  public Element _Rank { get; set; }
  /// <summary>
  /// Telecommunications form for contact point - what communications system is required to make use of the contact.
  /// </summary>
  [JsonPropertyName("system")]
  public string? System { get; set; }
  [JsonPropertyName("_system")]
  public Element _System { get; set; }
  /// <summary>
  /// Applications can assume that a contact is current unless it explicitly says that it is temporary or old.
  /// </summary>
  [JsonPropertyName("use")]
  public string? Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
  /// <summary>
  /// Additional text data such as phone extension numbers, or notes about use of the contact are sometimes included in the value.
  /// </summary>
  [JsonPropertyName("value")]
  public string? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the ContactPoint.system field
/// </summary>
public sealed class ContactPointSystemCodes {
  public const string PHONE = "phone";
  public const string FAX = "fax";
  public const string EMAIL = "email";
  public const string PAGER = "pager";
  public const string URL = "url";
  public const string SMS = "sms";
  public const string OTHER = "other";
}
/// <summary>
/// Code Values for the ContactPoint.use field
/// </summary>
public sealed class ContactPointUseCodes {
  public const string HOME = "home";
  public const string WORK = "work";
  public const string TEMP = "temp";
  public const string OLD = "old";
  public const string MOBILE = "mobile";
}
/// <summary>
/// Need to track contributor information in the same way across multiple resources.
/// </summary>
public class Contributor : DataType {
  /// <summary>
  /// Contact details to assist a user in finding and communicating with the contributor.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// The name of the individual or organization responsible for the contribution.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The type of contributor.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Contributor.type field
/// </summary>
public sealed class ContributorTypeCodes {
  public const string AUTHOR = "author";
  public const string EDITOR = "editor";
  public const string REVIEWER = "reviewer";
  public const string ENDORSER = "endorser";
}
/// <summary>
/// Need to able to capture all sorts of measured values, even if the measured value are not precisely quantified. Values include exact measures such as 3.51g, customary units such as 3 tablets, and currencies such as $100.32USD.
/// </summary>
public class Count : Quantity {
}
/// <summary>
/// Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
/// </summary>
public class DataRequirementCodeFilter : Element {
  /// <summary>
  /// The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.
  /// </summary>
  [JsonPropertyName("code")]
  public Coding?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
  /// </summary>
  [JsonPropertyName("path")]
  public string? Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
  /// <summary>
  /// A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.
  /// </summary>
  [JsonPropertyName("searchParam")]
  public string? SearchParam { get; set; }
  [JsonPropertyName("_searchParam")]
  public Element _SearchParam { get; set; }
  /// <summary>
  /// The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
  /// </summary>
  [JsonPropertyName("valueSet")]
  public string? ValueSet { get; set; }
  [JsonPropertyName("_valueSet")]
  public Element _ValueSet { get; set; }
}
/// <summary>
/// Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
/// </summary>
public class DataRequirementDateFilter : Element {
  /// <summary>
  /// The path attribute contains a [Simple FHIR Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
  /// </summary>
  [JsonPropertyName("path")]
  public string? Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
  /// <summary>
  /// A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.
  /// </summary>
  [JsonPropertyName("searchParam")]
  public string? SearchParam { get; set; }
  [JsonPropertyName("_searchParam")]
  public Element _SearchParam { get; set; }
  /// <summary>
  /// The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string? ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
  /// </summary>
  [JsonPropertyName("valuePeriod")]
  public Period? ValuePeriod { get; set; }
  [JsonPropertyName("_valuePeriod")]
  public Element _ValuePeriod { get; set; }
  /// <summary>
  /// The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
  /// </summary>
  [JsonPropertyName("valueDuration")]
  public Duration? ValueDuration { get; set; }
  [JsonPropertyName("_valueDuration")]
  public Element _ValueDuration { get; set; }
}
/// <summary>
/// This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
/// </summary>
public class DataRequirementSort : Element {
  /// <summary>
  /// The direction of the sort, ascending or descending.
  /// </summary>
  [JsonPropertyName("direction")]
  public string Direction { get; set; }
  [JsonPropertyName("_direction")]
  public Element _Direction { get; set; }
  /// <summary>
  /// The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.
  /// </summary>
  [JsonPropertyName("path")]
  public string Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
}
/// <summary>
/// Code Values for the DataRequirement.sort.direction field
/// </summary>
public sealed class DataRequirementSortDirectionCodes {
  public const string ASCENDING = "ascending";
  public const string DESCENDING = "descending";
}
public class DataRequirement : DataType {
  /// <summary>
  /// Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
  /// </summary>
  [JsonPropertyName("codeFilter")]
  public DataRequirementCodeFilter?[] CodeFilter { get; set; }
  [JsonPropertyName("_codeFilter")]
  public Element[] _CodeFilter { get; set; }
  /// <summary>
  /// Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
  /// </summary>
  [JsonPropertyName("dateFilter")]
  public DataRequirementDateFilter?[] DateFilter { get; set; }
  [JsonPropertyName("_dateFilter")]
  public Element[] _DateFilter { get; set; }
  /// <summary>
  /// This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5".
  /// </summary>
  [JsonPropertyName("limit")]
  public uint? Limit { get; set; }
  [JsonPropertyName("_limit")]
  public Element _Limit { get; set; }
  /// <summary>
  /// Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. 
  /// 
  /// The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
  /// </summary>
  [JsonPropertyName("mustSupport")]
  public string?[] MustSupport { get; set; }
  [JsonPropertyName("_mustSupport")]
  public Element[] _MustSupport { get; set; }
  /// <summary>
  /// The profile of the required data, specified as the uri of the profile definition.
  /// </summary>
  [JsonPropertyName("profile")]
  public string?[] Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element[] _Profile { get; set; }
  /// <summary>
  /// This element can be used in combination with the sort element to specify quota requirements such as "the most recent 5" or "the highest 5". When multiple sorts are specified, they are applied in the order they appear in the resource.
  /// </summary>
  [JsonPropertyName("sort")]
  public DataRequirementSort?[] Sort { get; set; }
  [JsonPropertyName("_sort")]
  public Element[] _Sort { get; set; }
  /// <summary>
  /// The subject of a data requirement is critical, as the data being specified is determined with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what data is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// The subject of a data requirement is critical, as the data being specified is determined with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what data is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the DataRequirement.type field
/// </summary>
public sealed class DataRequirementTypeCodes {
  public const string THE = "The";
}
public class DataType : Element {
}
public class Distance : Quantity {
}
/// <summary>
/// The amount of medication administered.
/// </summary>
public class DosageDoseAndRate : Element {
  /// <summary>
  /// Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
  /// </summary>
  [JsonPropertyName("doseRange")]
  public Range? DoseRange { get; set; }
  [JsonPropertyName("_doseRange")]
  public Element _DoseRange { get; set; }
  /// <summary>
  /// Note that this specifies the quantity of the specified medication, not the quantity for each active ingredient(s). Each ingredient amount can be communicated in the Medication resource. For example, if one wants to communicate that a tablet was 375 mg, where the dose was one tablet, you can use the Medication resource to document that the tablet was comprised of 375 mg of drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use the Medication resource to indicate this was a tablet. If the example were an IV such as dopamine and you wanted to communicate that 400mg of dopamine was mixed in 500 ml of some IV solution, then this would all be communicated in the Medication resource. If the administration is not intended to be instantaneous (rate is present or timing has a duration), this can be specified to convey the total amount to be administered over the period of time as indicated by the schedule e.g. 500 ml in dose, with timing used to convey that this should be done over 4 hours.
  /// </summary>
  [JsonPropertyName("doseQuantity")]
  public Quantity? DoseQuantity { get; set; }
  [JsonPropertyName("_doseQuantity")]
  public Element _DoseQuantity { get; set; }
  /// <summary>
  /// It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammer where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
  /// </summary>
  [JsonPropertyName("rateRatio")]
  public Ratio? RateRatio { get; set; }
  [JsonPropertyName("_rateRatio")]
  public Element _RateRatio { get; set; }
  /// <summary>
  /// It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammer where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
  /// </summary>
  [JsonPropertyName("rateRange")]
  public Range? RateRange { get; set; }
  [JsonPropertyName("_rateRange")]
  public Element _RateRange { get; set; }
  /// <summary>
  /// It is possible to supply both a rate and a doseQuantity to provide full details about how the medication is to be administered and supplied. If the rate is intended to change over time, depending on local rules/regulations, each change should be captured as a new version of the MedicationRequest with an updated rate, or captured with a new MedicationRequest with the new rate.It is possible to specify a rate over time (for example, 100 ml/hour) using either the rateRatio and rateQuantity.  The rateQuantity approach requires systems to have the capability to parse UCUM grammer where ml/hour is included rather than a specific ratio where the time is specified as the denominator.  Where a rate such as 500ml over 2 hours is specified, the use of rateRatio may be more semantically correct than specifying using a rateQuantity of 250 mg/hour.
  /// </summary>
  [JsonPropertyName("rateQuantity")]
  public Quantity? RateQuantity { get; set; }
  [JsonPropertyName("_rateQuantity")]
  public Element _RateQuantity { get; set; }
  /// <summary>
  /// The kind of dose or rate specified, for example, ordered or calculated.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class Dosage : BackboneType {
  /// <summary>
  /// Information about administration or preparation of the medication (e.g. "infuse as rapidly as possibly via intraperitoneal port" or "immediately following drug x") should be populated in dosage.text.
  /// </summary>
  [JsonPropertyName("additionalInstruction")]
  public CodeableConcept?[] AdditionalInstruction { get; set; }
  [JsonPropertyName("_additionalInstruction")]
  public Element[] _AdditionalInstruction { get; set; }
  /// <summary>
  /// Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.  Or you can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be True.  If you set the Boolean to False, then the dose is given according to the schedule and is not "prn" or "as needed".
  /// </summary>
  [JsonPropertyName("asNeededBoolean")]
  public bool? AsNeededBoolean { get; set; }
  [JsonPropertyName("_asNeededBoolean")]
  public Element _AsNeededBoolean { get; set; }
  /// <summary>
  /// Can express "as needed" without a reason by setting the Boolean = True.  In this case the CodeableConcept is not populated.  Or you can express "as needed" with a reason by including the CodeableConcept.  In this case the Boolean is assumed to be True.  If you set the Boolean to False, then the dose is given according to the schedule and is not "prn" or "as needed".
  /// </summary>
  [JsonPropertyName("asNeededCodeableConcept")]
  public CodeableConcept? AsNeededCodeableConcept { get; set; }
  [JsonPropertyName("_asNeededCodeableConcept")]
  public Element _AsNeededCodeableConcept { get; set; }
  /// <summary>
  /// The amount of medication administered.
  /// </summary>
  [JsonPropertyName("doseAndRate")]
  public DosageDoseAndRate?[] DoseAndRate { get; set; }
  [JsonPropertyName("_doseAndRate")]
  public Element[] _DoseAndRate { get; set; }
  /// <summary>
  /// This is intended for use as an adjunct to the dosage when there is an upper cap.  For example, a body surface area related dose with a maximum amount, such as 1.5 mg/m2 (maximum 2 mg) IV over 5 – 10 minutes would have doseQuantity of 1.5 mg/m2 and maxDosePerAdministration of 2 mg.
  /// </summary>
  [JsonPropertyName("maxDosePerAdministration")]
  public Quantity? MaxDosePerAdministration { get; set; }
  [JsonPropertyName("_maxDosePerAdministration")]
  public Element _MaxDosePerAdministration { get; set; }
  /// <summary>
  /// Upper limit on medication per lifetime of the patient.
  /// </summary>
  [JsonPropertyName("maxDosePerLifetime")]
  public Quantity? MaxDosePerLifetime { get; set; }
  [JsonPropertyName("_maxDosePerLifetime")]
  public Element _MaxDosePerLifetime { get; set; }
  /// <summary>
  /// This is intended for use as an adjunct to the dosage when there is an upper cap.  For example "2 tablets every 4 hours to a maximum of 8/day".
  /// </summary>
  [JsonPropertyName("maxDosePerPeriod")]
  public Ratio? MaxDosePerPeriod { get; set; }
  [JsonPropertyName("_maxDosePerPeriod")]
  public Element _MaxDosePerPeriod { get; set; }
  /// <summary>
  /// Terminologies used often pre-coordinate this term with the route and or form of administration.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// Instructions in terms that are understood by the patient or consumer.
  /// </summary>
  [JsonPropertyName("patientInstruction")]
  public string? PatientInstruction { get; set; }
  [JsonPropertyName("_patientInstruction")]
  public Element _PatientInstruction { get; set; }
  /// <summary>
  /// How drug should enter body.
  /// </summary>
  [JsonPropertyName("route")]
  public CodeableConcept? Route { get; set; }
  [JsonPropertyName("_route")]
  public Element _Route { get; set; }
  /// <summary>
  /// Indicates the order in which the dosage instructions should be applied or interpreted.
  /// </summary>
  [JsonPropertyName("sequence")]
  public int? Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [bodySite](extension-bodysite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
  /// </summary>
  [JsonPropertyName("site")]
  public CodeableConcept? Site { get; set; }
  [JsonPropertyName("_site")]
  public Element _Site { get; set; }
  /// <summary>
  /// Free text dosage instructions e.g. SIG.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// This attribute might not always be populated while the Dosage.text is expected to be populated.  If both are populated, then the Dosage.text should reflect the content of the Dosage.timing.
  /// </summary>
  [JsonPropertyName("timing")]
  public Timing? Timing { get; set; }
  [JsonPropertyName("_timing")]
  public Element _Timing { get; set; }
}
public class Duration : Quantity {
}
public class Element {
  /// <summary>
  /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
  /// </summary>
  [JsonPropertyName("extension")]
  public Extension?[] Extension { get; set; }
  [JsonPropertyName("_extension")]
  public Element[] _Extension { get; set; }
  /// <summary>
  /// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  /// </summary>
  [JsonPropertyName("id")]
  public string? Id { get; set; }
  [JsonPropertyName("_id")]
  public Element _Id { get; set; }
}
/// <summary>
/// If there is no discriminator, the content is hard to process, so this should be avoided.
/// </summary>
public class ElementDefinitionSlicingDiscriminator : Element {
  /// <summary>
  /// The only FHIRPath functions that are allowed are as(type), resolve(), and extension(url).
  /// </summary>
  [JsonPropertyName("path")]
  public string Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
  /// <summary>
  /// How the element value is interpreted when discrimination is evaluated.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the ElementDefinition.slicing.discriminator.type field
/// </summary>
public sealed class ElementDefinitionSlicingDiscriminatorTypeCodes {
  public const string VALUE = "value";
  public const string EXISTS = "exists";
  public const string PATTERN = "pattern";
  public const string TYPE = "type";
  public const string PROFILE = "profile";
}
/// <summary>
/// The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
/// </summary>
public class ElementDefinitionSlicing : Element {
  /// <summary>
  /// If it's really not possible to differentiate them, the design should be re-evaluated to make the content usable.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// If there is no discriminator, the content is hard to process, so this should be avoided.
  /// </summary>
  [JsonPropertyName("discriminator")]
  public ElementDefinitionSlicingDiscriminator?[] Discriminator { get; set; }
  [JsonPropertyName("_discriminator")]
  public Element[] _Discriminator { get; set; }
  /// <summary>
  /// Order should only be required when it is a pressing concern for presentation. Profile authors should consider making the order a feature of the rules about the narrative, not the rules about the data - requiring ordered data makes the profile much less re-usable.
  /// </summary>
  [JsonPropertyName("ordered")]
  public bool? Ordered { get; set; }
  [JsonPropertyName("_ordered")]
  public Element _Ordered { get; set; }
  /// <summary>
  /// Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.
  /// </summary>
  [JsonPropertyName("rules")]
  public string Rules { get; set; }
  [JsonPropertyName("_rules")]
  public Element _Rules { get; set; }
}
/// <summary>
/// Code Values for the ElementDefinition.slicing.rules field
/// </summary>
public sealed class ElementDefinitionSlicingRulesCodes {
  public const string CLOSED = "closed";
  public const string OPEN = "open";
  public const string OPENATEND = "openAtEnd";
}
/// <summary>
/// The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
/// </summary>
public class ElementDefinitionBase : Element {
  /// <summary>
  /// This is provided to code generation, since the serialization representation in JSON differs depending on whether the base element has max > 1. Also, some forms of code generation may differ.
  /// </summary>
  [JsonPropertyName("max")]
  public string Max { get; set; }
  [JsonPropertyName("_max")]
  public Element _Max { get; set; }
  /// <summary>
  /// This is provided for consistency with max, and may affect code generation of mandatory elements of the base resource are generated differently (some reference implementations have done this).
  /// </summary>
  [JsonPropertyName("min")]
  public uint Min { get; set; }
  [JsonPropertyName("_min")]
  public Element _Min { get; set; }
  /// <summary>
  /// The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
  /// </summary>
  [JsonPropertyName("path")]
  public string Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
}
/// <summary>
/// The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
/// </summary>
public class ElementDefinitionType : Element {
  /// <summary>
  /// See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
  /// </summary>
  [JsonPropertyName("aggregation")]
  public string?[] Aggregation { get; set; }
  [JsonPropertyName("_aggregation")]
  public Element[] _Aggregation { get; set; }
  /// <summary>
  /// If the element is a reference to another resource, this element contains "Reference", and the targetProfile element defines what resources can be referenced. The targetProfile may be a reference to the general definition of a resource (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// It is possible to profile  backbone element (e.g. part of a resource), using the [profile-element](extension-elementdefinition-profile-element.html) extension.
  /// </summary>
  [JsonPropertyName("profile")]
  public string?[] Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element[] _Profile { get; set; }
  /// <summary>
  /// Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
  /// </summary>
  [JsonPropertyName("targetProfile")]
  public string?[] TargetProfile { get; set; }
  [JsonPropertyName("_targetProfile")]
  public Element[] _TargetProfile { get; set; }
  /// <summary>
  /// The base specification never makes a rule as to which form is allowed, but implementation guides may do this. See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.
  /// </summary>
  [JsonPropertyName("versioning")]
  public string? Versioning { get; set; }
  [JsonPropertyName("_versioning")]
  public Element _Versioning { get; set; }
}
/// <summary>
/// Code Values for the ElementDefinition.type.aggregation field
/// </summary>
public sealed class ElementDefinitionTypeAggregationCodes {
  public const string CONTAINED = "contained";
  public const string REFERENCED = "referenced";
  public const string BUNDLED = "bundled";
}
/// <summary>
/// Code Values for the ElementDefinition.type.versioning field
/// </summary>
public sealed class ElementDefinitionTypeVersioningCodes {
  public const string EITHER = "either";
  public const string INDEPENDENT = "independent";
  public const string SPECIFIC = "specific";
}
/// <summary>
/// Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
/// </summary>
public class ElementDefinitionExample : Element {
  /// <summary>
  /// Describes the purpose of this example amoung the set of examples.
  /// </summary>
  [JsonPropertyName("label")]
  public string Label { get; set; }
  [JsonPropertyName("_label")]
  public Element _Label { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueBase64Binary")]
  public string ValueBase64Binary { get; set; }
  [JsonPropertyName("_valueBase64Binary")]
  public Element _ValueBase64Binary { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueCanonical")]
  public string ValueCanonical { get; set; }
  [JsonPropertyName("_valueCanonical")]
  public Element _ValueCanonical { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueCode")]
  public string ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element _ValueCode { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueId")]
  public string ValueId { get; set; }
  [JsonPropertyName("_valueId")]
  public Element _ValueId { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueInstant")]
  public string ValueInstant { get; set; }
  [JsonPropertyName("_valueInstant")]
  public Element _ValueInstant { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueInteger64")]
  public string ValueInteger64 { get; set; }
  [JsonPropertyName("_valueInteger64")]
  public Element _ValueInteger64 { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueMarkdown")]
  public string ValueMarkdown { get; set; }
  [JsonPropertyName("_valueMarkdown")]
  public Element _ValueMarkdown { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueOid")]
  public string ValueOid { get; set; }
  [JsonPropertyName("_valueOid")]
  public Element _ValueOid { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valuePositiveInt")]
  public uint ValuePositiveInt { get; set; }
  [JsonPropertyName("_valuePositiveInt")]
  public Element _ValuePositiveInt { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueUnsignedInt")]
  public uint ValueUnsignedInt { get; set; }
  [JsonPropertyName("_valueUnsignedInt")]
  public Element _ValueUnsignedInt { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueUrl")]
  public string ValueUrl { get; set; }
  [JsonPropertyName("_valueUrl")]
  public Element _ValueUrl { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueUuid")]
  public Guid ValueUuid { get; set; }
  [JsonPropertyName("_valueUuid")]
  public Element _ValueUuid { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueAddress")]
  public Address ValueAddress { get; set; }
  [JsonPropertyName("_valueAddress")]
  public Element _ValueAddress { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueAge")]
  public Age ValueAge { get; set; }
  [JsonPropertyName("_valueAge")]
  public Element _ValueAge { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueAnnotation")]
  public Annotation ValueAnnotation { get; set; }
  [JsonPropertyName("_valueAnnotation")]
  public Element _ValueAnnotation { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueContactPoint")]
  public ContactPoint ValueContactPoint { get; set; }
  [JsonPropertyName("_valueContactPoint")]
  public Element _ValueContactPoint { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueCount")]
  public Count ValueCount { get; set; }
  [JsonPropertyName("_valueCount")]
  public Element _ValueCount { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueDistance")]
  public Distance ValueDistance { get; set; }
  [JsonPropertyName("_valueDistance")]
  public Element _ValueDistance { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueDuration")]
  public Duration ValueDuration { get; set; }
  [JsonPropertyName("_valueDuration")]
  public Element _ValueDuration { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueHumanName")]
  public HumanName ValueHumanName { get; set; }
  [JsonPropertyName("_valueHumanName")]
  public Element _ValueHumanName { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueIdentifier")]
  public Identifier ValueIdentifier { get; set; }
  [JsonPropertyName("_valueIdentifier")]
  public Element _ValueIdentifier { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueMoney")]
  public Money ValueMoney { get; set; }
  [JsonPropertyName("_valueMoney")]
  public Element _ValueMoney { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valuePeriod")]
  public Period ValuePeriod { get; set; }
  [JsonPropertyName("_valuePeriod")]
  public Element _ValuePeriod { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueRatio")]
  public Ratio ValueRatio { get; set; }
  [JsonPropertyName("_valueRatio")]
  public Element _ValueRatio { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueSampledData")]
  public SampledData ValueSampledData { get; set; }
  [JsonPropertyName("_valueSampledData")]
  public Element _ValueSampledData { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueSignature")]
  public Signature ValueSignature { get; set; }
  [JsonPropertyName("_valueSignature")]
  public Element _ValueSignature { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueTiming")]
  public Timing ValueTiming { get; set; }
  [JsonPropertyName("_valueTiming")]
  public Element _ValueTiming { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueContactDetail")]
  public ContactDetail ValueContactDetail { get; set; }
  [JsonPropertyName("_valueContactDetail")]
  public Element _ValueContactDetail { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueContributor")]
  public Contributor ValueContributor { get; set; }
  [JsonPropertyName("_valueContributor")]
  public Element _ValueContributor { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueDataRequirement")]
  public DataRequirement ValueDataRequirement { get; set; }
  [JsonPropertyName("_valueDataRequirement")]
  public Element _ValueDataRequirement { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueExpression")]
  public Expression ValueExpression { get; set; }
  [JsonPropertyName("_valueExpression")]
  public Element _ValueExpression { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueParameterDefinition")]
  public ParameterDefinition ValueParameterDefinition { get; set; }
  [JsonPropertyName("_valueParameterDefinition")]
  public Element _ValueParameterDefinition { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueRelatedArtifact")]
  public RelatedArtifact ValueRelatedArtifact { get; set; }
  [JsonPropertyName("_valueRelatedArtifact")]
  public Element _ValueRelatedArtifact { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueTriggerDefinition")]
  public TriggerDefinition ValueTriggerDefinition { get; set; }
  [JsonPropertyName("_valueTriggerDefinition")]
  public Element _ValueTriggerDefinition { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueUsageContext")]
  public UsageContext ValueUsageContext { get; set; }
  [JsonPropertyName("_valueUsageContext")]
  public Element _ValueUsageContext { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueDosage")]
  public Dosage ValueDosage { get; set; }
  [JsonPropertyName("_valueDosage")]
  public Element _ValueDosage { get; set; }
  /// <summary>
  /// The actual value for the element, which must be one of the types allowed for this element.
  /// </summary>
  [JsonPropertyName("valueMeta")]
  public Meta ValueMeta { get; set; }
  [JsonPropertyName("_valueMeta")]
  public Element _ValueMeta { get; set; }
}
/// <summary>
/// Code Values for the ElementDefinition.example.value[x] field
/// </summary>
public sealed class ElementDefinitionExampleValueCodes {
  public const string VALUE = "Value";
}
/// <summary>
/// Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
/// </summary>
public class ElementDefinitionConstraint : Element {
  /// <summary>
  /// In the absense of an expression, the expression is likely not enforceable by validators, and might be missed by many systems.
  /// </summary>
  [JsonPropertyName("expression")]
  public string? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// Should be expressed in business terms as much as possible.
  /// </summary>
  [JsonPropertyName("human")]
  public string Human { get; set; }
  [JsonPropertyName("_human")]
  public Element _Human { get; set; }
  /// <summary>
  /// Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
  /// </summary>
  [JsonPropertyName("key")]
  public string Key { get; set; }
  [JsonPropertyName("_key")]
  public Element _Key { get; set; }
  /// <summary>
  /// To be used if the reason for the constraint might not be intuitive to all implementers.
  /// </summary>
  [JsonPropertyName("requirements")]
  public string? Requirements { get; set; }
  [JsonPropertyName("_requirements")]
  public Element _Requirements { get; set; }
  /// <summary>
  /// This allows constraints to be asserted as "shall" (error) and "should" (warning).
  /// </summary>
  [JsonPropertyName("severity")]
  public string Severity { get; set; }
  [JsonPropertyName("_severity")]
  public Element _Severity { get; set; }
  /// <summary>
  /// This is used when, e.g. rendering, where it is not useful to present inherited constraints when rendering the snapshot.
  /// </summary>
  [JsonPropertyName("source")]
  public string? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// Elements SHALL use "f" as the namespace prefix for the FHIR namespace, and "x" for the xhtml namespace, and SHALL NOT use any other prefixes.     Note: XPath is generally considered not useful because it does not apply to JSON and other formats and because of XSLT implementation issues, and may be removed in the future.
  /// </summary>
  [JsonPropertyName("xpath")]
  public string? Xpath { get; set; }
  [JsonPropertyName("_xpath")]
  public Element _Xpath { get; set; }
}
/// <summary>
/// Code Values for the ElementDefinition.constraint.severity field
/// </summary>
public sealed class ElementDefinitionConstraintSeverityCodes {
  public const string ERROR = "error";
  public const string WARNING = "warning";
}
/// <summary>
/// For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
/// </summary>
public class ElementDefinitionBinding : Element {
  /// <summary>
  /// Describes the intended use of this particular set of codes.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// For further discussion, see [Using Terminologies](terminologies.html).
  /// </summary>
  [JsonPropertyName("strength")]
  public string Strength { get; set; }
  [JsonPropertyName("_strength")]
  public Element _Strength { get; set; }
  /// <summary>
  /// The reference may be version-specific or not (e.g. have a |[version] at the end of the canonical URL).
  /// </summary>
  [JsonPropertyName("valueSet")]
  public string? ValueSet { get; set; }
  [JsonPropertyName("_valueSet")]
  public Element _ValueSet { get; set; }
}
/// <summary>
/// Code Values for the ElementDefinition.binding.strength field
/// </summary>
public sealed class ElementDefinitionBindingStrengthCodes {
  public const string REQUIRED = "required";
  public const string EXTENSIBLE = "extensible";
  public const string PREFERRED = "preferred";
  public const string EXAMPLE = "example";
}
/// <summary>
/// Mappings are not necessarily specific enough for safe translation.
/// </summary>
public class ElementDefinitionMapping : Element {
  /// <summary>
  /// Comments that provide information about the mapping or its use.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// An internal reference to the definition of a mapping.
  /// </summary>
  [JsonPropertyName("identity")]
  public string Identity { get; set; }
  [JsonPropertyName("_identity")]
  public Element _Identity { get; set; }
  /// <summary>
  /// If omitted, then there can be no expectation of computational interpretation of the mapping.
  /// </summary>
  [JsonPropertyName("language")]
  public string? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// For most mappings, the syntax is undefined.  Syntax will be provided for mappings to the RIM.  Multiple mappings may be possible and may include constraints on other resource elements that identify when a particular mapping applies.
  /// </summary>
  [JsonPropertyName("map")]
  public string Map { get; set; }
  [JsonPropertyName("_map")]
  public Element _Map { get; set; }
}
/// <summary>
/// Code Values for the ElementDefinition.mapping.language field
/// </summary>
public sealed class ElementDefinitionMappingLanguageCodes {
  public const string COMPUTABLE = "Computable";
}
public class ElementDefinition : BackboneType {
  /// <summary>
  /// Identifies additional names by which this element might also be known.
  /// </summary>
  [JsonPropertyName("alias")]
  public string?[] Alias { get; set; }
  [JsonPropertyName("_alias")]
  public Element[] _Alias { get; set; }
  /// <summary>
  /// The base information does not carry any information that could not be determined from the path and related profiles, but making this determination requires both that the related profiles are available, and that the algorithm to determine them be available. For tooling simplicity, the base information must always be populated in element definitions in snap shots, even if it is the same.
  /// </summary>
  [JsonPropertyName("base")]
  public ElementDefinitionBase? Base { get; set; }
  [JsonPropertyName("_base")]
  public Element _Base { get; set; }
  /// <summary>
  /// For a CodeableConcept, when no codes are allowed - only text, use a binding of strength "required" with a description explaining that no coded values are allowed and what sort of information to put in the "text" element.
  /// </summary>
  [JsonPropertyName("binding")]
  public ElementDefinitionBinding? Binding { get; set; }
  [JsonPropertyName("_binding")]
  public Element _Binding { get; set; }
  /// <summary>
  /// The concept SHALL be properly aligned with the data element definition and other constraints, as defined in the code system, including relationships, of any code listed here.  Where multiple codes exist in a terminology that could correspond to the data element, the most granular code(s) should be selected, so long as they are not more restrictive than the data element itself. The mappings may be used to provide more or less granular or structured equivalences in the code system.
  /// </summary>
  [JsonPropertyName("code")]
  public Coding?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// If it is possible to capture usage rules using constraints, that mechanism should be used in preference to this element.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// A reference to an invariant that may make additional statements about the cardinality or value in the instance.
  /// </summary>
  [JsonPropertyName("condition")]
  public string?[] Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element[] _Condition { get; set; }
  /// <summary>
  /// Constraints should be declared on the "context" element - the lowest element in the hierarchy that is common to all nodes referenced by the constraint.
  /// </summary>
  [JsonPropertyName("constraint")]
  public ElementDefinitionConstraint?[] Constraint { get; set; }
  [JsonPropertyName("_constraint")]
  public Element[] _Constraint { get; set; }
  /// <summary>
  /// ContentReferences can only be defined in specializations, not constrained types, and they cannot be changed and always reference the non-constrained definition.
  /// </summary>
  [JsonPropertyName("contentReference")]
  public string? ContentReference { get; set; }
  [JsonPropertyName("_contentReference")]
  public Element _ContentReference { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueBase64Binary")]
  public string? DefaultValueBase64Binary { get; set; }
  [JsonPropertyName("_defaultValueBase64Binary")]
  public Element _DefaultValueBase64Binary { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueBoolean")]
  public bool? DefaultValueBoolean { get; set; }
  [JsonPropertyName("_defaultValueBoolean")]
  public Element _DefaultValueBoolean { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueCanonical")]
  public string? DefaultValueCanonical { get; set; }
  [JsonPropertyName("_defaultValueCanonical")]
  public Element _DefaultValueCanonical { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueCode")]
  public string? DefaultValueCode { get; set; }
  [JsonPropertyName("_defaultValueCode")]
  public Element _DefaultValueCode { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueDate")]
  public string? DefaultValueDate { get; set; }
  [JsonPropertyName("_defaultValueDate")]
  public Element _DefaultValueDate { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueDateTime")]
  public string? DefaultValueDateTime { get; set; }
  [JsonPropertyName("_defaultValueDateTime")]
  public Element _DefaultValueDateTime { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueDecimal")]
  public decimal? DefaultValueDecimal { get; set; }
  [JsonPropertyName("_defaultValueDecimal")]
  public Element _DefaultValueDecimal { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueId")]
  public string? DefaultValueId { get; set; }
  [JsonPropertyName("_defaultValueId")]
  public Element _DefaultValueId { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueInstant")]
  public string? DefaultValueInstant { get; set; }
  [JsonPropertyName("_defaultValueInstant")]
  public Element _DefaultValueInstant { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueInteger")]
  public int? DefaultValueInteger { get; set; }
  [JsonPropertyName("_defaultValueInteger")]
  public Element _DefaultValueInteger { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueInteger64")]
  public string? DefaultValueInteger64 { get; set; }
  [JsonPropertyName("_defaultValueInteger64")]
  public Element _DefaultValueInteger64 { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueMarkdown")]
  public string? DefaultValueMarkdown { get; set; }
  [JsonPropertyName("_defaultValueMarkdown")]
  public Element _DefaultValueMarkdown { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueOid")]
  public string? DefaultValueOid { get; set; }
  [JsonPropertyName("_defaultValueOid")]
  public Element _DefaultValueOid { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValuePositiveInt")]
  public uint? DefaultValuePositiveInt { get; set; }
  [JsonPropertyName("_defaultValuePositiveInt")]
  public Element _DefaultValuePositiveInt { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueString")]
  public string? DefaultValueString { get; set; }
  [JsonPropertyName("_defaultValueString")]
  public Element _DefaultValueString { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueTime")]
  public string? DefaultValueTime { get; set; }
  [JsonPropertyName("_defaultValueTime")]
  public Element _DefaultValueTime { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueUnsignedInt")]
  public uint? DefaultValueUnsignedInt { get; set; }
  [JsonPropertyName("_defaultValueUnsignedInt")]
  public Element _DefaultValueUnsignedInt { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueUri")]
  public string? DefaultValueUri { get; set; }
  [JsonPropertyName("_defaultValueUri")]
  public Element _DefaultValueUri { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueUrl")]
  public string? DefaultValueUrl { get; set; }
  [JsonPropertyName("_defaultValueUrl")]
  public Element _DefaultValueUrl { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueUuid")]
  public Guid? DefaultValueUuid { get; set; }
  [JsonPropertyName("_defaultValueUuid")]
  public Element _DefaultValueUuid { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueAddress")]
  public Address? DefaultValueAddress { get; set; }
  [JsonPropertyName("_defaultValueAddress")]
  public Element _DefaultValueAddress { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueAge")]
  public Age? DefaultValueAge { get; set; }
  [JsonPropertyName("_defaultValueAge")]
  public Element _DefaultValueAge { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueAnnotation")]
  public Annotation? DefaultValueAnnotation { get; set; }
  [JsonPropertyName("_defaultValueAnnotation")]
  public Element _DefaultValueAnnotation { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueAttachment")]
  public Attachment? DefaultValueAttachment { get; set; }
  [JsonPropertyName("_defaultValueAttachment")]
  public Element _DefaultValueAttachment { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueCodeableConcept")]
  public CodeableConcept? DefaultValueCodeableConcept { get; set; }
  [JsonPropertyName("_defaultValueCodeableConcept")]
  public Element _DefaultValueCodeableConcept { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueCoding")]
  public Coding? DefaultValueCoding { get; set; }
  [JsonPropertyName("_defaultValueCoding")]
  public Element _DefaultValueCoding { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueContactPoint")]
  public ContactPoint? DefaultValueContactPoint { get; set; }
  [JsonPropertyName("_defaultValueContactPoint")]
  public Element _DefaultValueContactPoint { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueCount")]
  public Count? DefaultValueCount { get; set; }
  [JsonPropertyName("_defaultValueCount")]
  public Element _DefaultValueCount { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueDistance")]
  public Distance? DefaultValueDistance { get; set; }
  [JsonPropertyName("_defaultValueDistance")]
  public Element _DefaultValueDistance { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueDuration")]
  public Duration? DefaultValueDuration { get; set; }
  [JsonPropertyName("_defaultValueDuration")]
  public Element _DefaultValueDuration { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueHumanName")]
  public HumanName? DefaultValueHumanName { get; set; }
  [JsonPropertyName("_defaultValueHumanName")]
  public Element _DefaultValueHumanName { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueIdentifier")]
  public Identifier? DefaultValueIdentifier { get; set; }
  [JsonPropertyName("_defaultValueIdentifier")]
  public Element _DefaultValueIdentifier { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueMoney")]
  public Money? DefaultValueMoney { get; set; }
  [JsonPropertyName("_defaultValueMoney")]
  public Element _DefaultValueMoney { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValuePeriod")]
  public Period? DefaultValuePeriod { get; set; }
  [JsonPropertyName("_defaultValuePeriod")]
  public Element _DefaultValuePeriod { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueQuantity")]
  public Quantity? DefaultValueQuantity { get; set; }
  [JsonPropertyName("_defaultValueQuantity")]
  public Element _DefaultValueQuantity { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueRange")]
  public Range? DefaultValueRange { get; set; }
  [JsonPropertyName("_defaultValueRange")]
  public Element _DefaultValueRange { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueRatio")]
  public Ratio? DefaultValueRatio { get; set; }
  [JsonPropertyName("_defaultValueRatio")]
  public Element _DefaultValueRatio { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueReference")]
  public Reference? DefaultValueReference { get; set; }
  [JsonPropertyName("_defaultValueReference")]
  public Element _DefaultValueReference { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueSampledData")]
  public SampledData? DefaultValueSampledData { get; set; }
  [JsonPropertyName("_defaultValueSampledData")]
  public Element _DefaultValueSampledData { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueSignature")]
  public Signature? DefaultValueSignature { get; set; }
  [JsonPropertyName("_defaultValueSignature")]
  public Element _DefaultValueSignature { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueTiming")]
  public Timing? DefaultValueTiming { get; set; }
  [JsonPropertyName("_defaultValueTiming")]
  public Element _DefaultValueTiming { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueContactDetail")]
  public ContactDetail? DefaultValueContactDetail { get; set; }
  [JsonPropertyName("_defaultValueContactDetail")]
  public Element _DefaultValueContactDetail { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueContributor")]
  public Contributor? DefaultValueContributor { get; set; }
  [JsonPropertyName("_defaultValueContributor")]
  public Element _DefaultValueContributor { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueDataRequirement")]
  public DataRequirement? DefaultValueDataRequirement { get; set; }
  [JsonPropertyName("_defaultValueDataRequirement")]
  public Element _DefaultValueDataRequirement { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueExpression")]
  public Expression? DefaultValueExpression { get; set; }
  [JsonPropertyName("_defaultValueExpression")]
  public Element _DefaultValueExpression { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueParameterDefinition")]
  public ParameterDefinition? DefaultValueParameterDefinition { get; set; }
  [JsonPropertyName("_defaultValueParameterDefinition")]
  public Element _DefaultValueParameterDefinition { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueRelatedArtifact")]
  public RelatedArtifact? DefaultValueRelatedArtifact { get; set; }
  [JsonPropertyName("_defaultValueRelatedArtifact")]
  public Element _DefaultValueRelatedArtifact { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueTriggerDefinition")]
  public TriggerDefinition? DefaultValueTriggerDefinition { get; set; }
  [JsonPropertyName("_defaultValueTriggerDefinition")]
  public Element _DefaultValueTriggerDefinition { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueUsageContext")]
  public UsageContext? DefaultValueUsageContext { get; set; }
  [JsonPropertyName("_defaultValueUsageContext")]
  public Element _DefaultValueUsageContext { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueDosage")]
  public Dosage? DefaultValueDosage { get; set; }
  [JsonPropertyName("_defaultValueDosage")]
  public Element _DefaultValueDosage { get; set; }
  /// <summary>
  /// Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly. 
  /// 
  /// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.
  /// </summary>
  [JsonPropertyName("defaultValueMeta")]
  public Meta? DefaultValueMeta { get; set; }
  [JsonPropertyName("_defaultValueMeta")]
  public Element _DefaultValueMeta { get; set; }
  /// <summary>
  /// It is easy for a different definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing definitions in a profile.
  /// </summary>
  [JsonPropertyName("definition")]
  public string? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// Examples will most commonly be present for data where it's not implicitly obvious from either the data type or value set what the values might be.  (I.e. Example values for dates or quantities would generally be unnecessary.)  If the example value is fully populated, the publication tool can generate an instance automatically.
  /// </summary>
  [JsonPropertyName("example")]
  public ElementDefinitionExample?[] Example { get; set; }
  [JsonPropertyName("_example")]
  public Element[] _Example { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedBase64Binary")]
  public string? FixedBase64Binary { get; set; }
  [JsonPropertyName("_fixedBase64Binary")]
  public Element _FixedBase64Binary { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedBoolean")]
  public bool? FixedBoolean { get; set; }
  [JsonPropertyName("_fixedBoolean")]
  public Element _FixedBoolean { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedCanonical")]
  public string? FixedCanonical { get; set; }
  [JsonPropertyName("_fixedCanonical")]
  public Element _FixedCanonical { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedCode")]
  public string? FixedCode { get; set; }
  [JsonPropertyName("_fixedCode")]
  public Element _FixedCode { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedDate")]
  public string? FixedDate { get; set; }
  [JsonPropertyName("_fixedDate")]
  public Element _FixedDate { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedDateTime")]
  public string? FixedDateTime { get; set; }
  [JsonPropertyName("_fixedDateTime")]
  public Element _FixedDateTime { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedDecimal")]
  public decimal? FixedDecimal { get; set; }
  [JsonPropertyName("_fixedDecimal")]
  public Element _FixedDecimal { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedId")]
  public string? FixedId { get; set; }
  [JsonPropertyName("_fixedId")]
  public Element _FixedId { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedInstant")]
  public string? FixedInstant { get; set; }
  [JsonPropertyName("_fixedInstant")]
  public Element _FixedInstant { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedInteger")]
  public int? FixedInteger { get; set; }
  [JsonPropertyName("_fixedInteger")]
  public Element _FixedInteger { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedInteger64")]
  public string? FixedInteger64 { get; set; }
  [JsonPropertyName("_fixedInteger64")]
  public Element _FixedInteger64 { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedMarkdown")]
  public string? FixedMarkdown { get; set; }
  [JsonPropertyName("_fixedMarkdown")]
  public Element _FixedMarkdown { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedOid")]
  public string? FixedOid { get; set; }
  [JsonPropertyName("_fixedOid")]
  public Element _FixedOid { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedPositiveInt")]
  public uint? FixedPositiveInt { get; set; }
  [JsonPropertyName("_fixedPositiveInt")]
  public Element _FixedPositiveInt { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedString")]
  public string? FixedString { get; set; }
  [JsonPropertyName("_fixedString")]
  public Element _FixedString { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedTime")]
  public string? FixedTime { get; set; }
  [JsonPropertyName("_fixedTime")]
  public Element _FixedTime { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedUnsignedInt")]
  public uint? FixedUnsignedInt { get; set; }
  [JsonPropertyName("_fixedUnsignedInt")]
  public Element _FixedUnsignedInt { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedUri")]
  public string? FixedUri { get; set; }
  [JsonPropertyName("_fixedUri")]
  public Element _FixedUri { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedUrl")]
  public string? FixedUrl { get; set; }
  [JsonPropertyName("_fixedUrl")]
  public Element _FixedUrl { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedUuid")]
  public Guid? FixedUuid { get; set; }
  [JsonPropertyName("_fixedUuid")]
  public Element _FixedUuid { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedAddress")]
  public Address? FixedAddress { get; set; }
  [JsonPropertyName("_fixedAddress")]
  public Element _FixedAddress { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedAge")]
  public Age? FixedAge { get; set; }
  [JsonPropertyName("_fixedAge")]
  public Element _FixedAge { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedAnnotation")]
  public Annotation? FixedAnnotation { get; set; }
  [JsonPropertyName("_fixedAnnotation")]
  public Element _FixedAnnotation { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedAttachment")]
  public Attachment? FixedAttachment { get; set; }
  [JsonPropertyName("_fixedAttachment")]
  public Element _FixedAttachment { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedCodeableConcept")]
  public CodeableConcept? FixedCodeableConcept { get; set; }
  [JsonPropertyName("_fixedCodeableConcept")]
  public Element _FixedCodeableConcept { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedCoding")]
  public Coding? FixedCoding { get; set; }
  [JsonPropertyName("_fixedCoding")]
  public Element _FixedCoding { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedContactPoint")]
  public ContactPoint? FixedContactPoint { get; set; }
  [JsonPropertyName("_fixedContactPoint")]
  public Element _FixedContactPoint { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedCount")]
  public Count? FixedCount { get; set; }
  [JsonPropertyName("_fixedCount")]
  public Element _FixedCount { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedDistance")]
  public Distance? FixedDistance { get; set; }
  [JsonPropertyName("_fixedDistance")]
  public Element _FixedDistance { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedDuration")]
  public Duration? FixedDuration { get; set; }
  [JsonPropertyName("_fixedDuration")]
  public Element _FixedDuration { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedHumanName")]
  public HumanName? FixedHumanName { get; set; }
  [JsonPropertyName("_fixedHumanName")]
  public Element _FixedHumanName { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedIdentifier")]
  public Identifier? FixedIdentifier { get; set; }
  [JsonPropertyName("_fixedIdentifier")]
  public Element _FixedIdentifier { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedMoney")]
  public Money? FixedMoney { get; set; }
  [JsonPropertyName("_fixedMoney")]
  public Element _FixedMoney { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedPeriod")]
  public Period? FixedPeriod { get; set; }
  [JsonPropertyName("_fixedPeriod")]
  public Element _FixedPeriod { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedQuantity")]
  public Quantity? FixedQuantity { get; set; }
  [JsonPropertyName("_fixedQuantity")]
  public Element _FixedQuantity { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedRange")]
  public Range? FixedRange { get; set; }
  [JsonPropertyName("_fixedRange")]
  public Element _FixedRange { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedRatio")]
  public Ratio? FixedRatio { get; set; }
  [JsonPropertyName("_fixedRatio")]
  public Element _FixedRatio { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedReference")]
  public Reference? FixedReference { get; set; }
  [JsonPropertyName("_fixedReference")]
  public Element _FixedReference { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedSampledData")]
  public SampledData? FixedSampledData { get; set; }
  [JsonPropertyName("_fixedSampledData")]
  public Element _FixedSampledData { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedSignature")]
  public Signature? FixedSignature { get; set; }
  [JsonPropertyName("_fixedSignature")]
  public Element _FixedSignature { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedTiming")]
  public Timing? FixedTiming { get; set; }
  [JsonPropertyName("_fixedTiming")]
  public Element _FixedTiming { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedContactDetail")]
  public ContactDetail? FixedContactDetail { get; set; }
  [JsonPropertyName("_fixedContactDetail")]
  public Element _FixedContactDetail { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedContributor")]
  public Contributor? FixedContributor { get; set; }
  [JsonPropertyName("_fixedContributor")]
  public Element _FixedContributor { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedDataRequirement")]
  public DataRequirement? FixedDataRequirement { get; set; }
  [JsonPropertyName("_fixedDataRequirement")]
  public Element _FixedDataRequirement { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedExpression")]
  public Expression? FixedExpression { get; set; }
  [JsonPropertyName("_fixedExpression")]
  public Element _FixedExpression { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedParameterDefinition")]
  public ParameterDefinition? FixedParameterDefinition { get; set; }
  [JsonPropertyName("_fixedParameterDefinition")]
  public Element _FixedParameterDefinition { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedRelatedArtifact")]
  public RelatedArtifact? FixedRelatedArtifact { get; set; }
  [JsonPropertyName("_fixedRelatedArtifact")]
  public Element _FixedRelatedArtifact { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedTriggerDefinition")]
  public TriggerDefinition? FixedTriggerDefinition { get; set; }
  [JsonPropertyName("_fixedTriggerDefinition")]
  public Element _FixedTriggerDefinition { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedUsageContext")]
  public UsageContext? FixedUsageContext { get; set; }
  [JsonPropertyName("_fixedUsageContext")]
  public Element _FixedUsageContext { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedDosage")]
  public Dosage? FixedDosage { get; set; }
  [JsonPropertyName("_fixedDosage")]
  public Element _FixedDosage { get; set; }
  /// <summary>
  /// This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.
  /// </summary>
  [JsonPropertyName("fixedMeta")]
  public Meta? FixedMeta { get; set; }
  [JsonPropertyName("_fixedMeta")]
  public Element _FixedMeta { get; set; }
  /// <summary>
  /// Only the definition of an element can set IsModifier true - either the specification itself or where an extension is originally defined. Once set, it cannot be changed in derived profiles. An element/extension that has isModifier=true SHOULD also have a minimum cardinality of 1, so that there is no lack of clarity about what to do if it is missing. If it can be missing, the definition SHALL make the meaning of a missing element clear.
  /// </summary>
  [JsonPropertyName("isModifier")]
  public bool? IsModifier { get; set; }
  [JsonPropertyName("_isModifier")]
  public Element _IsModifier { get; set; }
  /// <summary>
  /// Explains how that element affects the interpretation of the resource or element that contains it.
  /// </summary>
  [JsonPropertyName("isModifierReason")]
  public string? IsModifierReason { get; set; }
  [JsonPropertyName("_isModifierReason")]
  public Element _IsModifierReason { get; set; }
  /// <summary>
  /// Some resources include a set of simple metadata, and some very large data. This element is used to reduce the quantity of data returned in searches. Note that servers may pre-cache summarized resources for optimal performance, so servers might not support per-profile use of the isSummary flag. When a request is made with _summary=true, serailisers only include elements marked as 'isSummary = true'. Other than Attachment.data, all data type properties are included in the summary form. In resource and data type definitions, if an element is at the root or has a parent that is 'mustSupport' and the minimum cardinality is 1 or the element is a modifier, it must be marked as isSummary=true.
  /// </summary>
  [JsonPropertyName("isSummary")]
  public bool? IsSummary { get; set; }
  [JsonPropertyName("_isSummary")]
  public Element _IsSummary { get; set; }
  /// <summary>
  /// See also the extension (http://hl7.org/fhir/StructureDefinition/elementdefinition-question)[extension-elementdefinition-question.html].
  /// </summary>
  [JsonPropertyName("label")]
  public string? Label { get; set; }
  [JsonPropertyName("_label")]
  public Element _Label { get; set; }
  /// <summary>
  /// Mappings are not necessarily specific enough for safe translation.
  /// </summary>
  [JsonPropertyName("mapping")]
  public ElementDefinitionMapping?[] Mapping { get; set; }
  [JsonPropertyName("_mapping")]
  public Element[] _Mapping { get; set; }
  /// <summary>
  /// The maximum number of times this element is permitted to appear in the instance.
  /// </summary>
  [JsonPropertyName("max")]
  public string? Max { get; set; }
  [JsonPropertyName("_max")]
  public Element _Max { get; set; }
  /// <summary>
  /// Receivers are not required to reject instances that exceed the maximum length.  The full length could be stored.  In some cases, data might be truncated, though truncation should be undertaken with care and an understanding of the consequences of doing so. If not specified, there is no conformance expectation for length support.
  /// </summary>
  [JsonPropertyName("maxLength")]
  public int? MaxLength { get; set; }
  [JsonPropertyName("_maxLength")]
  public Element _MaxLength { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueDate")]
  public string? MaxValueDate { get; set; }
  [JsonPropertyName("_maxValueDate")]
  public Element _MaxValueDate { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueDateTime")]
  public string? MaxValueDateTime { get; set; }
  [JsonPropertyName("_maxValueDateTime")]
  public Element _MaxValueDateTime { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueInstant")]
  public string? MaxValueInstant { get; set; }
  [JsonPropertyName("_maxValueInstant")]
  public Element _MaxValueInstant { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueTime")]
  public string? MaxValueTime { get; set; }
  [JsonPropertyName("_maxValueTime")]
  public Element _MaxValueTime { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueDecimal")]
  public decimal? MaxValueDecimal { get; set; }
  [JsonPropertyName("_maxValueDecimal")]
  public Element _MaxValueDecimal { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueInteger")]
  public int? MaxValueInteger { get; set; }
  [JsonPropertyName("_maxValueInteger")]
  public Element _MaxValueInteger { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueInteger64")]
  public string? MaxValueInteger64 { get; set; }
  [JsonPropertyName("_maxValueInteger64")]
  public Element _MaxValueInteger64 { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValuePositiveInt")]
  public uint? MaxValuePositiveInt { get; set; }
  [JsonPropertyName("_maxValuePositiveInt")]
  public Element _MaxValuePositiveInt { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueUnsignedInt")]
  public uint? MaxValueUnsignedInt { get; set; }
  [JsonPropertyName("_maxValueUnsignedInt")]
  public Element _MaxValueUnsignedInt { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the maxValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of maxValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is added to the current clock to determine the maximum allowable value.   A maximum value for a Quantity is interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum value is 50mg.
  /// </summary>
  [JsonPropertyName("maxValueQuantity")]
  public Quantity? MaxValueQuantity { get; set; }
  [JsonPropertyName("_maxValueQuantity")]
  public Element _MaxValueQuantity { get; set; }
  /// <summary>
  /// Implicit meanings for missing values can only be specified on a resource, data type, or extension definition, and never in a profile that applies to one of these. An implicit meaning for a missing value can never be changed, and specifying one has the consequence that constraining its use in profiles eliminates use cases as possibilities, not merely moving them out of scope.
  /// </summary>
  [JsonPropertyName("meaningWhenMissing")]
  public string? MeaningWhenMissing { get; set; }
  [JsonPropertyName("_meaningWhenMissing")]
  public Element _MeaningWhenMissing { get; set; }
  /// <summary>
  /// The minimum number of times this element SHALL appear in the instance.
  /// </summary>
  [JsonPropertyName("min")]
  public uint? Min { get; set; }
  [JsonPropertyName("_min")]
  public Element _Min { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueDate")]
  public string? MinValueDate { get; set; }
  [JsonPropertyName("_minValueDate")]
  public Element _MinValueDate { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueDateTime")]
  public string? MinValueDateTime { get; set; }
  [JsonPropertyName("_minValueDateTime")]
  public Element _MinValueDateTime { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueInstant")]
  public string? MinValueInstant { get; set; }
  [JsonPropertyName("_minValueInstant")]
  public Element _MinValueInstant { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueTime")]
  public string? MinValueTime { get; set; }
  [JsonPropertyName("_minValueTime")]
  public Element _MinValueTime { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueDecimal")]
  public decimal? MinValueDecimal { get; set; }
  [JsonPropertyName("_minValueDecimal")]
  public Element _MinValueDecimal { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueInteger")]
  public int? MinValueInteger { get; set; }
  [JsonPropertyName("_minValueInteger")]
  public Element _MinValueInteger { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueInteger64")]
  public string? MinValueInteger64 { get; set; }
  [JsonPropertyName("_minValueInteger64")]
  public Element _MinValueInteger64 { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValuePositiveInt")]
  public uint? MinValuePositiveInt { get; set; }
  [JsonPropertyName("_minValuePositiveInt")]
  public Element _MinValuePositiveInt { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueUnsignedInt")]
  public uint? MinValueUnsignedInt { get; set; }
  [JsonPropertyName("_minValueUnsignedInt")]
  public Element _MinValueUnsignedInt { get; set; }
  /// <summary>
  /// Except for date/date/instant, the type of the minValue[x] SHALL be the same as the specified type of the element. For the date/dateTime/instant values, the type of minValue[x] SHALL be either the same, or a [Duration](datatypes.html#Duration) which specifies a relative time limit to the current time. The duration value is positive, and is subtracted from the current clock to determine the minimum allowable value.   A minimum value for a Quantity is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the minimum value is 10g.
  /// </summary>
  [JsonPropertyName("minValueQuantity")]
  public Quantity? MinValueQuantity { get; set; }
  [JsonPropertyName("_minValueQuantity")]
  public Element _MinValueQuantity { get; set; }
  /// <summary>
  /// "Something useful" is context dependent and impossible to describe in the base FHIR specification. For this reason, tue mustSupport flag is never set to true by the FHIR specification itself - it is only set to true in profiles.  A profile on a type can always make musSupport = true if it is false in the base type but cannot make mustSupport = false if it is true in the base type.   This is done in [Resource Profiles](profiling.html#mustsupport), where the profile labels an element as mustSupport=true. When a profile does this, it SHALL also make clear exactly what kind of "support" is required, as this can mean many things.    Note that an element that has the property IsModifier is not necessarily a "key" element (e.g. one of the important elements to make use of the resource), nor is it automatically mustSupport - however both of these things are more likely to be true for IsModifier elements than for other elements.
  /// </summary>
  [JsonPropertyName("mustSupport")]
  public bool? MustSupport { get; set; }
  [JsonPropertyName("_mustSupport")]
  public Element _MustSupport { get; set; }
  /// <summary>
  /// This element can only be asserted on repeating elements and can only be introduced when defining resources or data types.  It can be further refined profiled elements but if absent in the base type, a profile cannot assert meaning.
  /// </summary>
  [JsonPropertyName("orderMeaning")]
  public string? OrderMeaning { get; set; }
  [JsonPropertyName("_orderMeaning")]
  public Element _OrderMeaning { get; set; }
  /// <summary>
  /// The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
  /// </summary>
  [JsonPropertyName("path")]
  public string Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternBase64Binary")]
  public string? PatternBase64Binary { get; set; }
  [JsonPropertyName("_patternBase64Binary")]
  public Element _PatternBase64Binary { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternBoolean")]
  public bool? PatternBoolean { get; set; }
  [JsonPropertyName("_patternBoolean")]
  public Element _PatternBoolean { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternCanonical")]
  public string? PatternCanonical { get; set; }
  [JsonPropertyName("_patternCanonical")]
  public Element _PatternCanonical { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternCode")]
  public string? PatternCode { get; set; }
  [JsonPropertyName("_patternCode")]
  public Element _PatternCode { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternDate")]
  public string? PatternDate { get; set; }
  [JsonPropertyName("_patternDate")]
  public Element _PatternDate { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternDateTime")]
  public string? PatternDateTime { get; set; }
  [JsonPropertyName("_patternDateTime")]
  public Element _PatternDateTime { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternDecimal")]
  public decimal? PatternDecimal { get; set; }
  [JsonPropertyName("_patternDecimal")]
  public Element _PatternDecimal { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternId")]
  public string? PatternId { get; set; }
  [JsonPropertyName("_patternId")]
  public Element _PatternId { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternInstant")]
  public string? PatternInstant { get; set; }
  [JsonPropertyName("_patternInstant")]
  public Element _PatternInstant { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternInteger")]
  public int? PatternInteger { get; set; }
  [JsonPropertyName("_patternInteger")]
  public Element _PatternInteger { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternInteger64")]
  public string? PatternInteger64 { get; set; }
  [JsonPropertyName("_patternInteger64")]
  public Element _PatternInteger64 { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternMarkdown")]
  public string? PatternMarkdown { get; set; }
  [JsonPropertyName("_patternMarkdown")]
  public Element _PatternMarkdown { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternOid")]
  public string? PatternOid { get; set; }
  [JsonPropertyName("_patternOid")]
  public Element _PatternOid { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternPositiveInt")]
  public uint? PatternPositiveInt { get; set; }
  [JsonPropertyName("_patternPositiveInt")]
  public Element _PatternPositiveInt { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternString")]
  public string? PatternString { get; set; }
  [JsonPropertyName("_patternString")]
  public Element _PatternString { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternTime")]
  public string? PatternTime { get; set; }
  [JsonPropertyName("_patternTime")]
  public Element _PatternTime { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternUnsignedInt")]
  public uint? PatternUnsignedInt { get; set; }
  [JsonPropertyName("_patternUnsignedInt")]
  public Element _PatternUnsignedInt { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternUri")]
  public string? PatternUri { get; set; }
  [JsonPropertyName("_patternUri")]
  public Element _PatternUri { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternUrl")]
  public string? PatternUrl { get; set; }
  [JsonPropertyName("_patternUrl")]
  public Element _PatternUrl { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternUuid")]
  public Guid? PatternUuid { get; set; }
  [JsonPropertyName("_patternUuid")]
  public Element _PatternUuid { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternAddress")]
  public Address? PatternAddress { get; set; }
  [JsonPropertyName("_patternAddress")]
  public Element _PatternAddress { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternAge")]
  public Age? PatternAge { get; set; }
  [JsonPropertyName("_patternAge")]
  public Element _PatternAge { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternAnnotation")]
  public Annotation? PatternAnnotation { get; set; }
  [JsonPropertyName("_patternAnnotation")]
  public Element _PatternAnnotation { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternAttachment")]
  public Attachment? PatternAttachment { get; set; }
  [JsonPropertyName("_patternAttachment")]
  public Element _PatternAttachment { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternCodeableConcept")]
  public CodeableConcept? PatternCodeableConcept { get; set; }
  [JsonPropertyName("_patternCodeableConcept")]
  public Element _PatternCodeableConcept { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternCoding")]
  public Coding? PatternCoding { get; set; }
  [JsonPropertyName("_patternCoding")]
  public Element _PatternCoding { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternContactPoint")]
  public ContactPoint? PatternContactPoint { get; set; }
  [JsonPropertyName("_patternContactPoint")]
  public Element _PatternContactPoint { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternCount")]
  public Count? PatternCount { get; set; }
  [JsonPropertyName("_patternCount")]
  public Element _PatternCount { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternDistance")]
  public Distance? PatternDistance { get; set; }
  [JsonPropertyName("_patternDistance")]
  public Element _PatternDistance { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternDuration")]
  public Duration? PatternDuration { get; set; }
  [JsonPropertyName("_patternDuration")]
  public Element _PatternDuration { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternHumanName")]
  public HumanName? PatternHumanName { get; set; }
  [JsonPropertyName("_patternHumanName")]
  public Element _PatternHumanName { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternIdentifier")]
  public Identifier? PatternIdentifier { get; set; }
  [JsonPropertyName("_patternIdentifier")]
  public Element _PatternIdentifier { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternMoney")]
  public Money? PatternMoney { get; set; }
  [JsonPropertyName("_patternMoney")]
  public Element _PatternMoney { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternPeriod")]
  public Period? PatternPeriod { get; set; }
  [JsonPropertyName("_patternPeriod")]
  public Element _PatternPeriod { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternQuantity")]
  public Quantity? PatternQuantity { get; set; }
  [JsonPropertyName("_patternQuantity")]
  public Element _PatternQuantity { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternRange")]
  public Range? PatternRange { get; set; }
  [JsonPropertyName("_patternRange")]
  public Element _PatternRange { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternRatio")]
  public Ratio? PatternRatio { get; set; }
  [JsonPropertyName("_patternRatio")]
  public Element _PatternRatio { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternReference")]
  public Reference? PatternReference { get; set; }
  [JsonPropertyName("_patternReference")]
  public Element _PatternReference { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternSampledData")]
  public SampledData? PatternSampledData { get; set; }
  [JsonPropertyName("_patternSampledData")]
  public Element _PatternSampledData { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternSignature")]
  public Signature? PatternSignature { get; set; }
  [JsonPropertyName("_patternSignature")]
  public Element _PatternSignature { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternTiming")]
  public Timing? PatternTiming { get; set; }
  [JsonPropertyName("_patternTiming")]
  public Element _PatternTiming { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternContactDetail")]
  public ContactDetail? PatternContactDetail { get; set; }
  [JsonPropertyName("_patternContactDetail")]
  public Element _PatternContactDetail { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternContributor")]
  public Contributor? PatternContributor { get; set; }
  [JsonPropertyName("_patternContributor")]
  public Element _PatternContributor { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternDataRequirement")]
  public DataRequirement? PatternDataRequirement { get; set; }
  [JsonPropertyName("_patternDataRequirement")]
  public Element _PatternDataRequirement { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternExpression")]
  public Expression? PatternExpression { get; set; }
  [JsonPropertyName("_patternExpression")]
  public Element _PatternExpression { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternParameterDefinition")]
  public ParameterDefinition? PatternParameterDefinition { get; set; }
  [JsonPropertyName("_patternParameterDefinition")]
  public Element _PatternParameterDefinition { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternRelatedArtifact")]
  public RelatedArtifact? PatternRelatedArtifact { get; set; }
  [JsonPropertyName("_patternRelatedArtifact")]
  public Element _PatternRelatedArtifact { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternTriggerDefinition")]
  public TriggerDefinition? PatternTriggerDefinition { get; set; }
  [JsonPropertyName("_patternTriggerDefinition")]
  public Element _PatternTriggerDefinition { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternUsageContext")]
  public UsageContext? PatternUsageContext { get; set; }
  [JsonPropertyName("_patternUsageContext")]
  public Element _PatternUsageContext { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternDosage")]
  public Dosage? PatternDosage { get; set; }
  [JsonPropertyName("_patternDosage")]
  public Element _PatternDosage { get; set; }
  /// <summary>
  /// Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].
  /// </summary>
  [JsonPropertyName("patternMeta")]
  public Meta? PatternMeta { get; set; }
  [JsonPropertyName("_patternMeta")]
  public Element _PatternMeta { get; set; }
  /// <summary>
  /// In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc.).
  /// </summary>
  [JsonPropertyName("representation")]
  public string?[] Representation { get; set; }
  [JsonPropertyName("_representation")]
  public Element[] _Representation { get; set; }
  /// <summary>
  /// This element does not describe the usage of the element (that's done in comments), rather it's for traceability of *why* the element is either needed or why the constraints exist as they do.  This may be used to point to source materials or specifications that drove the structure of this data element.
  /// </summary>
  [JsonPropertyName("requirements")]
  public string? Requirements { get; set; }
  [JsonPropertyName("_requirements")]
  public Element _Requirements { get; set; }
  /// <summary>
  /// It is easy for a different short definition to change the meaning of an element and this can have nasty downstream consequences. Please be careful when providing short definitions in a profile.
  /// </summary>
  [JsonPropertyName("short")]
  public string? Short { get; set; }
  [JsonPropertyName("_short")]
  public Element _Short { get; set; }
  /// <summary>
  /// If set to true, an ancestor profile SHALL have a slicing definition with this name.  If set to false, no ancestor profile is permitted to have a slicing definition with this name.
  /// </summary>
  [JsonPropertyName("sliceIsConstraining")]
  public bool? SliceIsConstraining { get; set; }
  [JsonPropertyName("_sliceIsConstraining")]
  public Element _SliceIsConstraining { get; set; }
  /// <summary>
  /// The name SHALL be unique within the structure within the context of the constrained resource element.  (Though to avoid confusion, uniqueness across all elements is recommended.).
  /// </summary>
  [JsonPropertyName("sliceName")]
  public string? SliceName { get; set; }
  [JsonPropertyName("_sliceName")]
  public Element _SliceName { get; set; }
  /// <summary>
  /// The first element in the sequence, the one that carries the slicing, is the definition that applies to all the slices. This is based on the unconstrained element, but can apply any constraints as appropriate. This may include the common constraints on the children of the element.
  /// </summary>
  [JsonPropertyName("slicing")]
  public ElementDefinitionSlicing? Slicing { get; set; }
  [JsonPropertyName("_slicing")]
  public Element _Slicing { get; set; }
  /// <summary>
  /// The Type of the element can be left blank in a differential constraint, in which case the type is inherited from the resource. Abstract types are not permitted to appear as a type when multiple types are listed.  (I.e. Abstract types cannot be part of a choice).
  /// </summary>
  [JsonPropertyName("type")]
  public ElementDefinitionType?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Code Values for the ElementDefinition.defaultValue[x] field
/// </summary>
public sealed class ElementDefinitionDefaultValueCodes {
  public const string SPECIFIED = "Specified";
}
/// <summary>
/// Code Values for the ElementDefinition.fixed[x] field
/// </summary>
public sealed class ElementDefinitionFixedCodes {
  public const string VALUE = "Value";
}
/// <summary>
/// Code Values for the ElementDefinition.pattern[x] field
/// </summary>
public sealed class ElementDefinitionPatternCodes {
  public const string VALUE = "Value";
}
/// <summary>
/// Code Values for the ElementDefinition.representation field
/// </summary>
public sealed class ElementDefinitionRepresentationCodes {
  public const string XMLATTR = "xmlAttr";
  public const string XMLTEXT = "xmlText";
  public const string TYPEATTR = "typeAttr";
  public const string CDATEXT = "cdaText";
  public const string XHTML = "xhtml";
}
public class Expression : DataType {
  /// <summary>
  /// A brief, natural language description of the condition that effectively communicates the intended semantics.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An expression in the specified language that returns a value.
  /// </summary>
  [JsonPropertyName("expression")]
  public string? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// The media type of the language for the expression.
  /// </summary>
  [JsonPropertyName("language")]
  public string Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// If both a reference and an expression is found, the reference SHALL point to the same expression.
  /// </summary>
  [JsonPropertyName("reference")]
  public string? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
}
/// <summary>
/// Code Values for the Expression.language field
/// </summary>
public sealed class ExpressionLanguageCodes {
  public const string TEXT_CQL = "text/cql";
  public const string TEXT_FHIRPATH = "text/fhirpath";
  public const string APPLICATION_X_FHIR_QUERY = "application/x-fhir-query";
  public const string ETC_ = "etc.";
}
/// <summary>
/// The ability to add extensions in a structured way is what keeps FHIR resources simple.
/// </summary>
public class Extension : DataType {
  /// <summary>
  /// The definition may point directly to a computable or human-readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition SHALL be a URI for the Structure Definition defining the extension.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueBase64Binary")]
  public string? ValueBase64Binary { get; set; }
  [JsonPropertyName("_valueBase64Binary")]
  public Element _ValueBase64Binary { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueCanonical")]
  public string? ValueCanonical { get; set; }
  [JsonPropertyName("_valueCanonical")]
  public Element _ValueCanonical { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueCode")]
  public string? ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element _ValueCode { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string? ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string? ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal? ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueId")]
  public string? ValueId { get; set; }
  [JsonPropertyName("_valueId")]
  public Element _ValueId { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueInstant")]
  public string? ValueInstant { get; set; }
  [JsonPropertyName("_valueInstant")]
  public Element _ValueInstant { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int? ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueInteger64")]
  public string? ValueInteger64 { get; set; }
  [JsonPropertyName("_valueInteger64")]
  public Element _ValueInteger64 { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueMarkdown")]
  public string? ValueMarkdown { get; set; }
  [JsonPropertyName("_valueMarkdown")]
  public Element _ValueMarkdown { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueOid")]
  public string? ValueOid { get; set; }
  [JsonPropertyName("_valueOid")]
  public Element _ValueOid { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valuePositiveInt")]
  public uint? ValuePositiveInt { get; set; }
  [JsonPropertyName("_valuePositiveInt")]
  public Element _ValuePositiveInt { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string? ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueUnsignedInt")]
  public uint? ValueUnsignedInt { get; set; }
  [JsonPropertyName("_valueUnsignedInt")]
  public Element _ValueUnsignedInt { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string? ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueUrl")]
  public string? ValueUrl { get; set; }
  [JsonPropertyName("_valueUrl")]
  public Element _ValueUrl { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueUuid")]
  public Guid? ValueUuid { get; set; }
  [JsonPropertyName("_valueUuid")]
  public Element _ValueUuid { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueAddress")]
  public Address? ValueAddress { get; set; }
  [JsonPropertyName("_valueAddress")]
  public Element _ValueAddress { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueAge")]
  public Age? ValueAge { get; set; }
  [JsonPropertyName("_valueAge")]
  public Element _ValueAge { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueAnnotation")]
  public Annotation? ValueAnnotation { get; set; }
  [JsonPropertyName("_valueAnnotation")]
  public Element _ValueAnnotation { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding? ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueContactPoint")]
  public ContactPoint? ValueContactPoint { get; set; }
  [JsonPropertyName("_valueContactPoint")]
  public Element _ValueContactPoint { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueCount")]
  public Count? ValueCount { get; set; }
  [JsonPropertyName("_valueCount")]
  public Element _ValueCount { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueDistance")]
  public Distance? ValueDistance { get; set; }
  [JsonPropertyName("_valueDistance")]
  public Element _ValueDistance { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueDuration")]
  public Duration? ValueDuration { get; set; }
  [JsonPropertyName("_valueDuration")]
  public Element _ValueDuration { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueHumanName")]
  public HumanName? ValueHumanName { get; set; }
  [JsonPropertyName("_valueHumanName")]
  public Element _ValueHumanName { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueIdentifier")]
  public Identifier? ValueIdentifier { get; set; }
  [JsonPropertyName("_valueIdentifier")]
  public Element _ValueIdentifier { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueMoney")]
  public Money? ValueMoney { get; set; }
  [JsonPropertyName("_valueMoney")]
  public Element _ValueMoney { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valuePeriod")]
  public Period? ValuePeriod { get; set; }
  [JsonPropertyName("_valuePeriod")]
  public Element _ValuePeriod { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range? ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueRatio")]
  public Ratio? ValueRatio { get; set; }
  [JsonPropertyName("_valueRatio")]
  public Element _ValueRatio { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference? ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueSampledData")]
  public SampledData? ValueSampledData { get; set; }
  [JsonPropertyName("_valueSampledData")]
  public Element _ValueSampledData { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueSignature")]
  public Signature? ValueSignature { get; set; }
  [JsonPropertyName("_valueSignature")]
  public Element _ValueSignature { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueTiming")]
  public Timing? ValueTiming { get; set; }
  [JsonPropertyName("_valueTiming")]
  public Element _ValueTiming { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueContactDetail")]
  public ContactDetail? ValueContactDetail { get; set; }
  [JsonPropertyName("_valueContactDetail")]
  public Element _ValueContactDetail { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueContributor")]
  public Contributor? ValueContributor { get; set; }
  [JsonPropertyName("_valueContributor")]
  public Element _ValueContributor { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueDataRequirement")]
  public DataRequirement? ValueDataRequirement { get; set; }
  [JsonPropertyName("_valueDataRequirement")]
  public Element _ValueDataRequirement { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueExpression")]
  public Expression? ValueExpression { get; set; }
  [JsonPropertyName("_valueExpression")]
  public Element _ValueExpression { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueParameterDefinition")]
  public ParameterDefinition? ValueParameterDefinition { get; set; }
  [JsonPropertyName("_valueParameterDefinition")]
  public Element _ValueParameterDefinition { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueRelatedArtifact")]
  public RelatedArtifact? ValueRelatedArtifact { get; set; }
  [JsonPropertyName("_valueRelatedArtifact")]
  public Element _ValueRelatedArtifact { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueTriggerDefinition")]
  public TriggerDefinition? ValueTriggerDefinition { get; set; }
  [JsonPropertyName("_valueTriggerDefinition")]
  public Element _ValueTriggerDefinition { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueUsageContext")]
  public UsageContext? ValueUsageContext { get; set; }
  [JsonPropertyName("_valueUsageContext")]
  public Element _ValueUsageContext { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueDosage")]
  public Dosage? ValueDosage { get; set; }
  [JsonPropertyName("_valueDosage")]
  public Element _ValueDosage { get; set; }
  /// <summary>
  /// Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
  /// </summary>
  [JsonPropertyName("valueMeta")]
  public Meta? ValueMeta { get; set; }
  [JsonPropertyName("_valueMeta")]
  public Element _ValueMeta { get; set; }
}
/// <summary>
/// Code Values for the Extension.value[x] field
/// </summary>
public sealed class ExtensionValueCodes {
  public const string VALUE = "Value";
}
/// <summary>
/// Need to be able to record names, along with notes about their use.
/// </summary>
public class HumanName : DataType {
  /// <summary>
  /// Family Name may be decomposed into specific parts using extensions (de, nl, es related cultures).
  /// </summary>
  [JsonPropertyName("family")]
  public string? Family { get; set; }
  [JsonPropertyName("_family")]
  public Element _Family { get; set; }
  /// <summary>
  /// If only initials are recorded, they may be used in place of the full name parts. Initials may be separated into multiple given names but often aren't due to paractical limitations.  This element is not called "first name" since given names do not always come first.
  /// </summary>
  [JsonPropertyName("given")]
  public string?[] Given { get; set; }
  [JsonPropertyName("_given")]
  public Element[] _Given { get; set; }
  /// <summary>
  /// Indicates the period of time when this name was valid for the named person.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
  /// </summary>
  [JsonPropertyName("prefix")]
  public string?[] Prefix { get; set; }
  [JsonPropertyName("_prefix")]
  public Element[] _Prefix { get; set; }
  /// <summary>
  /// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
  /// </summary>
  [JsonPropertyName("suffix")]
  public string?[] Suffix { get; set; }
  [JsonPropertyName("_suffix")]
  public Element[] _Suffix { get; set; }
  /// <summary>
  /// Can provide both a text representation and parts. Applications updating a name SHALL ensure that when both text and parts are present,  no content is included in the text that isn't found in a part.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// Applications can assume that a name is current unless it explicitly says that it is temporary or old.
  /// </summary>
  [JsonPropertyName("use")]
  public string? Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// Code Values for the HumanName.use field
/// </summary>
public sealed class HumanNameUseCodes {
  public const string USUAL = "usual";
  public const string OFFICIAL = "official";
  public const string TEMP = "temp";
  public const string NICKNAME = "nickname";
  public const string ANONYMOUS = "anonymous";
  public const string OLD = "old";
  public const string MAIDEN = "maiden";
}
/// <summary>
/// Need to be able to identify things with confidence and be sure that the identification is not subject to misinterpretation.
/// </summary>
public class Identifier : DataType {
  /// <summary>
  /// The Identifier.assigner may omit the .reference element and only contain a .display element reflecting the name or other textual information about the assigning organization.
  /// </summary>
  [JsonPropertyName("assigner")]
  public Reference? Assigner { get; set; }
  [JsonPropertyName("_assigner")]
  public Element _Assigner { get; set; }
  /// <summary>
  /// Time period during which identifier is/was valid for use.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Identifier.system is always case sensitive.
  /// </summary>
  [JsonPropertyName("system")]
  public string? System { get; set; }
  [JsonPropertyName("_system")]
  public Element _System { get; set; }
  /// <summary>
  /// This element deals only with general categories of identifiers.  It SHOULD not be used for codes that correspond 1..1 with the Identifier.system. Some identifiers may fall into multiple categories due to common usage.   Where the system is known, a type is unnecessary because the type is always part of the system definition. However systems often need to handle identifiers where the system is not known. There is not a 1:1 relationship between type and system, since many different systems have the same type.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Applications can assume that an identifier is permanent unless it explicitly says that it is temporary.
  /// </summary>
  [JsonPropertyName("use")]
  public string? Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
  /// <summary>
  /// If the value is a full URI, then the system SHALL be urn:ietf:rfc:3986.  The value's primary purpose is computational mapping.  As a result, it may be normalized for comparison purposes (e.g. removing non-significant whitespace, dashes, etc.)  A value formatted for human display can be conveyed using the [Rendered Value extension](extension-rendered-value.html). Identifier.value is to be treated as case sensitive unless knowledge of the Identifier.system allows the processer to be confident that non-case-sensitive processing is safe.
  /// </summary>
  [JsonPropertyName("value")]
  public string? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the Identifier.use field
/// </summary>
public sealed class IdentifierUseCodes {
  public const string USUAL = "usual";
  public const string OFFICIAL = "official";
  public const string TEMP = "temp";
  public const string SECONDARY = "secondary";
  public const string OLD = "old";
}
public class MarketingStatus : BackboneType {
  /// <summary>
  /// The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.
  /// </summary>
  [JsonPropertyName("country")]
  public CodeableConcept Country { get; set; }
  [JsonPropertyName("_country")]
  public Element _Country { get; set; }
  /// <summary>
  /// The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
  /// </summary>
  [JsonPropertyName("dateRange")]
  public Period DateRange { get; set; }
  [JsonPropertyName("_dateRange")]
  public Element _DateRange { get; set; }
  /// <summary>
  /// Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept? Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element _Jurisdiction { get; set; }
  /// <summary>
  /// The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
  /// </summary>
  [JsonPropertyName("restoreDate")]
  public string? RestoreDate { get; set; }
  [JsonPropertyName("_restoreDate")]
  public Element _RestoreDate { get; set; }
  /// <summary>
  /// This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
public class Meta : DataType {
  /// <summary>
  /// This value is always populated except when the resource is first being created. The server / resource manager sets this value; what a client provides is irrelevant. This is equivalent to the HTTP Last-Modified and SHOULD have the same value on a [read](http.html#read) interaction.
  /// </summary>
  [JsonPropertyName("lastUpdated")]
  public string? LastUpdated { get; set; }
  [JsonPropertyName("_lastUpdated")]
  public Element _LastUpdated { get; set; }
  /// <summary>
  /// It is up to the server and/or other infrastructure of policy to determine whether/how these claims are verified and/or updated over time.  The list of profile URLs is a set.
  /// </summary>
  [JsonPropertyName("profile")]
  public string?[] Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element[] _Profile { get; set; }
  /// <summary>
  /// The security labels can be updated without changing the stated version of the resource. The list of security labels is a set. Uniqueness is based the system/code, and version and display are ignored.
  /// </summary>
  [JsonPropertyName("security")]
  public Coding?[] Security { get; set; }
  [JsonPropertyName("_security")]
  public Element[] _Security { get; set; }
  /// <summary>
  /// In the provenance resource, this corresponds to Provenance.entity.what[x]. The exact use of the source (and the implied Provenance.entity.role) is left to implementer discretion. Only one nominated source is allowed; for additional provenance details, a full Provenance resource should be used. 
  /// 
  /// This element can be used to indicate where the current master source of a resource that has a canonical URL if the resource is no longer hosted at the canonical URL.
  /// </summary>
  [JsonPropertyName("source")]
  public string? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// The tags can be updated without changing the stated version of the resource. The list of tags is a set. Uniqueness is based the system/code, and version and display are ignored.
  /// </summary>
  [JsonPropertyName("tag")]
  public Coding?[] Tag { get; set; }
  [JsonPropertyName("_tag")]
  public Element[] _Tag { get; set; }
  /// <summary>
  /// The server assigns this value, and ignores what the client specifies, except in the case that the server is imposing version integrity on updates/deletes.
  /// </summary>
  [JsonPropertyName("versionId")]
  public string? VersionId { get; set; }
  [JsonPropertyName("_versionId")]
  public Element _VersionId { get; set; }
}
public class Money : DataType {
  /// <summary>
  /// ISO 4217 Currency Code.
  /// </summary>
  [JsonPropertyName("currency")]
  public string? Currency { get; set; }
  [JsonPropertyName("_currency")]
  public Element _Currency { get; set; }
  /// <summary>
  /// Monetary values have their own rules for handling precision (refer to standard accounting text books).
  /// </summary>
  [JsonPropertyName("value")]
  public decimal? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the Money.currency field
/// </summary>
public sealed class MoneyCurrencyCodes {
  public const string ISO = "ISO";
}
public class Narrative : DataType {
  /// <summary>
  /// The contents of the html element are an XHTML fragment containing only the basic html formatting elements described in chapters 7-11 and 15 of the HTML 4.0 standard, <a> elements (either name or href), images and internally contained stylesheets. The XHTML content SHALL NOT contain a head, a body, external stylesheet references, scripts, forms, base/link/xlink, frames, iframes and objects.
  /// </summary>
  [JsonPropertyName("div")]
  public string Div { get; set; }
  [JsonPropertyName("_div")]
  public Element _Div { get; set; }
  /// <summary>
  /// The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the Narrative.status field
/// </summary>
public sealed class NarrativeStatusCodes {
  public const string GENERATED = "generated";
  public const string EXTENSIONS = "extensions";
  public const string ADDITIONAL = "additional";
  public const string EMPTY = "empty";
}
/// <summary>
/// Interval.
/// </summary>
public class OrderedDistributionInterval : Element {
  /// <summary>
  /// Values and parameters for a single statistic related to the interval.
  /// </summary>
  [JsonPropertyName("intervalStatistic")]
  public Statistic?[] IntervalStatistic { get; set; }
  [JsonPropertyName("_intervalStatistic")]
  public Element[] _IntervalStatistic { get; set; }
  /// <summary>
  /// Relative order of interval.
  /// </summary>
  [JsonPropertyName("rankOrder")]
  public int RankOrder { get; set; }
  [JsonPropertyName("_rankOrder")]
  public Element _RankOrder { get; set; }
}
public class OrderedDistribution : BackboneType {
  /// <summary>
  /// Bottom of first interval.
  /// </summary>
  [JsonPropertyName("bottomOfFirstInterval")]
  public Quantity? BottomOfFirstInterval { get; set; }
  [JsonPropertyName("_bottomOfFirstInterval")]
  public Element _BottomOfFirstInterval { get; set; }
  /// <summary>
  /// A description of the content and value of the statistic.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Interval.
  /// </summary>
  [JsonPropertyName("interval")]
  public OrderedDistributionInterval[] Interval { get; set; }
  [JsonPropertyName("_interval")]
  public Element[] _Interval { get; set; }
  /// <summary>
  /// Footnotes and/or explanatory notes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Number of intervals in an array, eg 4 for quartiles.
  /// </summary>
  [JsonPropertyName("numberOfIntervals")]
  public int NumberOfIntervals { get; set; }
  [JsonPropertyName("_numberOfIntervals")]
  public Element _NumberOfIntervals { get; set; }
  /// <summary>
  /// Singular value of the statistic at the upper bound of the interval.
  /// </summary>
  [JsonPropertyName("topOfInterval")]
  public Quantity? TopOfInterval { get; set; }
  [JsonPropertyName("_topOfInterval")]
  public Element _TopOfInterval { get; set; }
}
public class ParameterDefinition : DataType {
  /// <summary>
  /// A brief discussion of what the parameter is for and how it is used by the module.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// The maximum number of times this element is permitted to appear in the request or response.
  /// </summary>
  [JsonPropertyName("max")]
  public string? Max { get; set; }
  [JsonPropertyName("_max")]
  public Element _Max { get; set; }
  /// <summary>
  /// The minimum number of times this parameter SHALL appear in the request or response.
  /// </summary>
  [JsonPropertyName("min")]
  public int? Min { get; set; }
  [JsonPropertyName("_min")]
  public Element _Min { get; set; }
  /// <summary>
  /// The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
  /// </summary>
  [JsonPropertyName("profile")]
  public string? Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
  /// <summary>
  /// The type of the parameter.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Whether the parameter is input or output for the module.
  /// </summary>
  [JsonPropertyName("use")]
  public string Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// Code Values for the ParameterDefinition.name field
/// </summary>
public sealed class ParameterDefinitionNameCodes {
  public const string NAME = "Name";
}
/// <summary>
/// Code Values for the ParameterDefinition.type field
/// </summary>
public sealed class ParameterDefinitionTypeCodes {
  public const string WHAT = "What";
}
/// <summary>
/// Code Values for the ParameterDefinition.use field
/// </summary>
public sealed class ParameterDefinitionUseCodes {
  public const string VAL_IN = "in";
  public const string VAL_OUT = "out";
}
public class Period : DataType {
  /// <summary>
  /// The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a period that has an end value of 2012-02-03.
  /// </summary>
  [JsonPropertyName("end")]
  public string? End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// If the low element is missing, the meaning is that the low boundary is not known.
  /// </summary>
  [JsonPropertyName("start")]
  public string? Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
}
public class Population : BackboneType {
  /// <summary>
  /// The age of the specific population.
  /// </summary>
  [JsonPropertyName("ageRange")]
  public Range? AgeRange { get; set; }
  [JsonPropertyName("_ageRange")]
  public Element _AgeRange { get; set; }
  /// <summary>
  /// The age of the specific population.
  /// </summary>
  [JsonPropertyName("ageCodeableConcept")]
  public CodeableConcept? AgeCodeableConcept { get; set; }
  [JsonPropertyName("_ageCodeableConcept")]
  public Element _AgeCodeableConcept { get; set; }
  /// <summary>
  /// The gender of the specific population.
  /// </summary>
  [JsonPropertyName("gender")]
  public CodeableConcept? Gender { get; set; }
  [JsonPropertyName("_gender")]
  public Element _Gender { get; set; }
  /// <summary>
  /// The existing physiological conditions of the specific population to which this applies.
  /// </summary>
  [JsonPropertyName("physiologicalCondition")]
  public CodeableConcept? PhysiologicalCondition { get; set; }
  [JsonPropertyName("_physiologicalCondition")]
  public Element _PhysiologicalCondition { get; set; }
  /// <summary>
  /// Race of the specific population.
  /// </summary>
  [JsonPropertyName("race")]
  public CodeableConcept? Race { get; set; }
  [JsonPropertyName("_race")]
  public Element _Race { get; set; }
}
public class PrimitiveType : DataType {
}
public class ProdCharacteristic : BackboneType {
  /// <summary>
  /// Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
  /// </summary>
  [JsonPropertyName("color")]
  public string?[] Color { get; set; }
  [JsonPropertyName("_color")]
  public Element[] _Color { get; set; }
  /// <summary>
  /// Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
  /// </summary>
  [JsonPropertyName("depth")]
  public Quantity? Depth { get; set; }
  [JsonPropertyName("_depth")]
  public Element _Depth { get; set; }
  /// <summary>
  /// Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
  /// </summary>
  [JsonPropertyName("externalDiameter")]
  public Quantity? ExternalDiameter { get; set; }
  [JsonPropertyName("_externalDiameter")]
  public Element _ExternalDiameter { get; set; }
  /// <summary>
  /// Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
  /// </summary>
  [JsonPropertyName("height")]
  public Quantity? Height { get; set; }
  [JsonPropertyName("_height")]
  public Element _Height { get; set; }
  /// <summary>
  /// Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
  /// </summary>
  [JsonPropertyName("image")]
  public Attachment?[] Image { get; set; }
  [JsonPropertyName("_image")]
  public Element[] _Image { get; set; }
  /// <summary>
  /// Where applicable, the imprint can be specified as text.
  /// </summary>
  [JsonPropertyName("imprint")]
  public string?[] Imprint { get; set; }
  [JsonPropertyName("_imprint")]
  public Element[] _Imprint { get; set; }
  /// <summary>
  /// Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
  /// </summary>
  [JsonPropertyName("nominalVolume")]
  public Quantity? NominalVolume { get; set; }
  [JsonPropertyName("_nominalVolume")]
  public Element _NominalVolume { get; set; }
  /// <summary>
  /// Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
  /// </summary>
  [JsonPropertyName("scoring")]
  public CodeableConcept? Scoring { get; set; }
  [JsonPropertyName("_scoring")]
  public Element _Scoring { get; set; }
  /// <summary>
  /// Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
  /// </summary>
  [JsonPropertyName("shape")]
  public string? Shape { get; set; }
  [JsonPropertyName("_shape")]
  public Element _Shape { get; set; }
  /// <summary>
  /// Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
  /// </summary>
  [JsonPropertyName("weight")]
  public Quantity? Weight { get; set; }
  [JsonPropertyName("_weight")]
  public Element _Weight { get; set; }
  /// <summary>
  /// Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
  /// </summary>
  [JsonPropertyName("width")]
  public Quantity? Width { get; set; }
  [JsonPropertyName("_width")]
  public Element _Width { get; set; }
}
public class ProductShelfLife : BackboneType {
  /// <summary>
  /// Unique identifier for the packaged Medicinal Product.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
  /// </summary>
  [JsonPropertyName("period")]
  public Quantity Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
  /// </summary>
  [JsonPropertyName("specialPrecautionsForStorage")]
  public CodeableConcept?[] SpecialPrecautionsForStorage { get; set; }
  [JsonPropertyName("_specialPrecautionsForStorage")]
  public Element[] _SpecialPrecautionsForStorage { get; set; }
  /// <summary>
  /// This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Need to able to capture all sorts of measured values, even if the measured value are not precisely quantified. Values include exact measures such as 3.51g, customary units such as 3 tablets, and currencies such as $100.32USD.
/// </summary>
public class Quantity : DataType {
  /// <summary>
  /// The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.
  /// </summary>
  [JsonPropertyName("code")]
  public string? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  /// </summary>
  [JsonPropertyName("comparator")]
  public string? Comparator { get; set; }
  [JsonPropertyName("_comparator")]
  public Element _Comparator { get; set; }
  /// <summary>
  /// The identification of the system that provides the coded form of the unit.
  /// </summary>
  [JsonPropertyName("system")]
  public string? System { get; set; }
  [JsonPropertyName("_system")]
  public Element _System { get; set; }
  /// <summary>
  /// A human-readable form of the unit.
  /// </summary>
  [JsonPropertyName("unit")]
  public string? Unit { get; set; }
  [JsonPropertyName("_unit")]
  public Element _Unit { get; set; }
  /// <summary>
  /// The implicit precision in the value should always be honored. Monetary values have their own rules for handling precision (refer to standard accounting text books).
  /// </summary>
  [JsonPropertyName("value")]
  public decimal? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the Quantity.code field
/// </summary>
public sealed class QuantityCodeCodes {
  public const string CODED = "Coded";
}
/// <summary>
/// Code Values for the Quantity.comparator field
/// </summary>
public sealed class QuantityComparatorCodes {
  public const string LESS_THAN = "<";
  public const string LESS_THAN_OR_EQUALS = "<=";
  public const string GREATER_THAN_OR_EQUALS = ">=";
  public const string GREATER_THAN = ">";
}
/// <summary>
/// Need to be able to specify ranges of values.
/// </summary>
public class Range : DataType {
  /// <summary>
  /// If the high element is missing, the high boundary is not known.
  /// </summary>
  [JsonPropertyName("high")]
  public Quantity? High { get; set; }
  [JsonPropertyName("_high")]
  public Element _High { get; set; }
  /// <summary>
  /// If the low element is missing, the low boundary is not known.
  /// </summary>
  [JsonPropertyName("low")]
  public Quantity? Low { get; set; }
  [JsonPropertyName("_low")]
  public Element _Low { get; set; }
}
/// <summary>
/// Need to able to capture ratios for some measurements (titers) and some rates (costs).
/// </summary>
public class Ratio : DataType {
  /// <summary>
  /// The value of the denominator.
  /// </summary>
  [JsonPropertyName("denominator")]
  public Quantity? Denominator { get; set; }
  [JsonPropertyName("_denominator")]
  public Element _Denominator { get; set; }
  /// <summary>
  /// The value of the numerator.
  /// </summary>
  [JsonPropertyName("numerator")]
  public Quantity? Numerator { get; set; }
  [JsonPropertyName("_numerator")]
  public Element _Numerator { get; set; }
}
public class Reference : DataType {
  /// <summary>
  /// This is generally not the same as the Resource.text of the referenced resource.  The purpose is to identify what's being referenced, not to fully describe it.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// When an identifier is provided in place of a reference, any system processing the reference will only be able to resolve the identifier to a reference if it understands the business context in which the identifier is used. Sometimes this is global (e.g. a national identifier) but often it is not. For this reason, none of the useful mechanisms described for working with references (e.g. chaining, includes) are possible, nor should servers be expected to be able resolve the reference. Servers may accept an identifier based reference untouched, resolve it, and/or reject it - see CapabilityStatement.rest.resource.referencePolicy. 
  /// 
  /// When both an identifier and a literal reference are provided, the literal reference is preferred. Applications processing the resource are allowed - but not required - to check that the identifier matches the literal reference
  /// 
  /// Applications converting a logical reference to a literal reference may choose to leave the logical reference present, or remove it.
  /// 
  /// Reference is intended to point to a structure that can potentially be expressed as a FHIR resource, though there is no need for it to exist as an actual FHIR resource instance - except in as much as an application wishes to actual find the target of the reference. The content referred to be the identifier must meet the logical constraints implied by any limitations on what resource types are permitted for the reference.  For example, it would not be legitimate to send the identifier for a drug prescription if the type were Reference(Observation|DiagnosticReport).  One of the use-cases for Reference.identifier is the situation where no FHIR representation exists (where the type is Reference (Any).
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Using absolute URLs provides a stable scalable approach suitable for a cloud/web context, while using relative/logical references provides a flexible approach suitable for use when trading across closed eco-system boundaries.   Absolute URLs do not need to point to a FHIR RESTful server, though this is the preferred approach. If the URL conforms to the structure "/[type]/[id]" then it should be assumed that the reference is to a FHIR RESTful server.
  /// </summary>
  [JsonPropertyName("reference")]
  public string? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
  /// <summary>
  /// This element is used to indicate the type of  the target of the reference. This may be used which ever of the other elements are populated (or not). In some cases, the type of the target may be determined by inspection of the reference (e.g. a RESTful URL) or by resolving the target of the reference; if both the type and a reference is provided, the reference SHALL resolve to a resource of the same type as that specified.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Knowledge resources must be able to provide enough information for consumers of the content (and/or interventions or results produced by the content) to be able to determine and understand the justification for and evidence in support of the content.
/// </summary>
public class RelatedArtifact : DataType {
  /// <summary>
  /// Additional structured information about citations should be captured as extensions.
  /// </summary>
  [JsonPropertyName("citation")]
  public string? Citation { get; set; }
  [JsonPropertyName("_citation")]
  public Element _Citation { get; set; }
  /// <summary>
  /// A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// The document being referenced, represented as an attachment. This is exclusive with the resource element.
  /// </summary>
  [JsonPropertyName("document")]
  public Attachment? Document { get; set; }
  [JsonPropertyName("_document")]
  public Element _Document { get; set; }
  /// <summary>
  /// A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
  /// </summary>
  [JsonPropertyName("label")]
  public string? Label { get; set; }
  [JsonPropertyName("_label")]
  public Element _Label { get; set; }
  /// <summary>
  /// If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
  /// </summary>
  [JsonPropertyName("resource")]
  public string? Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element _Resource { get; set; }
  /// <summary>
  /// The type of relationship to the related artifact.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Code Values for the RelatedArtifact.type field
/// </summary>
public sealed class RelatedArtifactTypeCodes {
  public const string DOCUMENTATION = "documentation";
  public const string JUSTIFICATION = "justification";
  public const string CITATION = "citation";
  public const string PREDECESSOR = "predecessor";
  public const string SUCCESSOR = "successor";
  public const string DERIVED_FROM = "derived-from";
  public const string DEPENDS_ON = "depends-on";
  public const string COMPOSED_OF = "composed-of";
}
/// <summary>
/// There is a need for a concise way to handle the data produced by devices that sample a physical state at a high frequency.
/// </summary>
public class SampledData : DataType {
  /// <summary>
  /// Data may be missing if it is omitted for summarization purposes. In general, data is required for any actual use of a SampledData.
  /// </summary>
  [JsonPropertyName("data")]
  public string? Data { get; set; }
  [JsonPropertyName("_data")]
  public Element _Data { get; set; }
  /// <summary>
  /// If there is more than one dimension, the code for the type of data will define the meaning of the dimensions (typically ECG data).
  /// </summary>
  [JsonPropertyName("dimensions")]
  public uint Dimensions { get; set; }
  [JsonPropertyName("_dimensions")]
  public Element _Dimensions { get; set; }
  /// <summary>
  /// A correction factor that is applied to the sampled data points before they are added to the origin.
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
  /// </summary>
  [JsonPropertyName("lowerLimit")]
  public decimal? LowerLimit { get; set; }
  [JsonPropertyName("_lowerLimit")]
  public Element _LowerLimit { get; set; }
  /// <summary>
  /// The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
  /// </summary>
  [JsonPropertyName("origin")]
  public Quantity Origin { get; set; }
  [JsonPropertyName("_origin")]
  public Element _Origin { get; set; }
  /// <summary>
  /// This is usually a whole number.
  /// </summary>
  [JsonPropertyName("period")]
  public decimal Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
  /// </summary>
  [JsonPropertyName("upperLimit")]
  public decimal? UpperLimit { get; set; }
  [JsonPropertyName("_upperLimit")]
  public Element _UpperLimit { get; set; }
}
/// <summary>
/// There are a number of places where content must be signed in healthcare.
/// </summary>
public class Signature : DataType {
  /// <summary>
  /// Where the signature type is an XML DigSig, the signed content is a FHIR Resource(s), the signature is of the XML form of the Resource(s) using  XML-Signature (XMLDIG) "Detached Signature" form.
  /// </summary>
  [JsonPropertyName("data")]
  public string? Data { get; set; }
  [JsonPropertyName("_data")]
  public Element _Data { get; set; }
  /// <summary>
  /// The party that can't sign. For example a child.
  /// </summary>
  [JsonPropertyName("onBehalfOf")]
  public Reference? OnBehalfOf { get; set; }
  [JsonPropertyName("_onBehalfOf")]
  public Element _OnBehalfOf { get; set; }
  /// <summary>
  /// A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
  /// </summary>
  [JsonPropertyName("sigFormat")]
  public string? SigFormat { get; set; }
  [JsonPropertyName("_sigFormat")]
  public Element _SigFormat { get; set; }
  /// <summary>
  /// "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
  /// </summary>
  [JsonPropertyName("targetFormat")]
  public string? TargetFormat { get; set; }
  [JsonPropertyName("_targetFormat")]
  public Element _TargetFormat { get; set; }
  /// <summary>
  /// Examples include attesting to: authorship, correct transcription, and witness of specific event. Also known as a &quot;Commitment Type Indication&quot;.
  /// </summary>
  [JsonPropertyName("type")]
  public Coding[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
  /// <summary>
  /// This should agree with the information in the signature.
  /// </summary>
  [JsonPropertyName("when")]
  public string When { get; set; }
  [JsonPropertyName("_when")]
  public Element _When { get; set; }
  /// <summary>
  /// This should agree with the information in the signature.
  /// </summary>
  [JsonPropertyName("who")]
  public Reference Who { get; set; }
  [JsonPropertyName("_who")]
  public Element _Who { get; set; }
}
/// <summary>
/// Code Values for the Signature.sigFormat field
/// </summary>
public sealed class SignatureSigFormatCodes {
  public const string THE = "The";
}
/// <summary>
/// Code Values for the Signature.targetFormat field
/// </summary>
public sealed class SignatureTargetFormatCodes {
  public const string THE = "The";
}
/// <summary>
/// Number of samples in the statistic.
/// </summary>
public class StatisticSampleSize : Element {
  /// <summary>
  /// Human-readable summary of population sample size.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Number of participants with known results for measured variables.
  /// </summary>
  [JsonPropertyName("knownDataCount")]
  public int? KnownDataCount { get; set; }
  [JsonPropertyName("_knownDataCount")]
  public Element _KnownDataCount { get; set; }
  /// <summary>
  /// Footnote or explanatory note about the sample size.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// A human-readable string to clarify or explain concepts about the sample size.
  /// </summary>
  [JsonPropertyName("numberOfParticipants")]
  public int? NumberOfParticipants { get; set; }
  [JsonPropertyName("_numberOfParticipants")]
  public Element _NumberOfParticipants { get; set; }
  /// <summary>
  /// Number of participants in the population.
  /// </summary>
  [JsonPropertyName("numberOfStudies")]
  public int? NumberOfStudies { get; set; }
  [JsonPropertyName("_numberOfStudies")]
  public Element _NumberOfStudies { get; set; }
  /// <summary>
  /// Number of participants with “positive” results, only used to report actual numerator count for a proportion.
  /// </summary>
  [JsonPropertyName("numeratorCount")]
  public int? NumeratorCount { get; set; }
  [JsonPropertyName("_numeratorCount")]
  public Element _NumeratorCount { get; set; }
}
/// <summary>
/// An estimate of the precision of the estimate.
/// </summary>
public class StatisticAttributeEstimateEstimateQualifier : Element {
  /// <summary>
  /// Human-readable summary of the estimate.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Use 95 for a 95% confidence interval.
  /// </summary>
  [JsonPropertyName("level")]
  public decimal? Level { get; set; }
  [JsonPropertyName("_level")]
  public Element _Level { get; set; }
  /// <summary>
  /// Footnote or explanatory note about the estimate.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Often the pvalue.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Lower bound of confidence interval.
  /// </summary>
  [JsonPropertyName("range")]
  public Range? Range { get; set; }
  [JsonPropertyName("_range")]
  public Element _Range { get; set; }
  /// <summary>
  /// The estimateType of attribute estimate, eg confidence interval or p value type.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// An estimate of the precision of the statistic.
/// </summary>
public class StatisticAttributeEstimate : Element {
  /// <summary>
  /// Human-readable summary of the estimate.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An estimate of the precision of the estimate.
  /// </summary>
  [JsonPropertyName("estimateQualifier")]
  public StatisticAttributeEstimateEstimateQualifier?[] EstimateQualifier { get; set; }
  [JsonPropertyName("_estimateQualifier")]
  public Element[] _EstimateQualifier { get; set; }
  /// <summary>
  /// Use 95 for a 95% confidence interval.
  /// </summary>
  [JsonPropertyName("level")]
  public decimal? Level { get; set; }
  [JsonPropertyName("_level")]
  public Element _Level { get; set; }
  /// <summary>
  /// Footnote or explanatory note about the estimate.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Often the pvalue.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Lower bound of confidence interval.
  /// </summary>
  [JsonPropertyName("range")]
  public Range? Range { get; set; }
  [JsonPropertyName("_range")]
  public Element _Range { get; set; }
  /// <summary>
  /// The estimateType of precision estimate, eg confidence interval or p value type.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class Statistic : BackboneType {
  /// <summary>
  /// An estimate of the precision of the statistic.
  /// </summary>
  [JsonPropertyName("attributeEstimate")]
  public StatisticAttributeEstimate?[] AttributeEstimate { get; set; }
  [JsonPropertyName("_attributeEstimate")]
  public Element[] _AttributeEstimate { get; set; }
  /// <summary>
  /// A description of the content value of the statistic.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Footnotes and/or explanatory notes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Statistic value.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Number of samples in the statistic.
  /// </summary>
  [JsonPropertyName("sampleSize")]
  public StatisticSampleSize? SampleSize { get; set; }
  [JsonPropertyName("_sampleSize")]
  public Element _SampleSize { get; set; }
  /// <summary>
  /// Type of statistic, eg relative risk.
  /// </summary>
  [JsonPropertyName("statisticType")]
  public CodeableConcept? StatisticType { get; set; }
  [JsonPropertyName("_statisticType")]
  public Element _StatisticType { get; set; }
}
/// <summary>
/// Reference range of possible or expected values.
/// </summary>
public class SubstanceAmountReferenceRange : Element {
  /// <summary>
  /// Upper limit possible or expected.
  /// </summary>
  [JsonPropertyName("highLimit")]
  public Quantity? HighLimit { get; set; }
  [JsonPropertyName("_highLimit")]
  public Element _HighLimit { get; set; }
  /// <summary>
  /// Lower limit possible or expected.
  /// </summary>
  [JsonPropertyName("lowLimit")]
  public Quantity? LowLimit { get; set; }
  [JsonPropertyName("_lowLimit")]
  public Element _LowLimit { get; set; }
}
public class SubstanceAmount : BackboneType {
  /// <summary>
  /// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
  /// </summary>
  [JsonPropertyName("amountQuantity")]
  public Quantity? AmountQuantity { get; set; }
  [JsonPropertyName("_amountQuantity")]
  public Element _AmountQuantity { get; set; }
  /// <summary>
  /// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
  /// </summary>
  [JsonPropertyName("amountRange")]
  public Range? AmountRange { get; set; }
  [JsonPropertyName("_amountRange")]
  public Element _AmountRange { get; set; }
  /// <summary>
  /// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
  /// </summary>
  [JsonPropertyName("amountString")]
  public string? AmountString { get; set; }
  [JsonPropertyName("_amountString")]
  public Element _AmountString { get; set; }
  /// <summary>
  /// A textual comment on a numeric value.
  /// </summary>
  [JsonPropertyName("amountText")]
  public string? AmountText { get; set; }
  [JsonPropertyName("_amountText")]
  public Element _AmountText { get; set; }
  /// <summary>
  /// Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements.
  /// </summary>
  [JsonPropertyName("amountType")]
  public CodeableConcept? AmountType { get; set; }
  [JsonPropertyName("_amountType")]
  public Element _AmountType { get; set; }
  /// <summary>
  /// Reference range of possible or expected values.
  /// </summary>
  [JsonPropertyName("referenceRange")]
  public SubstanceAmountReferenceRange? ReferenceRange { get; set; }
  [JsonPropertyName("_referenceRange")]
  public Element _ReferenceRange { get; set; }
}
/// <summary>
/// A set of rules that describe when the event is scheduled.
/// </summary>
public class TimingRepeat : Element {
  /// <summary>
  /// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  /// </summary>
  [JsonPropertyName("boundsDuration")]
  public Duration? BoundsDuration { get; set; }
  [JsonPropertyName("_boundsDuration")]
  public Element _BoundsDuration { get; set; }
  /// <summary>
  /// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  /// </summary>
  [JsonPropertyName("boundsRange")]
  public Range? BoundsRange { get; set; }
  [JsonPropertyName("_boundsRange")]
  public Element _BoundsRange { get; set; }
  /// <summary>
  /// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  /// </summary>
  [JsonPropertyName("boundsPeriod")]
  public Period? BoundsPeriod { get; set; }
  [JsonPropertyName("_boundsPeriod")]
  public Element _BoundsPeriod { get; set; }
  /// <summary>
  /// If you have both bounds and count, then this should be understood as within the bounds period, until count times happens.
  /// </summary>
  [JsonPropertyName("count")]
  public uint? Count { get; set; }
  [JsonPropertyName("_count")]
  public Element _Count { get; set; }
  /// <summary>
  /// If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
  /// </summary>
  [JsonPropertyName("countMax")]
  public uint? CountMax { get; set; }
  [JsonPropertyName("_countMax")]
  public Element _CountMax { get; set; }
  /// <summary>
  /// If no days are specified, the action is assumed to happen every day as otherwise specified. The elements frequency and period cannot be used as well as dayOfWeek.
  /// </summary>
  [JsonPropertyName("dayOfWeek")]
  public string?[] DayOfWeek { get; set; }
  [JsonPropertyName("_dayOfWeek")]
  public Element[] _DayOfWeek { get; set; }
  /// <summary>
  /// For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
  /// </summary>
  [JsonPropertyName("duration")]
  public decimal? Duration { get; set; }
  [JsonPropertyName("_duration")]
  public Element _Duration { get; set; }
  /// <summary>
  /// For some events the duration is part of the definition of the event (e.g. IV infusions, where the duration is implicit in the specified quantity and rate). For others, it's part of the timing specification (e.g. exercise).
  /// </summary>
  [JsonPropertyName("durationMax")]
  public decimal? DurationMax { get; set; }
  [JsonPropertyName("_durationMax")]
  public Element _DurationMax { get; set; }
  /// <summary>
  /// The units of time for the duration, in UCUM units.
  /// </summary>
  [JsonPropertyName("durationUnit")]
  public string? DurationUnit { get; set; }
  [JsonPropertyName("_durationUnit")]
  public Element _DurationUnit { get; set; }
  /// <summary>
  /// The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
  /// </summary>
  [JsonPropertyName("frequency")]
  public uint? Frequency { get; set; }
  [JsonPropertyName("_frequency")]
  public Element _Frequency { get; set; }
  /// <summary>
  /// If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
  /// </summary>
  [JsonPropertyName("frequencyMax")]
  public uint? FrequencyMax { get; set; }
  [JsonPropertyName("_frequencyMax")]
  public Element _FrequencyMax { get; set; }
  /// <summary>
  /// The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
  /// </summary>
  [JsonPropertyName("offset")]
  public uint? Offset { get; set; }
  [JsonPropertyName("_offset")]
  public Element _Offset { get; set; }
  /// <summary>
  /// Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
  /// </summary>
  [JsonPropertyName("period")]
  public decimal? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
  /// </summary>
  [JsonPropertyName("periodMax")]
  public decimal? PeriodMax { get; set; }
  [JsonPropertyName("_periodMax")]
  public Element _PeriodMax { get; set; }
  /// <summary>
  /// The units of time for the period in UCUM units.
  /// </summary>
  [JsonPropertyName("periodUnit")]
  public string? PeriodUnit { get; set; }
  [JsonPropertyName("_periodUnit")]
  public Element _PeriodUnit { get; set; }
  /// <summary>
  /// When time of day is specified, it is inferred that the action happens every day (as filtered by dayofWeek) on the specified times. The elements when, frequency and period cannot be used as well as timeOfDay.
  /// </summary>
  [JsonPropertyName("timeOfDay")]
  public string?[] TimeOfDay { get; set; }
  [JsonPropertyName("_timeOfDay")]
  public Element[] _TimeOfDay { get; set; }
  /// <summary>
  /// When more than one event is listed, the event is tied to the union of the specified events.
  /// </summary>
  [JsonPropertyName("when")]
  public string?[] When { get; set; }
  [JsonPropertyName("_when")]
  public Element[] _When { get; set; }
}
/// <summary>
/// Code Values for the Timing.repeat.dayOfWeek field
/// </summary>
public sealed class TimingRepeatDayOfWeekCodes {
  public const string MON = "mon";
  public const string TUE = "tue";
  public const string WED = "wed";
  public const string THU = "thu";
  public const string FRI = "fri";
  public const string SAT = "sat";
  public const string SUN = "sun";
}
/// <summary>
/// Code Values for the Timing.repeat.durationUnit field
/// </summary>
public sealed class TimingRepeatDurationUnitCodes {
  public const string S = "s";
  public const string MIN = "min";
  public const string H = "h";
  public const string D = "d";
  public const string WK = "wk";
  public const string MO = "mo";
  public const string A = "a";
}
/// <summary>
/// Code Values for the Timing.repeat.periodUnit field
/// </summary>
public sealed class TimingRepeatPeriodUnitCodes {
  public const string S = "s";
  public const string MIN = "min";
  public const string H = "h";
  public const string D = "d";
  public const string WK = "wk";
  public const string MO = "mo";
  public const string A = "a";
}
/// <summary>
/// Code Values for the Timing.repeat.when field
/// </summary>
public sealed class TimingRepeatWhenCodes {
  public const string CODE = "Code";
}
/// <summary>
/// Need to able to track proposed timing schedules. There are several different ways to do this: one or more specified times, a simple rules like three times a day, or  before/after meals.
/// </summary>
public class Timing : BackboneType {
  /// <summary>
  /// BID etc. are defined as 'at institutionally specified times'. For example, an institution may choose that BID is "always at 7am and 6pm".  If it is inappropriate for this choice to be made, the code BID should not be used. Instead, a distinct organization-specific code should be used in place of the HL7-defined BID code and/or a structured representation should be used (in this case, specifying the two event times).
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Identifies specific times when the event occurs.
  /// </summary>
  [JsonPropertyName("event")]
  public string?[] Event { get; set; }
  [JsonPropertyName("_event")]
  public Element[] _Event { get; set; }
  /// <summary>
  /// A set of rules that describe when the event is scheduled.
  /// </summary>
  [JsonPropertyName("repeat")]
  public TimingRepeat? Repeat { get; set; }
  [JsonPropertyName("_repeat")]
  public Element _Repeat { get; set; }
}
public class TriggerDefinition : DataType {
  /// <summary>
  /// This element can be only be specified for data type triggers and provides additional semantics for the trigger. The context available within the condition is based on the type of data event. For all events, the current resource will be available as context. In addition, for modification events, the previous resource will also be available. The expression may be inlined, or may be a simple absolute URI, which is a reference to a named expression within a logic library referenced by a library element or extension within the containing resource. If the expression is a FHIR Path expression, it evaluates in the context of a resource of one of the type identified in the data requirement, and may also refer to the variable %previous for delta comparisons on events of type data-changed, data-modified, and data-deleted which will always have the same type.
  /// </summary>
  [JsonPropertyName("condition")]
  public Expression? Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element _Condition { get; set; }
  /// <summary>
  /// This element shall be present for any data type trigger.
  /// </summary>
  [JsonPropertyName("data")]
  public DataRequirement?[] Data { get; set; }
  [JsonPropertyName("_data")]
  public Element[] _Data { get; set; }
  /// <summary>
  /// An event name can be provided for all event types, but is required for named events. If a name is provided for a type other than named events, it is considered to be a shorthand for the semantics described by the formal description of the event.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The timing of the event (if this is a periodic trigger).
  /// </summary>
  [JsonPropertyName("timingTiming")]
  public Timing? TimingTiming { get; set; }
  [JsonPropertyName("_timingTiming")]
  public Element _TimingTiming { get; set; }
  /// <summary>
  /// The timing of the event (if this is a periodic trigger).
  /// </summary>
  [JsonPropertyName("timingReference")]
  public Reference? TimingReference { get; set; }
  [JsonPropertyName("_timingReference")]
  public Element _TimingReference { get; set; }
  /// <summary>
  /// The timing of the event (if this is a periodic trigger).
  /// </summary>
  [JsonPropertyName("timingDate")]
  public string? TimingDate { get; set; }
  [JsonPropertyName("_timingDate")]
  public Element _TimingDate { get; set; }
  /// <summary>
  /// The timing of the event (if this is a periodic trigger).
  /// </summary>
  [JsonPropertyName("timingDateTime")]
  public string? TimingDateTime { get; set; }
  [JsonPropertyName("_timingDateTime")]
  public Element _TimingDateTime { get; set; }
  /// <summary>
  /// The type of triggering event.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the TriggerDefinition.type field
/// </summary>
public sealed class TriggerDefinitionTypeCodes {
  public const string NAMED_EVENT = "named-event";
  public const string PERIODIC = "periodic";
  public const string DATA_CHANGED = "data-changed";
  public const string DATA_ADDED = "data-added";
  public const string DATA_MODIFIED = "data-modified";
  public const string DATA_REMOVED = "data-removed";
  public const string DATA_ACCESSED = "data-accessed";
  public const string DATA_ACCESS_ENDED = "data-access-ended";
}
/// <summary>
/// Consumers of the resource must be able to determine the intended applicability for the resource. Ideally, this information would be used programmatically to determine when and how it should be incorporated or exposed.
/// </summary>
public class UsageContext : DataType {
  /// <summary>
  /// A code that identifies the type of context being specified by this usage context.
  /// </summary>
  [JsonPropertyName("code")]
  public Coding Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
}
/// <summary>
/// Typically. this may be some form of insurance, internal charges, or self-pay.
/// 
/// Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
/// Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
/// </summary>
public class AccountCoverage : BackboneElement {
  /// <summary>
  /// The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).
  /// 
  /// A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
  /// </summary>
  [JsonPropertyName("coverage")]
  public Reference Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element _Coverage { get; set; }
  /// <summary>
  /// It is common in some jurisdictions for there to be multiple coverages allocated to an account, and a sequence is required to order the settling of the account (often with insurance claiming).
  /// </summary>
  [JsonPropertyName("priority")]
  public uint? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
}
/// <summary>
/// The parties responsible for balancing the account if other payment options fall short.
/// </summary>
public class AccountGuarantor : BackboneElement {
  /// <summary>
  /// A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
  /// </summary>
  [JsonPropertyName("onHold")]
  public bool? OnHold { get; set; }
  [JsonPropertyName("_onHold")]
  public Element _OnHold { get; set; }
  /// <summary>
  /// The entity who is responsible.
  /// </summary>
  [JsonPropertyName("party")]
  public Reference Party { get; set; }
  [JsonPropertyName("_party")]
  public Element _Party { get; set; }
  /// <summary>
  /// The timeframe during which the guarantor accepts responsibility for the account.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
}
public class Account : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Account";
  /// <summary>
  /// Typically. this may be some form of insurance, internal charges, or self-pay.
  /// 
  /// Local or jurisdictional business rules may determine which coverage covers which types of billable items charged to the account, and in which order.
  /// Where the order is important, a local/jurisdictional extension may be defined to specify the order for the type of charge.
  /// </summary>
  [JsonPropertyName("coverage")]
  public AccountCoverage?[] Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element[] _Coverage { get; set; }
  /// <summary>
  /// Provides additional information about what the account tracks and how it is used.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The parties responsible for balancing the account if other payment options fall short.
  /// </summary>
  [JsonPropertyName("guarantor")]
  public AccountGuarantor?[] Guarantor { get; set; }
  [JsonPropertyName("_guarantor")]
  public Element[] _Guarantor { get; set; }
  /// <summary>
  /// Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Name used for the account when displaying it to humans in reports, etc.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
  /// </summary>
  [JsonPropertyName("owner")]
  public Reference? Owner { get; set; }
  [JsonPropertyName("_owner")]
  public Element _Owner { get; set; }
  /// <summary>
  /// Reference to a parent Account.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference? PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element _PartOf { get; set; }
  /// <summary>
  /// It is possible for transactions to be posted outside the service period, as long as the service was provided within the defined service period.
  /// </summary>
  [JsonPropertyName("servicePeriod")]
  public Period? ServicePeriod { get; set; }
  [JsonPropertyName("_servicePeriod")]
  public Element _ServicePeriod { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the Account as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Accounts can be applied to non-patients for tracking other non-patient related activities, such as group services (patients not tracked, and costs charged to another body), or might not be allocated.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference?[] Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element[] _Subject { get; set; }
  /// <summary>
  /// Categorizes the account for reporting and searching purposes.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Account.status field
/// </summary>
public sealed class AccountStatusCodes {
  public const string ACTIVE = "active";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string ON_HOLD = "on-hold";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Indicates who should participate in performing the action described.
/// </summary>
public class ActivityDefinitionParticipant : BackboneElement {
  /// <summary>
  /// The role the participant should play in performing the described action.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
  /// <summary>
  /// The type of participant in the action.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the ActivityDefinition.participant.type field
/// </summary>
public sealed class ActivityDefinitionParticipantTypeCodes {
  public const string PATIENT = "patient";
  public const string PRACTITIONER = "practitioner";
  public const string RELATED_PERSON = "related-person";
  public const string DEVICE = "device";
}
/// <summary>
/// Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
/// </summary>
public class ActivityDefinitionDynamicValue : BackboneElement {
  /// <summary>
  /// The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
  /// </summary>
  [JsonPropertyName("expression")]
  public Expression Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
  /// </summary>
  [JsonPropertyName("path")]
  public string Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
}
public class ActivityDefinition : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ActivityDefinition";
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// An individiual or organization primarily involved in the creation and maintenance of the content.
  /// </summary>
  [JsonPropertyName("author")]
  public ContactDetail?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// Only used if not implicit in the code found in ServiceRequest.type.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept?[] BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element[] _BodySite { get; set; }
  /// <summary>
  /// Tends to be less relevant for activities involving particular products.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the activity definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the activity definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the activity definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the activity definition is presumed to be the predominant language in the place the activity definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// This element is not intended to be used to communicate a decision support response to cancel an order in progress. That should be done with the "remove" type of a PlanDefinition or RequestGroup.
  /// </summary>
  [JsonPropertyName("doNotPerform")]
  public bool? DoNotPerform { get; set; }
  [JsonPropertyName("_doNotPerform")]
  public Element _DoNotPerform { get; set; }
  /// <summary>
  /// If a dosage instruction is used, the definition should not specify timing or quantity.
  /// </summary>
  [JsonPropertyName("dosage")]
  public Dosage?[] Dosage { get; set; }
  [JsonPropertyName("_dosage")]
  public Element[] _Dosage { get; set; }
  /// <summary>
  /// Dynamic values are applied in the order in which they are defined in the ActivityDefinition. Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
  /// </summary>
  [JsonPropertyName("dynamicValue")]
  public ActivityDefinitionDynamicValue?[] DynamicValue { get; set; }
  [JsonPropertyName("_dynamicValue")]
  public Element[] _DynamicValue { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for internal coherence of the content.
  /// </summary>
  [JsonPropertyName("editor")]
  public ContactDetail?[] Editor { get; set; }
  [JsonPropertyName("_editor")]
  public Element[] _Editor { get; set; }
  /// <summary>
  /// The effective period for a activity definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// An individual or organization responsible for officially endorsing the content for use in some setting.
  /// </summary>
  [JsonPropertyName("endorser")]
  public ContactDetail?[] Endorser { get; set; }
  [JsonPropertyName("_endorser")]
  public Element[] _Endorser { get; set; }
  /// <summary>
  /// Allows filtering of activity definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this activity definition outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
  /// </summary>
  [JsonPropertyName("intent")]
  public string? Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// It may be possible for the activity definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// May determine what types of extensions are permitted.
  /// </summary>
  [JsonPropertyName("kind")]
  public string? Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// A reference to a Library resource containing any formal logic used by the activity definition.
  /// </summary>
  [JsonPropertyName("library")]
  public string?[] Library { get; set; }
  [JsonPropertyName("_library")]
  public Element[] _Library { get; set; }
  /// <summary>
  /// May reference a specific clinical location or may just identify a type of location.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Defines observation requirements for the action to be performed, such as body weight or surface area.
  /// </summary>
  [JsonPropertyName("observationRequirement")]
  public Reference?[] ObservationRequirement { get; set; }
  [JsonPropertyName("_observationRequirement")]
  public Element[] _ObservationRequirement { get; set; }
  /// <summary>
  /// Defines the observations that are expected to be produced by the action.
  /// </summary>
  [JsonPropertyName("observationResultRequirement")]
  public Reference?[] ObservationResultRequirement { get; set; }
  [JsonPropertyName("_observationResultRequirement")]
  public Element[] _ObservationResultRequirement { get; set; }
  /// <summary>
  /// Indicates who should participate in performing the action described.
  /// </summary>
  [JsonPropertyName("participant")]
  public ActivityDefinitionParticipant?[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// Indicates how quickly the activity  should be addressed with respect to other requests.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// Identifies the food, drug or other product being consumed or supplied in the activity.
  /// </summary>
  [JsonPropertyName("productReference")]
  public Reference? ProductReference { get; set; }
  [JsonPropertyName("_productReference")]
  public Element _ProductReference { get; set; }
  /// <summary>
  /// Identifies the food, drug or other product being consumed or supplied in the activity.
  /// </summary>
  [JsonPropertyName("productCodeableConcept")]
  public CodeableConcept? ProductCodeableConcept { get; set; }
  [JsonPropertyName("_productCodeableConcept")]
  public Element _ProductCodeableConcept { get; set; }
  /// <summary>
  /// A profile to which the target of the activity definition is expected to conform.
  /// </summary>
  [JsonPropertyName("profile")]
  public string? Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the activity definition is the organization or individual primarily responsible for the maintenance and upkeep of the activity definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the activity definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the activity definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this activity definition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Each related artifact is either an attachment, or a reference to another resource, but not both.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for review of some aspect of the content.
  /// </summary>
  [JsonPropertyName("reviewer")]
  public ContactDetail?[] Reviewer { get; set; }
  [JsonPropertyName("_reviewer")]
  public Element[] _Reviewer { get; set; }
  /// <summary>
  /// Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
  /// </summary>
  [JsonPropertyName("specimenRequirement")]
  public Reference?[] SpecimenRequirement { get; set; }
  [JsonPropertyName("_specimenRequirement")]
  public Element[] _SpecimenRequirement { get; set; }
  /// <summary>
  /// Allows filtering of activity definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A code or group definition that describes the intended subject of the activity being defined.
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// A code or group definition that describes the intended subject of the activity being defined.
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// An explanatory or alternate title for the activity definition giving additional information about its content.
  /// </summary>
  [JsonPropertyName("subtitle")]
  public string? Subtitle { get; set; }
  [JsonPropertyName("_subtitle")]
  public Element _Subtitle { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("timingTiming")]
  public Timing? TimingTiming { get; set; }
  [JsonPropertyName("_timingTiming")]
  public Element _TimingTiming { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("timingDateTime")]
  public string? TimingDateTime { get; set; }
  [JsonPropertyName("_timingDateTime")]
  public Element _TimingDateTime { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("timingAge")]
  public Age? TimingAge { get; set; }
  [JsonPropertyName("_timingAge")]
  public Element _TimingAge { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("timingPeriod")]
  public Period? TimingPeriod { get; set; }
  [JsonPropertyName("_timingPeriod")]
  public Element _TimingPeriod { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("timingRange")]
  public Range? TimingRange { get; set; }
  [JsonPropertyName("_timingRange")]
  public Element _TimingRange { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("timingDuration")]
  public Duration? TimingDuration { get; set; }
  [JsonPropertyName("_timingDuration")]
  public Element _TimingDuration { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
  /// </summary>
  [JsonPropertyName("topic")]
  public CodeableConcept?[] Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element[] _Topic { get; set; }
  /// <summary>
  /// Note that if both a transform and dynamic values are specified, the dynamic values will be applied to the result of the transform.
  /// </summary>
  [JsonPropertyName("transform")]
  public string? Transform { get; set; }
  [JsonPropertyName("_transform")]
  public Element _Transform { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// A detailed description of how the activity definition is used from a clinical perspective.
  /// </summary>
  [JsonPropertyName("usage")]
  public string? Usage { get; set; }
  [JsonPropertyName("_usage")]
  public Element _Usage { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different activity definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the activity definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the ActivityDefinition.intent field
/// </summary>
public sealed class ActivityDefinitionIntentCodes {
  public const string PROPOSAL = "proposal";
  public const string PLAN = "plan";
  public const string DIRECTIVE = "directive";
  public const string ORDER = "order";
  public const string ORIGINAL_ORDER = "original-order";
  public const string REFLEX_ORDER = "reflex-order";
  public const string FILLER_ORDER = "filler-order";
  public const string INSTANCE_ORDER = "instance-order";
  public const string OPTION = "option";
}
/// <summary>
/// Code Values for the ActivityDefinition.kind field
/// </summary>
public sealed class ActivityDefinitionKindCodes {
  public const string KIND = "Kind";
}
/// <summary>
/// Code Values for the ActivityDefinition.priority field
/// </summary>
public sealed class ActivityDefinitionPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the ActivityDefinition.status field
/// </summary>
public sealed class ActivityDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Characteristics e.g. a products onset of action.
/// </summary>
public class AdministrableProductDefinitionProperty : BackboneElement {
  /// <summary>
  /// The status of characteristic e.g. assigned or pending.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A code expressing the type of characteristic.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string? ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
}
/// <summary>
/// A species specific time during which consumption of animal product is not appropriate.
/// </summary>
public class AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod : BackboneElement {
  /// <summary>
  /// Extra information about the withdrawal period.
  /// </summary>
  [JsonPropertyName("supportingInformation")]
  public string? SupportingInformation { get; set; }
  [JsonPropertyName("_supportingInformation")]
  public Element _SupportingInformation { get; set; }
  /// <summary>
  /// Coded expression for the type of tissue for which the withdrawal period applues, e.g. meat, milk.
  /// </summary>
  [JsonPropertyName("tissue")]
  public CodeableConcept Tissue { get; set; }
  [JsonPropertyName("_tissue")]
  public Element _Tissue { get; set; }
  /// <summary>
  /// A value for the time.
  /// </summary>
  [JsonPropertyName("value")]
  public Quantity Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// A species for which this route applies.
/// </summary>
public class AdministrableProductDefinitionRouteOfAdministrationTargetSpecies : BackboneElement {
  /// <summary>
  /// Coded expression for the species.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A species specific time during which consumption of animal product is not appropriate.
  /// </summary>
  [JsonPropertyName("withdrawalPeriod")]
  public AdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod?[] WithdrawalPeriod { get; set; }
  [JsonPropertyName("_withdrawalPeriod")]
  public Element[] _WithdrawalPeriod { get; set; }
}
/// <summary>
/// The path by which the pharmaceutical product is taken into or makes contact with the body.
/// </summary>
public class AdministrableProductDefinitionRouteOfAdministration : BackboneElement {
  /// <summary>
  /// Coded expression for the route.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The first dose (dose quantity) administered in humans can be specified, for a product under investigation, using a numerical value and its unit of measurement.
  /// </summary>
  [JsonPropertyName("firstDose")]
  public Quantity? FirstDose { get; set; }
  [JsonPropertyName("_firstDose")]
  public Element _FirstDose { get; set; }
  /// <summary>
  /// The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered as per the protocol referenced in the clinical trial authorisation.
  /// </summary>
  [JsonPropertyName("maxDosePerDay")]
  public Quantity? MaxDosePerDay { get; set; }
  [JsonPropertyName("_maxDosePerDay")]
  public Element _MaxDosePerDay { get; set; }
  /// <summary>
  /// The maximum dose per treatment period that can be administered as per the protocol referenced in the clinical trial authorisation.
  /// </summary>
  [JsonPropertyName("maxDosePerTreatmentPeriod")]
  public Ratio? MaxDosePerTreatmentPeriod { get; set; }
  [JsonPropertyName("_maxDosePerTreatmentPeriod")]
  public Element _MaxDosePerTreatmentPeriod { get; set; }
  /// <summary>
  /// The maximum single dose that can be administered as per the protocol of a clinical trial can be specified using a numerical value and its unit of measurement.
  /// </summary>
  [JsonPropertyName("maxSingleDose")]
  public Quantity? MaxSingleDose { get; set; }
  [JsonPropertyName("_maxSingleDose")]
  public Element _MaxSingleDose { get; set; }
  /// <summary>
  /// The maximum treatment period during which an Investigational Medicinal Product can be administered as per the protocol referenced in the clinical trial authorisation.
  /// </summary>
  [JsonPropertyName("maxTreatmentPeriod")]
  public Duration? MaxTreatmentPeriod { get; set; }
  [JsonPropertyName("_maxTreatmentPeriod")]
  public Element _MaxTreatmentPeriod { get; set; }
  /// <summary>
  /// A species for which this route applies.
  /// </summary>
  [JsonPropertyName("targetSpecies")]
  public AdministrableProductDefinitionRouteOfAdministrationTargetSpecies?[] TargetSpecies { get; set; }
  [JsonPropertyName("_targetSpecies")]
  public Element[] _TargetSpecies { get; set; }
}
public class AdministrableProductDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "AdministrableProductDefinition";
  /// <summary>
  /// The administrable dose form, after necessary reconstitution.
  /// </summary>
  [JsonPropertyName("administrableDoseForm")]
  public CodeableConcept AdministrableDoseForm { get; set; }
  [JsonPropertyName("_administrableDoseForm")]
  public Element _AdministrableDoseForm { get; set; }
  /// <summary>
  /// Accompanying device.
  /// </summary>
  [JsonPropertyName("device")]
  public Reference?[] Device { get; set; }
  [JsonPropertyName("_device")]
  public Element[] _Device { get; set; }
  /// <summary>
  /// An identifier for the pharmaceutical medicinal product.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The ingredients of this administrable pharmaceutical product.
  /// </summary>
  [JsonPropertyName("ingredient")]
  public Reference?[] Ingredient { get; set; }
  [JsonPropertyName("_ingredient")]
  public Element[] _Ingredient { get; set; }
  /// <summary>
  /// The manufactured item(s) that this administrable product is produced from. Either a single item, or several that are mixed before administration (e.g. a power item and a solution item). Note that these are not raw ingredients.
  /// </summary>
  [JsonPropertyName("producedFrom")]
  public Reference?[] ProducedFrom { get; set; }
  [JsonPropertyName("_producedFrom")]
  public Element[] _ProducedFrom { get; set; }
  /// <summary>
  /// Characteristics e.g. a products onset of action.
  /// </summary>
  [JsonPropertyName("property")]
  public AdministrableProductDefinitionProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// The path by which the pharmaceutical product is taken into or makes contact with the body.
  /// </summary>
  [JsonPropertyName("routeOfAdministration")]
  public AdministrableProductDefinitionRouteOfAdministration[] RouteOfAdministration { get; set; }
  [JsonPropertyName("_routeOfAdministration")]
  public Element[] _RouteOfAdministration { get; set; }
  /// <summary>
  /// The product that this is a pharmaceutical product of.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference?[] Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element[] _Subject { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("unitOfPresentation")]
  public CodeableConcept? UnitOfPresentation { get; set; }
  [JsonPropertyName("_unitOfPresentation")]
  public Element _UnitOfPresentation { get; set; }
}
/// <summary>
/// Indicates who or what participated in the adverse event and how they were involved.
/// </summary>
public class AdverseEventParticipant : BackboneElement {
  /// <summary>
  /// For example, the physician prescribing a drug, a nurse administering the drug, a device that administered the drug, a witness to the event, or an informant of clinical history.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant.
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept? Function { get; set; }
  [JsonPropertyName("_function")]
  public Element _Function { get; set; }
}
/// <summary>
/// Information on the possible cause of the event.
/// </summary>
public class AdverseEventSuspectEntityCausality : BackboneElement {
  /// <summary>
  /// The method of evaluating the relatedness of the suspected entity to the event.
  /// </summary>
  [JsonPropertyName("assessmentMethod")]
  public CodeableConcept? AssessmentMethod { get; set; }
  [JsonPropertyName("_assessmentMethod")]
  public Element _AssessmentMethod { get; set; }
  /// <summary>
  /// The author of the information on the possible cause of the event.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// The result of the assessment regarding the relatedness of the suspected entity to the event.
  /// </summary>
  [JsonPropertyName("entityRelatedness")]
  public CodeableConcept? EntityRelatedness { get; set; }
  [JsonPropertyName("_entityRelatedness")]
  public Element _EntityRelatedness { get; set; }
}
/// <summary>
/// Describes the entity that is suspected to have caused the adverse event.
/// </summary>
public class AdverseEventSuspectEntity : BackboneElement {
  /// <summary>
  /// Information on the possible cause of the event.
  /// </summary>
  [JsonPropertyName("causality")]
  public AdverseEventSuspectEntityCausality? Causality { get; set; }
  [JsonPropertyName("_causality")]
  public Element _Causality { get; set; }
  /// <summary>
  /// Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
  /// </summary>
  [JsonPropertyName("instanceCodeableConcept")]
  public CodeableConcept InstanceCodeableConcept { get; set; }
  [JsonPropertyName("_instanceCodeableConcept")]
  public Element _InstanceCodeableConcept { get; set; }
  /// <summary>
  /// Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
  /// </summary>
  [JsonPropertyName("instanceReference")]
  public Reference InstanceReference { get; set; }
  [JsonPropertyName("_instanceReference")]
  public Element _InstanceReference { get; set; }
}
/// <summary>
/// The contributing factors suspected to have increased the probability or severity of the adverse event.
/// </summary>
public class AdverseEventContributingFactor : BackboneElement {
  /// <summary>
  /// The item that is suspected to have increased the probability or severity of the adverse event.
  /// </summary>
  [JsonPropertyName("itemReference")]
  public Reference ItemReference { get; set; }
  [JsonPropertyName("_itemReference")]
  public Element _ItemReference { get; set; }
  /// <summary>
  /// The item that is suspected to have increased the probability or severity of the adverse event.
  /// </summary>
  [JsonPropertyName("itemCodeableConcept")]
  public CodeableConcept ItemCodeableConcept { get; set; }
  [JsonPropertyName("_itemCodeableConcept")]
  public Element _ItemCodeableConcept { get; set; }
}
/// <summary>
/// Preventive actions that contributed to avoiding the adverse event.
/// </summary>
public class AdverseEventPreventiveAction : BackboneElement {
  /// <summary>
  /// The action that contributed to avoiding the adverse event.
  /// </summary>
  [JsonPropertyName("itemReference")]
  public Reference ItemReference { get; set; }
  [JsonPropertyName("_itemReference")]
  public Element _ItemReference { get; set; }
  /// <summary>
  /// The action that contributed to avoiding the adverse event.
  /// </summary>
  [JsonPropertyName("itemCodeableConcept")]
  public CodeableConcept ItemCodeableConcept { get; set; }
  [JsonPropertyName("_itemCodeableConcept")]
  public Element _ItemCodeableConcept { get; set; }
}
/// <summary>
/// The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
/// </summary>
public class AdverseEventMitigatingAction : BackboneElement {
  /// <summary>
  /// The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
  /// </summary>
  [JsonPropertyName("itemReference")]
  public Reference ItemReference { get; set; }
  [JsonPropertyName("_itemReference")]
  public Element _ItemReference { get; set; }
  /// <summary>
  /// The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
  /// </summary>
  [JsonPropertyName("itemCodeableConcept")]
  public CodeableConcept ItemCodeableConcept { get; set; }
  [JsonPropertyName("_itemCodeableConcept")]
  public Element _ItemCodeableConcept { get; set; }
}
/// <summary>
/// Supporting information relevant to the event.
/// </summary>
public class AdverseEventSupportingInfo : BackboneElement {
  /// <summary>
  /// Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action.
  /// </summary>
  [JsonPropertyName("itemReference")]
  public Reference ItemReference { get; set; }
  [JsonPropertyName("_itemReference")]
  public Element _ItemReference { get; set; }
  /// <summary>
  /// Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS).  Supporting information is not a contributing factor, preventive action, or mitigating action.
  /// </summary>
  [JsonPropertyName("itemCodeableConcept")]
  public CodeableConcept ItemCodeableConcept { get; set; }
  [JsonPropertyName("_itemCodeableConcept")]
  public Element _ItemCodeableConcept { get; set; }
}
public class AdverseEvent : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "AdverseEvent";
  /// <summary>
  /// Whether the event actually happened, or just had the potential to. Note that this is independent of whether anyone was affected or harmed or how severely.
  /// </summary>
  [JsonPropertyName("actuality")]
  public string Actuality { get; set; }
  [JsonPropertyName("_actuality")]
  public Element _Actuality { get; set; }
  /// <summary>
  /// The overall type of event, intended for search and filtering purposes.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// Specific event that occurred or that was averted, such as patient fall, wrong organ removed, or wrong blood transfused.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The contributing factors suspected to have increased the probability or severity of the adverse event.
  /// </summary>
  [JsonPropertyName("contributingFactor")]
  public AdverseEventContributingFactor?[] ContributingFactor { get; set; }
  [JsonPropertyName("_contributingFactor")]
  public Element[] _ContributingFactor { get; set; }
  /// <summary>
  /// Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
  /// </summary>
  [JsonPropertyName("detected")]
  public string? Detected { get; set; }
  [JsonPropertyName("_detected")]
  public Element _Detected { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. For example, if a medication administration was considered an adverse event because it resulted in a rash, then the encounter when the medication administration was given is the associated encounter. If the patient reports the AdverseEvent during a second encounter, that second encounter is not the associated encounter.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The information about where the adverse event occurred.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
  /// </summary>
  [JsonPropertyName("mitigatingAction")]
  public AdverseEventMitigatingAction?[] MitigatingAction { get; set; }
  [JsonPropertyName("_mitigatingAction")]
  public Element[] _MitigatingAction { get; set; }
  /// <summary>
  /// The date (and perhaps time) when the adverse event occurred.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// The date (and perhaps time) when the adverse event occurred.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// The date (and perhaps time) when the adverse event occurred.
  /// </summary>
  [JsonPropertyName("occurrenceTiming")]
  public Timing? OccurrenceTiming { get; set; }
  [JsonPropertyName("_occurrenceTiming")]
  public Element _OccurrenceTiming { get; set; }
  /// <summary>
  /// Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal.
  /// </summary>
  [JsonPropertyName("outcome")]
  public CodeableConcept? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// Indicates who or what participated in the adverse event and how they were involved.
  /// </summary>
  [JsonPropertyName("participant")]
  public AdverseEventParticipant?[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// Preventive actions that contributed to avoiding the adverse event.
  /// </summary>
  [JsonPropertyName("preventiveAction")]
  public AdverseEventPreventiveAction?[] PreventiveAction { get; set; }
  [JsonPropertyName("_preventiveAction")]
  public Element[] _PreventiveAction { get; set; }
  /// <summary>
  /// The recordedDate represents the date when this particular AdverseEvent record was created in the system, not the date of the most recent update.  The date of the last record modification can be retrieved from the resource metadata.
  /// </summary>
  [JsonPropertyName("recordedDate")]
  public string? RecordedDate { get; set; }
  [JsonPropertyName("_recordedDate")]
  public Element _RecordedDate { get; set; }
  /// <summary>
  /// Information on who recorded the adverse event.  May be the patient or a practitioner.
  /// </summary>
  [JsonPropertyName("recorder")]
  public Reference? Recorder { get; set; }
  [JsonPropertyName("_recorder")]
  public Element _Recorder { get; set; }
  /// <summary>
  /// Includes information about the reaction that occurred as a result of exposure to a substance (for example, a drug or a chemical).
  /// </summary>
  [JsonPropertyName("resultingCondition")]
  public Reference?[] ResultingCondition { get; set; }
  [JsonPropertyName("_resultingCondition")]
  public Element[] _ResultingCondition { get; set; }
  /// <summary>
  /// Using an example, a rash can have an AdverseEvent.resultingCondition.severity = severe, yet an AdverseEvent.seriousness = non-serious.  Alternatively, a medication given with the wrong dose (chemotherapy given with too low of a dose) can have an AdverseEvent.resultingCondition.severity = mild, yet a AdverseEvent.seriousness = serious.  Another example would be a beta blocker clinical trial where patients with asthma should be excluded, yet a patient with asthma was included and had an asthmatic episode where  AdverseEvent.resultingCondition.severity = mild, yet a AdverseEvent.seriousness = serious.
  /// </summary>
  [JsonPropertyName("seriousness")]
  public CodeableConcept? Seriousness { get; set; }
  [JsonPropertyName("_seriousness")]
  public Element _Seriousness { get; set; }
  /// <summary>
  /// This is not the reporting of the event to any regulatory or quality organization.  This is not the outcome of the patient's condition.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The research study that the subject is enrolled in.
  /// </summary>
  [JsonPropertyName("study")]
  public Reference?[] Study { get; set; }
  [JsonPropertyName("_study")]
  public Element[] _Study { get; set; }
  /// <summary>
  /// If AdverseEvent.resultingCondition differs among members of the group, then use Patient as the subject.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Supporting information relevant to the event.
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public AdverseEventSupportingInfo?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
  /// <summary>
  /// Describes the entity that is suspected to have caused the adverse event.
  /// </summary>
  [JsonPropertyName("suspectEntity")]
  public AdverseEventSuspectEntity?[] SuspectEntity { get; set; }
  [JsonPropertyName("_suspectEntity")]
  public Element[] _SuspectEntity { get; set; }
}
/// <summary>
/// Code Values for the AdverseEvent.actuality field
/// </summary>
public sealed class AdverseEventActualityCodes {
  public const string ACTUAL = "actual";
  public const string POTENTIAL = "potential";
}
/// <summary>
/// Code Values for the AdverseEvent.status field
/// </summary>
public sealed class AdverseEventStatusCodes {
  public const string IN_PROGRESS = "in-progress";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Details about each adverse reaction event linked to exposure to the identified substance.
/// </summary>
public class AllergyIntoleranceReaction : BackboneElement {
  /// <summary>
  /// Use the description to provide any details of a particular event of the occurred reaction such as circumstances, reaction specifics, what happened before/after. Information, related to the event, but not describing a particular care should be captured in the note field. For example: at the age of four, the patient was given penicillin for strep throat and subsequently developed severe hives.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Coding of the route of exposure with a terminology should be used wherever possible.
  /// </summary>
  [JsonPropertyName("exposureRoute")]
  public CodeableConcept? ExposureRoute { get; set; }
  [JsonPropertyName("_exposureRoute")]
  public Element _ExposureRoute { get; set; }
  /// <summary>
  /// Manifestation can be expressed as a single word, phrase or brief description. For example: nausea, rash or no reaction. It is preferable that manifestation should be coded with a terminology, where possible. The values entered here may be used to display on an application screen as part of a list of adverse reactions, as recommended in the UK NHS CUI guidelines.  Terminologies commonly used include, but are not limited to, SNOMED CT or ICD10.
  /// </summary>
  [JsonPropertyName("manifestation")]
  public CodeableConcept[] Manifestation { get; set; }
  [JsonPropertyName("_manifestation")]
  public Element[] _Manifestation { get; set; }
  /// <summary>
  /// Use this field to record information indirectly related to a particular event and not captured in the description. For example: Clinical records are no longer available, recorded based on information provided to the patient by her mother and her mother is deceased.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Record of the date and/or time of the onset of the Reaction.
  /// </summary>
  [JsonPropertyName("onset")]
  public string? Onset { get; set; }
  [JsonPropertyName("_onset")]
  public Element _Onset { get; set; }
  /// <summary>
  /// It is acknowledged that this assessment is very subjective. There may be some specific practice domains where objective scales have been applied. Objective scales can be included in this model as extensions.
  /// </summary>
  [JsonPropertyName("severity")]
  public string? Severity { get; set; }
  [JsonPropertyName("_severity")]
  public Element _Severity { get; set; }
  /// <summary>
  /// Coding of the specific substance (or pharmaceutical product) with a terminology capable of triggering decision support should be used wherever possible.  The 'code' element allows for the use of a specific substance or pharmaceutical product, or a group or class of substances. In the case of an allergy or intolerance to a class of substances, (for example, "penicillins"), the 'reaction.substance' element could be used to code the specific substance that was identified as having caused the reaction (for example, "amoxycillin"). Duplication of the value in the 'code' and 'reaction.substance' elements is acceptable when a specific substance has been recorded in 'code'.
  /// </summary>
  [JsonPropertyName("substance")]
  public CodeableConcept? Substance { get; set; }
  [JsonPropertyName("_substance")]
  public Element _Substance { get; set; }
}
/// <summary>
/// Code Values for the AllergyIntolerance.reaction.severity field
/// </summary>
public sealed class AllergyIntoleranceReactionSeverityCodes {
  public const string MILD = "mild";
  public const string MODERATE = "moderate";
  public const string SEVERE = "severe";
}
/// <summary>
/// To record a clinical assessment of a propensity, or potential risk to an individual, of an adverse reaction upon future exposure to the specified substance, or class of substance.
/// </summary>
public class AllergyIntolerance : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "AllergyIntolerance";
  /// <summary>
  /// The recorder takes responsibility for the content, but can reference the source from where they got it.
  /// </summary>
  [JsonPropertyName("asserter")]
  public Reference? Asserter { get; set; }
  [JsonPropertyName("_asserter")]
  public Element _Asserter { get; set; }
  /// <summary>
  /// This data element has been included because it is currently being captured in some clinical systems. This data can be derived from the substance where coding systems are used, and is effectively redundant in that situation.  When searching on category, consider the implications of AllergyIntolerance resources without a category.  For example, when searching on category = medication, medication allergies that don't have a category valued will not be returned.  Refer to [search](search.html) for more information on how to search category with a :missing modifier to get allergies that don't have a category.  Additionally, category should be used with caution because category can be subjective based on the sender.
  /// </summary>
  [JsonPropertyName("category")]
  public string?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// AllergyIntolerance.clinicalStatus should be present if verificationStatus is not entered-in-error and the AllergyIntolerance.code isn't negated (No Known Allergy, No Drug Allergy, No Food Allergy, No Latex Allergy).
  /// Refer to [discussion](extensibility.html#Special-Case) if clincalStatus is missing data.
  /// The data type is CodeableConcept because clinicalStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
  /// </summary>
  [JsonPropertyName("clinicalStatus")]
  public CodeableConcept? ClinicalStatus { get; set; }
  [JsonPropertyName("_clinicalStatus")]
  public Element _ClinicalStatus { get; set; }
  /// <summary>
  /// It is strongly recommended that this element be populated using a terminology, where possible. For example, some terminologies used include RxNorm, SNOMED CT, DM+D, NDFRT, ICD-9, IDC-10, UNII, and ATC. Plain text should only be used if there is no appropriate terminology available. Additional details can be specified in the text.When a substance or product code is specified for the 'code' element, the "default" semantic context is that this is a positive statement of an allergy or intolerance (depending on the value of the 'type' element, if present) condition to the specified substance/product.  In the corresponding SNOMED CT allergy model, the specified substance/product is the target (destination) of the "Causative agent" relationship.The 'substanceExposureRisk' extension is available as a structured and more flexible alternative to the 'code' element for making positive or negative allergy or intolerance statements.  This extension provides the capability to make "no known allergy" (or "no risk of adverse reaction") statements regarding any coded substance/product (including cases when a pre-coordinated "no allergy to x" concept for that substance/product does not exist).  If the 'substanceExposureRisk' extension is present, the AllergyIntolerance.code element SHALL be omitted.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The default criticality value for any propensity to an adverse reaction should be 'Low Risk', indicating at the very least a relative contraindication to deliberate or voluntary exposure to the substance. 'High Risk' is flagged if the clinician has identified a propensity for a more serious or potentially life-threatening reaction, such as anaphylaxis, and implies an absolute contraindication to deliberate or voluntary exposure to the substance. If this element is missing, the criticality is unknown (though it may be known elsewhere).  Systems that capture a severity at the condition level are actually representing the concept of criticality whereas the severity documented at the reaction level is representing the true reaction severity.  Existing systems that are capturing both condition criticality and reaction severity may use the term "severity" to represent both.  Criticality is the worst it could be in the future (i.e. situation-agnostic) whereas severity is situation-dependent.
  /// </summary>
  [JsonPropertyName("criticality")]
  public string? Criticality { get; set; }
  [JsonPropertyName("_criticality")]
  public Element _Criticality { get; set; }
  /// <summary>
  /// The encounter when the allergy or intolerance was asserted.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This date may be replicated by one of the Onset of Reaction dates. Where a textual representation of the date of last occurrence is required e.g. 'In Childhood, '10 years ago' the AllergyIntolerance.note element should be used.
  /// </summary>
  [JsonPropertyName("lastOccurrence")]
  public string? LastOccurrence { get; set; }
  [JsonPropertyName("_lastOccurrence")]
  public Element _LastOccurrence { get; set; }
  /// <summary>
  /// For example: including reason for flagging a seriousness of 'High Risk'; and instructions related to future exposure or administration of the substance, such as administration within an Intensive Care Unit or under corticosteroid cover. The notes should be related to an allergy or intolerance as a condition in general and not related to any particular episode of it. For episode notes and descriptions, use AllergyIntolerance.event.description and  AllergyIntolerance.event.notes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  /// </summary>
  [JsonPropertyName("onsetDateTime")]
  public string? OnsetDateTime { get; set; }
  [JsonPropertyName("_onsetDateTime")]
  public Element _OnsetDateTime { get; set; }
  /// <summary>
  /// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  /// </summary>
  [JsonPropertyName("onsetAge")]
  public Age? OnsetAge { get; set; }
  [JsonPropertyName("_onsetAge")]
  public Element _OnsetAge { get; set; }
  /// <summary>
  /// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  /// </summary>
  [JsonPropertyName("onsetPeriod")]
  public Period? OnsetPeriod { get; set; }
  [JsonPropertyName("_onsetPeriod")]
  public Element _OnsetPeriod { get; set; }
  /// <summary>
  /// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  /// </summary>
  [JsonPropertyName("onsetRange")]
  public Range? OnsetRange { get; set; }
  [JsonPropertyName("_onsetRange")]
  public Element _OnsetRange { get; set; }
  /// <summary>
  /// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  /// </summary>
  [JsonPropertyName("onsetString")]
  public string? OnsetString { get; set; }
  [JsonPropertyName("_onsetString")]
  public Element _OnsetString { get; set; }
  /// <summary>
  /// The patient who has the allergy or intolerance.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// Details about each adverse reaction event linked to exposure to the identified substance.
  /// </summary>
  [JsonPropertyName("reaction")]
  public AllergyIntoleranceReaction?[] Reaction { get; set; }
  [JsonPropertyName("_reaction")]
  public Element[] _Reaction { get; set; }
  /// <summary>
  /// The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
  /// </summary>
  [JsonPropertyName("recordedDate")]
  public string? RecordedDate { get; set; }
  [JsonPropertyName("_recordedDate")]
  public Element _RecordedDate { get; set; }
  /// <summary>
  /// Individual who recorded the record and takes responsibility for its content.
  /// </summary>
  [JsonPropertyName("recorder")]
  public Reference? Recorder { get; set; }
  [JsonPropertyName("_recorder")]
  public Element _Recorder { get; set; }
  /// <summary>
  /// Allergic (typically immune-mediated) reactions have been traditionally regarded as an indicator for potential escalation to significant future risk. Contemporary knowledge suggests that some reactions previously thought to be immune-mediated are, in fact, non-immune, but in some cases can still pose a life threatening risk. It is acknowledged that many clinicians might not be in a position to distinguish the mechanism of a particular reaction. Often the term "allergy" is used rather generically and may overlap with the use of "intolerance" - in practice the boundaries between these two concepts might not be well-defined or understood. This data element is included nevertheless, because many legacy systems have captured this attribute. Immunologic testing may provide supporting evidence for the basis of the reaction and the causative substance, but no tests are 100% sensitive or specific for sensitivity to a particular substance. If, as is commonly the case, it is unclear whether the reaction is due to an allergy or an intolerance, then the type element should be omitted from the resource.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The data type is CodeableConcept because verificationStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
  /// </summary>
  [JsonPropertyName("verificationStatus")]
  public CodeableConcept? VerificationStatus { get; set; }
  [JsonPropertyName("_verificationStatus")]
  public Element _VerificationStatus { get; set; }
}
/// <summary>
/// Code Values for the AllergyIntolerance.category field
/// </summary>
public sealed class AllergyIntoleranceCategoryCodes {
  public const string FOOD = "food";
  public const string MEDICATION = "medication";
  public const string ENVIRONMENT = "environment";
  public const string BIOLOGIC = "biologic";
}
/// <summary>
/// Code Values for the AllergyIntolerance.criticality field
/// </summary>
public sealed class AllergyIntoleranceCriticalityCodes {
  public const string LOW = "low";
  public const string HIGH = "high";
  public const string UNABLE_TO_ASSESS = "unable-to-assess";
}
/// <summary>
/// Code Values for the AllergyIntolerance.type field
/// </summary>
public sealed class AllergyIntoleranceTypeCodes {
  public const string ALLERGY = "allergy";
  public const string INTOLERANCE = "intolerance";
}
/// <summary>
/// List of participants involved in the appointment.
/// </summary>
public class AppointmentParticipant : BackboneElement {
  /// <summary>
  /// A Person, Location/HealthcareService or Device that is participating in the appointment.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference? Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Participation period of the actor.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Whether this participant is required to be present at the meeting. This covers a use-case where two doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
  /// </summary>
  [JsonPropertyName("required")]
  public string? Required { get; set; }
  [JsonPropertyName("_required")]
  public Element _Required { get; set; }
  /// <summary>
  /// Participation status of the actor.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The role of the participant can be used to declare what the actor will be doing in the scope of this appointment.If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.This value SHALL be the same when creating an AppointmentResponse so that they can be matched, and subsequently update the Appointment.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Code Values for the Appointment.participant.required field
/// </summary>
public sealed class AppointmentParticipantRequiredCodes {
  public const string REQUIRED = "required";
  public const string OPTIONAL = "optional";
  public const string INFORMATION_ONLY = "information-only";
}
/// <summary>
/// Code Values for the Appointment.participant.status field
/// </summary>
public sealed class AppointmentParticipantStatusCodes {
  public const string ACCEPTED = "accepted";
  public const string DECLINED = "declined";
  public const string TENTATIVE = "tentative";
  public const string NEEDS_ACTION = "needs-action";
}
public class Appointment : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Appointment";
  /// <summary>
  /// The style of appointment or patient that has been booked in the slot (not service type).
  /// </summary>
  [JsonPropertyName("appointmentType")]
  public CodeableConcept? AppointmentType { get; set; }
  [JsonPropertyName("_appointmentType")]
  public Element _AppointmentType { get; set; }
  /// <summary>
  /// The service request this appointment is allocated to assess (e.g. incoming referral or procedure request).
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.
  /// </summary>
  [JsonPropertyName("cancelationReason")]
  public CodeableConcept? CancelationReason { get; set; }
  [JsonPropertyName("_cancelationReason")]
  public Element _CancelationReason { get; set; }
  /// <summary>
  /// Additional text to aid in facilitating the appointment. For instance, a comment might be, "patient should proceed immediately to infusion room upon arrival"Where this is a planned appointment and the start/end dates are not set then this field can be used to provide additional guidance on the details of the appointment request, including any restrictions on when to book it.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// This property is required for many use cases where the age of an appointment is considered in processing workflows for scheduling and billing of appointments.
  /// </summary>
  [JsonPropertyName("created")]
  public string? Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Date/Time that the appointment is to conclude.
  /// </summary>
  [JsonPropertyName("end")]
  public string? End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.
  /// </summary>
  [JsonPropertyName("minutesDuration")]
  public uint? MinutesDuration { get; set; }
  [JsonPropertyName("_minutesDuration")]
  public Element _MinutesDuration { get; set; }
  /// <summary>
  /// List of participants involved in the appointment.
  /// </summary>
  [JsonPropertyName("participant")]
  public AppointmentParticipant[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// While Appointment.comment contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).
  /// </summary>
  [JsonPropertyName("patientInstruction")]
  public string? PatientInstruction { get; set; }
  [JsonPropertyName("_patientInstruction")]
  public Element _PatientInstruction { get; set; }
  /// <summary>
  /// Seeking implementer feedback on this property and how interoperable it is.Using an extension to record a CodeableConcept for named values may be tested at a future connectathon.
  /// </summary>
  [JsonPropertyName("priority")]
  public uint? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// The reason that this appointment is being scheduled. This is more clinical than administrative. This can be coded, or as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// This does not introduce a capacity for recurring appointments.
  /// </summary>
  [JsonPropertyName("requestedPeriod")]
  public Period?[] RequestedPeriod { get; set; }
  [JsonPropertyName("_requestedPeriod")]
  public Element[] _RequestedPeriod { get; set; }
  /// <summary>
  /// A broad categorization of the service that is to be performed during this appointment.
  /// </summary>
  [JsonPropertyName("serviceCategory")]
  public CodeableConcept?[] ServiceCategory { get; set; }
  [JsonPropertyName("_serviceCategory")]
  public Element[] _ServiceCategory { get; set; }
  /// <summary>
  /// For a provider to provider appointment the code "FOLLOWUP" may be appropriate, as this is expected to be discussing some patient that was seen in the past.
  /// </summary>
  [JsonPropertyName("serviceType")]
  public CodeableConcept?[] ServiceType { get; set; }
  [JsonPropertyName("_serviceType")]
  public Element[] _ServiceType { get; set; }
  /// <summary>
  /// The slots from the participants' schedules that will be filled by the appointment.
  /// </summary>
  [JsonPropertyName("slot")]
  public Reference?[] Slot { get; set; }
  [JsonPropertyName("_slot")]
  public Element[] _Slot { get; set; }
  /// <summary>
  /// The specialty of a practitioner that would be required to perform the service requested in this appointment.
  /// </summary>
  [JsonPropertyName("specialty")]
  public CodeableConcept?[] Specialty { get; set; }
  [JsonPropertyName("_specialty")]
  public Element[] _Specialty { get; set; }
  /// <summary>
  /// Date/Time that the appointment is to take place.
  /// </summary>
  [JsonPropertyName("start")]
  public string? Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
  /// <summary>
  /// If the Appointment's status is "cancelled" then all participants are expected to have their calendars released for the appointment period, and as such any Slots that were marked as BUSY can be re-set to FREE.
  /// 
  /// This element is labeled as a modifier because the status contains the code entered-in-error that mark the Appointment as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Additional information to support the appointment provided when making the appointment.
  /// </summary>
  [JsonPropertyName("supportingInformation")]
  public Reference?[] SupportingInformation { get; set; }
  [JsonPropertyName("_supportingInformation")]
  public Element[] _SupportingInformation { get; set; }
}
/// <summary>
/// Code Values for the Appointment.status field
/// </summary>
public sealed class AppointmentStatusCodes {
  public const string PROPOSED = "proposed";
  public const string PENDING = "pending";
  public const string BOOKED = "booked";
  public const string ARRIVED = "arrived";
  public const string FULFILLED = "fulfilled";
  public const string CANCELLED = "cancelled";
  public const string NOSHOW = "noshow";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string CHECKED_IN = "checked-in";
  public const string WAITLIST = "waitlist";
}
public class AppointmentResponse : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "AppointmentResponse";
  /// <summary>
  /// A Person, Location, HealthcareService, or Device that is participating in the appointment.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference? Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Appointment that this response is replying to.
  /// </summary>
  [JsonPropertyName("appointment")]
  public Reference Appointment { get; set; }
  [JsonPropertyName("_appointment")]
  public Element _Appointment { get; set; }
  /// <summary>
  /// This comment is particularly important when the responder is declining, tentatively accepting or requesting another time to indicate the reasons why.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
  /// </summary>
  [JsonPropertyName("end")]
  public string? End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the code entered-in-error that marks the participant as not currently valid.
  /// </summary>
  [JsonPropertyName("participantStatus")]
  public string ParticipantStatus { get; set; }
  [JsonPropertyName("_participantStatus")]
  public Element _ParticipantStatus { get; set; }
  /// <summary>
  /// The role of the participant can be used to declare what the actor will be doing in the scope of the referenced appointment.If the actor is not specified, then it is expected that the actor will be filled in at a later stage of planning.This value SHALL be the same as specified on the referenced Appointment so that they can be matched, and subsequently updated.
  /// </summary>
  [JsonPropertyName("participantType")]
  public CodeableConcept?[] ParticipantType { get; set; }
  [JsonPropertyName("_participantType")]
  public Element[] _ParticipantType { get; set; }
  /// <summary>
  /// This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the start time.
  /// </summary>
  [JsonPropertyName("start")]
  public string? Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
}
/// <summary>
/// Code Values for the AppointmentResponse.participantStatus field
/// </summary>
public sealed class AppointmentResponseParticipantStatusCodes {
  public const string ACCEPTED = "accepted";
  public const string DECLINED = "declined";
  public const string TENTATIVE = "tentative";
  public const string NEEDS_ACTION = "needs-action";
}
/// <summary>
/// Logical network location for application activity, if the activity has a network location.
/// </summary>
public class AuditEventAgentNetwork : BackboneElement {
  /// <summary>
  /// This could be a device id, IP address or some other identifier associated with a device.
  /// </summary>
  [JsonPropertyName("address")]
  public string? Address { get; set; }
  [JsonPropertyName("_address")]
  public Element _Address { get; set; }
  /// <summary>
  /// An identifier for the type of network access point that originated the audit event.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the AuditEvent.agent.network.type field
/// </summary>
public sealed class AuditEventAgentNetworkTypeCodes {
  public const string THE = "The";
}
/// <summary>
/// Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
/// 
/// For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
/// </summary>
public class AuditEventAgent : BackboneElement {
  /// <summary>
  /// Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
  /// </summary>
  [JsonPropertyName("altId")]
  public string? AltId { get; set; }
  [JsonPropertyName("_altId")]
  public Element _AltId { get; set; }
  /// <summary>
  /// Where the event occurred.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// Type of media involved. Used when the event is about exporting/importing onto media.
  /// </summary>
  [JsonPropertyName("media")]
  public Coding? Media { get; set; }
  [JsonPropertyName("_media")]
  public Element _Media { get; set; }
  /// <summary>
  /// Human-meaningful name for the agent.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Logical network location for application activity, if the activity has a network location.
  /// </summary>
  [JsonPropertyName("network")]
  public AuditEventAgentNetwork? Network { get; set; }
  [JsonPropertyName("_network")]
  public Element _Network { get; set; }
  /// <summary>
  /// For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
  /// </summary>
  [JsonPropertyName("policy")]
  public string?[] Policy { get; set; }
  [JsonPropertyName("_policy")]
  public Element[] _Policy { get; set; }
  /// <summary>
  /// Use AuditEvent.agent.purposeOfUse when you know that is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
  /// </summary>
  [JsonPropertyName("purposeOfUse")]
  public CodeableConcept?[] PurposeOfUse { get; set; }
  [JsonPropertyName("_purposeOfUse")]
  public Element[] _PurposeOfUse { get; set; }
  /// <summary>
  /// There can only be one initiator. If the initiator is not clear, then do not choose any one agent as the initiator.
  /// </summary>
  [JsonPropertyName("requestor")]
  public bool Requestor { get; set; }
  [JsonPropertyName("_requestor")]
  public Element _Requestor { get; set; }
  /// <summary>
  /// Should be all the relevant roles (Functional and Structural) inclusive of the value in .agent.type.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept?[] Role { get; set; }
  [JsonPropertyName("_role")]
  public Element[] _Role { get; set; }
  /// <summary>
  /// The most relevant role code for how the agent participated in the activity.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Where a User ID is available it will go into who.identifier.
  /// </summary>
  [JsonPropertyName("who")]
  public Reference? Who { get; set; }
  [JsonPropertyName("_who")]
  public Element _Who { get; set; }
}
/// <summary>
/// Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
/// </summary>
public class AuditEventSource : BackboneElement {
  /// <summary>
  /// Identifier of the source where the event was detected.
  /// </summary>
  [JsonPropertyName("observer")]
  public Reference Observer { get; set; }
  [JsonPropertyName("_observer")]
  public Element _Observer { get; set; }
  /// <summary>
  /// Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.
  /// </summary>
  [JsonPropertyName("site")]
  public string? Site { get; set; }
  [JsonPropertyName("_site")]
  public Element _Site { get; set; }
  /// <summary>
  /// Code specifying the type of source where event originated.
  /// </summary>
  [JsonPropertyName("type")]
  public Coding?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Tagged value pairs for conveying additional information about the entity.
/// </summary>
public class AuditEventEntityDetail : BackboneElement {
  /// <summary>
  /// The type of extra detail provided in the value.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The value can be string when known to be a string, else base64 encoding should be used to protect binary or undefined content.  The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The value can be string when known to be a string, else base64 encoding should be used to protect binary or undefined content.  The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
  /// </summary>
  [JsonPropertyName("valueBase64Binary")]
  public string ValueBase64Binary { get; set; }
  [JsonPropertyName("_valueBase64Binary")]
  public Element _ValueBase64Binary { get; set; }
}
/// <summary>
/// Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
/// </summary>
public class AuditEventEntity : BackboneElement {
  /// <summary>
  /// Tagged value pairs for conveying additional information about the entity.
  /// </summary>
  [JsonPropertyName("detail")]
  public AuditEventEntityDetail?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// This can be used to provide an audit trail for data, over time, as it passes through the system.
  /// </summary>
  [JsonPropertyName("lifecycle")]
  public Coding? Lifecycle { get; set; }
  [JsonPropertyName("_lifecycle")]
  public Element _Lifecycle { get; set; }
  /// <summary>
  /// This field may be used in a query/report to identify audit events for a specific person.  For example, where multiple synonymous entity identifiers (patient number, medical record number, encounter number, etc.) have been used.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The meaning and secondary-encoding of the content of base64 encoded blob is specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and AuditEvent.entity.role.  The base64 is a general-use and safe container for event specific data blobs regardless of the encoding used by the transaction being recorded.  An AuditEvent consuming application must understand the event it is consuming and the formats used by the event. For example, if auditing an Oracle network database access, the Oracle formats must be understood as they will be simply encoded in the base64binary blob.
  /// </summary>
  [JsonPropertyName("query")]
  public string? Query { get; set; }
  [JsonPropertyName("_query")]
  public Element _Query { get; set; }
  /// <summary>
  /// Code representing the role the entity played in the event being audited.
  /// </summary>
  [JsonPropertyName("role")]
  public Coding? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
  /// <summary>
  /// Copied from entity meta security tags.
  /// </summary>
  [JsonPropertyName("securityLabel")]
  public Coding?[] SecurityLabel { get; set; }
  [JsonPropertyName("_securityLabel")]
  public Element[] _SecurityLabel { get; set; }
  /// <summary>
  /// This value is distinct from the user's role or any user relationship to the entity.
  /// </summary>
  [JsonPropertyName("type")]
  public Coding? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Identifies a specific instance of the entity. The reference should be version specific.
  /// </summary>
  [JsonPropertyName("what")]
  public Reference? What { get; set; }
  [JsonPropertyName("_what")]
  public Element _What { get; set; }
}
public class AuditEvent : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "AuditEvent";
  /// <summary>
  /// Indicator for type of action performed during the event that generated the audit.
  /// </summary>
  [JsonPropertyName("action")]
  public string? Action { get; set; }
  [JsonPropertyName("_action")]
  public Element _Action { get; set; }
  /// <summary>
  /// Several agents may be associated (i.e. have some responsibility for an activity) with an event or activity.
  /// 
  /// For example, an activity may be initiated by one user for other users or involve more than one user. However, only one user may be the initiator/requestor for the activity.
  /// </summary>
  [JsonPropertyName("agent")]
  public AuditEventAgent[] Agent { get; set; }
  [JsonPropertyName("_agent")]
  public Element[] _Agent { get; set; }
  /// <summary>
  /// Required unless the values for event identification, agent identification, and audit source identification are sufficient to document the entire auditable event. Because events may have more than one entity, this group can be a repeating set of values.
  /// </summary>
  [JsonPropertyName("entity")]
  public AuditEventEntity?[] Entity { get; set; }
  [JsonPropertyName("_entity")]
  public Element[] _Entity { get; set; }
  /// <summary>
  /// In some cases a "success" may be partial, for example, an incomplete or interrupted transfer of a radiological study. For the purpose of establishing accountability, these distinctions are not relevant.
  /// </summary>
  [JsonPropertyName("outcome")]
  public CodeableConcept? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Use AuditEvent.agent.purposeOfUse when you know that it is specific to the agent, otherwise use AuditEvent.purposeOfEvent. For example, during a machine-to-machine transfer it might not be obvious to the audit system who caused the event, but it does know why.
  /// </summary>
  [JsonPropertyName("purposeOfEvent")]
  public CodeableConcept?[] PurposeOfEvent { get; set; }
  [JsonPropertyName("_purposeOfEvent")]
  public Element[] _PurposeOfEvent { get; set; }
  /// <summary>
  /// In a distributed system, some sort of common time base (e.g. an NTP [RFC1305] server) is a good implementation tactic.
  /// </summary>
  [JsonPropertyName("recorded")]
  public string Recorded { get; set; }
  [JsonPropertyName("_recorded")]
  public Element _Recorded { get; set; }
  /// <summary>
  /// ATNA will map this to the SYSLOG PRI element.
  /// </summary>
  [JsonPropertyName("severity")]
  public string? Severity { get; set; }
  [JsonPropertyName("_severity")]
  public Element _Severity { get; set; }
  /// <summary>
  /// Since multi-tier, distributed, or composite applications make source identification ambiguous, this collection of fields may repeat for each application or process actively involved in the event. For example, multiple value-sets can identify participating web servers, application processes, and database server threads in an n-tier distributed application. Passive event participants (e.g. low-level network transports) need not be identified.
  /// </summary>
  [JsonPropertyName("source")]
  public AuditEventSource Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// Identifier for the category of event.
  /// </summary>
  [JsonPropertyName("subtype")]
  public Coding?[] Subtype { get; set; }
  [JsonPropertyName("_subtype")]
  public Element[] _Subtype { get; set; }
  /// <summary>
  /// Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
  /// </summary>
  [JsonPropertyName("type")]
  public Coding Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the AuditEvent.action field
/// </summary>
public sealed class AuditEventActionCodes {
  public const string TYPE = "Type";
}
/// <summary>
/// Code Values for the AuditEvent.severity field
/// </summary>
public sealed class AuditEventSeverityCodes {
  public const string EMERGENCY = "Emergency";
  public const string ALERT = "Alert";
  public const string CRITICAL = "Critical";
  public const string ERROR = "Error";
  public const string WARNING = "Warning";
  public const string NOTICE = "Notice";
  public const string INFORMATIONAL = "Informational";
  public const string DEBUG = "Debug";
}
/// <summary>
/// Need some way to safely (without breaking interoperability) allow implementers to exchange content not supported by the initial set of declared resources.
/// </summary>
public class Basic : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Basic";
  /// <summary>
  /// Indicates who was responsible for creating the resource instance.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// Because resource references will only be able to indicate 'Basic', the type of reference will need to be specified in a Profile identified as part of the resource.  Refer to the resource notes section for information on appropriate terminologies for this code.
  /// 
  /// This element is labeled as a modifier because it defines the meaning of the resource and cannot be ignored.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Identifies when the resource was first created.
  /// </summary>
  [JsonPropertyName("created")]
  public string? Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// Identifier assigned to the resource for business purposes, outside the context of FHIR.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Optional as not all potential resources will have subjects.  Resources associated with multiple subjects can handle this via extension.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// There are situations where it is useful or required to handle pure binary content using the same framework as other resources.
/// </summary>
public class Binary : Resource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Binary";
  /// <summary>
  /// MimeType of the binary content represented as a standard MimeType (BCP 13).
  /// </summary>
  [JsonPropertyName("contentType")]
  public string ContentType { get; set; }
  [JsonPropertyName("_contentType")]
  public Element _ContentType { get; set; }
  /// <summary>
  /// If the content type is itself base64 encoding, then this will be base64 encoded twice - what is created by un-base64ing the content must be the specified content type.
  /// </summary>
  [JsonPropertyName("data")]
  public string? Data { get; set; }
  [JsonPropertyName("_data")]
  public Element _Data { get; set; }
  /// <summary>
  /// Very often, a server will also know of a resource that references the binary, and can automatically apply the appropriate access rules based on that reference. However, there are some circumstances where this is not appropriate, e.g. the binary is uploaded directly to the server without any linking resource, the binary is referred to from multiple different resources, and/or the binary is content such as an application logo that has less protection than any of the resources that reference it.
  /// </summary>
  [JsonPropertyName("securityContext")]
  public Reference? SecurityContext { get; set; }
  [JsonPropertyName("_securityContext")]
  public Element _SecurityContext { get; set; }
}
/// <summary>
/// Code Values for the Binary.contentType field
/// </summary>
public sealed class BinaryContentTypeCodes {
  public const string MIMETYPE = "MimeType";
}
/// <summary>
/// How this product was collected.
/// </summary>
public class BiologicallyDerivedProductCollection : BackboneElement {
  /// <summary>
  /// Time of product collection.
  /// </summary>
  [JsonPropertyName("collectedDateTime")]
  public string? CollectedDateTime { get; set; }
  [JsonPropertyName("_collectedDateTime")]
  public Element _CollectedDateTime { get; set; }
  /// <summary>
  /// Time of product collection.
  /// </summary>
  [JsonPropertyName("collectedPeriod")]
  public Period? CollectedPeriod { get; set; }
  [JsonPropertyName("_collectedPeriod")]
  public Element _CollectedPeriod { get; set; }
  /// <summary>
  /// Healthcare professional who is performing the collection.
  /// </summary>
  [JsonPropertyName("collector")]
  public Reference? Collector { get; set; }
  [JsonPropertyName("_collector")]
  public Element _Collector { get; set; }
  /// <summary>
  /// The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
}
/// <summary>
/// Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
/// </summary>
public class BiologicallyDerivedProductProcessing : BackboneElement {
  /// <summary>
  /// Substance added during processing.
  /// </summary>
  [JsonPropertyName("additive")]
  public Reference? Additive { get; set; }
  [JsonPropertyName("_additive")]
  public Element _Additive { get; set; }
  /// <summary>
  /// Description of of processing.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Procesing code.
  /// </summary>
  [JsonPropertyName("procedure")]
  public CodeableConcept? Procedure { get; set; }
  [JsonPropertyName("_procedure")]
  public Element _Procedure { get; set; }
  /// <summary>
  /// Time of processing.
  /// </summary>
  [JsonPropertyName("timeDateTime")]
  public string? TimeDateTime { get; set; }
  [JsonPropertyName("_timeDateTime")]
  public Element _TimeDateTime { get; set; }
  /// <summary>
  /// Time of processing.
  /// </summary>
  [JsonPropertyName("timePeriod")]
  public Period? TimePeriod { get; set; }
  [JsonPropertyName("_timePeriod")]
  public Element _TimePeriod { get; set; }
}
/// <summary>
/// Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
/// </summary>
public class BiologicallyDerivedProductManipulation : BackboneElement {
  /// <summary>
  /// Description of manipulation.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Time of manipulation.
  /// </summary>
  [JsonPropertyName("timeDateTime")]
  public string? TimeDateTime { get; set; }
  [JsonPropertyName("_timeDateTime")]
  public Element _TimeDateTime { get; set; }
  /// <summary>
  /// Time of manipulation.
  /// </summary>
  [JsonPropertyName("timePeriod")]
  public Period? TimePeriod { get; set; }
  [JsonPropertyName("_timePeriod")]
  public Element _TimePeriod { get; set; }
}
/// <summary>
/// Product storage.
/// </summary>
public class BiologicallyDerivedProductStorage : BackboneElement {
  /// <summary>
  /// Description of storage.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Storage timeperiod.
  /// </summary>
  [JsonPropertyName("duration")]
  public Period? Duration { get; set; }
  [JsonPropertyName("_duration")]
  public Element _Duration { get; set; }
  /// <summary>
  /// Temperature scale used.
  /// </summary>
  [JsonPropertyName("scale")]
  public string? Scale { get; set; }
  [JsonPropertyName("_scale")]
  public Element _Scale { get; set; }
  /// <summary>
  /// Storage temperature.
  /// </summary>
  [JsonPropertyName("temperature")]
  public decimal? Temperature { get; set; }
  [JsonPropertyName("_temperature")]
  public Element _Temperature { get; set; }
}
/// <summary>
/// Code Values for the BiologicallyDerivedProduct.storage.scale field
/// </summary>
public sealed class BiologicallyDerivedProductStorageScaleCodes {
  public const string FARENHEIT = "farenheit";
  public const string CELSIUS = "celsius";
  public const string KELVIN = "kelvin";
}
public class BiologicallyDerivedProduct : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "BiologicallyDerivedProduct";
  /// <summary>
  /// How this product was collected.
  /// </summary>
  [JsonPropertyName("collection")]
  public BiologicallyDerivedProductCollection? Collection { get; set; }
  [JsonPropertyName("_collection")]
  public Element _Collection { get; set; }
  /// <summary>
  /// This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
  /// </summary>
  [JsonPropertyName("manipulation")]
  public BiologicallyDerivedProductManipulation? Manipulation { get; set; }
  [JsonPropertyName("_manipulation")]
  public Element _Manipulation { get; set; }
  /// <summary>
  /// For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
  /// </summary>
  [JsonPropertyName("parent")]
  public Reference?[] Parent { get; set; }
  [JsonPropertyName("_parent")]
  public Element[] _Parent { get; set; }
  /// <summary>
  /// Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
  /// </summary>
  [JsonPropertyName("processing")]
  public BiologicallyDerivedProductProcessing?[] Processing { get; set; }
  [JsonPropertyName("_processing")]
  public Element[] _Processing { get; set; }
  /// <summary>
  /// Broad category of this product.
  /// </summary>
  [JsonPropertyName("productCategory")]
  public string? ProductCategory { get; set; }
  [JsonPropertyName("_productCategory")]
  public Element _ProductCategory { get; set; }
  /// <summary>
  /// A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
  /// </summary>
  [JsonPropertyName("productCode")]
  public CodeableConcept? ProductCode { get; set; }
  [JsonPropertyName("_productCode")]
  public Element _ProductCode { get; set; }
  /// <summary>
  /// Number of discrete units within this product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public int? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Procedure request to obtain this biologically derived product.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference?[] Request { get; set; }
  [JsonPropertyName("_request")]
  public Element[] _Request { get; set; }
  /// <summary>
  /// Whether the product is currently available.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Product storage.
  /// </summary>
  [JsonPropertyName("storage")]
  public BiologicallyDerivedProductStorage?[] Storage { get; set; }
  [JsonPropertyName("_storage")]
  public Element[] _Storage { get; set; }
}
/// <summary>
/// Code Values for the BiologicallyDerivedProduct.productCategory field
/// </summary>
public sealed class BiologicallyDerivedProductProductCategoryCodes {
  public const string ORGAN = "organ";
  public const string TISSUE = "tissue";
  public const string FLUID = "fluid";
  public const string CELLS = "cells";
  public const string BIOLOGICALAGENT = "biologicalAgent";
}
/// <summary>
/// Code Values for the BiologicallyDerivedProduct.status field
/// </summary>
public sealed class BiologicallyDerivedProductStatusCodes {
  public const string AVAILABLE = "available";
  public const string UNAVAILABLE = "unavailable";
}
public class BodyStructure : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "BodyStructure";
  /// <summary>
  /// This element is labeled as a modifier because it may be used to mark that the resource was created in error.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// This description could include any visual markings used to orientate the viewer e.g. external reference points, special sutures, ink markings.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Identifier for this instance of the anatomical structure.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Image or images used to identify a location.
  /// </summary>
  [JsonPropertyName("image")]
  public Attachment?[] Image { get; set; }
  [JsonPropertyName("_image")]
  public Element[] _Image { get; set; }
  /// <summary>
  /// The anatomical location or region of the specimen, lesion, or body structure.
  /// </summary>
  [JsonPropertyName("location")]
  public CodeableConcept? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// Qualifier to refine the anatomical location.  These include qualifiers for laterality, relative location, directionality, number, and plane.
  /// </summary>
  [JsonPropertyName("locationQualifier")]
  public CodeableConcept?[] LocationQualifier { get; set; }
  [JsonPropertyName("_locationQualifier")]
  public Element[] _LocationQualifier { get; set; }
  /// <summary>
  /// The minimum cardinality of 0 supports the use case of specifying a location without defining a morphology.
  /// </summary>
  [JsonPropertyName("morphology")]
  public CodeableConcept? Morphology { get; set; }
  [JsonPropertyName("_morphology")]
  public Element _Morphology { get; set; }
  /// <summary>
  /// The person to which the body site belongs.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
}
/// <summary>
/// Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)). 
/// 
/// Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.
/// 
/// This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.
/// </summary>
public class BundleLink : BackboneElement {
  /// <summary>
  /// A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).
  /// </summary>
  [JsonPropertyName("relation")]
  public string Relation { get; set; }
  [JsonPropertyName("_relation")]
  public Element _Relation { get; set; }
  /// <summary>
  /// The reference details for the link.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Information about the search process that lead to the creation of this entry.
/// </summary>
public class BundleEntrySearch : BackboneElement {
  /// <summary>
  /// There is only one mode. In some corner cases, a resource may be included because it is both a match and an include. In these circumstances, 'match' takes precedence.
  /// </summary>
  [JsonPropertyName("mode")]
  public string? Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// Servers are not required to return a ranking score. 1 is most relevant, and 0 is least relevant. Often, search results are sorted by score, but the client may specify a different sort order.
  /// 
  /// See [Patient Match](patient-operation-match.html) for the EMPI search which relates to this element.
  /// </summary>
  [JsonPropertyName("score")]
  public decimal? Score { get; set; }
  [JsonPropertyName("_score")]
  public Element _Score { get; set; }
}
/// <summary>
/// Code Values for the Bundle.entry.search.mode field
/// </summary>
public sealed class BundleEntrySearchModeCodes {
  public const string MATCH = "match";
  public const string INCLUDE = "include";
  public const string OUTCOME = "outcome";
}
/// <summary>
/// Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
/// </summary>
public class BundleEntryRequest : BackboneElement {
  /// <summary>
  /// Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
  /// </summary>
  [JsonPropertyName("ifMatch")]
  public string? IfMatch { get; set; }
  [JsonPropertyName("_ifMatch")]
  public Element _IfMatch { get; set; }
  /// <summary>
  /// Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
  /// </summary>
  [JsonPropertyName("ifModifiedSince")]
  public string? IfModifiedSince { get; set; }
  [JsonPropertyName("_ifModifiedSince")]
  public Element _IfModifiedSince { get; set; }
  /// <summary>
  /// Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL - what follows the "?" (not including the "?").
  /// </summary>
  [JsonPropertyName("ifNoneExist")]
  public string? IfNoneExist { get; set; }
  [JsonPropertyName("_ifNoneExist")]
  public Element _IfNoneExist { get; set; }
  /// <summary>
  /// If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread).
  /// </summary>
  [JsonPropertyName("ifNoneMatch")]
  public string? IfNoneMatch { get; set; }
  [JsonPropertyName("_ifNoneMatch")]
  public Element _IfNoneMatch { get; set; }
  /// <summary>
  /// In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.
  /// </summary>
  [JsonPropertyName("method")]
  public string Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// E.g. for a Patient Create, the method would be "POST" and the URL would be "Patient". For a Patient Update, the method would be PUT and the URL would be "Patient/[id]".
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Code Values for the Bundle.entry.request.method field
/// </summary>
public sealed class BundleEntryRequestMethodCodes {
  public const string GET = "GET";
  public const string HEAD = "HEAD";
  public const string POST = "POST";
  public const string PUT = "PUT";
  public const string DELETE = "DELETE";
  public const string PATCH = "PATCH";
}
/// <summary>
/// Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
/// </summary>
public class BundleEntryResponse : BackboneElement {
  /// <summary>
  /// Etags match the Resource.meta.versionId. The ETag has to match the version id in the header if a resource is included.
  /// </summary>
  [JsonPropertyName("etag")]
  public string? Etag { get; set; }
  [JsonPropertyName("_etag")]
  public Element _Etag { get; set; }
  /// <summary>
  /// This has to match the same time in the meta header (meta.lastUpdated) if a resource is included.
  /// </summary>
  [JsonPropertyName("lastModified")]
  public string? LastModified { get; set; }
  [JsonPropertyName("_lastModified")]
  public Element _LastModified { get; set; }
  /// <summary>
  /// The location header created by processing this operation, populated if the operation returns a location.
  /// </summary>
  [JsonPropertyName("location")]
  public string? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// For a POST/PUT operation, this is the equivalent outcome that would be returned for prefer = operationoutcome - except that the resource is always returned whether or not the outcome is returned.
  /// 
  /// This outcome is not used for error responses in batch/transaction, only for hints and warnings. In a batch operation, the error will be in Bundle.entry.response, and for transaction, there will be a single OperationOutcome instead of a bundle in the case of an error.
  /// </summary>
  [JsonPropertyName("outcome")]
  public Resource? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
/// </summary>
public class BundleEntry : BackboneElement {
  /// <summary>
  /// fullUrl might not be [unique in the context of a resource](bundle.html#bundle-unique). Note that since [FHIR resources do not need to be served through the FHIR API](references.html), the fullURL might be a URN or an absolute URL that does not end with the logical id of the resource (Resource.id). However, but if the fullUrl does look like a RESTful server URL (e.g. meets the [regex](references.html#regex), then the 'id' portion of the fullUrl SHALL end with the Resource.id.
  /// 
  /// Note that the fullUrl is not the same as the canonical URL - it's an absolute url for an endpoint serving the resource (these will happen to have the same value on the canonical server for the resource with the canonical URL).
  /// </summary>
  [JsonPropertyName("fullUrl")]
  public string? FullUrl { get; set; }
  [JsonPropertyName("_fullUrl")]
  public Element _FullUrl { get; set; }
  /// <summary>
  /// A series of links that provide context to this entry.
  /// </summary>
  [JsonPropertyName("link")]
  public BundleLink?[] Link { get; set; }
  [JsonPropertyName("_link")]
  public Element[] _Link { get; set; }
  /// <summary>
  /// Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
  /// </summary>
  [JsonPropertyName("request")]
  public BundleEntryRequest? Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type.
  /// </summary>
  [JsonPropertyName("resource")]
  public Resource? Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element _Resource { get; set; }
  /// <summary>
  /// Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
  /// </summary>
  [JsonPropertyName("response")]
  public BundleEntryResponse? Response { get; set; }
  [JsonPropertyName("_response")]
  public Element _Response { get; set; }
  /// <summary>
  /// Information about the search process that lead to the creation of this entry.
  /// </summary>
  [JsonPropertyName("search")]
  public BundleEntrySearch? Search { get; set; }
  [JsonPropertyName("_search")]
  public Element _Search { get; set; }
}
public class Bundle : Resource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Bundle";
  /// <summary>
  /// An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).
  /// </summary>
  [JsonPropertyName("entry")]
  public BundleEntry?[] Entry { get; set; }
  [JsonPropertyName("_entry")]
  public Element[] _Entry { get; set; }
  /// <summary>
  /// Persistent identity generally only matters for batches of type Document, Message, and Collection. It would not normally be populated for search and history results and servers ignore Bundle.identifier when processing batches and transactions. For Documents  the .identifier SHALL be populated such that the .identifier is globally unique.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Both Bundle.link and Bundle.entry.link are defined to support providing additional context when Bundles are used (e.g. [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)). 
  /// 
  /// Bundle.entry.link corresponds to links found in the HTTP header if the resource in the entry was [read](http.html#read) directly.
  /// 
  /// This specification defines some specific uses of Bundle.link for [searching](search.html#conformance) and [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no defined function in a transaction - the meaning is implementation specific.
  /// </summary>
  [JsonPropertyName("link")]
  public BundleLink?[] Link { get; set; }
  [JsonPropertyName("_link")]
  public Element[] _Link { get; set; }
  /// <summary>
  /// The signature could be created by the "author" of the bundle or by the originating device.   Requirements around inclusion of a signature, verification of signatures and treatment of signed/non-signed bundles is implementation-environment specific.
  /// </summary>
  [JsonPropertyName("signature")]
  public Signature? Signature { get; set; }
  [JsonPropertyName("_signature")]
  public Element _Signature { get; set; }
  /// <summary>
  /// For many bundles, the timestamp is equal to .meta.lastUpdated, because they are not stored (e.g. search results). When a bundle is placed in a persistent store, .meta.lastUpdated will be usually be changed by the server. When the bundle is a message, a middleware agent altering the message (even if not stored) SHOULD update .meta.lastUpdated. .timestamp is used to track the original time of the Bundle, and SHOULD be populated.  
  /// 
  /// Usage:
  /// 
  /// * document : the date the document was created. Note: the composition may predate the document, or be associated with multiple documents. The date of the composition - the authoring time - may be earlier than the document assembly time
  /// * message : the date that the content of the message was assembled. This date is not changed by middleware engines unless they add additional data that changes the meaning of the time of the message
  /// * history : the date that the history was assembled. This time would be used as the _since time to ask for subsequent updates
  /// * searchset : the time that the search set was assembled. Note that different pages MAY have different timestamps but need not. Having different timestamps does not imply that subsequent pages will represent or include changes made since the initial query
  /// * transaction | transaction-response | batch | batch-response | collection : no particular assigned meaning
  /// 
  /// The timestamp value should be greater than the lastUpdated and other timestamps in the resources in the bundle, and it should be equal or earlier than the .meta.lastUpdated on the Bundle itself.
  /// </summary>
  [JsonPropertyName("timestamp")]
  public string? Timestamp { get; set; }
  [JsonPropertyName("_timestamp")]
  public Element _Timestamp { get; set; }
  /// <summary>
  /// Only used if the bundle is a search result set. The total does not include resources such as OperationOutcome and included resources, only the total number of matching resources.
  /// </summary>
  [JsonPropertyName("total")]
  public uint? Total { get; set; }
  [JsonPropertyName("_total")]
  public Element _Total { get; set; }
  /// <summary>
  /// It's possible to use a bundle for other purposes (e.g. a document can be accepted as a transaction). This is primarily defined so that there can be specific rules for some of the bundle types.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Bundle.type field
/// </summary>
public sealed class BundleTypeCodes {
  public const string DOCUMENT = "document";
  public const string MESSAGE = "message";
  public const string TRANSACTION = "transaction";
  public const string TRANSACTION_RESPONSE = "transaction-response";
  public const string BATCH = "batch";
  public const string BATCH_RESPONSE = "batch-response";
  public const string HISTORY = "history";
  public const string SEARCHSET = "searchset";
  public const string COLLECTION = "collection";
  public const string SUBSCRIPTION_NOTIFICATION = "subscription-notification";
}
public class CanonicalResource : DomainResource {
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the {{title}} and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the {{title}}.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the {{title}}. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the {{title}} was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the {{title}} as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the {{title}} is presumed to be the predominant language in the place the {{title}} was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of {{title}}s that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this {{title}} outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the {{title}} to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the {{title}} is the organization or individual primarily responsible for the maintenance and upkeep of the {{title}}. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the {{title}}. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the {{title}}. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this {{title}}.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Allows filtering of {{title}}s that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different {{title}} instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the {{title}} with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the CanonicalResource.status field
/// </summary>
public sealed class CanonicalResourceStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
/// </summary>
public class CapabilityStatementSoftware : BackboneElement {
  /// <summary>
  /// Name the software is known by.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Date this version of the software was released.
  /// </summary>
  [JsonPropertyName("releaseDate")]
  public string? ReleaseDate { get; set; }
  [JsonPropertyName("_releaseDate")]
  public Element _ReleaseDate { get; set; }
  /// <summary>
  /// If possible, a version should be specified, as statements are likely to be different for different versions of software.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
/// </summary>
public class CapabilityStatementImplementation : BackboneElement {
  /// <summary>
  /// The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
  /// </summary>
  [JsonPropertyName("custodian")]
  public Reference? Custodian { get; set; }
  [JsonPropertyName("_custodian")]
  public Element _Custodian { get; set; }
  /// <summary>
  /// Information about the specific installation that this capability statement relates to.
  /// </summary>
  [JsonPropertyName("description")]
  public string Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Information about security implementation from an interface perspective - what a client needs to know.
/// </summary>
public class CapabilityStatementRestSecurity : BackboneElement {
  /// <summary>
  /// The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.
  /// </summary>
  [JsonPropertyName("cors")]
  public bool? Cors { get; set; }
  [JsonPropertyName("_cors")]
  public Element _Cors { get; set; }
  /// <summary>
  /// General description of how security works.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Types of security services that are supported/required by the system.
  /// </summary>
  [JsonPropertyName("service")]
  public CodeableConcept?[] Service { get; set; }
  [JsonPropertyName("_service")]
  public Element[] _Service { get; set; }
}
/// <summary>
/// In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
/// </summary>
public class CapabilityStatementRestResourceInteraction : BackboneElement {
  /// <summary>
  /// Coded identifier of the operation, supported by the system resource.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.resource.interaction.code field
/// </summary>
public sealed class CapabilityStatementRestResourceInteractionCodeCodes {
  public const string READ = "read";
  public const string VREAD = "vread";
  public const string UPDATE = "update";
  public const string PATCH = "patch";
  public const string DELETE = "delete";
  public const string HISTORY_INSTANCE = "history-instance";
  public const string HISTORY_TYPE = "history-type";
  public const string CREATE = "create";
  public const string SEARCH_TYPE = "search-type";
}
/// <summary>
/// The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
/// </summary>
public class CapabilityStatementRestResourceSearchParam : BackboneElement {
  /// <summary>
  /// This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
  /// </summary>
  [JsonPropertyName("definition")]
  public string? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.resource.searchParam.type field
/// </summary>
public sealed class CapabilityStatementRestResourceSearchParamTypeCodes {
  public const string NUMBER = "number";
  public const string DATE = "date";
  public const string VAL_STRING = "string";
  public const string TOKEN = "token";
  public const string REFERENCE = "reference";
  public const string COMPOSITE = "composite";
  public const string QUANTITY = "quantity";
  public const string URI = "uri";
  public const string SPECIAL = "special";
}
/// <summary>
/// Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
/// 
/// If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
/// </summary>
public class CapabilityStatementRestResourceOperation : BackboneElement {
  /// <summary>
  /// This can be used to build an HTML form to invoke the operation, for instance.
  /// </summary>
  [JsonPropertyName("definition")]
  public string Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// The name here SHOULD be the same as the name in the definition, unless there is a name clash and the name cannot be used. The name does not include the "$" portion that is always included in the URL.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
}
/// <summary>
/// Max of one repetition per resource type.
/// </summary>
public class CapabilityStatementRestResource : BackboneElement {
  /// <summary>
  /// Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.
  /// </summary>
  [JsonPropertyName("conditionalCreate")]
  public bool? ConditionalCreate { get; set; }
  [JsonPropertyName("_conditionalCreate")]
  public Element _ConditionalCreate { get; set; }
  /// <summary>
  /// Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.
  /// </summary>
  [JsonPropertyName("conditionalDelete")]
  public string? ConditionalDelete { get; set; }
  [JsonPropertyName("_conditionalDelete")]
  public Element _ConditionalDelete { get; set; }
  /// <summary>
  /// Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.
  /// </summary>
  [JsonPropertyName("conditionalRead")]
  public string? ConditionalRead { get; set; }
  [JsonPropertyName("_conditionalRead")]
  public Element _ConditionalRead { get; set; }
  /// <summary>
  /// Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.
  /// </summary>
  [JsonPropertyName("conditionalUpdate")]
  public bool? ConditionalUpdate { get; set; }
  [JsonPropertyName("_conditionalUpdate")]
  public Element _ConditionalUpdate { get; set; }
  /// <summary>
  /// Additional information about the resource type used by the system.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
  /// </summary>
  [JsonPropertyName("interaction")]
  public CapabilityStatementRestResourceInteraction?[] Interaction { get; set; }
  [JsonPropertyName("_interaction")]
  public Element[] _Interaction { get; set; }
  /// <summary>
  /// Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
  /// 
  /// If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
  /// </summary>
  [JsonPropertyName("operation")]
  public CapabilityStatementRestResourceOperation?[] Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element[] _Operation { get; set; }
  /// <summary>
  /// The profile applies to all  resources of this type - i.e. it is the superset of what is supported by the system.
  /// </summary>
  [JsonPropertyName("profile")]
  public string? Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
  /// <summary>
  /// It is useful to support the vRead operation for current operations, even if past versions aren't available.
  /// </summary>
  [JsonPropertyName("readHistory")]
  public bool? ReadHistory { get; set; }
  [JsonPropertyName("_readHistory")]
  public Element _ReadHistory { get; set; }
  /// <summary>
  /// A set of flags that defines how references are supported.
  /// </summary>
  [JsonPropertyName("referencePolicy")]
  public string?[] ReferencePolicy { get; set; }
  [JsonPropertyName("_referencePolicy")]
  public Element[] _ReferencePolicy { get; set; }
  /// <summary>
  /// If this list is empty, the server does not support includes.
  /// </summary>
  [JsonPropertyName("searchInclude")]
  public string?[] SearchInclude { get; set; }
  [JsonPropertyName("_searchInclude")]
  public Element[] _SearchInclude { get; set; }
  /// <summary>
  /// The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
  /// </summary>
  [JsonPropertyName("searchParam")]
  public CapabilityStatementRestResourceSearchParam?[] SearchParam { get; set; }
  [JsonPropertyName("_searchParam")]
  public Element[] _SearchParam { get; set; }
  /// <summary>
  /// If this list is empty, the server does not support reverse includes.
  /// </summary>
  [JsonPropertyName("searchRevInclude")]
  public string?[] SearchRevInclude { get; set; }
  [JsonPropertyName("_searchRevInclude")]
  public Element[] _SearchRevInclude { get; set; }
  /// <summary>
  /// Supported profiles are different than the profile that applies to a particular resource in .rest.resource.profile. The resource profile is a general statement of what features of the resource are supported overall by the system - the sum total of the facilities it supports. A supported profile is a deeper statement about the functionality of the data and services provided by the server (or used by the client). A typical case is a laboratory system that produces a set of different reports - this is the list of types of data that it publishes. A key aspect of declaring profiles here is the question of how the client converts knowledge that the server publishes this data into working with the data; the client can inspect individual resources to determine whether they conform to a particular profile, but how does it find the ones that do? It does so by searching using the _profile parameter, so any resources listed here must be valid values for the _profile resource (using the identifier in the target profile).
  /// </summary>
  [JsonPropertyName("supportedProfile")]
  public string?[] SupportedProfile { get; set; }
  [JsonPropertyName("_supportedProfile")]
  public Element[] _SupportedProfile { get; set; }
  /// <summary>
  /// A type of resource exposed via the restful interface.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.
  /// </summary>
  [JsonPropertyName("updateCreate")]
  public bool? UpdateCreate { get; set; }
  [JsonPropertyName("_updateCreate")]
  public Element _UpdateCreate { get; set; }
  /// <summary>
  /// If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.
  /// </summary>
  [JsonPropertyName("versioning")]
  public string? Versioning { get; set; }
  [JsonPropertyName("_versioning")]
  public Element _Versioning { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.resource.conditionalDelete field
/// </summary>
public sealed class CapabilityStatementRestResourceConditionalDeleteCodes {
  public const string NOT_SUPPORTED = "not-supported";
  public const string SINGLE = "single";
  public const string MULTIPLE = "multiple";
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.resource.conditionalRead field
/// </summary>
public sealed class CapabilityStatementRestResourceConditionalReadCodes {
  public const string NOT_SUPPORTED = "not-supported";
  public const string MODIFIED_SINCE = "modified-since";
  public const string NOT_MATCH = "not-match";
  public const string FULL_SUPPORT = "full-support";
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.resource.referencePolicy field
/// </summary>
public sealed class CapabilityStatementRestResourceReferencePolicyCodes {
  public const string LITERAL = "literal";
  public const string LOGICAL = "logical";
  public const string RESOLVES = "resolves";
  public const string ENFORCED = "enforced";
  public const string LOCAL = "local";
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.resource.type field
/// </summary>
public sealed class CapabilityStatementRestResourceTypeCodes {
  public const string A = "A";
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.resource.versioning field
/// </summary>
public sealed class CapabilityStatementRestResourceVersioningCodes {
  public const string NO_VERSION = "no-version";
  public const string VERSIONED = "versioned";
  public const string VERSIONED_UPDATE = "versioned-update";
}
/// <summary>
/// A specification of restful operations supported by the system.
/// </summary>
public class CapabilityStatementRestInteraction : BackboneElement {
  /// <summary>
  /// A coded identifier of the operation, supported by the system.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.interaction.code field
/// </summary>
public sealed class CapabilityStatementRestInteractionCodeCodes {
  public const string TRANSACTION = "transaction";
  public const string BATCH = "batch";
  public const string SEARCH_SYSTEM = "search-system";
  public const string HISTORY_SYSTEM = "history-system";
}
/// <summary>
/// Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
/// </summary>
public class CapabilityStatementRest : BackboneElement {
  /// <summary>
  /// At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).
  /// </summary>
  [JsonPropertyName("compartment")]
  public string?[] Compartment { get; set; }
  [JsonPropertyName("_compartment")]
  public Element[] _Compartment { get; set; }
  /// <summary>
  /// Information about the system's restful capabilities that apply across all applications, such as security.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// A specification of restful operations supported by the system.
  /// </summary>
  [JsonPropertyName("interaction")]
  public CapabilityStatementRestInteraction?[] Interaction { get; set; }
  [JsonPropertyName("_interaction")]
  public Element[] _Interaction { get; set; }
  /// <summary>
  /// Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// CapabilityStatement.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.
  /// </summary>
  [JsonPropertyName("operation")]
  public CapabilityStatementRestResourceOperation?[] Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element[] _Operation { get; set; }
  /// <summary>
  /// Max of one repetition per resource type.
  /// </summary>
  [JsonPropertyName("resource")]
  public CapabilityStatementRestResource?[] Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element[] _Resource { get; set; }
  /// <summary>
  /// Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
  /// </summary>
  [JsonPropertyName("searchParam")]
  public CapabilityStatementRestResourceSearchParam?[] SearchParam { get; set; }
  [JsonPropertyName("_searchParam")]
  public Element[] _SearchParam { get; set; }
  /// <summary>
  /// Information about security implementation from an interface perspective - what a client needs to know.
  /// </summary>
  [JsonPropertyName("security")]
  public CapabilityStatementRestSecurity? Security { get; set; }
  [JsonPropertyName("_security")]
  public Element _Security { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement.rest.mode field
/// </summary>
public sealed class CapabilityStatementRestModeCodes {
  public const string CLIENT = "client";
  public const string SERVER = "server";
}
/// <summary>
/// An endpoint (network accessible address) to which messages and/or replies are to be sent.
/// </summary>
public class CapabilityStatementMessagingEndpoint : BackboneElement {
  /// <summary>
  /// The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.
  /// </summary>
  [JsonPropertyName("address")]
  public string Address { get; set; }
  [JsonPropertyName("_address")]
  public Element _Address { get; set; }
  /// <summary>
  /// A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
  /// </summary>
  [JsonPropertyName("protocol")]
  public Coding Protocol { get; set; }
  [JsonPropertyName("_protocol")]
  public Element _Protocol { get; set; }
}
/// <summary>
/// This is a proposed alternative to the messaging.event structure.
/// </summary>
public class CapabilityStatementMessagingSupportedMessage : BackboneElement {
  /// <summary>
  /// Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
  /// </summary>
  [JsonPropertyName("definition")]
  public string Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// The mode of this event declaration - whether application is sender or receiver.
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement.messaging.supportedMessage.mode field
/// </summary>
public sealed class CapabilityStatementMessagingSupportedMessageModeCodes {
  public const string SENDER = "sender";
  public const string RECEIVER = "receiver";
}
/// <summary>
/// Multiple repetitions allow the documentation of multiple endpoints per solution.
/// </summary>
public class CapabilityStatementMessaging : BackboneElement {
  /// <summary>
  /// Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// An endpoint (network accessible address) to which messages and/or replies are to be sent.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public CapabilityStatementMessagingEndpoint?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// If this value is missing then the application does not implement (receiver) or depend on (sender) reliable messaging.
  /// </summary>
  [JsonPropertyName("reliableCache")]
  public uint? ReliableCache { get; set; }
  [JsonPropertyName("_reliableCache")]
  public Element _ReliableCache { get; set; }
  /// <summary>
  /// This is a proposed alternative to the messaging.event structure.
  /// </summary>
  [JsonPropertyName("supportedMessage")]
  public CapabilityStatementMessagingSupportedMessage?[] SupportedMessage { get; set; }
  [JsonPropertyName("_supportedMessage")]
  public Element[] _SupportedMessage { get; set; }
}
/// <summary>
/// A document definition.
/// </summary>
public class CapabilityStatementDocument : BackboneElement {
  /// <summary>
  /// A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// Mode of this document declaration - whether an application is a producer or consumer.
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// The profile is actually on the Bundle.
  /// </summary>
  [JsonPropertyName("profile")]
  public string Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement.document.mode field
/// </summary>
public sealed class CapabilityStatementDocumentModeCodes {
  public const string PRODUCER = "producer";
  public const string CONSUMER = "consumer";
}
public class CapabilityStatement : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CapabilityStatement";
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the capability statement was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the capability statement is presumed to be the predominant language in the place the capability statement was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// A document definition.
  /// </summary>
  [JsonPropertyName("document")]
  public CapabilityStatementDocument?[] Document { get; set; }
  [JsonPropertyName("_document")]
  public Element[] _Document { get; set; }
  /// <summary>
  /// Allows filtering of capability statements that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Servers may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement-operation-versions.html) operation). If they do, and the CapabilityStatement is requested from the server, then this fhirVersion will be either the version requested, or the server's default version.
  /// </summary>
  [JsonPropertyName("fhirVersion")]
  public string FhirVersion { get; set; }
  [JsonPropertyName("_fhirVersion")]
  public Element _FhirVersion { get; set; }
  /// <summary>
  /// "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
  /// </summary>
  [JsonPropertyName("format")]
  public string[] Format { get; set; }
  [JsonPropertyName("_format")]
  public Element[] _Format { get; set; }
  /// <summary>
  /// Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
  /// </summary>
  [JsonPropertyName("implementation")]
  public CapabilityStatementImplementation? Implementation { get; set; }
  [JsonPropertyName("_implementation")]
  public Element _Implementation { get; set; }
  /// <summary>
  /// A list of implementation guides that the server does (or should) support in their entirety.
  /// </summary>
  [JsonPropertyName("implementationGuide")]
  public string?[] ImplementationGuide { get; set; }
  [JsonPropertyName("_implementationGuide")]
  public Element[] _ImplementationGuide { get; set; }
  /// <summary>
  /// the contents of any directly or indirectly imported CapabilityStatements SHALL NOT overlap, i.e. they cannot refer to the same rest/resource, operations/name, searchparam/name, interaction/code, messaging/endpoint, document/mode pair.
  /// 
  /// A capability statement that imports another CapabilityStatement automatically instantiates it too (though this is often not a very useful statement for the kinds of CapabilityStatements that are suitable for importing).
  /// </summary>
  [JsonPropertyName("imports")]
  public string?[] Imports { get; set; }
  [JsonPropertyName("_imports")]
  public Element[] _Imports { get; set; }
  /// <summary>
  /// HL7 defines the following Services: [Terminology Service](terminology-service.html).    
  /// 
  /// Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.
  /// </summary>
  [JsonPropertyName("instantiates")]
  public string?[] Instantiates { get; set; }
  [JsonPropertyName("_instantiates")]
  public Element[] _Instantiates { get; set; }
  /// <summary>
  /// It may be possible for the capability statement to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
  /// </summary>
  [JsonPropertyName("kind")]
  public string Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
  /// <summary>
  /// Multiple repetitions allow the documentation of multiple endpoints per solution.
  /// </summary>
  [JsonPropertyName("messaging")]
  public CapabilityStatementMessaging?[] Messaging { get; set; }
  [JsonPropertyName("_messaging")]
  public Element[] _Messaging { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.
  /// </summary>
  [JsonPropertyName("patchFormat")]
  public string?[] PatchFormat { get; set; }
  [JsonPropertyName("_patchFormat")]
  public Element[] _PatchFormat { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the capability statement is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the capability statement. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
  /// </summary>
  [JsonPropertyName("rest")]
  public CapabilityStatementRest?[] Rest { get; set; }
  [JsonPropertyName("_rest")]
  public Element[] _Rest { get; set; }
  /// <summary>
  /// Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
  /// </summary>
  [JsonPropertyName("software")]
  public CapabilityStatementSoftware? Software { get; set; }
  [JsonPropertyName("_software")]
  public Element _Software { get; set; }
  /// <summary>
  /// Allows filtering of capability statements that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different capability statement instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the capability statement with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement.fhirVersion field
/// </summary>
public sealed class CapabilityStatementFhirVersionCodes {
  public const string FHIR = "FHIR";
}
/// <summary>
/// Code Values for the CapabilityStatement.format field
/// </summary>
public sealed class CapabilityStatementFormatCodes {
  public const string FORMATS = "formats";
  public const string JSON = "json";
  public const string TTL = "ttl";
  public const string MIME = "mime";
}
/// <summary>
/// Code Values for the CapabilityStatement.kind field
/// </summary>
public sealed class CapabilityStatementKindCodes {
  public const string INSTANCE = "instance";
  public const string CAPABILITY = "capability";
  public const string REQUIREMENTS = "requirements";
}
/// <summary>
/// Code Values for the CapabilityStatement.patchFormat field
/// </summary>
public sealed class CapabilityStatementPatchFormatCodes {
  public const string PATCH = "Patch";
}
/// <summary>
/// Code Values for the CapabilityStatement.status field
/// </summary>
public sealed class CapabilityStatementStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
/// </summary>
public class CapabilityStatement2Software : BackboneElement {
  /// <summary>
  /// Name the software is known by.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Date this version of the software was released.
  /// </summary>
  [JsonPropertyName("releaseDate")]
  public string? ReleaseDate { get; set; }
  [JsonPropertyName("_releaseDate")]
  public Element _ReleaseDate { get; set; }
  /// <summary>
  /// If possible, a version should be specified, as statements are likely to be different for different versions of software.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
/// </summary>
public class CapabilityStatement2Implementation : BackboneElement {
  /// <summary>
  /// The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
  /// </summary>
  [JsonPropertyName("custodian")]
  public Reference? Custodian { get; set; }
  [JsonPropertyName("_custodian")]
  public Element _Custodian { get; set; }
  /// <summary>
  /// Information about the specific installation that this capability statement relates to.
  /// </summary>
  [JsonPropertyName("description")]
  public string Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// In general, a Resource will only appear in a CapabilityStatement2 if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
/// </summary>
public class CapabilityStatement2RestResourceInteraction : BackboneElement {
  /// <summary>
  /// Coded identifier of the operation, supported by the system resource.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement2.rest.resource.interaction.code field
/// </summary>
public sealed class CapabilityStatement2RestResourceInteractionCodeCodes {
  public const string READ = "read";
  public const string VREAD = "vread";
  public const string UPDATE = "update";
  public const string PATCH = "patch";
  public const string DELETE = "delete";
  public const string HISTORY_INSTANCE = "history-instance";
  public const string HISTORY_TYPE = "history-type";
  public const string CREATE = "create";
  public const string SEARCH_TYPE = "search-type";
}
/// <summary>
/// The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement2.rest.searchParam](capabilitystatement2-definitions.html#CapabilityStatement2.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
/// </summary>
public class CapabilityStatement2RestResourceSearchParam : BackboneElement {
  /// <summary>
  /// This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
  /// </summary>
  [JsonPropertyName("definition")]
  public string? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement2.rest.resource.searchParam.type field
/// </summary>
public sealed class CapabilityStatement2RestResourceSearchParamTypeCodes {
  public const string NUMBER = "number";
  public const string DATE = "date";
  public const string VAL_STRING = "string";
  public const string TOKEN = "token";
  public const string REFERENCE = "reference";
  public const string COMPOSITE = "composite";
  public const string QUANTITY = "quantity";
  public const string URI = "uri";
  public const string SPECIAL = "special";
}
/// <summary>
/// Operations linked from CapabilityStatement2.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
/// 
/// If an operation that is listed in multiple CapabilityStatement2.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
/// </summary>
public class CapabilityStatement2RestResourceOperation : BackboneElement {
  /// <summary>
  /// This can be used to build an HTML form to invoke the operation, for instance.
  /// </summary>
  [JsonPropertyName("definition")]
  public string Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// The name here SHOULD be the same as the name in the definition, unless there is a name clash and the name cannot be used. The name does not include the "$" portion that is always included in the URL.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
}
/// <summary>
/// Max of one repetition per resource type.
/// </summary>
public class CapabilityStatement2RestResource : BackboneElement {
  /// <summary>
  /// Additional information about the resource type used by the system.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// In general, a Resource will only appear in a CapabilityStatement2 if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
  /// </summary>
  [JsonPropertyName("interaction")]
  public CapabilityStatement2RestResourceInteraction?[] Interaction { get; set; }
  [JsonPropertyName("_interaction")]
  public Element[] _Interaction { get; set; }
  /// <summary>
  /// Operations linked from CapabilityStatement2.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
  /// 
  /// If an operation that is listed in multiple CapabilityStatement2.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
  /// </summary>
  [JsonPropertyName("operation")]
  public CapabilityStatement2RestResourceOperation?[] Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element[] _Operation { get; set; }
  /// <summary>
  /// The profile applies to all  resources of this type - i.e. it is the superset of what is supported by the system.
  /// </summary>
  [JsonPropertyName("profile")]
  public string? Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
  /// <summary>
  /// The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement2.rest.searchParam](capabilitystatement2-definitions.html#CapabilityStatement2.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
  /// </summary>
  [JsonPropertyName("searchParam")]
  public CapabilityStatement2RestResourceSearchParam?[] SearchParam { get; set; }
  [JsonPropertyName("_searchParam")]
  public Element[] _SearchParam { get; set; }
  /// <summary>
  /// Supported profiles are different than the profile that applies to a particular resource in .rest.resource.profile. The resource profile is a general statement of what features of the resource are supported overall by the system - the sum total of the facilities it supports. A supported profile is a deeper statement about the functionality of the data and services provided by the server (or used by the client). A typical case is a laboratory system that produces a set of different reports - this is the list of types of data that it publishes. A key aspect of declaring profiles here is the question of how the client converts knowledge that the server publishes this data into working with the data; the client can inspect individual resources to determine whether they conform to a particular profile, but how does it find the ones that do? It does so by searching using the _profile parameter, so any resources listed here must be valid values for the _profile resource (using the identifier in the target profile).
  /// </summary>
  [JsonPropertyName("supportedProfile")]
  public string?[] SupportedProfile { get; set; }
  [JsonPropertyName("_supportedProfile")]
  public Element[] _SupportedProfile { get; set; }
  /// <summary>
  /// A type of resource exposed via the restful interface.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement2.rest.resource.type field
/// </summary>
public sealed class CapabilityStatement2RestResourceTypeCodes {
  public const string A = "A";
}
/// <summary>
/// A specification of restful operations supported by the system.
/// </summary>
public class CapabilityStatement2RestInteraction : BackboneElement {
  /// <summary>
  /// A coded identifier of the operation, supported by the system.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement2.rest.interaction.code field
/// </summary>
public sealed class CapabilityStatement2RestInteractionCodeCodes {
  public const string TRANSACTION = "transaction";
  public const string BATCH = "batch";
  public const string SEARCH_SYSTEM = "search-system";
  public const string HISTORY_SYSTEM = "history-system";
}
/// <summary>
/// Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
/// </summary>
public class CapabilityStatement2Rest : BackboneElement {
  /// <summary>
  /// At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).
  /// </summary>
  [JsonPropertyName("compartment")]
  public string?[] Compartment { get; set; }
  [JsonPropertyName("_compartment")]
  public Element[] _Compartment { get; set; }
  /// <summary>
  /// Information about the system's restful capabilities that apply across all applications, such as security.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// A specification of restful operations supported by the system.
  /// </summary>
  [JsonPropertyName("interaction")]
  public CapabilityStatement2RestInteraction?[] Interaction { get; set; }
  [JsonPropertyName("_interaction")]
  public Element[] _Interaction { get; set; }
  /// <summary>
  /// Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// CapabilityStatement2.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement2.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.
  /// </summary>
  [JsonPropertyName("operation")]
  public CapabilityStatement2RestResourceOperation?[] Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element[] _Operation { get; set; }
  /// <summary>
  /// Max of one repetition per resource type.
  /// </summary>
  [JsonPropertyName("resource")]
  public CapabilityStatement2RestResource?[] Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element[] _Resource { get; set; }
  /// <summary>
  /// Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement2.rest.searchParam](capabilitystatement2-definitions.html#CapabilityStatement2.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
  /// </summary>
  [JsonPropertyName("searchParam")]
  public CapabilityStatement2RestResourceSearchParam?[] SearchParam { get; set; }
  [JsonPropertyName("_searchParam")]
  public Element[] _SearchParam { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement2.rest.mode field
/// </summary>
public sealed class CapabilityStatement2RestModeCodes {
  public const string CLIENT = "client";
  public const string SERVER = "server";
}
public class CapabilityStatement2 : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CapabilityStatement2";
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the capability statement2 and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement2.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement2. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the capability statement2 was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement2 as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the capability statement2 is presumed to be the predominant language in the place the capability statement2 was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of capability statement2s that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Servers may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement2-operation-versions.html) operation). If they do, and the CapabilityStatement2 is requested from the server, then this fhirVersion will be either the version requested, or the server's default version.
  /// </summary>
  [JsonPropertyName("fhirVersion")]
  public string FhirVersion { get; set; }
  [JsonPropertyName("_fhirVersion")]
  public Element _FhirVersion { get; set; }
  /// <summary>
  /// "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
  /// </summary>
  [JsonPropertyName("format")]
  public string[] Format { get; set; }
  [JsonPropertyName("_format")]
  public Element[] _Format { get; set; }
  /// <summary>
  /// Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
  /// </summary>
  [JsonPropertyName("implementation")]
  public CapabilityStatement2Implementation? Implementation { get; set; }
  [JsonPropertyName("_implementation")]
  public Element _Implementation { get; set; }
  /// <summary>
  /// A list of implementation guides that the server does (or should) support in their entirety.
  /// </summary>
  [JsonPropertyName("implementationGuide")]
  public string?[] ImplementationGuide { get; set; }
  [JsonPropertyName("_implementationGuide")]
  public Element[] _ImplementationGuide { get; set; }
  /// <summary>
  /// the contents of any directly or indirectly imported CapabilityStatement2s SHALL NOT overlap, i.e. they cannot refer to the same rest/resource, operations/name, searchparam/name, interaction/code, messaging/endpoint, document/mode pair.
  /// 
  /// A capability statement that imports another CapabilityStatement2 automatically instantiates it too (though this is often not a very useful statement for the kinds of CapabilityStatement2s that are suitable for importing).
  /// </summary>
  [JsonPropertyName("imports")]
  public string?[] Imports { get; set; }
  [JsonPropertyName("_imports")]
  public Element[] _Imports { get; set; }
  /// <summary>
  /// HL7 defines the following Services: [Terminology Service](terminology-service.html).    
  /// 
  /// Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.
  /// </summary>
  [JsonPropertyName("instantiates")]
  public string?[] Instantiates { get; set; }
  [JsonPropertyName("_instantiates")]
  public Element[] _Instantiates { get; set; }
  /// <summary>
  /// It may be possible for the capability statement2 to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
  /// </summary>
  [JsonPropertyName("kind")]
  public string Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.
  /// </summary>
  [JsonPropertyName("patchFormat")]
  public string?[] PatchFormat { get; set; }
  [JsonPropertyName("_patchFormat")]
  public Element[] _PatchFormat { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the capability statement2 is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement2. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement2. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the capability statement2. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement2.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
  /// </summary>
  [JsonPropertyName("rest")]
  public CapabilityStatement2Rest?[] Rest { get; set; }
  [JsonPropertyName("_rest")]
  public Element[] _Rest { get; set; }
  /// <summary>
  /// Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
  /// </summary>
  [JsonPropertyName("software")]
  public CapabilityStatement2Software? Software { get; set; }
  [JsonPropertyName("_software")]
  public Element _Software { get; set; }
  /// <summary>
  /// Allows filtering of capability statement2s that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different capability statement2 instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the capability statement2 with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the CapabilityStatement2.fhirVersion field
/// </summary>
public sealed class CapabilityStatement2FhirVersionCodes {
  public const string FHIR = "FHIR";
}
/// <summary>
/// Code Values for the CapabilityStatement2.format field
/// </summary>
public sealed class CapabilityStatement2FormatCodes {
  public const string FORMATS = "formats";
  public const string JSON = "json";
  public const string TTL = "ttl";
  public const string MIME = "mime";
}
/// <summary>
/// Code Values for the CapabilityStatement2.kind field
/// </summary>
public sealed class CapabilityStatement2KindCodes {
  public const string INSTANCE = "instance";
  public const string CAPABILITY = "capability";
  public const string REQUIREMENTS = "requirements";
}
/// <summary>
/// Code Values for the CapabilityStatement2.patchFormat field
/// </summary>
public sealed class CapabilityStatement2PatchFormatCodes {
  public const string PATCH = "Patch";
}
/// <summary>
/// Code Values for the CapabilityStatement2.status field
/// </summary>
public sealed class CapabilityStatement2StatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
/// </summary>
public class CarePlanActivityDetail : BackboneElement {
  /// <summary>
  /// Tends to be less relevant for activities involving particular products.  Codes should not convey negation - use "prohibited" instead.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Identifies the quantity expected to be consumed in a given day.
  /// </summary>
  [JsonPropertyName("dailyAmount")]
  public Quantity? DailyAmount { get; set; }
  [JsonPropertyName("_dailyAmount")]
  public Element _DailyAmount { get; set; }
  /// <summary>
  /// This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because it marks an activity as an activity that is not to be performed.
  /// </summary>
  [JsonPropertyName("doNotPerform")]
  public bool? DoNotPerform { get; set; }
  [JsonPropertyName("_doNotPerform")]
  public Element _DoNotPerform { get; set; }
  /// <summary>
  /// Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
  /// </summary>
  [JsonPropertyName("goal")]
  public Reference?[] Goal { get; set; }
  [JsonPropertyName("_goal")]
  public Element[] _Goal { get; set; }
  /// <summary>
  /// The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// A description of the kind of resource the in-line definition of a care plan activity is representing.  The CarePlan.activity.detail is an in-line definition when a resource is not referenced using CarePlan.activity.reference.  For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
  /// </summary>
  [JsonPropertyName("kind")]
  public string? Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
  /// <summary>
  /// May reference a specific clinical location or may identify a type of location.
  /// </summary>
  [JsonPropertyName("location")]
  public CodeableReference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// A performer MAY also be a participant in the care plan.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// Identifies the food, drug or other product to be consumed or supplied in the activity.
  /// </summary>
  [JsonPropertyName("productCodeableConcept")]
  public CodeableConcept? ProductCodeableConcept { get; set; }
  [JsonPropertyName("_productCodeableConcept")]
  public Element _ProductCodeableConcept { get; set; }
  /// <summary>
  /// Identifies the food, drug or other product to be consumed or supplied in the activity.
  /// </summary>
  [JsonPropertyName("productReference")]
  public Reference? ProductReference { get; set; }
  [JsonPropertyName("_productReference")]
  public Element _ProductReference { get; set; }
  /// <summary>
  /// Identifies the quantity expected to be supplied, administered or consumed by the subject.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// This could be a diagnosis code.  If a full condition record exists, us reason.reference instead. Conditions can be identified at the activity level that are not identified as reasons for the overall plan.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  /// </summary>
  [JsonPropertyName("reportedBoolean")]
  public bool? ReportedBoolean { get; set; }
  [JsonPropertyName("_reportedBoolean")]
  public Element _ReportedBoolean { get; set; }
  /// <summary>
  /// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  /// </summary>
  [JsonPropertyName("reportedReference")]
  public Reference? ReportedReference { get; set; }
  [JsonPropertyName("_reportedReference")]
  public Element _ReportedReference { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("scheduledTiming")]
  public Timing? ScheduledTiming { get; set; }
  [JsonPropertyName("_scheduledTiming")]
  public Element _ScheduledTiming { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("scheduledPeriod")]
  public Period? ScheduledPeriod { get; set; }
  [JsonPropertyName("_scheduledPeriod")]
  public Element _ScheduledPeriod { get; set; }
  /// <summary>
  /// The period, timing or frequency upon which the described activity is to occur.
  /// </summary>
  [JsonPropertyName("scheduledString")]
  public string? ScheduledString { get; set; }
  [JsonPropertyName("_scheduledString")]
  public Element _ScheduledString { get; set; }
  /// <summary>
  /// Some aspects of status can be inferred based on the resources linked in actionTaken.  Note that "status" is only as current as the plan was most recently updated.  
  /// The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the activity.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Will generally not be present if status is "complete".  Be sure to prompt to update this (or at least remove the existing value) if the status is changed.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
}
/// <summary>
/// Code Values for the CarePlan.activity.detail.kind field
/// </summary>
public sealed class CarePlanActivityDetailKindCodes {
  public const string APPOINTMENT = "Appointment";
  public const string COMMUNICATIONREQUEST = "CommunicationRequest";
  public const string DEVICEREQUEST = "DeviceRequest";
  public const string MEDICATIONREQUEST = "MedicationRequest";
  public const string NUTRITIONORDER = "NutritionOrder";
  public const string TASK = "Task";
  public const string SERVICEREQUEST = "ServiceRequest";
  public const string VISIONPRESCRIPTION = "VisionPrescription";
}
/// <summary>
/// Code Values for the CarePlan.activity.detail.status field
/// </summary>
public sealed class CarePlanActivityDetailStatusCodes {
  public const string NOT_STARTED = "not-started";
  public const string SCHEDULED = "scheduled";
  public const string IN_PROGRESS = "in-progress";
  public const string ON_HOLD = "on-hold";
  public const string COMPLETED = "completed";
  public const string CANCELLED = "cancelled";
  public const string STOPPED = "stopped";
  public const string UNKNOWN = "unknown";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Identifies an action that has occurred or is a planned action to occur as part of the plan. For example, a medication to be used, lab tests to perform, self-monitoring that has occurred, education etc.
/// </summary>
public class CarePlanActivity : BackboneElement {
  /// <summary>
  /// A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
  /// </summary>
  [JsonPropertyName("detail")]
  public CarePlanActivityDetail? Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element _Detail { get; set; }
  /// <summary>
  /// Note that this should not duplicate the activity status (e.g. completed or in progress).  The activity outcome is independent of the outcome of the related goal(s).  For example, if the goal is to achieve a target body weight of 150 lbs and an activity is defined to diet, then the activity outcome could be calories consumed whereas the goal outcome is an observation for the actual body weight measured.
  /// </summary>
  [JsonPropertyName("outcome")]
  public CodeableReference?[] Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element[] _Outcome { get; set; }
  /// <summary>
  /// This element should NOT be used to describe the activity to be performed - that occurs either within the resource pointed to by activity.detail.reference or in activity.detail.description.
  /// </summary>
  [JsonPropertyName("progress")]
  public Annotation?[] Progress { get; set; }
  [JsonPropertyName("_progress")]
  public Element[] _Progress { get; set; }
  /// <summary>
  /// Standard extension exists ([resource-pertainsToGoal](extension-resource-pertainstogoal.html)) that allows goals to be referenced from any of the referenced resources in CarePlan.activity.reference.  The goal should be visible when the resource referenced by CarePlan.activity.reference is viewed independently from the CarePlan.  Requests that are pointed to by a CarePlan using this element should *not* point to this CarePlan using the "basedOn" element.  i.e. Requests that are part of a CarePlan are not "based on" the CarePlan.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
}
public class CarePlan : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CarePlan";
  /// <summary>
  /// Identifies an action that has occurred or is a planned action to occur as part of the plan. For example, a medication to be used, lab tests to perform, self-monitoring that has occurred, education etc.
  /// </summary>
  [JsonPropertyName("activity")]
  public CarePlanActivity?[] Activity { get; set; }
  [JsonPropertyName("_activity")]
  public Element[] _Activity { get; set; }
  /// <summary>
  /// Use CarePlan.addresses.concept when a code sufficiently describes the concern (e.g. condition, problem, diagnosis, risk). Use CarePlan.addresses.reference when referencing a resource, which allows more information to be conveyed, such as onset date. CarePlan.addresses.concept and CarePlan.addresses.reference are not meant to be duplicative. For a single concern, either CarePlan.addresses.concept or CarePlan.addresses.reference can be used. CarePlan.addresses.concept may be a summary code, or CarePlan.addresses.reference may be used to reference a very precise definition of the concern using Condition. Both CarePlan.addresses.concept and CarePlan.addresses.reference can be used if they are describing different concerns for the care plan.
  /// </summary>
  [JsonPropertyName("addresses")]
  public CodeableReference?[] Addresses { get; set; }
  [JsonPropertyName("_addresses")]
  public Element[] _Addresses { get; set; }
  /// <summary>
  /// The author may also be a contributor.  For example, an organization can be an author, but not listed as a contributor.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// A care plan that is fulfilled in whole or in part by this care plan.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
  /// </summary>
  [JsonPropertyName("careTeam")]
  public Reference?[] CareTeam { get; set; }
  [JsonPropertyName("_careTeam")]
  public Element[] _CareTeam { get; set; }
  /// <summary>
  /// There may be multiple axes of categorization and one plan may serve multiple purposes.  In some cases, this may be redundant with references to CarePlan.concern.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// Collaborative care plans may have multiple contributors.
  /// </summary>
  [JsonPropertyName("contributor")]
  public Reference?[] Contributor { get; set; }
  [JsonPropertyName("_contributor")]
  public Element[] _Contributor { get; set; }
  /// <summary>
  /// Represents when this particular CarePlan record was created in the system, which is often a system-generated date.
  /// </summary>
  [JsonPropertyName("created")]
  public string? Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// A description of the scope and nature of the plan.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. CarePlan activities conducted as a result of the care plan may well occur as part of other encounters.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Goal can be achieving a particular change or merely maintaining a current state or even slowing a decline.
  /// </summary>
  [JsonPropertyName("goal")]
  public Reference?[] Goal { get; set; }
  [JsonPropertyName("_goal")]
  public Element[] _Goal { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
  /// This element is expected to be immutable. E.g. A "proposal" instance should never change to be a "plan" instance or "order" instance. Instead, a new instance 'basedOn' the prior instance should be created with the new 'intent' value.
  /// </summary>
  [JsonPropertyName("intent")]
  public string Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// General notes about the care plan not covered elsewhere.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Each care plan is an independent request, such that having a care plan be part of another care plan can cause issues with cascading statuses.  As such, this element is still being discussed.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Any activities scheduled as part of the plan should be constrained to the specified period regardless of whether the activities are planned within a single encounter/episode or across multiple encounters/episodes (e.g. the longitudinal management of a chronic condition).
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// The replacement could be because the initial care plan was immediately rejected (due to an issue) or because the previous care plan was completed, but the need for the action described by the care plan remains ongoing.
  /// </summary>
  [JsonPropertyName("replaces")]
  public Reference?[] Replaces { get; set; }
  [JsonPropertyName("_replaces")]
  public Element[] _Replaces { get; set; }
  /// <summary>
  /// The unknown code is not to be used to convey other statuses.  The unknown code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the care plan.
  /// 
  /// This element is labeled as a modifier because the status contains the code entered-in-error that marks the plan as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Identifies the patient or group whose intended care is described by the plan.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Use "concern" to identify specific conditions addressed by the care plan.  supportingInfo can be used to convey one or more Advance Directives or Medical Treatment Consent Directives by referencing Consent or any other request resource with intent = directive.
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public Reference?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
  /// <summary>
  /// Human-friendly name for the care plan.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
/// <summary>
/// Code Values for the CarePlan.intent field
/// </summary>
public sealed class CarePlanIntentCodes {
  public const string PROPOSAL = "proposal";
  public const string PLAN = "plan";
  public const string ORDER = "order";
  public const string OPTION = "option";
  public const string DIRECTIVE = "directive";
}
/// <summary>
/// Code Values for the CarePlan.status field
/// </summary>
public sealed class CarePlanStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string ON_HOLD = "on-hold";
  public const string REVOKED = "revoked";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Identifies all people and organizations who are expected to be involved in the care team.
/// </summary>
public class CareTeamParticipant : BackboneElement {
  /// <summary>
  /// This is populated while creating / managing the CareTeam to ensure there is coverage when servicing CarePlan activities from the Schedule.
  /// </summary>
  [JsonPropertyName("coveragePeriod")]
  public Period? CoveragePeriod { get; set; }
  [JsonPropertyName("_coveragePeriod")]
  public Element _CoveragePeriod { get; set; }
  /// <summary>
  /// This is populated while creating / managing the CareTeam to ensure there is coverage when servicing CarePlan activities from the Schedule.
  /// </summary>
  [JsonPropertyName("coverageTiming")]
  public Timing? CoverageTiming { get; set; }
  [JsonPropertyName("_coverageTiming")]
  public Element _CoverageTiming { get; set; }
  /// <summary>
  /// Patient only needs to be listed if they have a role other than "subject of care".
  /// 
  /// Member is optional because some participants may be known only by their role, particularly in draft plans.
  /// </summary>
  [JsonPropertyName("member")]
  public Reference? Member { get; set; }
  [JsonPropertyName("_member")]
  public Element _Member { get; set; }
  /// <summary>
  /// The organization of the practitioner.
  /// </summary>
  [JsonPropertyName("onBehalfOf")]
  public Reference? OnBehalfOf { get; set; }
  [JsonPropertyName("_onBehalfOf")]
  public Element _OnBehalfOf { get; set; }
  /// <summary>
  /// Roles may sometimes be inferred by type of Practitioner.  These are relationships that hold only within the context of the care team.  General relationships should be handled as properties of the Patient resource directly.  If a participant has multiple roles within the team, then there should be multiple participants.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
public class CareTeam : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CareTeam";
  /// <summary>
  /// There may be multiple axis of categorization and one team may serve multiple purposes.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The organization responsible for the care team.
  /// </summary>
  [JsonPropertyName("managingOrganization")]
  public Reference?[] ManagingOrganization { get; set; }
  [JsonPropertyName("_managingOrganization")]
  public Element[] _ManagingOrganization { get; set; }
  /// <summary>
  /// The meaning/purpose of the team is conveyed in CareTeam.category.  This element may also convey semantics of the team (e.g. "Red trauma team"), but its primary purpose is to distinguish between identical teams in a human-friendly way.  ("Team 18735" isn't as friendly.).
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Comments made about the CareTeam.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Identifies all people and organizations who are expected to be involved in the care team.
  /// </summary>
  [JsonPropertyName("participant")]
  public CareTeamParticipant?[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// Indicates when the team did (or is intended to) come into effect and end.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Describes why the care team exists.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the code entered-in-error that marks the care team as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Identifies the patient or group whose intended care is handled by the team.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// The ContactPoint.use code of home is not appropriate to use. These contacts are not the contact details of individual care team members.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Code Values for the CareTeam.status field
/// </summary>
public sealed class CareTeamStatusCodes {
  public const string PROPOSED = "proposed";
  public const string ACTIVE = "active";
  public const string SUSPENDED = "suspended";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Used for example, to point to a substance, or to a device used to administer a medication.
/// </summary>
public class CatalogEntryRelatedEntry : BackboneElement {
  /// <summary>
  /// The type of relationship to the related entry.
  /// </summary>
  [JsonPropertyName("relationship")]
  public string Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
  /// <summary>
  /// The reference to the related entry.
  /// </summary>
  [JsonPropertyName("target")]
  public Reference Target { get; set; }
  [JsonPropertyName("_target")]
  public Element _Target { get; set; }
}
/// <summary>
/// Code Values for the CatalogEntry.relatedEntry.relationship field
/// </summary>
public sealed class CatalogEntryRelatedEntryRelationshipCodes {
  public const string TRIGGERS = "triggers";
  public const string IS_REPLACED_BY = "is-replaced-by";
  public const string EXCLUDES = "excludes";
  public const string INCLUDES = "includes";
}
public class CatalogEntry : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CatalogEntry";
  /// <summary>
  /// Billing code associated to the  item in the context of this  entry of the catalog.
  /// </summary>
  [JsonPropertyName("billingCode")]
  public CodeableConcept?[] BillingCode { get; set; }
  [JsonPropertyName("_billingCode")]
  public Element[] _BillingCode { get; set; }
  /// <summary>
  /// Billing summary attached to the  item in the context of this  entry of the catalog.
  /// </summary>
  [JsonPropertyName("billingSummary")]
  public string? BillingSummary { get; set; }
  [JsonPropertyName("_billingSummary")]
  public Element _BillingSummary { get; set; }
  /// <summary>
  /// Period of usability of the catalog entry.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// Estimated duration of the orderable item of this  entry of the catalog.
  /// </summary>
  [JsonPropertyName("estimatedDuration")]
  public Duration? EstimatedDuration { get; set; }
  [JsonPropertyName("_estimatedDuration")]
  public Element _EstimatedDuration { get; set; }
  /// <summary>
  /// Business identifier uniquely assigned to the catalog entry.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Summary of limitations for the  item in the context of this  entry of the catalog.
  /// </summary>
  [JsonPropertyName("limitationSummary")]
  public string? LimitationSummary { get; set; }
  [JsonPropertyName("_limitationSummary")]
  public Element _LimitationSummary { get; set; }
  /// <summary>
  /// The name of this catalog entry announces the item that is represented by the entry.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Notes and comments about this catalog entry.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Indicates whether or not the entry represents an item that is orderable.
  /// </summary>
  [JsonPropertyName("orderable")]
  public bool Orderable { get; set; }
  [JsonPropertyName("_orderable")]
  public Element _Orderable { get; set; }
  /// <summary>
  /// The item (resource) that this entry of the catalog represents.
  /// </summary>
  [JsonPropertyName("referencedItem")]
  public Reference ReferencedItem { get; set; }
  [JsonPropertyName("_referencedItem")]
  public Element _ReferencedItem { get; set; }
  /// <summary>
  /// Regulatory summary for the  item in the context of this  entry of the catalog.
  /// </summary>
  [JsonPropertyName("regulatorySummary")]
  public string? RegulatorySummary { get; set; }
  [JsonPropertyName("_regulatorySummary")]
  public Element _RegulatorySummary { get; set; }
  /// <summary>
  /// Used for example, to point to a substance, or to a device used to administer a medication.
  /// </summary>
  [JsonPropertyName("relatedEntry")]
  public CatalogEntryRelatedEntry?[] RelatedEntry { get; set; }
  [JsonPropertyName("_relatedEntry")]
  public Element[] _RelatedEntry { get; set; }
  /// <summary>
  /// Schedule summary for the  item in the context of this  entry of the catalog.
  /// </summary>
  [JsonPropertyName("scheduleSummary")]
  public string? ScheduleSummary { get; set; }
  [JsonPropertyName("_scheduleSummary")]
  public Element _ScheduleSummary { get; set; }
  /// <summary>
  /// Indicates whether this catalog entry is open to public usage (active) or not (draft or retired).
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The type of resource that is represented by this catalog entry.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Last actor who recorded (created or updated) this catalog entry.
  /// </summary>
  [JsonPropertyName("updatedBy")]
  public Reference? UpdatedBy { get; set; }
  [JsonPropertyName("_updatedBy")]
  public Element _UpdatedBy { get; set; }
}
/// <summary>
/// Code Values for the CatalogEntry.status field
/// </summary>
public sealed class CatalogEntryStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
}
/// <summary>
/// Code Values for the CatalogEntry.type field
/// </summary>
public sealed class CatalogEntryTypeCodes {
  public const string ACTIVITYDEFINITION = "ActivityDefinition";
  public const string PLANDEFINITION = "PlanDefinition";
  public const string SPECIMENDEFINITION = "SpecimenDefinition";
  public const string OBSERVATIONDEFINITION = "ObservationDefinition";
  public const string DEVICEDEFINITION = "DeviceDefinition";
  public const string ORGANIZATION = "Organization";
  public const string PRACTITIONER = "Practitioner";
  public const string PRACTITIONERROLE = "PractitionerRole";
  public const string HEALTHCARESERVICE = "HealthcareService";
  public const string MEDICATIONKNOWLEDGE = "MedicationKnowledge";
  public const string MEDICATION = "Medication";
  public const string SUBSTANCE = "Substance";
  public const string LOCATION = "Location";
}
/// <summary>
/// Indicates who or what performed or participated in the charged service.
/// </summary>
public class ChargeItemPerformer : BackboneElement {
  /// <summary>
  /// The device, practitioner, etc. who performed or participated in the service.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.).
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept? Function { get; set; }
  [JsonPropertyName("_function")]
  public Element _Function { get; set; }
}
public class ChargeItem : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ChargeItem";
  /// <summary>
  /// Systems posting the ChargeItems might not always be able to determine, which accounts the Items need to be places into. It is up to the postprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
  /// </summary>
  [JsonPropertyName("account")]
  public Reference?[] Account { get; set; }
  [JsonPropertyName("_account")]
  public Element[] _Account { get; set; }
  /// <summary>
  /// Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [bodySite](extension-bodysite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
  /// </summary>
  [JsonPropertyName("bodysite")]
  public CodeableConcept?[] Bodysite { get; set; }
  [JsonPropertyName("_bodysite")]
  public Element[] _Bodysite { get; set; }
  /// <summary>
  /// A code that identifies the charge, like a billing code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The encounter or episode of care that establishes the context for this event.
  /// </summary>
  [JsonPropertyName("context")]
  public Reference? Context { get; set; }
  [JsonPropertyName("_context")]
  public Element _Context { get; set; }
  /// <summary>
  /// The costCenter could either be given as a reference to an Organization(Role) resource or as the identifier of the cost center determined by Reference.identifier.value and Reference.identifier.system, depending on use case requirements.
  /// </summary>
  [JsonPropertyName("costCenter")]
  public Reference? CostCenter { get; set; }
  [JsonPropertyName("_costCenter")]
  public Element _CostCenter { get; set; }
  /// <summary>
  /// References the source of pricing information, rules of application for the code this ChargeItem uses.
  /// </summary>
  [JsonPropertyName("definitionCanonical")]
  public string?[] DefinitionCanonical { get; set; }
  [JsonPropertyName("_definitionCanonical")]
  public Element[] _DefinitionCanonical { get; set; }
  /// <summary>
  /// References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
  /// </summary>
  [JsonPropertyName("definitionUri")]
  public string?[] DefinitionUri { get; set; }
  [JsonPropertyName("_definitionUri")]
  public Element[] _DefinitionUri { get; set; }
  /// <summary>
  /// The actual date when the service associated with the charge has been rendered is captured in occurrence[x].
  /// </summary>
  [JsonPropertyName("enteredDate")]
  public string? EnteredDate { get; set; }
  [JsonPropertyName("_enteredDate")]
  public Element _EnteredDate { get; set; }
  /// <summary>
  /// The enterer is also the person considered responsible for factor/price overrides if applicable.
  /// </summary>
  [JsonPropertyName("enterer")]
  public Reference? Enterer { get; set; }
  [JsonPropertyName("_enterer")]
  public Element _Enterer { get; set; }
  /// <summary>
  /// There is no reason to carry the factor in the instance of a ChargeItem unless special circumstances require a manual override. The factors are usually defined by a set of rules in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
  /// </summary>
  [JsonPropertyName("factorOverride")]
  public decimal? FactorOverride { get; set; }
  [JsonPropertyName("_factorOverride")]
  public Element _FactorOverride { get; set; }
  /// <summary>
  /// Identifiers assigned to this event performer or other systems.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Comments made about the event by the performer, subject or other participants.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The list of types may be constrained as appropriate for the type of charge item.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// The list of types may be constrained as appropriate for the type of charge item.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// The list of types may be constrained as appropriate for the type of charge item.
  /// </summary>
  [JsonPropertyName("occurrenceTiming")]
  public Timing? OccurrenceTiming { get; set; }
  [JsonPropertyName("_occurrenceTiming")]
  public Element _OccurrenceTiming { get; set; }
  /// <summary>
  /// Derived Profiles may choose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
  /// </summary>
  [JsonPropertyName("overrideReason")]
  public string? OverrideReason { get; set; }
  [JsonPropertyName("_overrideReason")]
  public Element _OverrideReason { get; set; }
  /// <summary>
  /// ChargeItems can be grouped to larger ChargeItems covering the whole set.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Indicates who or what performed or participated in the charged service.
  /// </summary>
  [JsonPropertyName("performer")]
  public ChargeItemPerformer?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
  /// </summary>
  [JsonPropertyName("performingOrganization")]
  public Reference? PerformingOrganization { get; set; }
  [JsonPropertyName("_performingOrganization")]
  public Element _PerformingOrganization { get; set; }
  /// <summary>
  /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
  /// </summary>
  [JsonPropertyName("priceOverride")]
  public Money? PriceOverride { get; set; }
  [JsonPropertyName("_priceOverride")]
  public Element _PriceOverride { get; set; }
  /// <summary>
  /// Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
  /// </summary>
  [JsonPropertyName("productReference")]
  public Reference? ProductReference { get; set; }
  [JsonPropertyName("_productReference")]
  public Element _ProductReference { get; set; }
  /// <summary>
  /// Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
  /// </summary>
  [JsonPropertyName("productCodeableConcept")]
  public CodeableConcept? ProductCodeableConcept { get; set; }
  [JsonPropertyName("_productCodeableConcept")]
  public Element _ProductCodeableConcept { get; set; }
  /// <summary>
  /// In many cases this may just be a value, if the underlying units are implicit in the definition of the charge item code.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// If the application of the charge item requires a reason to be given, it can be captured here. Textual reasons can be captured using reasonCode.text.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The rendered Service might not be associated with a Request. This property indicates which Organization requested the services to be rendered. (In many cases, this may just be the Department associated with the Encounter.location).
  /// </summary>
  [JsonPropertyName("requestingOrganization")]
  public Reference? RequestingOrganization { get; set; }
  [JsonPropertyName("_requestingOrganization")]
  public Element _RequestingOrganization { get; set; }
  /// <summary>
  /// Indicated the rendered service that caused this charge.
  /// </summary>
  [JsonPropertyName("service")]
  public Reference?[] Service { get; set; }
  [JsonPropertyName("_service")]
  public Element[] _Service { get; set; }
  /// <summary>
  /// Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
  /// 
  /// This element is labeled as a modifier because the status contains the code entered-in-error that marks the charge item as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The individual or set of individuals the action is being or was performed on.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Further information supporting this charge.
  /// </summary>
  [JsonPropertyName("supportingInformation")]
  public Reference?[] SupportingInformation { get; set; }
  [JsonPropertyName("_supportingInformation")]
  public Element[] _SupportingInformation { get; set; }
}
/// <summary>
/// Code Values for the ChargeItem.status field
/// </summary>
public sealed class ChargeItemStatusCodes {
  public const string PLANNED = "planned";
  public const string BILLABLE = "billable";
  public const string NOT_BILLABLE = "not-billable";
  public const string ABORTED = "aborted";
  public const string BILLED = "billed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
/// </summary>
public class ChargeItemDefinitionApplicability : BackboneElement {
  /// <summary>
  /// A brief, natural language description of the condition that effectively communicates the intended semantics.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Please note that FHIRPath Expressions can only be evaluated in the scope of the current ChargeItem resource to which this definition is being applied.
  /// FHIRPath expressions can traverse into other resources linked from the ChargeItem resource, however, testing rules such as that a billing code may be billed only once per encounter need a wider scope. In such scenarios, CQL may be the appropriate choice.
  /// </summary>
  [JsonPropertyName("expression")]
  public string? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// The media type of the language for the expression, e.g. "text/cql" for Clinical Query Language expressions or "text/fhirpath" for FHIRPath expressions.
  /// </summary>
  [JsonPropertyName("language")]
  public string? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
}
/// <summary>
/// The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
/// </summary>
public class ChargeItemDefinitionPropertyGroupPriceComponent : BackboneElement {
  /// <summary>
  /// The amount calculated for this component.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The factor that has been applied on the base price for calculating this component.
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// This code identifies the type of the component.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the ChargeItemDefinition.propertyGroup.priceComponent.type field
/// </summary>
public sealed class ChargeItemDefinitionPropertyGroupPriceComponentTypeCodes {
  public const string VAL_BASE = "base";
  public const string SURCHARGE = "surcharge";
  public const string DEDUCTION = "deduction";
  public const string DISCOUNT = "discount";
  public const string TAX = "tax";
  public const string INFORMATIONAL = "informational";
}
/// <summary>
/// Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
/// </summary>
public class ChargeItemDefinitionPropertyGroup : BackboneElement {
  /// <summary>
  /// The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
  /// </summary>
  [JsonPropertyName("applicability")]
  public ChargeItemDefinitionApplicability?[] Applicability { get; set; }
  [JsonPropertyName("_applicability")]
  public Element[] _Applicability { get; set; }
  /// <summary>
  /// The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.
  /// </summary>
  [JsonPropertyName("priceComponent")]
  public ChargeItemDefinitionPropertyGroupPriceComponent?[] PriceComponent { get; set; }
  [JsonPropertyName("_priceComponent")]
  public Element[] _PriceComponent { get; set; }
}
public class ChargeItemDefinition : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ChargeItemDefinition";
  /// <summary>
  /// The applicability conditions can be used to ascertain whether a billing item is allowed in a specific context. E.g. some billing codes may only be applicable in out-patient settings, only to male/female patients or only to children.
  /// </summary>
  [JsonPropertyName("applicability")]
  public ChargeItemDefinitionApplicability?[] Applicability { get; set; }
  [JsonPropertyName("_applicability")]
  public Element[] _Applicability { get; set; }
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// The defined billing details in this resource pertain to the given billing code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the charge item definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition.
  /// </summary>
  [JsonPropertyName("derivedFromUri")]
  public string?[] DerivedFromUri { get; set; }
  [JsonPropertyName("_derivedFromUri")]
  public Element[] _DerivedFromUri { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the charge item definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the charge item definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the charge item definition is presumed to be the predominant language in the place the charge item definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The effective period for a charge item definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// Allows filtering of charge item definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this charge item definition outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// In case of highly customized, individually produced or fitted devices/substances, the pricing information may be different for each instance of the product. This reference links pricing details to specific product instances.
  /// </summary>
  [JsonPropertyName("instance")]
  public Reference?[] Instance { get; set; }
  [JsonPropertyName("_instance")]
  public Element[] _Instance { get; set; }
  /// <summary>
  /// It may be possible for the charge item definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// A larger definition of which this particular definition is a component or step.
  /// </summary>
  [JsonPropertyName("partOf")]
  public string?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.
  /// </summary>
  [JsonPropertyName("propertyGroup")]
  public ChargeItemDefinitionPropertyGroup?[] PropertyGroup { get; set; }
  [JsonPropertyName("_propertyGroup")]
  public Element[] _PropertyGroup { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the charge item definition is the organization or individual primarily responsible for the maintenance and upkeep of the charge item definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the charge item definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance.
  /// </summary>
  [JsonPropertyName("replaces")]
  public string?[] Replaces { get; set; }
  [JsonPropertyName("_replaces")]
  public Element[] _Replaces { get; set; }
  /// <summary>
  /// Allows filtering of charge item definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different charge item definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the charge item definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the ChargeItemDefinition.status field
/// </summary>
public sealed class ChargeItemDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Variant citation.
/// </summary>
public class CitationVariantCitation : BackboneElement {
  /// <summary>
  /// Base citation.
  /// </summary>
  [JsonPropertyName("baseCitation")]
  public Reference? BaseCitation { get; set; }
  [JsonPropertyName("_baseCitation")]
  public Element _BaseCitation { get; set; }
  /// <summary>
  /// Used to describe the reason for the variant citation, such as version or subpart specification.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Used to describe the specific variation, such as version number or subpart specification.
  /// </summary>
  [JsonPropertyName("value")]
  public string? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// The specific issue in which the cited article resides.
/// </summary>
public class CitationJournalJournalIssue : BackboneElement {
  /// <summary>
  /// NLM codes Internet or Print.
  /// </summary>
  [JsonPropertyName("citedMedium")]
  public CodeableConcept? CitedMedium { get; set; }
  [JsonPropertyName("_citedMedium")]
  public Element _CitedMedium { get; set; }
  /// <summary>
  /// Issue, part or supplement of journal in which the article is published.
  /// </summary>
  [JsonPropertyName("issue")]
  public string? Issue { get; set; }
  [JsonPropertyName("_issue")]
  public Element _Issue { get; set; }
  /// <summary>
  /// Date on which the issue of the journal was published.
  /// </summary>
  [JsonPropertyName("publicationDate")]
  public string? PublicationDate { get; set; }
  [JsonPropertyName("_publicationDate")]
  public Element _PublicationDate { get; set; }
  /// <summary>
  /// Volume number of journal in which the article is published.
  /// </summary>
  [JsonPropertyName("volume")]
  public string? Volume { get; set; }
  [JsonPropertyName("_volume")]
  public Element _Volume { get; set; }
}
/// <summary>
/// Contains identifiers and classifiers for the journal cited.
/// </summary>
public class CitationJournal : BackboneElement {
  /// <summary>
  /// Place of publication of the journal.
  /// </summary>
  [JsonPropertyName("country")]
  public string? Country { get; set; }
  [JsonPropertyName("_country")]
  public Element _Country { get; set; }
  /// <summary>
  /// Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The specific issue in which the cited article resides.
  /// </summary>
  [JsonPropertyName("journalIssue")]
  public CitationJournalJournalIssue? JournalIssue { get; set; }
  [JsonPropertyName("_journalIssue")]
  public Element _JournalIssue { get; set; }
  /// <summary>
  /// Journal title.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
/// <summary>
/// Used for variant titles, such as translations.
/// </summary>
public class CitationAlternativeTitle : BackboneElement {
  /// <summary>
  /// Used to express the specific language.
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// Full variant title of the article.
  /// </summary>
  [JsonPropertyName("title")]
  public string Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Used to express the reason and specific aspect for the variant title, such as language and specific language.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Indicates the inclusive pages for the article cited.
/// </summary>
public class CitationPagination : BackboneElement {
  /// <summary>
  /// Used for isolated representation of first page.
  /// </summary>
  [JsonPropertyName("firstPage")]
  public string? FirstPage { get; set; }
  [JsonPropertyName("_firstPage")]
  public Element _FirstPage { get; set; }
  /// <summary>
  /// Used for isolated representation of last page.
  /// </summary>
  [JsonPropertyName("lastPage")]
  public string? LastPage { get; set; }
  [JsonPropertyName("_lastPage")]
  public Element _LastPage { get; set; }
  /// <summary>
  /// Used for full display of pagination.
  /// </summary>
  [JsonPropertyName("pageString")]
  public string? PageString { get; set; }
  [JsonPropertyName("_pageString")]
  public Element _PageString { get; set; }
}
/// <summary>
/// Used for any URL for the article cited.
/// </summary>
public class CitationArticleUrl : BackboneElement {
  /// <summary>
  /// Code the reason for different URLs, eg abstract and full-text.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The specific URL.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Used for variant abstracts, such as translations.
/// </summary>
public class CitationAlternativeAbstract : BackboneElement {
  /// <summary>
  /// Full variant abstract of the article.
  /// </summary>
  [JsonPropertyName("abstract")]
  public string Abstract { get; set; }
  [JsonPropertyName("_abstract")]
  public Element _Abstract { get; set; }
  /// <summary>
  /// Copyright information for the abstract text.
  /// </summary>
  [JsonPropertyName("abstractCopyright")]
  public string? AbstractCopyright { get; set; }
  [JsonPropertyName("_abstractCopyright")]
  public Element _AbstractCopyright { get; set; }
  /// <summary>
  /// Used to express the specific language.
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// Used to express the reason for the variant abstract, such as language.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Organizational affiliation.
/// </summary>
public class CitationAuthorListAuthorAffiliationInfo : BackboneElement {
  /// <summary>
  /// Display for the organization.
  /// </summary>
  [JsonPropertyName("affiliation")]
  public string? Affiliation { get; set; }
  [JsonPropertyName("_affiliation")]
  public Element _Affiliation { get; set; }
  /// <summary>
  /// Identifier for the organization.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Role.
  /// </summary>
  [JsonPropertyName("role")]
  public string? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
/// <summary>
/// An individual entity named in the author list.
/// </summary>
public class CitationAuthorListAuthor : BackboneElement {
  /// <summary>
  /// Physical mailing address for the author.
  /// </summary>
  [JsonPropertyName("address")]
  public string?[] Address { get; set; }
  [JsonPropertyName("_address")]
  public Element[] _Address { get; set; }
  /// <summary>
  /// Organizational affiliation.
  /// </summary>
  [JsonPropertyName("affiliationInfo")]
  public CitationAuthorListAuthorAffiliationInfo?[] AffiliationInfo { get; set; }
  [JsonPropertyName("_affiliationInfo")]
  public Element[] _AffiliationInfo { get; set; }
  /// <summary>
  /// Used for collective or corporate name as an author.
  /// </summary>
  [JsonPropertyName("collectiveName")]
  public string? CollectiveName { get; set; }
  [JsonPropertyName("_collectiveName")]
  public Element _CollectiveName { get; set; }
  /// <summary>
  /// Indication of which author is the corresponding author for the article cited.
  /// </summary>
  [JsonPropertyName("correspondingAuthor")]
  public bool? CorrespondingAuthor { get; set; }
  [JsonPropertyName("_correspondingAuthor")]
  public Element _CorrespondingAuthor { get; set; }
  /// <summary>
  /// Remainder of name except for suffix.
  /// </summary>
  [JsonPropertyName("foreName")]
  public string? ForeName { get; set; }
  [JsonPropertyName("_foreName")]
  public Element _ForeName { get; set; }
  /// <summary>
  /// Author identifier, eg ORCID.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Initials for forename.
  /// </summary>
  [JsonPropertyName("initials")]
  public string? Initials { get; set; }
  [JsonPropertyName("_initials")]
  public Element _Initials { get; set; }
  /// <summary>
  /// Surname or single name.
  /// </summary>
  [JsonPropertyName("lastName")]
  public string? LastName { get; set; }
  [JsonPropertyName("_lastName")]
  public Element _LastName { get; set; }
  /// <summary>
  /// Used to code order of authors.
  /// </summary>
  [JsonPropertyName("listOrder")]
  public uint? ListOrder { get; set; }
  [JsonPropertyName("_listOrder")]
  public Element _ListOrder { get; set; }
  /// <summary>
  /// Eg 2nd, 3rd, Jr, Sr.
  /// </summary>
  [JsonPropertyName("suffix")]
  public string? Suffix { get; set; }
  [JsonPropertyName("_suffix")]
  public Element _Suffix { get; set; }
  /// <summary>
  /// Email or telephone contact methods for the author.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Personal and collective author names.
/// </summary>
public class CitationAuthorList : BackboneElement {
  /// <summary>
  /// An individual entity named in the author list.
  /// </summary>
  [JsonPropertyName("author")]
  public CitationAuthorListAuthor[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// Indicates if the list includes all authors, else “et al” should be appended for display.
  /// </summary>
  [JsonPropertyName("complete")]
  public bool? Complete { get; set; }
  [JsonPropertyName("_complete")]
  public Element _Complete { get; set; }
}
/// <summary>
/// Used to record a display of the author list without separate coding for each author.
/// </summary>
public class CitationAuthorString : BackboneElement {
  /// <summary>
  /// Used to code the producer or rule for creating the display string.
  /// </summary>
  [JsonPropertyName("source")]
  public CodeableConcept? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// The display string for the author list.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Organizational affiliation.
/// </summary>
public class CitationContributorListContributorAffiliationInfo : BackboneElement {
  /// <summary>
  /// Display for the organization.
  /// </summary>
  [JsonPropertyName("affiliation")]
  public string? Affiliation { get; set; }
  [JsonPropertyName("_affiliation")]
  public Element _Affiliation { get; set; }
  /// <summary>
  /// Identifier for the organization.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Role.
  /// </summary>
  [JsonPropertyName("role")]
  public string? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
/// <summary>
/// An individual entity named in the contributor list.
/// </summary>
public class CitationContributorListContributor : BackboneElement {
  /// <summary>
  /// Organizational affiliation.
  /// </summary>
  [JsonPropertyName("affiliationInfo")]
  public CitationContributorListContributorAffiliationInfo?[] AffiliationInfo { get; set; }
  [JsonPropertyName("_affiliationInfo")]
  public Element[] _AffiliationInfo { get; set; }
  /// <summary>
  /// Used for collective or corporate name as a contributor.
  /// </summary>
  [JsonPropertyName("collectiveName")]
  public string? CollectiveName { get; set; }
  [JsonPropertyName("_collectiveName")]
  public Element _CollectiveName { get; set; }
  /// <summary>
  /// The specific contributions.
  /// </summary>
  [JsonPropertyName("contribution")]
  public CodeableConcept?[] Contribution { get; set; }
  [JsonPropertyName("_contribution")]
  public Element[] _Contribution { get; set; }
  /// <summary>
  /// Remainder of name except for suffix.
  /// </summary>
  [JsonPropertyName("foreName")]
  public string? ForeName { get; set; }
  [JsonPropertyName("_foreName")]
  public Element _ForeName { get; set; }
  /// <summary>
  /// Contributor identifier, eg ORCID.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Initials for forename.
  /// </summary>
  [JsonPropertyName("initials")]
  public string? Initials { get; set; }
  [JsonPropertyName("_initials")]
  public Element _Initials { get; set; }
  /// <summary>
  /// Surname or single name.
  /// </summary>
  [JsonPropertyName("lastName")]
  public string? LastName { get; set; }
  [JsonPropertyName("_lastName")]
  public Element _LastName { get; set; }
  /// <summary>
  /// Used to code order of contributors.
  /// </summary>
  [JsonPropertyName("listOrder")]
  public uint? ListOrder { get; set; }
  [JsonPropertyName("_listOrder")]
  public Element _ListOrder { get; set; }
  /// <summary>
  /// Eg 2nd, 3rd, Jr, Sr.
  /// </summary>
  [JsonPropertyName("suffix")]
  public string? Suffix { get; set; }
  [JsonPropertyName("_suffix")]
  public Element _Suffix { get; set; }
}
/// <summary>
/// Personal and collective contributor names.
/// </summary>
public class CitationContributorList : BackboneElement {
  /// <summary>
  /// Indicates if the list includes all contributors.
  /// </summary>
  [JsonPropertyName("complete")]
  public bool? Complete { get; set; }
  [JsonPropertyName("_complete")]
  public Element _Complete { get; set; }
  /// <summary>
  /// An individual entity named in the contributor list.
  /// </summary>
  [JsonPropertyName("contributor")]
  public CitationContributorListContributor[] Contributor { get; set; }
  [JsonPropertyName("_contributor")]
  public Element[] _Contributor { get; set; }
}
/// <summary>
/// The specific issue in which the cited article resides.
/// </summary>
public class CitationAlternativeFormJournalIssue : BackboneElement {
  /// <summary>
  /// NLM codes Internet or Print.
  /// </summary>
  [JsonPropertyName("citedMedium")]
  public CodeableConcept? CitedMedium { get; set; }
  [JsonPropertyName("_citedMedium")]
  public Element _CitedMedium { get; set; }
  /// <summary>
  /// Issue, part or supplement of journal in which the article is published.
  /// </summary>
  [JsonPropertyName("issue")]
  public string? Issue { get; set; }
  [JsonPropertyName("_issue")]
  public Element _Issue { get; set; }
  /// <summary>
  /// Date on which the issue of the journal was published.
  /// </summary>
  [JsonPropertyName("publicationDate")]
  public string? PublicationDate { get; set; }
  [JsonPropertyName("_publicationDate")]
  public Element _PublicationDate { get; set; }
  /// <summary>
  /// Volume number of journal in which the article is published.
  /// </summary>
  [JsonPropertyName("volume")]
  public string? Volume { get; set; }
  [JsonPropertyName("_volume")]
  public Element _Volume { get; set; }
}
/// <summary>
/// Indicates the inclusive pages for the article cited.
/// </summary>
public class CitationAlternativeFormPagination : BackboneElement {
  /// <summary>
  /// Used for isolated representation of first page.
  /// </summary>
  [JsonPropertyName("firstPage")]
  public string? FirstPage { get; set; }
  [JsonPropertyName("_firstPage")]
  public Element _FirstPage { get; set; }
  /// <summary>
  /// Used for isolated representation of last page.
  /// </summary>
  [JsonPropertyName("lastPage")]
  public string? LastPage { get; set; }
  [JsonPropertyName("_lastPage")]
  public Element _LastPage { get; set; }
  /// <summary>
  /// Used for full display of pagination.
  /// </summary>
  [JsonPropertyName("pageString")]
  public string? PageString { get; set; }
  [JsonPropertyName("_pageString")]
  public Element _PageString { get; set; }
}
/// <summary>
/// Used to represent alternative forms of the article that are not separate citations.
/// </summary>
public class CitationAlternativeForm : BackboneElement {
  /// <summary>
  /// The specific issue in which the cited article resides.
  /// </summary>
  [JsonPropertyName("journalIssue")]
  public CitationAlternativeFormJournalIssue? JournalIssue { get; set; }
  [JsonPropertyName("_journalIssue")]
  public Element _JournalIssue { get; set; }
  /// <summary>
  /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// Indicates the inclusive pages for the article cited.
  /// </summary>
  [JsonPropertyName("pagination")]
  public CitationAlternativeFormPagination? Pagination { get; set; }
  [JsonPropertyName("_pagination")]
  public Element _Pagination { get; set; }
  /// <summary>
  /// Identify the medium/media in which the cited article is published, eg print, electronic or print-electronic.
  /// </summary>
  [JsonPropertyName("publishingModel")]
  public CodeableConcept? PublishingModel { get; set; }
  [JsonPropertyName("_publishingModel")]
  public Element _PublishingModel { get; set; }
}
/// <summary>
/// Subcomponent of certainty.
/// </summary>
public class CitationMedlinePubMedPubMedPubDate : BackboneElement {
  /// <summary>
  /// PubMed Publication Date.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// PubMed Publication Status.
  /// </summary>
  [JsonPropertyName("publicationState")]
  public CodeableConcept? PublicationState { get; set; }
  [JsonPropertyName("_publicationState")]
  public Element _PublicationState { get; set; }
}
/// <summary>
/// Related article.
/// </summary>
public class CitationMedlinePubMedRelatedArticle : BackboneElement {
  /// <summary>
  /// Citation string for related article.
  /// </summary>
  [JsonPropertyName("citationMarkdown")]
  public string? CitationMarkdown { get; set; }
  [JsonPropertyName("_citationMarkdown")]
  public Element _CitationMarkdown { get; set; }
  /// <summary>
  /// Citation Resource for related article.
  /// </summary>
  [JsonPropertyName("citationReference")]
  public Reference? CitationReference { get; set; }
  [JsonPropertyName("_citationReference")]
  public Element _CitationReference { get; set; }
  /// <summary>
  /// Identifier for related article.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
}
/// <summary>
/// These elements are items with values assigned by MEDLINE or PubMed management.
/// </summary>
public class CitationMedlinePubMed : BackboneElement {
  /// <summary>
  /// Completion date.
  /// </summary>
  [JsonPropertyName("dateCompleted")]
  public string? DateCompleted { get; set; }
  [JsonPropertyName("_dateCompleted")]
  public Element _DateCompleted { get; set; }
  /// <summary>
  /// Creation date.
  /// </summary>
  [JsonPropertyName("dateCreated")]
  public string? DateCreated { get; set; }
  [JsonPropertyName("_dateCreated")]
  public Element _DateCreated { get; set; }
  /// <summary>
  /// Revision date.
  /// </summary>
  [JsonPropertyName("dateRevised")]
  public string? DateRevised { get; set; }
  [JsonPropertyName("_dateRevised")]
  public Element _DateRevised { get; set; }
  /// <summary>
  /// Used for status.
  /// </summary>
  [JsonPropertyName("medlineState")]
  public CodeableConcept? MedlineState { get; set; }
  [JsonPropertyName("_medlineState")]
  public Element _MedlineState { get; set; }
  /// <summary>
  /// Used for owner.
  /// </summary>
  [JsonPropertyName("owner")]
  public CodeableConcept? Owner { get; set; }
  [JsonPropertyName("_owner")]
  public Element _Owner { get; set; }
  /// <summary>
  /// PubMed ID.
  /// </summary>
  [JsonPropertyName("pmid")]
  public uint? Pmid { get; set; }
  [JsonPropertyName("_pmid")]
  public Element _Pmid { get; set; }
  /// <summary>
  /// PubMed ID Version.
  /// </summary>
  [JsonPropertyName("pmidVersion")]
  public uint? PmidVersion { get; set; }
  [JsonPropertyName("_pmidVersion")]
  public Element _PmidVersion { get; set; }
  /// <summary>
  /// Publication Status.
  /// </summary>
  [JsonPropertyName("publicationState")]
  public CodeableConcept? PublicationState { get; set; }
  [JsonPropertyName("_publicationState")]
  public Element _PublicationState { get; set; }
  /// <summary>
  /// Subcomponent of certainty.
  /// </summary>
  [JsonPropertyName("pubMedPubDate")]
  public CitationMedlinePubMedPubMedPubDate?[] PubMedPubDate { get; set; }
  [JsonPropertyName("_pubMedPubDate")]
  public Element[] _PubMedPubDate { get; set; }
  /// <summary>
  /// Related article.
  /// </summary>
  [JsonPropertyName("relatedArticle")]
  public CitationMedlinePubMedRelatedArticle?[] RelatedArticle { get; set; }
  [JsonPropertyName("_relatedArticle")]
  public Element[] _RelatedArticle { get; set; }
}
public class Citation : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Citation";
  /// <summary>
  /// Abstract text, may include structured labels.
  /// </summary>
  [JsonPropertyName("abstract")]
  public string? Abstract { get; set; }
  [JsonPropertyName("_abstract")]
  public Element _Abstract { get; set; }
  /// <summary>
  /// Copyright information for the abstract text.
  /// </summary>
  [JsonPropertyName("abstractCopyright")]
  public string? AbstractCopyright { get; set; }
  [JsonPropertyName("_abstractCopyright")]
  public Element _AbstractCopyright { get; set; }
  /// <summary>
  /// Used for variant abstracts, such as translations.
  /// </summary>
  [JsonPropertyName("alternativeAbstract")]
  public CitationAlternativeAbstract?[] AlternativeAbstract { get; set; }
  [JsonPropertyName("_alternativeAbstract")]
  public Element[] _AlternativeAbstract { get; set; }
  /// <summary>
  /// Used to represent alternative forms of the article that are not separate citations.
  /// </summary>
  [JsonPropertyName("alternativeForm")]
  public CitationAlternativeForm?[] AlternativeForm { get; set; }
  [JsonPropertyName("_alternativeForm")]
  public Element[] _AlternativeForm { get; set; }
  /// <summary>
  /// Used for variant titles, such as translations.
  /// </summary>
  [JsonPropertyName("alternativeTitle")]
  public CitationAlternativeTitle?[] AlternativeTitle { get; set; }
  [JsonPropertyName("_alternativeTitle")]
  public Element[] _AlternativeTitle { get; set; }
  /// <summary>
  /// The language in which the article is published.
  /// </summary>
  [JsonPropertyName("articleLanguage")]
  public CodeableConcept? ArticleLanguage { get; set; }
  [JsonPropertyName("_articleLanguage")]
  public Element _ArticleLanguage { get; set; }
  /// <summary>
  /// Full title of the article.
  /// </summary>
  [JsonPropertyName("articleTitle")]
  public string? ArticleTitle { get; set; }
  [JsonPropertyName("_articleTitle")]
  public Element _ArticleTitle { get; set; }
  /// <summary>
  /// Used for any URL for the article cited.
  /// </summary>
  [JsonPropertyName("articleUrl")]
  public CitationArticleUrl?[] ArticleUrl { get; set; }
  [JsonPropertyName("_articleUrl")]
  public Element[] _ArticleUrl { get; set; }
  /// <summary>
  /// Personal and collective author names.
  /// </summary>
  [JsonPropertyName("authorList")]
  public CitationAuthorList? AuthorList { get; set; }
  [JsonPropertyName("_authorList")]
  public Element _AuthorList { get; set; }
  /// <summary>
  /// Used to record a display of the author list without separate coding for each author.
  /// </summary>
  [JsonPropertyName("authorString")]
  public CitationAuthorString?[] AuthorString { get; set; }
  [JsonPropertyName("_authorString")]
  public Element[] _AuthorString { get; set; }
  /// <summary>
  /// Used for many classifiers including PublicationType, CitationSubset, MeshHeading, Chemical.
  /// </summary>
  [JsonPropertyName("classifier")]
  public CodeableConcept?[] Classifier { get; set; }
  [JsonPropertyName("_classifier")]
  public Element[] _Classifier { get; set; }
  /// <summary>
  /// Personal and collective contributor names.
  /// </summary>
  [JsonPropertyName("contributorList")]
  public CitationContributorList? ContributorList { get; set; }
  [JsonPropertyName("_contributorList")]
  public Element _ContributorList { get; set; }
  /// <summary>
  /// Date Cited.
  /// </summary>
  [JsonPropertyName("dateCited")]
  public string? DateCited { get; set; }
  [JsonPropertyName("_dateCited")]
  public Element _DateCited { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this summary outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Contains identifiers and classifiers for the journal cited.
  /// </summary>
  [JsonPropertyName("journal")]
  public CitationJournal? Journal { get; set; }
  [JsonPropertyName("_journal")]
  public Element _Journal { get; set; }
  /// <summary>
  /// These elements are items with values assigned by MEDLINE or PubMed management.
  /// </summary>
  [JsonPropertyName("medlinePubMed")]
  public CitationMedlinePubMed? MedlinePubMed { get; set; }
  [JsonPropertyName("_medlinePubMed")]
  public Element _MedlinePubMed { get; set; }
  /// <summary>
  /// Used for general notes and annotations not coded elsewhere.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Indicates the inclusive pages for the article cited.
  /// </summary>
  [JsonPropertyName("pagination")]
  public CitationPagination? Pagination { get; set; }
  [JsonPropertyName("_pagination")]
  public Element _Pagination { get; set; }
  /// <summary>
  /// Identify the medium/media in which the cited article is published, eg print, electronic or print-electronic.
  /// </summary>
  [JsonPropertyName("publishingModel")]
  public CodeableConcept? PublishingModel { get; set; }
  [JsonPropertyName("_publishingModel")]
  public Element _PublishingModel { get; set; }
  /// <summary>
  /// Used for referencing EvidenceReport resource.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// May include trial registry identifiers.
  /// </summary>
  [JsonPropertyName("relatedIdentifier")]
  public Identifier?[] RelatedIdentifier { get; set; }
  [JsonPropertyName("_relatedIdentifier")]
  public Element[] _RelatedIdentifier { get; set; }
  /// <summary>
  /// Allows filtering of summarys s that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// Variant citation.
  /// </summary>
  [JsonPropertyName("variantCitation")]
  public CitationVariantCitation? VariantCitation { get; set; }
  [JsonPropertyName("_variantCitation")]
  public Element _VariantCitation { get; set; }
  /// <summary>
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author. Considerations for making this decision are found in Technical and Business Versions.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the Citation.status field
/// </summary>
public sealed class CitationStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// For example,  for the original treatment and follow-up exams.
/// </summary>
public class ClaimRelated : BackboneElement {
  /// <summary>
  /// Reference to a related claim.
  /// </summary>
  [JsonPropertyName("claim")]
  public Reference? Claim { get; set; }
  [JsonPropertyName("_claim")]
  public Element _Claim { get; set; }
  /// <summary>
  /// For example, Property/Casualty insurer claim # or Workers Compensation case # .
  /// </summary>
  [JsonPropertyName("reference")]
  public Identifier? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
  /// <summary>
  /// For example, prior claim or umbrella.
  /// </summary>
  [JsonPropertyName("relationship")]
  public CodeableConcept? Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
}
/// <summary>
/// Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
/// </summary>
public class ClaimPayee : BackboneElement {
  /// <summary>
  /// Not required if the payee is 'subscriber' or 'provider'.
  /// </summary>
  [JsonPropertyName("party")]
  public Reference? Party { get; set; }
  [JsonPropertyName("_party")]
  public Element _Party { get; set; }
  /// <summary>
  /// Type of Party to be reimbursed: subscriber, provider, other.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// The members of the team who provided the products and services.
/// </summary>
public class ClaimCareTeam : BackboneElement {
  /// <summary>
  /// Member of the team who provided the product or service.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// The qualification of the practitioner which is applicable for this service.
  /// </summary>
  [JsonPropertyName("qualification")]
  public CodeableConcept? Qualification { get; set; }
  [JsonPropertyName("_qualification")]
  public Element _Qualification { get; set; }
  /// <summary>
  /// Responsible might not be required when there is only a single provider listed.
  /// </summary>
  [JsonPropertyName("responsible")]
  public bool? Responsible { get; set; }
  [JsonPropertyName("_responsible")]
  public Element _Responsible { get; set; }
  /// <summary>
  /// Role might not be required when there is only a single provider listed.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
  /// <summary>
  /// A number to uniquely identify care team entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
}
/// <summary>
/// Often there are multiple jurisdiction specific valuesets which are required.
/// </summary>
public class ClaimSupportingInfo : BackboneElement {
  /// <summary>
  /// This may contain a category for the local bill type codes.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// For example: the reason for the additional stay, or why a tooth is  missing.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept? Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element _Reason { get; set; }
  /// <summary>
  /// A number to uniquely identify supporting information entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// The date when or period to which this information refers.
  /// </summary>
  [JsonPropertyName("timingDate")]
  public string? TimingDate { get; set; }
  [JsonPropertyName("_timingDate")]
  public Element _TimingDate { get; set; }
  /// <summary>
  /// The date when or period to which this information refers.
  /// </summary>
  [JsonPropertyName("timingPeriod")]
  public Period? TimingPeriod { get; set; }
  [JsonPropertyName("_timingPeriod")]
  public Element _TimingPeriod { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference? ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
}
/// <summary>
/// Information about diagnoses relevant to the claim items.
/// </summary>
public class ClaimDiagnosis : BackboneElement {
  /// <summary>
  /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
  /// </summary>
  [JsonPropertyName("diagnosisCodeableConcept")]
  public CodeableConcept DiagnosisCodeableConcept { get; set; }
  [JsonPropertyName("_diagnosisCodeableConcept")]
  public Element _DiagnosisCodeableConcept { get; set; }
  /// <summary>
  /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
  /// </summary>
  [JsonPropertyName("diagnosisReference")]
  public Reference DiagnosisReference { get; set; }
  [JsonPropertyName("_diagnosisReference")]
  public Element _DiagnosisReference { get; set; }
  /// <summary>
  /// Indication of whether the diagnosis was present on admission to a facility.
  /// </summary>
  [JsonPropertyName("onAdmission")]
  public CodeableConcept? OnAdmission { get; set; }
  [JsonPropertyName("_onAdmission")]
  public Element _OnAdmission { get; set; }
  /// <summary>
  /// For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
  /// </summary>
  [JsonPropertyName("packageCode")]
  public CodeableConcept? PackageCode { get; set; }
  [JsonPropertyName("_packageCode")]
  public Element _PackageCode { get; set; }
  /// <summary>
  /// Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// For example: admitting, primary, secondary, discharge.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Procedures performed on the patient relevant to the billing items with the claim.
/// </summary>
public class ClaimProcedure : BackboneElement {
  /// <summary>
  /// Date and optionally time the procedure was performed.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The code or reference to a Procedure resource which identifies the clinical intervention performed.
  /// </summary>
  [JsonPropertyName("procedureCodeableConcept")]
  public CodeableConcept ProcedureCodeableConcept { get; set; }
  [JsonPropertyName("_procedureCodeableConcept")]
  public Element _ProcedureCodeableConcept { get; set; }
  /// <summary>
  /// The code or reference to a Procedure resource which identifies the clinical intervention performed.
  /// </summary>
  [JsonPropertyName("procedureReference")]
  public Reference ProcedureReference { get; set; }
  [JsonPropertyName("_procedureReference")]
  public Element _ProcedureReference { get; set; }
  /// <summary>
  /// A number to uniquely identify procedure entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// For example: primary, secondary.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
  /// <summary>
  /// Unique Device Identifiers associated with this line item.
  /// </summary>
  [JsonPropertyName("udi")]
  public Reference?[] Udi { get; set; }
  [JsonPropertyName("_udi")]
  public Element[] _Udi { get; set; }
}
/// <summary>
/// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
/// </summary>
public class ClaimInsurance : BackboneElement {
  /// <summary>
  /// A business agreement number established between the provider and the insurer for special business processing purposes.
  /// </summary>
  [JsonPropertyName("businessArrangement")]
  public string? BusinessArrangement { get; set; }
  [JsonPropertyName("_businessArrangement")]
  public Element _BusinessArrangement { get; set; }
  /// <summary>
  /// Must not be specified when 'focal=true' for this insurance.
  /// </summary>
  [JsonPropertyName("claimResponse")]
  public Reference? ClaimResponse { get; set; }
  [JsonPropertyName("_claimResponse")]
  public Element _ClaimResponse { get; set; }
  /// <summary>
  /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
  /// </summary>
  [JsonPropertyName("coverage")]
  public Reference Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element _Coverage { get; set; }
  /// <summary>
  /// A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
  /// </summary>
  [JsonPropertyName("focal")]
  public bool Focal { get; set; }
  [JsonPropertyName("_focal")]
  public Element _Focal { get; set; }
  /// <summary>
  /// Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
  /// </summary>
  [JsonPropertyName("preAuthRef")]
  public string?[] PreAuthRef { get; set; }
  [JsonPropertyName("_preAuthRef")]
  public Element[] _PreAuthRef { get; set; }
  /// <summary>
  /// A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
}
/// <summary>
/// Details of an accident which resulted in injuries which required the products and services listed in the claim.
/// </summary>
public class ClaimAccident : BackboneElement {
  /// <summary>
  /// The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
  /// </summary>
  [JsonPropertyName("date")]
  public string Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The physical location of the accident event.
  /// </summary>
  [JsonPropertyName("locationAddress")]
  public Address? LocationAddress { get; set; }
  [JsonPropertyName("_locationAddress")]
  public Element _LocationAddress { get; set; }
  /// <summary>
  /// The physical location of the accident event.
  /// </summary>
  [JsonPropertyName("locationReference")]
  public Reference? LocationReference { get; set; }
  [JsonPropertyName("_locationReference")]
  public Element _LocationReference { get; set; }
  /// <summary>
  /// The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
/// </summary>
public class ClaimItemDetailSubDetail : BackboneElement {
  /// <summary>
  /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// For example: Neonatal program, child dental program or drug users recovery program.
  /// </summary>
  [JsonPropertyName("programCode")]
  public CodeableConcept?[] ProgramCode { get; set; }
  [JsonPropertyName("_programCode")]
  public Element[] _ProgramCode { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The type of revenue or cost center providing the product and/or service.
  /// </summary>
  [JsonPropertyName("revenue")]
  public CodeableConcept? Revenue { get; set; }
  [JsonPropertyName("_revenue")]
  public Element _Revenue { get; set; }
  /// <summary>
  /// A number to uniquely identify item entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// Unique Device Identifiers associated with this line item.
  /// </summary>
  [JsonPropertyName("udi")]
  public Reference?[] Udi { get; set; }
  [JsonPropertyName("_udi")]
  public Element[] _Udi { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
/// </summary>
public class ClaimItemDetail : BackboneElement {
  /// <summary>
  /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// For example: Neonatal program, child dental program or drug users recovery program.
  /// </summary>
  [JsonPropertyName("programCode")]
  public CodeableConcept?[] ProgramCode { get; set; }
  [JsonPropertyName("_programCode")]
  public Element[] _ProgramCode { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The type of revenue or cost center providing the product and/or service.
  /// </summary>
  [JsonPropertyName("revenue")]
  public CodeableConcept? Revenue { get; set; }
  [JsonPropertyName("_revenue")]
  public Element _Revenue { get; set; }
  /// <summary>
  /// A number to uniquely identify item entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  /// </summary>
  [JsonPropertyName("subDetail")]
  public ClaimItemDetailSubDetail?[] SubDetail { get; set; }
  [JsonPropertyName("_subDetail")]
  public Element[] _SubDetail { get; set; }
  /// <summary>
  /// Unique Device Identifiers associated with this line item.
  /// </summary>
  [JsonPropertyName("udi")]
  public Reference?[] Udi { get; set; }
  [JsonPropertyName("_udi")]
  public Element[] _Udi { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
/// </summary>
public class ClaimItem : BackboneElement {
  /// <summary>
  /// For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// CareTeam members related to this service or product.
  /// </summary>
  [JsonPropertyName("careTeamSequence")]
  public uint?[] CareTeamSequence { get; set; }
  [JsonPropertyName("_careTeamSequence")]
  public Element[] _CareTeamSequence { get; set; }
  /// <summary>
  /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  /// </summary>
  [JsonPropertyName("detail")]
  public ClaimItemDetail?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// Diagnosis applicable for this service or product.
  /// </summary>
  [JsonPropertyName("diagnosisSequence")]
  public uint?[] DiagnosisSequence { get; set; }
  [JsonPropertyName("_diagnosisSequence")]
  public Element[] _DiagnosisSequence { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference?[] Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element[] _Encounter { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// Exceptions, special conditions and supporting information applicable for this service or product.
  /// </summary>
  [JsonPropertyName("informationSequence")]
  public uint?[] InformationSequence { get; set; }
  [JsonPropertyName("_informationSequence")]
  public Element[] _InformationSequence { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationCodeableConcept")]
  public CodeableConcept? LocationCodeableConcept { get; set; }
  [JsonPropertyName("_locationCodeableConcept")]
  public Element _LocationCodeableConcept { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationAddress")]
  public Address? LocationAddress { get; set; }
  [JsonPropertyName("_locationAddress")]
  public Element _LocationAddress { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationReference")]
  public Reference? LocationReference { get; set; }
  [JsonPropertyName("_locationReference")]
  public Element _LocationReference { get; set; }
  /// <summary>
  /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// Procedures applicable for this service or product.
  /// </summary>
  [JsonPropertyName("procedureSequence")]
  public uint?[] ProcedureSequence { get; set; }
  [JsonPropertyName("_procedureSequence")]
  public Element[] _ProcedureSequence { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// For example: Neonatal program, child dental program or drug users recovery program.
  /// </summary>
  [JsonPropertyName("programCode")]
  public CodeableConcept?[] ProgramCode { get; set; }
  [JsonPropertyName("_programCode")]
  public Element[] _ProgramCode { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The type of revenue or cost center providing the product and/or service.
  /// </summary>
  [JsonPropertyName("revenue")]
  public CodeableConcept? Revenue { get; set; }
  [JsonPropertyName("_revenue")]
  public Element _Revenue { get; set; }
  /// <summary>
  /// A number to uniquely identify item entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// The date or dates when the service or product was supplied, performed or completed.
  /// </summary>
  [JsonPropertyName("servicedDate")]
  public string? ServicedDate { get; set; }
  [JsonPropertyName("_servicedDate")]
  public Element _ServicedDate { get; set; }
  /// <summary>
  /// The date or dates when the service or product was supplied, performed or completed.
  /// </summary>
  [JsonPropertyName("servicedPeriod")]
  public Period? ServicedPeriod { get; set; }
  [JsonPropertyName("_servicedPeriod")]
  public Element _ServicedPeriod { get; set; }
  /// <summary>
  /// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
  /// </summary>
  [JsonPropertyName("subSite")]
  public CodeableConcept?[] SubSite { get; set; }
  [JsonPropertyName("_subSite")]
  public Element[] _SubSite { get; set; }
  /// <summary>
  /// Unique Device Identifiers associated with this line item.
  /// </summary>
  [JsonPropertyName("udi")]
  public Reference?[] Udi { get; set; }
  [JsonPropertyName("_udi")]
  public Element[] _Udi { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// The Claim resource is used by providers to exchange services and products rendered to patients or planned to be rendered with insurers for reimbuserment. It is also used by insurers to exchange claims information with statutory reporting and data analytics firms.
/// </summary>
public class Claim : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Claim";
  /// <summary>
  /// Details of an accident which resulted in injuries which required the products and services listed in the claim.
  /// </summary>
  [JsonPropertyName("accident")]
  public ClaimAccident? Accident { get; set; }
  [JsonPropertyName("_accident")]
  public Element _Accident { get; set; }
  /// <summary>
  /// Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
  /// </summary>
  [JsonPropertyName("billablePeriod")]
  public Period? BillablePeriod { get; set; }
  [JsonPropertyName("_billablePeriod")]
  public Element _BillablePeriod { get; set; }
  /// <summary>
  /// The members of the team who provided the products and services.
  /// </summary>
  [JsonPropertyName("careTeam")]
  public ClaimCareTeam?[] CareTeam { get; set; }
  [JsonPropertyName("_careTeam")]
  public Element[] _CareTeam { get; set; }
  /// <summary>
  /// This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
  /// </summary>
  [JsonPropertyName("created")]
  public string Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// Information about diagnoses relevant to the claim items.
  /// </summary>
  [JsonPropertyName("diagnosis")]
  public ClaimDiagnosis?[] Diagnosis { get; set; }
  [JsonPropertyName("_diagnosis")]
  public Element[] _Diagnosis { get; set; }
  /// <summary>
  /// Individual who created the claim, predetermination or preauthorization.
  /// </summary>
  [JsonPropertyName("enterer")]
  public Reference? Enterer { get; set; }
  [JsonPropertyName("_enterer")]
  public Element _Enterer { get; set; }
  /// <summary>
  /// Facility where the services were provided.
  /// </summary>
  [JsonPropertyName("facility")]
  public Reference? Facility { get; set; }
  [JsonPropertyName("_facility")]
  public Element _Facility { get; set; }
  /// <summary>
  /// This field is only used for preauthorizations.
  /// </summary>
  [JsonPropertyName("fundsReserve")]
  public CodeableConcept? FundsReserve { get; set; }
  [JsonPropertyName("_fundsReserve")]
  public Element _FundsReserve { get; set; }
  /// <summary>
  /// A unique identifier assigned to this claim.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonPropertyName("insurance")]
  public ClaimInsurance[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// The Insurer who is target of the request.
  /// </summary>
  [JsonPropertyName("insurer")]
  public Reference? Insurer { get; set; }
  [JsonPropertyName("_insurer")]
  public Element _Insurer { get; set; }
  /// <summary>
  /// A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
  /// </summary>
  [JsonPropertyName("item")]
  public ClaimItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
  /// </summary>
  [JsonPropertyName("originalPrescription")]
  public Reference? OriginalPrescription { get; set; }
  [JsonPropertyName("_originalPrescription")]
  public Element _OriginalPrescription { get; set; }
  /// <summary>
  /// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
  /// </summary>
  [JsonPropertyName("payee")]
  public ClaimPayee? Payee { get; set; }
  [JsonPropertyName("_payee")]
  public Element _Payee { get; set; }
  /// <summary>
  /// Prescription to support the dispensing of pharmacy, device or vision products.
  /// </summary>
  [JsonPropertyName("prescription")]
  public Reference? Prescription { get; set; }
  [JsonPropertyName("_prescription")]
  public Element _Prescription { get; set; }
  /// <summary>
  /// If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
  /// </summary>
  [JsonPropertyName("priority")]
  public CodeableConcept Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// Procedures performed on the patient relevant to the billing items with the claim.
  /// </summary>
  [JsonPropertyName("procedure")]
  public ClaimProcedure?[] Procedure { get; set; }
  [JsonPropertyName("_procedure")]
  public Element[] _Procedure { get; set; }
  /// <summary>
  /// Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// The referral resource which lists the date, practitioner, reason and other supporting information.
  /// </summary>
  [JsonPropertyName("referral")]
  public Reference? Referral { get; set; }
  [JsonPropertyName("_referral")]
  public Element _Referral { get; set; }
  /// <summary>
  /// For example,  for the original treatment and follow-up exams.
  /// </summary>
  [JsonPropertyName("related")]
  public ClaimRelated?[] Related { get; set; }
  [JsonPropertyName("_related")]
  public Element[] _Related { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
  /// </summary>
  [JsonPropertyName("subType")]
  public CodeableConcept? SubType { get; set; }
  [JsonPropertyName("_subType")]
  public Element _SubType { get; set; }
  /// <summary>
  /// Often there are multiple jurisdiction specific valuesets which are required.
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public ClaimSupportingInfo?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
  /// <summary>
  /// The total value of the all the items in the claim.
  /// </summary>
  [JsonPropertyName("total")]
  public Money? Total { get; set; }
  [JsonPropertyName("_total")]
  public Element _Total { get; set; }
  /// <summary>
  /// The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
  /// </summary>
  [JsonPropertyName("use")]
  public string Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// Code Values for the Claim.status field
/// </summary>
public sealed class ClaimStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Code Values for the Claim.use field
/// </summary>
public sealed class ClaimUseCodes {
  public const string CLAIM = "claim";
  public const string PREAUTHORIZATION = "preauthorization";
  public const string PREDETERMINATION = "predetermination";
}
/// <summary>
/// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
/// </summary>
public class ClaimResponseItemAdjudication : BackboneElement {
  /// <summary>
  /// For example: amount submitted, eligible amount, co-payment, and benefit payable.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// For example may indicate that the funds for this benefit type have been exhausted.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept? Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element _Reason { get; set; }
  /// <summary>
  /// For example: eligible percentage or co-payment percentage.
  /// </summary>
  [JsonPropertyName("value")]
  public decimal? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// A sub-detail adjudication of a simple product or service.
/// </summary>
public class ClaimResponseItemDetailSubDetail : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ClaimResponseItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// A number to uniquely reference the claim sub-detail entry.
  /// </summary>
  [JsonPropertyName("subDetailSequence")]
  public uint SubDetailSequence { get; set; }
  [JsonPropertyName("_subDetailSequence")]
  public Element _SubDetailSequence { get; set; }
}
/// <summary>
/// A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
/// </summary>
public class ClaimResponseItemDetail : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ClaimResponseItemAdjudication[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// A number to uniquely reference the claim detail entry.
  /// </summary>
  [JsonPropertyName("detailSequence")]
  public uint DetailSequence { get; set; }
  [JsonPropertyName("_detailSequence")]
  public Element _DetailSequence { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// A sub-detail adjudication of a simple product or service.
  /// </summary>
  [JsonPropertyName("subDetail")]
  public ClaimResponseItemDetailSubDetail?[] SubDetail { get; set; }
  [JsonPropertyName("_subDetail")]
  public Element[] _SubDetail { get; set; }
}
/// <summary>
/// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
/// </summary>
public class ClaimResponseItem : BackboneElement {
  /// <summary>
  /// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ClaimResponseItemAdjudication[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  /// </summary>
  [JsonPropertyName("detail")]
  public ClaimResponseItemDetail?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// A number to uniquely reference the claim item entries.
  /// </summary>
  [JsonPropertyName("itemSequence")]
  public uint ItemSequence { get; set; }
  [JsonPropertyName("_itemSequence")]
  public Element _ItemSequence { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
}
/// <summary>
/// The third-tier service adjudications for payor added services.
/// </summary>
public class ClaimResponseAddItemDetailSubDetail : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ClaimResponseItemAdjudication[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// The second-tier service adjudications for payor added services.
/// </summary>
public class ClaimResponseAddItemDetail : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ClaimResponseItemAdjudication[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The third-tier service adjudications for payor added services.
  /// </summary>
  [JsonPropertyName("subDetail")]
  public ClaimResponseAddItemDetailSubDetail?[] SubDetail { get; set; }
  [JsonPropertyName("_subDetail")]
  public Element[] _SubDetail { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// The first-tier service adjudications for payor added product or service lines.
/// </summary>
public class ClaimResponseAddItem : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ClaimResponseItemAdjudication[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// For example: Providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// The second-tier service adjudications for payor added services.
  /// </summary>
  [JsonPropertyName("detail")]
  public ClaimResponseAddItemDetail?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// The sequence number of the details within the claim item which this line is intended to replace.
  /// </summary>
  [JsonPropertyName("detailSequence")]
  public uint?[] DetailSequence { get; set; }
  [JsonPropertyName("_detailSequence")]
  public Element[] _DetailSequence { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// Claim items which this service line is intended to replace.
  /// </summary>
  [JsonPropertyName("itemSequence")]
  public uint?[] ItemSequence { get; set; }
  [JsonPropertyName("_itemSequence")]
  public Element[] _ItemSequence { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationCodeableConcept")]
  public CodeableConcept? LocationCodeableConcept { get; set; }
  [JsonPropertyName("_locationCodeableConcept")]
  public Element _LocationCodeableConcept { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationAddress")]
  public Address? LocationAddress { get; set; }
  [JsonPropertyName("_locationAddress")]
  public Element _LocationAddress { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationReference")]
  public Reference? LocationReference { get; set; }
  [JsonPropertyName("_locationReference")]
  public Element _LocationReference { get; set; }
  /// <summary>
  /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// For example: Neonatal program, child dental program or drug users recovery program.
  /// </summary>
  [JsonPropertyName("programCode")]
  public CodeableConcept?[] ProgramCode { get; set; }
  [JsonPropertyName("_programCode")]
  public Element[] _ProgramCode { get; set; }
  /// <summary>
  /// The providers who are authorized for the services rendered to the patient.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference?[] Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element[] _Provider { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The date or dates when the service or product was supplied, performed or completed.
  /// </summary>
  [JsonPropertyName("servicedDate")]
  public string? ServicedDate { get; set; }
  [JsonPropertyName("_servicedDate")]
  public Element _ServicedDate { get; set; }
  /// <summary>
  /// The date or dates when the service or product was supplied, performed or completed.
  /// </summary>
  [JsonPropertyName("servicedPeriod")]
  public Period? ServicedPeriod { get; set; }
  [JsonPropertyName("_servicedPeriod")]
  public Element _ServicedPeriod { get; set; }
  /// <summary>
  /// The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
  /// </summary>
  [JsonPropertyName("subdetailSequence")]
  public uint?[] SubdetailSequence { get; set; }
  [JsonPropertyName("_subdetailSequence")]
  public Element[] _SubdetailSequence { get; set; }
  /// <summary>
  /// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
  /// </summary>
  [JsonPropertyName("subSite")]
  public CodeableConcept?[] SubSite { get; set; }
  [JsonPropertyName("_subSite")]
  public Element[] _SubSite { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// Totals for amounts submitted, co-pays, benefits payable etc.
/// </summary>
public class ClaimResponseTotal : BackboneElement {
  /// <summary>
  /// Monetary total amount associated with the category.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
}
/// <summary>
/// Payment details for the adjudication of the claim.
/// </summary>
public class ClaimResponsePayment : BackboneElement {
  /// <summary>
  /// Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
  /// </summary>
  [JsonPropertyName("adjustment")]
  public Money? Adjustment { get; set; }
  [JsonPropertyName("_adjustment")]
  public Element _Adjustment { get; set; }
  /// <summary>
  /// Reason for the payment adjustment.
  /// </summary>
  [JsonPropertyName("adjustmentReason")]
  public CodeableConcept? AdjustmentReason { get; set; }
  [JsonPropertyName("_adjustmentReason")]
  public Element _AdjustmentReason { get; set; }
  /// <summary>
  /// Benefits payable less any payment adjustment.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Estimated date the payment will be issued or the actual issue date of payment.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// For example: EFT number or check number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Whether this represents partial or complete payment of the benefits payable.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// A note that describes or explains adjudication results in a human readable form.
/// </summary>
public class ClaimResponseProcessNote : BackboneElement {
  /// <summary>
  /// Only required if the language is different from the resource language.
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// A number to uniquely identify a note entry.
  /// </summary>
  [JsonPropertyName("number")]
  public uint? Number { get; set; }
  [JsonPropertyName("_number")]
  public Element _Number { get; set; }
  /// <summary>
  /// The explanation or description associated with the processing.
  /// </summary>
  [JsonPropertyName("text")]
  public string Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// The business purpose of the note text.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the ClaimResponse.processNote.type field
/// </summary>
public sealed class ClaimResponseProcessNoteTypeCodes {
  public const string DISPLAY = "display";
  public const string PRINT = "print";
  public const string PRINTOPER = "printoper";
}
/// <summary>
/// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
/// </summary>
public class ClaimResponseInsurance : BackboneElement {
  /// <summary>
  /// A business agreement number established between the provider and the insurer for special business processing purposes.
  /// </summary>
  [JsonPropertyName("businessArrangement")]
  public string? BusinessArrangement { get; set; }
  [JsonPropertyName("_businessArrangement")]
  public Element _BusinessArrangement { get; set; }
  /// <summary>
  /// Must not be specified when 'focal=true' for this insurance.
  /// </summary>
  [JsonPropertyName("claimResponse")]
  public Reference? ClaimResponse { get; set; }
  [JsonPropertyName("_claimResponse")]
  public Element _ClaimResponse { get; set; }
  /// <summary>
  /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
  /// </summary>
  [JsonPropertyName("coverage")]
  public Reference Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element _Coverage { get; set; }
  /// <summary>
  /// A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
  /// </summary>
  [JsonPropertyName("focal")]
  public bool Focal { get; set; }
  [JsonPropertyName("_focal")]
  public Element _Focal { get; set; }
  /// <summary>
  /// A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
}
/// <summary>
/// If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
/// </summary>
public class ClaimResponseError : BackboneElement {
  /// <summary>
  /// An error code, from a specified code system, which details why the claim could not be adjudicated.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
  /// </summary>
  [JsonPropertyName("detailSequence")]
  public uint? DetailSequence { get; set; }
  [JsonPropertyName("_detailSequence")]
  public Element _DetailSequence { get; set; }
  /// <summary>
  /// The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
  /// </summary>
  [JsonPropertyName("itemSequence")]
  public uint? ItemSequence { get; set; }
  [JsonPropertyName("_itemSequence")]
  public Element _ItemSequence { get; set; }
  /// <summary>
  /// The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
  /// </summary>
  [JsonPropertyName("subDetailSequence")]
  public uint? SubDetailSequence { get; set; }
  [JsonPropertyName("_subDetailSequence")]
  public Element _SubDetailSequence { get; set; }
}
public class ClaimResponse : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ClaimResponse";
  /// <summary>
  /// The first-tier service adjudications for payor added product or service lines.
  /// </summary>
  [JsonPropertyName("addItem")]
  public ClaimResponseAddItem?[] AddItem { get; set; }
  [JsonPropertyName("_addItem")]
  public Element[] _AddItem { get; set; }
  /// <summary>
  /// The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ClaimResponseItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// For example: professional reports, documents, images, clinical resources, or accident reports.
  /// </summary>
  [JsonPropertyName("communicationRequest")]
  public Reference?[] CommunicationRequest { get; set; }
  [JsonPropertyName("_communicationRequest")]
  public Element[] _CommunicationRequest { get; set; }
  /// <summary>
  /// The date this resource was created.
  /// </summary>
  [JsonPropertyName("created")]
  public string Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// A human readable description of the status of the adjudication.
  /// </summary>
  [JsonPropertyName("disposition")]
  public string? Disposition { get; set; }
  [JsonPropertyName("_disposition")]
  public Element _Disposition { get; set; }
  /// <summary>
  /// If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
  /// </summary>
  [JsonPropertyName("error")]
  public ClaimResponseError?[] Error { get; set; }
  [JsonPropertyName("_error")]
  public Element[] _Error { get; set; }
  /// <summary>
  /// Needed to permit insurers to include the actual form.
  /// </summary>
  [JsonPropertyName("form")]
  public Attachment? Form { get; set; }
  [JsonPropertyName("_form")]
  public Element _Form { get; set; }
  /// <summary>
  /// May be needed to identify specific jurisdictional forms.
  /// </summary>
  [JsonPropertyName("formCode")]
  public CodeableConcept? FormCode { get; set; }
  [JsonPropertyName("_formCode")]
  public Element _FormCode { get; set; }
  /// <summary>
  /// Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
  /// </summary>
  [JsonPropertyName("fundsReserve")]
  public CodeableConcept? FundsReserve { get; set; }
  [JsonPropertyName("_fundsReserve")]
  public Element _FundsReserve { get; set; }
  /// <summary>
  /// A unique identifier assigned to this claim response.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonPropertyName("insurance")]
  public ClaimResponseInsurance?[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// The party responsible for authorization, adjudication and reimbursement.
  /// </summary>
  [JsonPropertyName("insurer")]
  public Reference Insurer { get; set; }
  [JsonPropertyName("_insurer")]
  public Element _Insurer { get; set; }
  /// <summary>
  /// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
  /// </summary>
  [JsonPropertyName("item")]
  public ClaimResponseItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
  /// </summary>
  [JsonPropertyName("outcome")]
  public string Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// Type of Party to be reimbursed: subscriber, provider, other.
  /// </summary>
  [JsonPropertyName("payeeType")]
  public CodeableConcept? PayeeType { get; set; }
  [JsonPropertyName("_payeeType")]
  public Element _PayeeType { get; set; }
  /// <summary>
  /// Payment details for the adjudication of the claim.
  /// </summary>
  [JsonPropertyName("payment")]
  public ClaimResponsePayment? Payment { get; set; }
  [JsonPropertyName("_payment")]
  public Element _Payment { get; set; }
  /// <summary>
  /// The time frame during which this authorization is effective.
  /// </summary>
  [JsonPropertyName("preAuthPeriod")]
  public Period? PreAuthPeriod { get; set; }
  [JsonPropertyName("_preAuthPeriod")]
  public Element _PreAuthPeriod { get; set; }
  /// <summary>
  /// This value is only present on preauthorization adjudications.
  /// </summary>
  [JsonPropertyName("preAuthRef")]
  public string? PreAuthRef { get; set; }
  [JsonPropertyName("_preAuthRef")]
  public Element _PreAuthRef { get; set; }
  /// <summary>
  /// A note that describes or explains adjudication results in a human readable form.
  /// </summary>
  [JsonPropertyName("processNote")]
  public ClaimResponseProcessNote?[] ProcessNote { get; set; }
  [JsonPropertyName("_processNote")]
  public Element[] _ProcessNote { get; set; }
  /// <summary>
  /// Original request resource reference.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference? Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
  /// </summary>
  [JsonPropertyName("requestor")]
  public Reference? Requestor { get; set; }
  [JsonPropertyName("_requestor")]
  public Element _Requestor { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
  /// </summary>
  [JsonPropertyName("subType")]
  public CodeableConcept? SubType { get; set; }
  [JsonPropertyName("_subType")]
  public Element _SubType { get; set; }
  /// <summary>
  /// Totals for amounts submitted, co-pays, benefits payable etc.
  /// </summary>
  [JsonPropertyName("total")]
  public ClaimResponseTotal?[] Total { get; set; }
  [JsonPropertyName("_total")]
  public Element[] _Total { get; set; }
  /// <summary>
  /// This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
  /// </summary>
  [JsonPropertyName("use")]
  public string Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// Code Values for the ClaimResponse.outcome field
/// </summary>
public sealed class ClaimResponseOutcomeCodes {
  public const string QUEUED = "queued";
  public const string COMPLETE = "complete";
  public const string ERROR = "error";
  public const string PARTIAL = "partial";
}
/// <summary>
/// Code Values for the ClaimResponse.status field
/// </summary>
public sealed class ClaimResponseStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Code Values for the ClaimResponse.use field
/// </summary>
public sealed class ClaimResponseUseCodes {
  public const string CLAIM = "claim";
  public const string PREAUTHORIZATION = "preauthorization";
  public const string PREDETERMINATION = "predetermination";
}
/// <summary>
/// Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
/// </summary>
public class ClinicalImpressionFinding : BackboneElement {
  /// <summary>
  /// Which investigations support finding or diagnosis.
  /// </summary>
  [JsonPropertyName("basis")]
  public string? Basis { get; set; }
  [JsonPropertyName("_basis")]
  public Element _Basis { get; set; }
  /// <summary>
  /// Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.
  /// </summary>
  [JsonPropertyName("item")]
  public CodeableReference? Item { get; set; }
  [JsonPropertyName("_item")]
  public Element _Item { get; set; }
}
public class ClinicalImpression : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ClinicalImpression";
  /// <summary>
  /// Indicates when the documentation of the assessment was complete.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// A summary of the context and/or cause of the assessment - why / where it was performed, and what patient events/status prompted it.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// This SHOULD be accurate to at least the minute, though some assessments only have a known date.
  /// </summary>
  [JsonPropertyName("effectiveDateTime")]
  public string? EffectiveDateTime { get; set; }
  [JsonPropertyName("_effectiveDateTime")]
  public Element _EffectiveDateTime { get; set; }
  /// <summary>
  /// This SHOULD be accurate to at least the minute, though some assessments only have a known date.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.
  /// </summary>
  [JsonPropertyName("finding")]
  public ClinicalImpressionFinding?[] Finding { get; set; }
  [JsonPropertyName("_finding")]
  public Element[] _Finding { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Don't use this element for content that should more properly appear as one of the specific elements of the impression.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The clinician performing the assessment.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference? Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element _Performer { get; set; }
  /// <summary>
  /// It is always likely that multiple previous assessments exist for a patient. The point of quoting a previous assessment is that this assessment is relative to it (see resolved).
  /// </summary>
  [JsonPropertyName("previous")]
  public Reference? Previous { get; set; }
  [JsonPropertyName("_previous")]
  public Element _Previous { get; set; }
  /// <summary>
  /// e.g. The patient is a pregnant, has congestive heart failure, has an ‎Adenocarcinoma, and is allergic to penicillin.
  /// </summary>
  [JsonPropertyName("problem")]
  public Reference?[] Problem { get; set; }
  [JsonPropertyName("_problem")]
  public Element[] _Problem { get; set; }
  /// <summary>
  /// Estimate of likely outcome.
  /// </summary>
  [JsonPropertyName("prognosisCodeableConcept")]
  public CodeableConcept?[] PrognosisCodeableConcept { get; set; }
  [JsonPropertyName("_prognosisCodeableConcept")]
  public Element[] _PrognosisCodeableConcept { get; set; }
  /// <summary>
  /// RiskAssessment expressing likely outcome.
  /// </summary>
  [JsonPropertyName("prognosisReference")]
  public Reference?[] PrognosisReference { get; set; }
  [JsonPropertyName("_prognosisReference")]
  public Element[] _PrognosisReference { get; set; }
  /// <summary>
  /// Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.
  /// </summary>
  [JsonPropertyName("protocol")]
  public string?[] Protocol { get; set; }
  [JsonPropertyName("_protocol")]
  public Element[] _Protocol { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the code entered-in-error that marks the clinical impression as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This is generally only used for "exception" statuses such as "not-done", "on-hold" or "stopped".
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
  /// <summary>
  /// The patient or group of individuals assessed as part of this record.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// A text summary of the investigations and the diagnosis.
  /// </summary>
  [JsonPropertyName("summary")]
  public string? Summary { get; set; }
  [JsonPropertyName("_summary")]
  public Element _Summary { get; set; }
  /// <summary>
  /// Information supporting the clinical impression, which can contain investigation results.
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public Reference?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
}
/// <summary>
/// Code Values for the ClinicalImpression.status field
/// </summary>
public sealed class ClinicalImpressionStatusCodes {
  public const string PREPARATION = "preparation";
  public const string IN_PROGRESS = "in-progress";
  public const string NOT_DONE = "not-done";
  public const string ON_HOLD = "on-hold";
  public const string STOPPED = "stopped";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Information about the use of the medicinal product in relation to other therapies described as part of the indication.
/// </summary>
public class ClinicalUseIssueContraindicationOtherTherapy : BackboneElement {
  /// <summary>
  /// Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
  /// </summary>
  [JsonPropertyName("medicationCodeableConcept")]
  public CodeableConcept MedicationCodeableConcept { get; set; }
  [JsonPropertyName("_medicationCodeableConcept")]
  public Element _MedicationCodeableConcept { get; set; }
  /// <summary>
  /// Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
  /// </summary>
  [JsonPropertyName("medicationReference")]
  public Reference MedicationReference { get; set; }
  [JsonPropertyName("_medicationReference")]
  public Element _MedicationReference { get; set; }
  /// <summary>
  /// The type of relationship between the medicinal product indication or contraindication and another therapy.
  /// </summary>
  [JsonPropertyName("therapyRelationshipType")]
  public CodeableConcept TherapyRelationshipType { get; set; }
  [JsonPropertyName("_therapyRelationshipType")]
  public Element _TherapyRelationshipType { get; set; }
}
/// <summary>
/// Specifics for when this is a contraindication.
/// </summary>
public class ClinicalUseIssueContraindication : BackboneElement {
  /// <summary>
  /// A comorbidity (concurrent condition) or coinfection.
  /// </summary>
  [JsonPropertyName("comorbidity")]
  public CodeableConcept?[] Comorbidity { get; set; }
  [JsonPropertyName("_comorbidity")]
  public Element[] _Comorbidity { get; set; }
  /// <summary>
  /// The status of the disease or symptom for the contraindication.
  /// </summary>
  [JsonPropertyName("diseaseStatus")]
  public CodeableConcept? DiseaseStatus { get; set; }
  [JsonPropertyName("_diseaseStatus")]
  public Element _DiseaseStatus { get; set; }
  /// <summary>
  /// The situation that is being documented as contraindicating against this item.
  /// </summary>
  [JsonPropertyName("diseaseSymptomProcedure")]
  public CodeableConcept? DiseaseSymptomProcedure { get; set; }
  [JsonPropertyName("_diseaseSymptomProcedure")]
  public Element _DiseaseSymptomProcedure { get; set; }
  /// <summary>
  /// The indication which this is a contraidication for.
  /// </summary>
  [JsonPropertyName("indication")]
  public Reference?[] Indication { get; set; }
  [JsonPropertyName("_indication")]
  public Element[] _Indication { get; set; }
  /// <summary>
  /// Information about the use of the medicinal product in relation to other therapies described as part of the indication.
  /// </summary>
  [JsonPropertyName("otherTherapy")]
  public ClinicalUseIssueContraindicationOtherTherapy?[] OtherTherapy { get; set; }
  [JsonPropertyName("_otherTherapy")]
  public Element[] _OtherTherapy { get; set; }
}
/// <summary>
/// Specifics for when this is an indication.
/// </summary>
public class ClinicalUseIssueIndication : BackboneElement {
  /// <summary>
  /// A comorbidity (concurrent condition) or coinfection as part of the indication.
  /// </summary>
  [JsonPropertyName("comorbidity")]
  public CodeableConcept?[] Comorbidity { get; set; }
  [JsonPropertyName("_comorbidity")]
  public Element[] _Comorbidity { get; set; }
  /// <summary>
  /// The status of the disease or symptom for the indication.
  /// </summary>
  [JsonPropertyName("diseaseStatus")]
  public CodeableConcept? DiseaseStatus { get; set; }
  [JsonPropertyName("_diseaseStatus")]
  public Element _DiseaseStatus { get; set; }
  /// <summary>
  /// The situation that is being documented as an indicaton for this item.
  /// </summary>
  [JsonPropertyName("diseaseSymptomProcedure")]
  public CodeableConcept? DiseaseSymptomProcedure { get; set; }
  [JsonPropertyName("_diseaseSymptomProcedure")]
  public Element _DiseaseSymptomProcedure { get; set; }
  /// <summary>
  /// For an indication - timing or duration information.
  /// </summary>
  [JsonPropertyName("duration")]
  public Quantity? Duration { get; set; }
  [JsonPropertyName("_duration")]
  public Element _Duration { get; set; }
  /// <summary>
  /// For an indication - the intended effect, aim or strategy to be achieved.
  /// </summary>
  [JsonPropertyName("intendedEffect")]
  public CodeableConcept? IntendedEffect { get; set; }
  [JsonPropertyName("_intendedEffect")]
  public Element _IntendedEffect { get; set; }
  /// <summary>
  /// Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.
  /// </summary>
  [JsonPropertyName("otherTherapy")]
  public ClinicalUseIssueContraindicationOtherTherapy?[] OtherTherapy { get; set; }
  [JsonPropertyName("_otherTherapy")]
  public Element[] _OtherTherapy { get; set; }
  /// <summary>
  /// For an indicaton - the specific undesirable effects of the medicinal product.
  /// </summary>
  [JsonPropertyName("undesirableEffect")]
  public Reference?[] UndesirableEffect { get; set; }
  [JsonPropertyName("_undesirableEffect")]
  public Element[] _UndesirableEffect { get; set; }
}
/// <summary>
/// The specific medication, food or laboratory test that interacts.
/// </summary>
public class ClinicalUseIssueInteractionInteractant : BackboneElement {
  /// <summary>
  /// The specific medication, food or laboratory test that interacts.
  /// </summary>
  [JsonPropertyName("itemReference")]
  public Reference ItemReference { get; set; }
  [JsonPropertyName("_itemReference")]
  public Element _ItemReference { get; set; }
  /// <summary>
  /// The specific medication, food or laboratory test that interacts.
  /// </summary>
  [JsonPropertyName("itemCodeableConcept")]
  public CodeableConcept ItemCodeableConcept { get; set; }
  [JsonPropertyName("_itemCodeableConcept")]
  public Element _ItemCodeableConcept { get; set; }
}
/// <summary>
/// Specifics for when this is an interaction.
/// </summary>
public class ClinicalUseIssueInteraction : BackboneElement {
  /// <summary>
  /// The effect of the interaction, for example "reduced gastric absorption of primary medication".
  /// </summary>
  [JsonPropertyName("effect")]
  public CodeableConcept? Effect { get; set; }
  [JsonPropertyName("_effect")]
  public Element _Effect { get; set; }
  /// <summary>
  /// The incidence of the interaction, e.g. theoretical, observed.
  /// </summary>
  [JsonPropertyName("incidence")]
  public CodeableConcept? Incidence { get; set; }
  [JsonPropertyName("_incidence")]
  public Element _Incidence { get; set; }
  /// <summary>
  /// The specific medication, food or laboratory test that interacts.
  /// </summary>
  [JsonPropertyName("interactant")]
  public ClinicalUseIssueInteractionInteractant?[] Interactant { get; set; }
  [JsonPropertyName("_interactant")]
  public Element[] _Interactant { get; set; }
  /// <summary>
  /// Actions for managing the interaction.
  /// </summary>
  [JsonPropertyName("management")]
  public CodeableConcept? Management { get; set; }
  [JsonPropertyName("_management")]
  public Element _Management { get; set; }
  /// <summary>
  /// The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Describe the undesirable effects of the medicinal product.
/// </summary>
public class ClinicalUseIssueUndesirableEffect : BackboneElement {
  /// <summary>
  /// High level classification of the effect.
  /// </summary>
  [JsonPropertyName("classification")]
  public CodeableConcept? Classification { get; set; }
  [JsonPropertyName("_classification")]
  public Element _Classification { get; set; }
  /// <summary>
  /// How often the effect is seen.
  /// </summary>
  [JsonPropertyName("frequencyOfOccurrence")]
  public CodeableConcept? FrequencyOfOccurrence { get; set; }
  [JsonPropertyName("_frequencyOfOccurrence")]
  public Element _FrequencyOfOccurrence { get; set; }
  /// <summary>
  /// The situation in which the undesirable effect may manifest.
  /// </summary>
  [JsonPropertyName("symptomConditionEffect")]
  public CodeableConcept? SymptomConditionEffect { get; set; }
  [JsonPropertyName("_symptomConditionEffect")]
  public Element _SymptomConditionEffect { get; set; }
}
public class ClinicalUseIssue : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ClinicalUseIssue";
  /// <summary>
  /// A categorisation of the issue, primarily for dividing warnings into subject heading areas such as "Pregnancy and Lactation", "Overdose", "Effects Ability to Drive and Use Machines".
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Specifics for when this is a contraindication.
  /// </summary>
  [JsonPropertyName("contraindication")]
  public ClinicalUseIssueContraindication? Contraindication { get; set; }
  [JsonPropertyName("_contraindication")]
  public Element _Contraindication { get; set; }
  /// <summary>
  /// General description.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Business identifier for this issue.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Specifics for when this is an indication.
  /// </summary>
  [JsonPropertyName("indication")]
  public ClinicalUseIssueIndication? Indication { get; set; }
  [JsonPropertyName("_indication")]
  public Element _Indication { get; set; }
  /// <summary>
  /// Specifics for when this is an interaction.
  /// </summary>
  [JsonPropertyName("interaction")]
  public ClinicalUseIssueInteraction? Interaction { get; set; }
  [JsonPropertyName("_interaction")]
  public Element _Interaction { get; set; }
  /// <summary>
  /// The population group to which this applies.
  /// </summary>
  [JsonPropertyName("population")]
  public Population?[] Population { get; set; }
  [JsonPropertyName("_population")]
  public Element[] _Population { get; set; }
  /// <summary>
  /// General description.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The medication or procedure for which this is an indication.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference?[] Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element[] _Subject { get; set; }
  /// <summary>
  /// indication | contraindication | interaction | undesirable-effect | warning.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Describe the undesirable effects of the medicinal product.
  /// </summary>
  [JsonPropertyName("undesirableEffect")]
  public ClinicalUseIssueUndesirableEffect? UndesirableEffect { get; set; }
  [JsonPropertyName("_undesirableEffect")]
  public Element _UndesirableEffect { get; set; }
}
/// <summary>
/// Code Values for the ClinicalUseIssue.type field
/// </summary>
public sealed class ClinicalUseIssueTypeCodes {
  public const string INDICATION = "indication";
  public const string CONTRAINDICATION = "contraindication";
  public const string INTERACTION = "interaction";
  public const string UNDESIRABLE_EFFECT = "undesirable-effect";
  public const string WARNING = "warning";
}
/// <summary>
/// Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
/// </summary>
public class CodeSystemFilter : BackboneElement {
  /// <summary>
  /// The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A description of how or why the filter is used.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// A list of operators that can be used with the filter.
  /// </summary>
  [JsonPropertyName("operator")]
  public string[] Operator { get; set; }
  [JsonPropertyName("_operator")]
  public Element[] _Operator { get; set; }
  /// <summary>
  /// A description of what the value for the filter should be.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the CodeSystem.filter.code field
/// </summary>
public sealed class CodeSystemFilterCodeCodes {
  public const string CODE = "Code";
}
/// <summary>
/// Code Values for the CodeSystem.filter.operator field
/// </summary>
public sealed class CodeSystemFilterOperatorCodes {
  public const string EQUALS = "=";
  public const string IS_A = "is-a";
  public const string DESCENDENT_OF = "descendent-of";
  public const string IS_NOT_A = "is-not-a";
  public const string REGEX = "regex";
  public const string VAL_IN = "in";
  public const string NOT_IN = "not-in";
  public const string GENERALIZES = "generalizes";
  public const string EXISTS = "exists";
}
/// <summary>
/// A property defines an additional slot through which additional information can be provided about a concept.
/// </summary>
public class CodeSystemProperty : BackboneElement {
  /// <summary>
  /// A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A description of the property- why it is defined, and how its value might be used.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
  /// </summary>
  [JsonPropertyName("uri")]
  public string? Uri { get; set; }
  [JsonPropertyName("_uri")]
  public Element _Uri { get; set; }
}
/// <summary>
/// Code Values for the CodeSystem.property.code field
/// </summary>
public sealed class CodeSystemPropertyCodeCodes {
  public const string IDENTIFIES = "Identifies";
}
/// <summary>
/// Code Values for the CodeSystem.property.type field
/// </summary>
public sealed class CodeSystemPropertyTypeCodes {
  public const string CODE = "code";
  public const string CODING = "Coding";
  public const string VAL_STRING = "string";
  public const string INTEGER = "integer";
  public const string BOOLEAN = "boolean";
  public const string DATETIME = "dateTime";
  public const string VAL_DECIMAL = "decimal";
}
/// <summary>
/// Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
/// </summary>
public class CodeSystemConceptDesignation : BackboneElement {
  /// <summary>
  /// In the absence of a language, the resource language applies.
  /// </summary>
  [JsonPropertyName("language")]
  public string? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// If no use is provided, the designation can be assumed to be suitable for general display to a human user.
  /// </summary>
  [JsonPropertyName("use")]
  public Coding? Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
  /// <summary>
  /// The text value for this designation.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the CodeSystem.concept.designation.language field
/// </summary>
public sealed class CodeSystemConceptDesignationLanguageCodes {
  public const string HUMAN = "Human";
}
/// <summary>
/// A property value for this concept.
/// </summary>
public class CodeSystemConceptProperty : BackboneElement {
  /// <summary>
  /// A code that is a reference to CodeSystem.property.code.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueCode")]
  public string ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element _ValueCode { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
}
/// <summary>
/// Code Values for the CodeSystem.concept.property.code field
/// </summary>
public sealed class CodeSystemConceptPropertyCodeCodes {
  public const string REFERENCE = "Reference";
}
/// <summary>
/// Code Values for the CodeSystem.concept.property.value[x] field
/// </summary>
public sealed class CodeSystemConceptPropertyValueCodes {
  public const string VALUE = "Value";
}
/// <summary>
/// If this is empty, it means that the code system resource does not represent the content of the code system.
/// </summary>
public class CodeSystemConcept : BackboneElement {
  /// <summary>
  /// A code - a text symbol - that uniquely identifies the concept within the code system.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.
  /// </summary>
  [JsonPropertyName("concept")]
  public CodeSystemConcept?[] Concept { get; set; }
  [JsonPropertyName("_concept")]
  public Element[] _Concept { get; set; }
  /// <summary>
  /// The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
  /// </summary>
  [JsonPropertyName("definition")]
  public string? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
  /// </summary>
  [JsonPropertyName("designation")]
  public CodeSystemConceptDesignation?[] Designation { get; set; }
  [JsonPropertyName("_designation")]
  public Element[] _Designation { get; set; }
  /// <summary>
  /// A human readable string that is the recommended default way to present this concept to a user.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// A property value for this concept.
  /// </summary>
  [JsonPropertyName("property")]
  public CodeSystemConceptProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
}
/// <summary>
/// Code Values for the CodeSystem.concept.code field
/// </summary>
public sealed class CodeSystemConceptCodeCodes {
  public const string CODE = "Code";
}
public class CodeSystem : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CodeSystem";
  /// <summary>
  /// If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel's law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software.
  /// </summary>
  [JsonPropertyName("caseSensitive")]
  public bool? CaseSensitive { get; set; }
  [JsonPropertyName("_caseSensitive")]
  public Element _CaseSensitive { get; set; }
  /// <summary>
  /// Note that the code system resource does not define what the compositional grammar is, only whether or not there is one.
  /// </summary>
  [JsonPropertyName("compositional")]
  public bool? Compositional { get; set; }
  [JsonPropertyName("_compositional")]
  public Element _Compositional { get; set; }
  /// <summary>
  /// If this is empty, it means that the code system resource does not represent the content of the code system.
  /// </summary>
  [JsonPropertyName("concept")]
  public CodeSystemConcept?[] Concept { get; set; }
  [JsonPropertyName("_concept")]
  public Element[] _Concept { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
  /// </summary>
  [JsonPropertyName("content")]
  public string Content { get; set; }
  [JsonPropertyName("_content")]
  public Element _Content { get; set; }
  /// <summary>
  /// ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// The count of concepts defined in this resource cannot be more than this value but may be less for several reasons - see the content element.
  /// </summary>
  [JsonPropertyName("count")]
  public uint? Count { get; set; }
  [JsonPropertyName("_count")]
  public Element _Count { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the code system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the code system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the code system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the code system is presumed to be the predominant language in the place the code system was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of code systems that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Note that filters defined in code systems usually require custom code on the part of any terminology engine that will make them available for use in value set filters. For this reason, they are generally only seen in high value published terminologies.
  /// </summary>
  [JsonPropertyName("filter")]
  public CodeSystemFilter?[] Filter { get; set; }
  [JsonPropertyName("_filter")]
  public Element[] _Filter { get; set; }
  /// <summary>
  /// Note that other representations might have a different hierarchy or none at all, and represent the information using properties.
  /// </summary>
  [JsonPropertyName("hierarchyMeaning")]
  public string? HierarchyMeaning { get; set; }
  [JsonPropertyName("_hierarchyMeaning")]
  public Element _HierarchyMeaning { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this code system outside of FHIR, where it is not possible to use the logical URI.  Note that HL7 defines at least three identifiers for many of its code systems - the FHIR canonical URL, the OID and the V2 Table 0396 mnemonic code.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the code system to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// A property defines an additional slot through which additional information can be provided about a concept.
  /// </summary>
  [JsonPropertyName("property")]
  public CodeSystemProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the code system is the organization or individual primarily responsible for the maintenance and upkeep of the code system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the code system. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the code system. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this code system.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Allows filtering of code systems that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The most common use of a code system supplement is to add additional language support.
  /// </summary>
  [JsonPropertyName("supplements")]
  public string? Supplements { get; set; }
  [JsonPropertyName("_supplements")]
  public Element _Supplements { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// The definition of the value set SHALL include all codes from this code system and only codes from this code system, and it SHALL be immutable.
  /// </summary>
  [JsonPropertyName("valueSet")]
  public string? ValueSet { get; set; }
  [JsonPropertyName("_valueSet")]
  public Element _ValueSet { get; set; }
  /// <summary>
  /// There may be different code system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the code system with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
  /// <summary>
  /// Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as 'versionNeeded'.
  /// 
  /// Most code systems occasionally refine the displays defined for concepts between versions. Contexts in which the concept display values are validated may require that the version be specified for some code systems irrespective of the value of this property.
  /// </summary>
  [JsonPropertyName("versionNeeded")]
  public bool? VersionNeeded { get; set; }
  [JsonPropertyName("_versionNeeded")]
  public Element _VersionNeeded { get; set; }
}
/// <summary>
/// Code Values for the CodeSystem.content field
/// </summary>
public sealed class CodeSystemContentCodes {
  public const string NOT_PRESENT = "not-present";
  public const string EXAMPLE = "example";
  public const string FRAGMENT = "fragment";
  public const string COMPLETE = "complete";
  public const string SUPPLEMENT = "supplement";
}
/// <summary>
/// Code Values for the CodeSystem.hierarchyMeaning field
/// </summary>
public sealed class CodeSystemHierarchyMeaningCodes {
  public const string GROUPED_BY = "grouped-by";
  public const string IS_A = "is-a";
  public const string PART_OF = "part-of";
  public const string CLASSIFIED_WITH = "classified-with";
}
/// <summary>
/// Code Values for the CodeSystem.status field
/// </summary>
public sealed class CodeSystemStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Text, attachment(s), or resource(s) that was communicated to the recipient.
/// </summary>
public class CommunicationPayload : BackboneElement {
  /// <summary>
  /// The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
  /// 
  /// If the content isn't codified, contentCodeableConcept.text can be used.  
  /// 
  /// When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
  /// </summary>
  [JsonPropertyName("contentAttachment")]
  public Attachment ContentAttachment { get; set; }
  [JsonPropertyName("_contentAttachment")]
  public Element _ContentAttachment { get; set; }
  /// <summary>
  /// The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
  /// 
  /// If the content isn't codified, contentCodeableConcept.text can be used.  
  /// 
  /// When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
  /// </summary>
  [JsonPropertyName("contentReference")]
  public Reference ContentReference { get; set; }
  [JsonPropertyName("_contentReference")]
  public Element _ContentReference { get; set; }
  /// <summary>
  /// The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
  /// 
  /// If the content isn't codified, contentCodeableConcept.text can be used.  
  /// 
  /// When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
  /// </summary>
  [JsonPropertyName("contentCodeableConcept")]
  public CodeableConcept ContentCodeableConcept { get; set; }
  [JsonPropertyName("_contentCodeableConcept")]
  public Element _ContentCodeableConcept { get; set; }
}
public class Communication : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Communication";
  /// <summary>
  /// Don't use Communication.about element when a more specific element exists, such as basedOn or reasonReference.
  /// </summary>
  [JsonPropertyName("about")]
  public Reference?[] About { get; set; }
  [JsonPropertyName("_about")]
  public Element[] _About { get; set; }
  /// <summary>
  /// This must point to some sort of a 'Request' resource, such as CarePlan, CommunicationRequest, ServiceRequest, MedicationRequest, etc.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// There may be multiple axes of categorization and one communication may serve multiple purposes.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Prior communication that this communication is in response to.
  /// </summary>
  [JsonPropertyName("inResponseTo")]
  public Reference?[] InResponseTo { get; set; }
  [JsonPropertyName("_inResponseTo")]
  public Element[] _InResponseTo { get; set; }
  /// <summary>
  /// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// A channel that was used for this communication (e.g. email, fax).
  /// </summary>
  [JsonPropertyName("medium")]
  public CodeableConcept?[] Medium { get; set; }
  [JsonPropertyName("_medium")]
  public Element[] _Medium { get; set; }
  /// <summary>
  /// Additional notes or commentary about the communication by the sender, receiver or other interested parties.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The event the communication was part of - e.g. if you disclosed as "part" of counselling, it would be partOf that Procedure.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Text, attachment(s), or resource(s) that was communicated to the recipient.
  /// </summary>
  [JsonPropertyName("payload")]
  public CommunicationPayload?[] Payload { get; set; }
  [JsonPropertyName("_payload")]
  public Element[] _Payload { get; set; }
  /// <summary>
  /// Used to prioritize workflow (such as which communication to read first) when the communication is planned or in progress.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// Textual reasons can be captured using reason.concept.text.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The time when this communication arrived at the destination.
  /// </summary>
  [JsonPropertyName("received")]
  public string? Received { get; set; }
  [JsonPropertyName("_received")]
  public Element _Received { get; set; }
  /// <summary>
  /// If receipts need to be tracked by an individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either receipts are not tracked (e.g. a mass mail-out) or a receipt is captured in aggregate (all emails confirmed received by a particular time).
  /// </summary>
  [JsonPropertyName("recipient")]
  public Reference?[] Recipient { get; set; }
  [JsonPropertyName("_recipient")]
  public Element[] _Recipient { get; set; }
  /// <summary>
  /// The entity (e.g. person, organization, clinical information system, or device) which is the source of the communication.
  /// </summary>
  [JsonPropertyName("sender")]
  public Reference? Sender { get; set; }
  [JsonPropertyName("_sender")]
  public Element _Sender { get; set; }
  /// <summary>
  /// The time when this communication was sent.
  /// </summary>
  [JsonPropertyName("sent")]
  public string? Sent { get; set; }
  [JsonPropertyName("_sent")]
  public Element _Sent { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the codes aborted and entered-in-error that mark the communication as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This is generally only used for "exception" statuses such as "not-done", "suspended" or "aborted". The reason for performing the event at all is captured in reasonCode, not here.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
  /// <summary>
  /// The patient or group that was the focus of this communication.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Communication.topic.text can be used without any codings.
  /// </summary>
  [JsonPropertyName("topic")]
  public CodeableConcept? Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element _Topic { get; set; }
}
/// <summary>
/// Code Values for the Communication.priority field
/// </summary>
public sealed class CommunicationPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the Communication.status field
/// </summary>
public sealed class CommunicationStatusCodes {
  public const string PREPARATION = "preparation";
  public const string IN_PROGRESS = "in-progress";
  public const string NOT_DONE = "not-done";
  public const string ON_HOLD = "on-hold";
  public const string STOPPED = "stopped";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Text, attachment(s), or resource(s) to be communicated to the recipient.
/// </summary>
public class CommunicationRequestPayload : BackboneElement {
  /// <summary>
  /// The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
  /// 
  /// If the content isn't codified, contentCodeableConcept.text can be used.  
  /// 
  /// When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
  /// </summary>
  [JsonPropertyName("contentAttachment")]
  public Attachment ContentAttachment { get; set; }
  [JsonPropertyName("_contentAttachment")]
  public Element _ContentAttachment { get; set; }
  /// <summary>
  /// The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
  /// 
  /// If the content isn't codified, contentCodeableConcept.text can be used.  
  /// 
  /// When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
  /// </summary>
  [JsonPropertyName("contentReference")]
  public Reference ContentReference { get; set; }
  [JsonPropertyName("_contentReference")]
  public Element _ContentReference { get; set; }
  /// <summary>
  /// The content can be codified or textual.  As an example of codified content, when working with machine generated communications, the payload may be drawn from a finite, terminology defined set of communications, especially for short, status update kinds of communications where more of a natural language approach isn't appropriate.
  /// 
  /// If the content isn't codified, contentCodeableConcept.text can be used.  
  /// 
  /// When using contentCodeableConcept, the CodeableConcept is what is being communicated and is not a categorization of the content.
  /// </summary>
  [JsonPropertyName("contentCodeableConcept")]
  public CodeableConcept ContentCodeableConcept { get; set; }
  [JsonPropertyName("_contentCodeableConcept")]
  public Element _ContentCodeableConcept { get; set; }
}
public class CommunicationRequest : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CommunicationRequest";
  /// <summary>
  /// Don't use CommunicationRequest.about element when a more specific element exists, such as basedOn, reasonReference, or replaces.
  /// </summary>
  [JsonPropertyName("about")]
  public Reference?[] About { get; set; }
  [JsonPropertyName("_about")]
  public Element[] _About { get; set; }
  /// <summary>
  /// For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
  /// </summary>
  [JsonPropertyName("authoredOn")]
  public string? AuthoredOn { get; set; }
  [JsonPropertyName("_authoredOn")]
  public Element _AuthoredOn { get; set; }
  /// <summary>
  /// A plan or proposal that is fulfilled in whole or in part by this request.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// There may be multiple axes of categorization and one communication request may serve multiple purposes.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The attributes provided with the request qualify what is not to be done.
  /// </summary>
  [JsonPropertyName("doNotPerform")]
  public bool? DoNotPerform { get; set; }
  [JsonPropertyName("_doNotPerform")]
  public Element _DoNotPerform { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
  /// </summary>
  [JsonPropertyName("groupIdentifier")]
  public Identifier? GroupIdentifier { get; set; }
  [JsonPropertyName("_groupIdentifier")]
  public Element _GroupIdentifier { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
  /// </summary>
  [JsonPropertyName("informationProvider")]
  public Reference?[] InformationProvider { get; set; }
  [JsonPropertyName("_informationProvider")]
  public Element[] _InformationProvider { get; set; }
  /// <summary>
  /// A channel that was used for this communication (e.g. email, fax).
  /// </summary>
  [JsonPropertyName("medium")]
  public CodeableConcept?[] Medium { get; set; }
  [JsonPropertyName("_medium")]
  public Element[] _Medium { get; set; }
  /// <summary>
  /// Comments made about the request by the requester, sender, recipient, subject or other participants.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The time when this communication is to occur.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// The time when this communication is to occur.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// Text, attachment(s), or resource(s) to be communicated to the recipient.
  /// </summary>
  [JsonPropertyName("payload")]
  public CommunicationRequestPayload?[] Payload { get; set; }
  [JsonPropertyName("_payload")]
  public Element[] _Payload { get; set; }
  /// <summary>
  /// Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// Textual reasons can be captured using reasonCode.text.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
  /// </summary>
  [JsonPropertyName("recipient")]
  public Reference?[] Recipient { get; set; }
  [JsonPropertyName("_recipient")]
  public Element[] _Recipient { get; set; }
  /// <summary>
  /// The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
  /// </summary>
  [JsonPropertyName("replaces")]
  public Reference?[] Replaces { get; set; }
  [JsonPropertyName("_replaces")]
  public Element[] _Replaces { get; set; }
  /// <summary>
  /// The device, individual, or organization who asks for the information to be shared.
  /// </summary>
  [JsonPropertyName("requester")]
  public Reference? Requester { get; set; }
  [JsonPropertyName("_requester")]
  public Element _Requester { get; set; }
  /// <summary>
  /// The status of the proposal or order.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This is generally only used for "exception" statuses such as "on-hold" or "revoked".  The reason why the CommunicationRequest was created at all is captured in reasonCode, not here.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
  /// <summary>
  /// The patient or group that is the focus of this communication request.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the CommunicationRequest.priority field
/// </summary>
public sealed class CommunicationRequestPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the CommunicationRequest.status field
/// </summary>
public sealed class CommunicationRequestStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string ON_HOLD = "on-hold";
  public const string REVOKED = "revoked";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Information about how a resource is related to the compartment.
/// </summary>
public class CompartmentDefinitionResource : BackboneElement {
  /// <summary>
  /// The name of a resource supported by the server.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Additional documentation about the resource and compartment.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// If no search parameters are listed, then the resource is not linked to the compartment.
  /// </summary>
  [JsonPropertyName("param")]
  public string?[] Param { get; set; }
  [JsonPropertyName("_param")]
  public Element[] _Param { get; set; }
}
/// <summary>
/// Code Values for the CompartmentDefinition.resource.code field
/// </summary>
public sealed class CompartmentDefinitionResourceCodeCodes {
  public const string NAME = "Name";
}
public class CompartmentDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CompartmentDefinition";
  /// <summary>
  /// Only the specification can define the compartments that can exist. Servers can choose to support them.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the compartment definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the compartment definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the compartment definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the compartment definition is presumed to be the predominant language in the place the compartment definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of compartment definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.This is often the same as the code for the parameter, but does not need to be.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the compartment definition is the organization or individual primarily responsible for the maintenance and upkeep of the compartment definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the compartment definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the compartment definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this compartment definition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Information about how a resource is related to the compartment.
  /// </summary>
  [JsonPropertyName("resource")]
  public CompartmentDefinitionResource?[] Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element[] _Resource { get; set; }
  /// <summary>
  /// Servers may define and use compartments to manage logical access without implementing the compartment related syntax.
  /// </summary>
  [JsonPropertyName("search")]
  public bool Search { get; set; }
  [JsonPropertyName("_search")]
  public Element _Search { get; set; }
  /// <summary>
  /// Allows filtering of compartment definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different compartment definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the compartment definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the CompartmentDefinition.code field
/// </summary>
public sealed class CompartmentDefinitionCodeCodes {
  public const string PATIENT = "Patient";
  public const string ENCOUNTER = "Encounter";
  public const string RELATEDPERSON = "RelatedPerson";
  public const string PRACTITIONER = "Practitioner";
  public const string DEVICE = "Device";
}
/// <summary>
/// Code Values for the CompartmentDefinition.status field
/// </summary>
public sealed class CompartmentDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Only list each attester once.
/// </summary>
public class CompositionAttester : BackboneElement {
  /// <summary>
  /// The type of attestation the authenticator offers.
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// Who attested the composition in the specified way.
  /// </summary>
  [JsonPropertyName("party")]
  public Reference? Party { get; set; }
  [JsonPropertyName("_party")]
  public Element _Party { get; set; }
  /// <summary>
  /// When the composition was attested by the party.
  /// </summary>
  [JsonPropertyName("time")]
  public string? Time { get; set; }
  [JsonPropertyName("_time")]
  public Element _Time { get; set; }
}
/// <summary>
/// Code Values for the Composition.attester.mode field
/// </summary>
public sealed class CompositionAttesterModeCodes {
  public const string PERSONAL = "personal";
  public const string PROFESSIONAL = "professional";
  public const string LEGAL = "legal";
  public const string OFFICIAL = "official";
}
/// <summary>
/// A document is a version specific composition.
/// </summary>
public class CompositionRelatesTo : BackboneElement {
  /// <summary>
  /// If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The target composition/document of this relationship.
  /// </summary>
  [JsonPropertyName("targetIdentifier")]
  public Identifier TargetIdentifier { get; set; }
  [JsonPropertyName("_targetIdentifier")]
  public Element _TargetIdentifier { get; set; }
  /// <summary>
  /// The target composition/document of this relationship.
  /// </summary>
  [JsonPropertyName("targetReference")]
  public Reference TargetReference { get; set; }
  [JsonPropertyName("_targetReference")]
  public Element _TargetReference { get; set; }
}
/// <summary>
/// Code Values for the Composition.relatesTo.code field
/// </summary>
public sealed class CompositionRelatesToCodeCodes {
  public const string REPLACES = "replaces";
  public const string TRANSFORMS = "transforms";
  public const string SIGNS = "signs";
  public const string APPENDS = "appends";
}
/// <summary>
/// The event needs to be consistent with the type element, though can provide further information if desired.
/// </summary>
public class CompositionEvent : BackboneElement {
  /// <summary>
  /// An event can further specialize the act inherent in the typeCode, such as where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more eventCodes are included, they SHALL NOT conflict with the values inherent in the classCode, practiceSettingCode or typeCode, as such a conflict would create an ambiguous situation. This short list of codes is provided to be used as key words for certain types of queries.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
  /// </summary>
  [JsonPropertyName("detail")]
  public Reference?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
}
/// <summary>
/// The root of the sections that make up the composition.
/// </summary>
public class CompositionSection : BackboneElement {
  /// <summary>
  /// Identifies who is responsible for the information in this section, not necessarily who typed it in.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// The code identifies the section for an automated processor of the document. This is particularly relevant when using profiles to control the structure of the document.   
  /// 
  /// If the section has content (instead of sub-sections), the section.code does not change the meaning or interpretation of the resource that is the content of the section in the comments for the section.code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The various reasons for an empty section make a significant interpretation to its interpretation. Note that this code is for use when the entire section content has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
  /// </summary>
  [JsonPropertyName("emptyReason")]
  public CodeableConcept? EmptyReason { get; set; }
  [JsonPropertyName("_emptyReason")]
  public Element _EmptyReason { get; set; }
  /// <summary>
  /// If there are no entries in the list, an emptyReason SHOULD be provided.
  /// </summary>
  [JsonPropertyName("entry")]
  public Reference?[] Entry { get; set; }
  [JsonPropertyName("_entry")]
  public Element[] _Entry { get; set; }
  /// <summary>
  /// Typically, sections in a doument are about the subject of the document, whether that is a  patient, or group of patients, location, or device, or whatever. For some kind of documents, some sections actually contain data about related entities. Typical examples are  a section in a newborn discharge summary concerning the mother, or family history documents, with a section about each family member, though there are many other examples.
  /// </summary>
  [JsonPropertyName("focus")]
  public Reference? Focus { get; set; }
  [JsonPropertyName("_focus")]
  public Element _Focus { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
  /// </summary>
  [JsonPropertyName("mode")]
  public string? Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
  /// </summary>
  [JsonPropertyName("orderedBy")]
  public CodeableConcept? OrderedBy { get; set; }
  [JsonPropertyName("_orderedBy")]
  public Element _OrderedBy { get; set; }
  /// <summary>
  /// Nested sections are primarily used to help human readers navigate to particular portions of the document.
  /// </summary>
  [JsonPropertyName("section")]
  public CompositionSection?[] Section { get; set; }
  [JsonPropertyName("_section")]
  public Element[] _Section { get; set; }
  /// <summary>
  /// Document profiles may define what content should be represented in the narrative to ensure clinical safety.
  /// </summary>
  [JsonPropertyName("text")]
  public Narrative? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// The title identifies the section for a human reader. The title must be consistent with the narrative of the resource that is the target of the section.content reference. Generally, sections SHOULD have titles, but in some documents, it is unnecessary or inappropriate. Typically, this is where a section has subsections that have their own adequately distinguishing title,  or documents that only have a single section. Most Implementation Guides will make section title to be a required element.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
/// <summary>
/// Code Values for the Composition.section.mode field
/// </summary>
public sealed class CompositionSectionModeCodes {
  public const string WORKING = "working";
  public const string SNAPSHOT = "snapshot";
  public const string CHANGES = "changes";
}
/// <summary>
/// To support documents, and also to capture the EN13606 notion of an attested commit to the patient EHR, and to allow a set of disparate resources at the information/engineering level to be gathered into a clinical statement.
/// </summary>
public class Composition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Composition";
  /// <summary>
  /// Only list each attester once.
  /// </summary>
  [JsonPropertyName("attester")]
  public CompositionAttester?[] Attester { get; set; }
  [JsonPropertyName("_attester")]
  public Element[] _Attester { get; set; }
  /// <summary>
  /// Identifies who is responsible for the information in the composition, not necessarily who typed it in.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// This is a metadata field from [XDS/MHD](http://wiki.ihe.net/index.php?title=Mobile_access_to_Health_Documents_(MHD)).
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The exact use of this element, and enforcement and issues related to highly sensitive documents are out of scope for the base specification, and delegated to implementation profiles (see security section).  This element is labeled as a modifier because highly confidential documents must not be treated as if they are not.
  /// </summary>
  [JsonPropertyName("confidentiality")]
  public string? Confidentiality { get; set; }
  [JsonPropertyName("_confidentiality")]
  public Element _Confidentiality { get; set; }
  /// <summary>
  /// This is useful when documents are derived from a composition - provides guidance for how to get the latest version of the document. This is optional because this is sometimes not known by the authoring system, and can be inferred by context. However, it is important that this information be known when working with a derived document, so providing a custodian is encouraged.
  /// </summary>
  [JsonPropertyName("custodian")]
  public Reference? Custodian { get; set; }
  [JsonPropertyName("_custodian")]
  public Element _Custodian { get; set; }
  /// <summary>
  /// The Last Modified Date on the composition may be after the date of the document was attested without being changed.
  /// </summary>
  [JsonPropertyName("date")]
  public string Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Describes the clinical encounter or type of care this documentation is associated with.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// The event needs to be consistent with the type element, though can provide further information if desired.
  /// </summary>
  [JsonPropertyName("event")]
  public CompositionEvent?[] Event { get; set; }
  [JsonPropertyName("_event")]
  public Element[] _Event { get; set; }
  /// <summary>
  /// Similar to ClinicalDocument/setId in CDA. See discussion in resource definition for how these relate.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// A document is a version specific composition.
  /// </summary>
  [JsonPropertyName("relatesTo")]
  public CompositionRelatesTo?[] RelatesTo { get; set; }
  [JsonPropertyName("_relatesTo")]
  public Element[] _RelatesTo { get; set; }
  /// <summary>
  /// The root of the sections that make up the composition.
  /// </summary>
  [JsonPropertyName("section")]
  public CompositionSection?[] Section { get; set; }
  [JsonPropertyName("_section")]
  public Element[] _Section { get; set; }
  /// <summary>
  /// If a composition is marked as withdrawn, the compositions/documents in the series, or data from the composition or document series, should never be displayed to a user without being clearly marked as untrustworthy. The flag "entered-in-error" is why this element is labeled as a modifier of other elements.   
  /// 
  /// Some reporting work flows require that the original narrative of a final document never be altered; instead, only new narrative can be added. The composition resource has no explicit status for explicitly noting whether this business rule is in effect. This would be handled by an extension if required.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// For clinical documents, this is usually the patient.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// For many compositions, the title is the same as the text or a display name of Composition.type (e.g. a "consultation" or "progress note"). Note that CDA does not make title mandatory, but there are no known cases where it is useful for title to be omitted, so it is mandatory here. Feedback on this requirement is welcome during the trial use period.
  /// </summary>
  [JsonPropertyName("title")]
  public string Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// For Composition type, LOINC is ubiquitous and strongly endorsed by HL7. Most implementation guides will require a specific LOINC code, or use LOINC as an extensible binding.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Composition.confidentiality field
/// </summary>
public sealed class CompositionConfidentialityCodes {
  public const string AS = "As";
}
/// <summary>
/// Code Values for the Composition.status field
/// </summary>
public sealed class CompositionStatusCodes {
  public const string PRELIMINARY = "preliminary";
  public const string FINAL = "final";
  public const string AMENDED = "amended";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
/// </summary>
public class ConceptMapGroupElementTargetDependsOn : BackboneElement {
  /// <summary>
  /// The display is ignored when processing the map.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somewhere that is labeled to correspond with a code system property.
  /// </summary>
  [JsonPropertyName("property")]
  public string Property { get; set; }
  [JsonPropertyName("_property")]
  public Element _Property { get; set; }
  /// <summary>
  /// An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
  /// </summary>
  [JsonPropertyName("system")]
  public string? System { get; set; }
  [JsonPropertyName("_system")]
  public Element _System { get; set; }
  /// <summary>
  /// Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers to.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Ideally there would only be one map, with an 'equivalent' mapping. But multiple maps are allowed for several narrower (i.e. source-is-broader-than-target) options, or to assert that other concepts are not related.
/// </summary>
public class ConceptMapGroupElementTarget : BackboneElement {
  /// <summary>
  /// Identity (code or path) or the element/item that the map refers to.
  /// </summary>
  [JsonPropertyName("code")]
  public string? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A description of status/issues in mapping that conveys additional information not represented in  the structured data.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
  /// </summary>
  [JsonPropertyName("dependsOn")]
  public ConceptMapGroupElementTargetDependsOn?[] DependsOn { get; set; }
  [JsonPropertyName("_dependsOn")]
  public Element[] _DependsOn { get; set; }
  /// <summary>
  /// The display is ignored when processing the map.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the relationship (e.g., equivalent) cannot be relied on.
  /// </summary>
  [JsonPropertyName("product")]
  public ConceptMapGroupElementTargetDependsOn?[] Product { get; set; }
  [JsonPropertyName("_product")]
  public Element[] _Product { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because it may indicate that there is no mapping.
  /// </summary>
  [JsonPropertyName("relationship")]
  public string Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
}
/// <summary>
/// Code Values for the ConceptMap.group.element.target.code field
/// </summary>
public sealed class ConceptMapGroupElementTargetCodeCodes {
  public const string CODE = "Code";
}
/// <summary>
/// Code Values for the ConceptMap.group.element.target.relationship field
/// </summary>
public sealed class ConceptMapGroupElementTargetRelationshipCodes {
  public const string RELATED_TO = "related-to";
  public const string EQUIVALENT = "equivalent";
  public const string SOURCE_IS_NARROWER_THAN_TARGET = "source-is-narrower-than-target";
  public const string SOURCE_IS_BROADER_THAN_TARGET = "source-is-broader-than-target";
  public const string NOT_RELATED_TO = "not-related-to";
}
/// <summary>
/// Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
/// </summary>
public class ConceptMapGroupElement : BackboneElement {
  /// <summary>
  /// Identity (code or path) or the element/item being mapped.
  /// </summary>
  [JsonPropertyName("code")]
  public string? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The display is ignored when processing the map.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// If noMap = true this indicates that no mapping to a target concept exists for this source concept.
  /// </summary>
  [JsonPropertyName("noMap")]
  public bool? NoMap { get; set; }
  [JsonPropertyName("_noMap")]
  public Element _NoMap { get; set; }
  /// <summary>
  /// Ideally there would only be one map, with an 'equivalent' mapping. But multiple maps are allowed for several narrower (i.e. source-is-broader-than-target) options, or to assert that other concepts are not related.
  /// </summary>
  [JsonPropertyName("target")]
  public ConceptMapGroupElementTarget?[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
}
/// <summary>
/// Code Values for the ConceptMap.group.element.code field
/// </summary>
public sealed class ConceptMapGroupElementCodeCodes {
  public const string IDENTIFIES = "Identifies";
}
/// <summary>
/// This only applies if the source code has a system value that matches the system defined for the group.
/// </summary>
public class ConceptMapGroupUnmapped : BackboneElement {
  /// <summary>
  /// The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.
  /// </summary>
  [JsonPropertyName("code")]
  public string? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The display is ignored when processing the map.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Code Values for the ConceptMap.group.unmapped.code field
/// </summary>
public sealed class ConceptMapGroupUnmappedCodeCodes {
  public const string FIXED = "Fixed";
}
/// <summary>
/// Code Values for the ConceptMap.group.unmapped.mode field
/// </summary>
public sealed class ConceptMapGroupUnmappedModeCodes {
  public const string PROVIDED = "provided";
  public const string VAL_FIXED = "fixed";
  public const string OTHER_MAP = "other-map";
}
/// <summary>
/// A group of mappings that all have the same source and target system.
/// </summary>
public class ConceptMapGroup : BackboneElement {
  /// <summary>
  /// Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies.
  /// </summary>
  [JsonPropertyName("element")]
  public ConceptMapGroupElement[] Element { get; set; }
  [JsonPropertyName("_element")]
  public Element[] _Element { get; set; }
  /// <summary>
  /// This is not needed if the source value set is specified and it contains concepts from only a single system.
  /// </summary>
  [JsonPropertyName("source")]
  public string? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// The specification of a particular code system version may be required for code systems which lack concept permanence.
  /// </summary>
  [JsonPropertyName("sourceVersion")]
  public string? SourceVersion { get; set; }
  [JsonPropertyName("_sourceVersion")]
  public Element _SourceVersion { get; set; }
  /// <summary>
  /// This is not needed if the target value set is specified and it contains concepts from only a single system. The group target may also be omitted if all of the target element relationship values are 'not-related-to'.
  /// </summary>
  [JsonPropertyName("target")]
  public string? Target { get; set; }
  [JsonPropertyName("_target")]
  public Element _Target { get; set; }
  /// <summary>
  /// The specification of a particular code system version may be required for code systems which lack concept permanence.
  /// </summary>
  [JsonPropertyName("targetVersion")]
  public string? TargetVersion { get; set; }
  [JsonPropertyName("_targetVersion")]
  public Element _TargetVersion { get; set; }
  /// <summary>
  /// This only applies if the source code has a system value that matches the system defined for the group.
  /// </summary>
  [JsonPropertyName("unmapped")]
  public ConceptMapGroupUnmapped? Unmapped { get; set; }
  [JsonPropertyName("_unmapped")]
  public Element _Unmapped { get; set; }
}
public class ConceptMap : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ConceptMap";
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Frequently the copyright differs between the concept map and codes that are included. The copyright statement should clearly differentiate between these when required.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the concept map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The description is not intended to describe the semantics of the concept map. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of concept maps that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// A group of mappings that all have the same source and target system.
  /// </summary>
  [JsonPropertyName("group")]
  public ConceptMapGroup?[] Group { get; set; }
  [JsonPropertyName("_group")]
  public Element[] _Group { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this concept map outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the concept map to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the concept map is the organization or individual primarily responsible for the maintenance and upkeep of the concept map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the concept map. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the concept map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this concept map.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, there is no specified context for the map (not recommended).  The source value set may select codes from either an explicit (standard or local) or implicit code system.
  /// </summary>
  [JsonPropertyName("sourceUri")]
  public string? SourceUri { get; set; }
  [JsonPropertyName("_sourceUri")]
  public Element _SourceUri { get; set; }
  /// <summary>
  /// Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, there is no specified context for the map (not recommended).  The source value set may select codes from either an explicit (standard or local) or implicit code system.
  /// </summary>
  [JsonPropertyName("sourceCanonical")]
  public string? SourceCanonical { get; set; }
  [JsonPropertyName("_sourceCanonical")]
  public Element _SourceCanonical { get; set; }
  /// <summary>
  /// Allows filtering of concept maps that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
  /// </summary>
  [JsonPropertyName("targetUri")]
  public string? TargetUri { get; set; }
  [JsonPropertyName("_targetUri")]
  public Element _TargetUri { get; set; }
  /// <summary>
  /// Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map.
  /// </summary>
  [JsonPropertyName("targetCanonical")]
  public string? TargetCanonical { get; set; }
  [JsonPropertyName("_targetCanonical")]
  public Element _TargetCanonical { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different concept map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the concept map with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the ConceptMap.status field
/// </summary>
public sealed class ConceptMapStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Clinical stage or grade of a condition. May include formal severity assessments.
/// </summary>
public class ConditionStage : BackboneElement {
  /// <summary>
  /// Reference to a formal record of the evidence on which the staging assessment is based.
  /// </summary>
  [JsonPropertyName("assessment")]
  public Reference?[] Assessment { get; set; }
  [JsonPropertyName("_assessment")]
  public Element[] _Assessment { get; set; }
  /// <summary>
  /// A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
  /// </summary>
  [JsonPropertyName("summary")]
  public CodeableConcept? Summary { get; set; }
  [JsonPropertyName("_summary")]
  public Element _Summary { get; set; }
  /// <summary>
  /// The kind of staging, such as pathological or clinical staging.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// If the condition was confirmed, but subsequently refuted, then the evidence can be cumulative including all evidence over time.  The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
/// </summary>
public class ConditionEvidence : BackboneElement {
  /// <summary>
  /// A manifestation or symptom that led to the recording of this condition.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// Links to other relevant information, including pathology reports.
  /// </summary>
  [JsonPropertyName("detail")]
  public Reference?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
}
public class Condition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Condition";
  /// <summary>
  /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
  /// </summary>
  [JsonPropertyName("abatementDateTime")]
  public string? AbatementDateTime { get; set; }
  [JsonPropertyName("_abatementDateTime")]
  public Element _AbatementDateTime { get; set; }
  /// <summary>
  /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
  /// </summary>
  [JsonPropertyName("abatementAge")]
  public Age? AbatementAge { get; set; }
  [JsonPropertyName("_abatementAge")]
  public Element _AbatementAge { get; set; }
  /// <summary>
  /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
  /// </summary>
  [JsonPropertyName("abatementPeriod")]
  public Period? AbatementPeriod { get; set; }
  [JsonPropertyName("_abatementPeriod")]
  public Element _AbatementPeriod { get; set; }
  /// <summary>
  /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
  /// </summary>
  [JsonPropertyName("abatementRange")]
  public Range? AbatementRange { get; set; }
  [JsonPropertyName("_abatementRange")]
  public Element _AbatementRange { get; set; }
  /// <summary>
  /// There is no explicit distinction between resolution and remission because in many cases the distinction is not clear. Age is generally used when the patient reports an age at which the Condition abated.  If there is no abatement element, it is unknown whether the condition has resolved or entered remission; applications and users should generally assume that the condition is still valid.  When abatementString exists, it implies the condition is abated.
  /// </summary>
  [JsonPropertyName("abatementString")]
  public string? AbatementString { get; set; }
  [JsonPropertyName("_abatementString")]
  public Element _AbatementString { get; set; }
  /// <summary>
  /// Individual or device that is making the condition statement.
  /// </summary>
  [JsonPropertyName("asserter")]
  public Reference? Asserter { get; set; }
  [JsonPropertyName("_asserter")]
  public Element _Asserter { get; set; }
  /// <summary>
  /// Only used if not implicit in code found in Condition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [bodySite](extension-bodysite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept?[] BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element[] _BodySite { get; set; }
  /// <summary>
  /// The categorization is often highly contextual and may appear poorly differentiated or not very useful in other contexts.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The data type is CodeableConcept because clinicalStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
  /// </summary>
  [JsonPropertyName("clinicalStatus")]
  public CodeableConcept? ClinicalStatus { get; set; }
  [JsonPropertyName("_clinicalStatus")]
  public Element _ClinicalStatus { get; set; }
  /// <summary>
  /// Identification of the condition, problem or diagnosis.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. This record indicates the encounter this particular record is associated with.  In the case of a "new" diagnosis reflecting ongoing/revised information about the condition, this might be distinct from the first encounter in which the underlying condition was first "known".
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// If the condition was confirmed, but subsequently refuted, then the evidence can be cumulative including all evidence over time.  The evidence may be a simple list of coded symptoms/manifestations, or references to observations or formal assessments, or both.
  /// </summary>
  [JsonPropertyName("evidence")]
  public ConditionEvidence?[] Evidence { get; set; }
  [JsonPropertyName("_evidence")]
  public Element[] _Evidence { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.
  /// </summary>
  [JsonPropertyName("onsetDateTime")]
  public string? OnsetDateTime { get; set; }
  [JsonPropertyName("_onsetDateTime")]
  public Element _OnsetDateTime { get; set; }
  /// <summary>
  /// Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.
  /// </summary>
  [JsonPropertyName("onsetAge")]
  public Age? OnsetAge { get; set; }
  [JsonPropertyName("_onsetAge")]
  public Element _OnsetAge { get; set; }
  /// <summary>
  /// Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.
  /// </summary>
  [JsonPropertyName("onsetPeriod")]
  public Period? OnsetPeriod { get; set; }
  [JsonPropertyName("_onsetPeriod")]
  public Element _OnsetPeriod { get; set; }
  /// <summary>
  /// Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.
  /// </summary>
  [JsonPropertyName("onsetRange")]
  public Range? OnsetRange { get; set; }
  [JsonPropertyName("_onsetRange")]
  public Element _OnsetRange { get; set; }
  /// <summary>
  /// Age is generally used when the patient reports an age at which the Condition began to occur.  Period is generally used to convey an imprecise onset that occurred within the time period.  For example, Period is not intended to convey the transition period before the chronic bronchitis or COPD condition was diagnosed, but Period can be used to convey an imprecise diagnosis date.
  /// </summary>
  [JsonPropertyName("onsetString")]
  public string? OnsetString { get; set; }
  [JsonPropertyName("_onsetString")]
  public Element _OnsetString { get; set; }
  /// <summary>
  /// The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
  /// </summary>
  [JsonPropertyName("recordedDate")]
  public string? RecordedDate { get; set; }
  [JsonPropertyName("_recordedDate")]
  public Element _RecordedDate { get; set; }
  /// <summary>
  /// Individual who recorded the record and takes responsibility for its content.
  /// </summary>
  [JsonPropertyName("recorder")]
  public Reference? Recorder { get; set; }
  [JsonPropertyName("_recorder")]
  public Element _Recorder { get; set; }
  /// <summary>
  /// Coding of the severity with a terminology is preferred, where possible.
  /// </summary>
  [JsonPropertyName("severity")]
  public CodeableConcept? Severity { get; set; }
  [JsonPropertyName("_severity")]
  public Element _Severity { get; set; }
  /// <summary>
  /// Clinical stage or grade of a condition. May include formal severity assessments.
  /// </summary>
  [JsonPropertyName("stage")]
  public ConditionStage?[] Stage { get; set; }
  [JsonPropertyName("_stage")]
  public Element[] _Stage { get; set; }
  /// <summary>
  /// Indicates the patient or group who the condition record is associated with.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// verificationStatus is not required.  For example, when a patient has abdominal pain in the ED, there is not likely going to be a verification status.
  /// The data type is CodeableConcept because verificationStatus has some clinical judgment involved, such that there might need to be more specificity than the required FHIR value set allows. For example, a SNOMED coding might allow for additional specificity.
  /// </summary>
  [JsonPropertyName("verificationStatus")]
  public CodeableConcept? VerificationStatus { get; set; }
  [JsonPropertyName("_verificationStatus")]
  public Element _VerificationStatus { get; set; }
}
/// <summary>
/// Observations particularly relevant to this condition.
/// </summary>
public class ConditionDefinitionObservation : BackboneElement {
  /// <summary>
  /// Category that is relevant.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Code for relevant Observation.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
}
/// <summary>
/// Medications particularly relevant for this condition.
/// </summary>
public class ConditionDefinitionMedication : BackboneElement {
  /// <summary>
  /// Category that is relevant.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Code for relevant Medication.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
}
/// <summary>
/// An observation that suggests that this condition applies.
/// </summary>
public class ConditionDefinitionPrecondition : BackboneElement {
  /// <summary>
  /// Code for relevant Observation.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Kind of pre-condition.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Value of Observation.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// Value of Observation.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
}
/// <summary>
/// Code Values for the ConditionDefinition.precondition.type field
/// </summary>
public sealed class ConditionDefinitionPreconditionTypeCodes {
  public const string SENSITIVE = "sensitive";
  public const string SPECIFIC = "specific";
}
/// <summary>
/// Questionnaire for this condition.
/// </summary>
public class ConditionDefinitionQuestionnaire : BackboneElement {
  /// <summary>
  /// Use of the questionnaire.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Specific Questionnaire.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
}
/// <summary>
/// Code Values for the ConditionDefinition.questionnaire.purpose field
/// </summary>
public sealed class ConditionDefinitionQuestionnairePurposeCodes {
  public const string PREADMIT = "preadmit";
  public const string DIFF_DIAGNOSIS = "diff-diagnosis";
  public const string OUTCOME = "outcome";
}
/// <summary>
/// Plan that is appropriate.
/// </summary>
public class ConditionDefinitionPlan : BackboneElement {
  /// <summary>
  /// The actual plan.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
  /// <summary>
  /// Use for the plan.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
public class ConditionDefinition : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ConditionDefinition";
  /// <summary>
  /// Only used if not implicit in code found in ConditionDefinition.code. If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [bodySite](extension-bodysite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// Identification of the condition, problem or diagnosis.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the condition definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Formal definitions of the condition. These may be references to ontologies, published clinical protocols or research papers.
  /// </summary>
  [JsonPropertyName("definition")]
  public string?[] Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element[] _Definition { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the condition definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the condition definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the condition definition is presumed to be the predominant language in the place the condition definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of condition definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Whether bodySite is appropriate to collect for this condition.
  /// </summary>
  [JsonPropertyName("hasBodySite")]
  public bool? HasBodySite { get; set; }
  [JsonPropertyName("_hasBodySite")]
  public Element _HasBodySite { get; set; }
  /// <summary>
  /// Whether Severity is appropriate to collect for this condition.
  /// </summary>
  [JsonPropertyName("hasSeverity")]
  public bool? HasSeverity { get; set; }
  [JsonPropertyName("_hasSeverity")]
  public Element _HasSeverity { get; set; }
  /// <summary>
  /// Whether stage is appropriate to collect for this condition.
  /// </summary>
  [JsonPropertyName("hasStage")]
  public bool? HasStage { get; set; }
  [JsonPropertyName("_hasStage")]
  public Element _HasStage { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this condition definition outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the condition definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// Medications particularly relevant for this condition.
  /// </summary>
  [JsonPropertyName("medication")]
  public ConditionDefinitionMedication?[] Medication { get; set; }
  [JsonPropertyName("_medication")]
  public Element[] _Medication { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Observations particularly relevant to this condition.
  /// </summary>
  [JsonPropertyName("observation")]
  public ConditionDefinitionObservation?[] Observation { get; set; }
  [JsonPropertyName("_observation")]
  public Element[] _Observation { get; set; }
  /// <summary>
  /// Plan that is appropriate.
  /// </summary>
  [JsonPropertyName("plan")]
  public ConditionDefinitionPlan?[] Plan { get; set; }
  [JsonPropertyName("_plan")]
  public Element[] _Plan { get; set; }
  /// <summary>
  /// An observation that suggests that this condition applies.
  /// </summary>
  [JsonPropertyName("precondition")]
  public ConditionDefinitionPrecondition?[] Precondition { get; set; }
  [JsonPropertyName("_precondition")]
  public Element[] _Precondition { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the condition definition is the organization or individual primarily responsible for the maintenance and upkeep of the condition definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the condition definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// Questionnaire for this condition.
  /// </summary>
  [JsonPropertyName("questionnaire")]
  public ConditionDefinitionQuestionnaire?[] Questionnaire { get; set; }
  [JsonPropertyName("_questionnaire")]
  public Element[] _Questionnaire { get; set; }
  /// <summary>
  /// Coding of the severity with a terminology is preferred, where possible.
  /// </summary>
  [JsonPropertyName("severity")]
  public CodeableConcept? Severity { get; set; }
  [JsonPropertyName("_severity")]
  public Element _Severity { get; set; }
  /// <summary>
  /// Clinical stage or grade of a condition. May include formal severity assessments.
  /// </summary>
  [JsonPropertyName("stage")]
  public CodeableConcept? Stage { get; set; }
  [JsonPropertyName("_stage")]
  public Element _Stage { get; set; }
  /// <summary>
  /// Allows filtering of condition definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// An explanatory or alternate title for the event definition giving additional information about its content.
  /// </summary>
  [JsonPropertyName("subtitle")]
  public string? Subtitle { get; set; }
  [JsonPropertyName("_subtitle")]
  public Element _Subtitle { get; set; }
  /// <summary>
  /// Appropriate team for this condition.
  /// </summary>
  [JsonPropertyName("team")]
  public Reference?[] Team { get; set; }
  [JsonPropertyName("_team")]
  public Element[] _Team { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different condition definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the condition definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the ConditionDefinition.status field
/// </summary>
public sealed class ConditionDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// if policy and policyRule are not present, the resource must include the policy being agreed to, or complied with, and that policy and/or policyRule SHOULD be populated as soon as is practical to support workflows that require computability. In addition, the policy could be indicated via the sourceReference or sourceAttachment content.
/// 
/// Alternately, creating an invariant for individual scopes that forces one or more of the elements to be populated as part of a profile or Implementation Guide may be advisable.
/// </summary>
public class ConsentPolicy : BackboneElement {
  /// <summary>
  /// Entity or Organization having regulatory jurisdiction or accountability for  enforcing policies pertaining to Consent Directives.
  /// </summary>
  [JsonPropertyName("authority")]
  public string? Authority { get; set; }
  [JsonPropertyName("_authority")]
  public Element _Authority { get; set; }
  /// <summary>
  /// This element is for discoverability / documentation and does not modify or qualify the policy rules.
  /// </summary>
  [JsonPropertyName("uri")]
  public string? Uri { get; set; }
  [JsonPropertyName("_uri")]
  public Element _Uri { get; set; }
}
/// <summary>
/// Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
/// </summary>
public class ConsentVerification : BackboneElement {
  /// <summary>
  /// Allows for history of verification/validation.
  /// </summary>
  [JsonPropertyName("verificationDate")]
  public string?[] VerificationDate { get; set; }
  [JsonPropertyName("_verificationDate")]
  public Element[] _VerificationDate { get; set; }
  /// <summary>
  /// This allows the verification element to hold multiple use cases including RelatedPerson verification of the Grantee decision and periodic re-validation of the consent.
  /// </summary>
  [JsonPropertyName("verificationType")]
  public CodeableConcept? VerificationType { get; set; }
  [JsonPropertyName("_verificationType")]
  public Element _VerificationType { get; set; }
  /// <summary>
  /// Has the instruction been verified.
  /// </summary>
  [JsonPropertyName("verified")]
  public bool Verified { get; set; }
  [JsonPropertyName("_verified")]
  public Element _Verified { get; set; }
  /// <summary>
  /// The person who conducted the verification/validation of the Grantee decision.
  /// </summary>
  [JsonPropertyName("verifiedBy")]
  public Reference? VerifiedBy { get; set; }
  [JsonPropertyName("_verifiedBy")]
  public Element _VerifiedBy { get; set; }
  /// <summary>
  /// Who verified the instruction (Patient, Relative or other Authorized Person).
  /// </summary>
  [JsonPropertyName("verifiedWith")]
  public Reference? VerifiedWith { get; set; }
  [JsonPropertyName("_verifiedWith")]
  public Element _VerifiedWith { get; set; }
}
/// <summary>
/// Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
/// </summary>
public class ConsentProvisionActor : BackboneElement {
  /// <summary>
  /// The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
  /// <summary>
  /// How the individual is involved in the resources content that is described in the exception.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
/// <summary>
/// The resources controlled by this rule if specific resources are referenced.
/// </summary>
public class ConsentProvisionData : BackboneElement {
  /// <summary>
  /// How the resource reference is interpreted when testing consent restrictions.
  /// </summary>
  [JsonPropertyName("meaning")]
  public string Meaning { get; set; }
  [JsonPropertyName("_meaning")]
  public Element _Meaning { get; set; }
  /// <summary>
  /// A reference to a specific resource that defines which resources are covered by this consent.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
}
/// <summary>
/// Code Values for the Consent.provision.data.meaning field
/// </summary>
public sealed class ConsentProvisionDataMeaningCodes {
  public const string INSTANCE = "instance";
  public const string RELATED = "related";
  public const string DEPENDENTS = "dependents";
  public const string AUTHOREDBY = "authoredby";
}
/// <summary>
/// An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
/// </summary>
public class ConsentProvision : BackboneElement {
  /// <summary>
  /// Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
  /// </summary>
  [JsonPropertyName("action")]
  public CodeableConcept?[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
  /// <summary>
  /// Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
  /// </summary>
  [JsonPropertyName("actor")]
  public ConsentProvisionActor?[] Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element[] _Actor { get; set; }
  /// <summary>
  /// Multiple types are or'ed together. The intention of the contentType element is that the codes refer to profiles or document types defined in a standard or an implementation guide somewhere.
  /// </summary>
  [JsonPropertyName("class")]
  public Coding?[] Class { get; set; }
  [JsonPropertyName("_class")]
  public Element[] _Class { get; set; }
  /// <summary>
  /// Typical use of this is a Document code with class = CDA.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// The resources controlled by this rule if specific resources are referenced.
  /// </summary>
  [JsonPropertyName("data")]
  public ConsentProvisionData?[] Data { get; set; }
  [JsonPropertyName("_data")]
  public Element[] _Data { get; set; }
  /// <summary>
  /// This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
  /// </summary>
  [JsonPropertyName("dataPeriod")]
  public Period? DataPeriod { get; set; }
  [JsonPropertyName("_dataPeriod")]
  public Element _DataPeriod { get; set; }
  /// <summary>
  /// This is the bound effective time of the consent and should be in the base provision in the Consent resource.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Rules which provide exceptions to the base rule or subrules.
  /// </summary>
  [JsonPropertyName("provision")]
  public ConsentProvision?[] Provision { get; set; }
  [JsonPropertyName("_provision")]
  public Element[] _Provision { get; set; }
  /// <summary>
  /// When the purpose of use tag is on the data, access request purpose of use shall not conflict.
  /// </summary>
  [JsonPropertyName("purpose")]
  public Coding?[] Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element[] _Purpose { get; set; }
  /// <summary>
  /// If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. When the purpose of use tag is on the data, access request purpose of use shall not conflict.
  /// </summary>
  [JsonPropertyName("securityLabel")]
  public Coding?[] SecurityLabel { get; set; }
  [JsonPropertyName("_securityLabel")]
  public Element[] _SecurityLabel { get; set; }
  /// <summary>
  /// Action  to take - permit or deny - when the rule conditions are met.  Not permitted in root rule, required in all nested rules.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Consent.provision.type field
/// </summary>
public sealed class ConsentProvisionTypeCodes {
  public const string DENY = "deny";
  public const string PERMIT = "permit";
}
public class Consent : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Consent";
  /// <summary>
  /// A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// Date and time the consent instance was agreed to.
  /// </summary>
  [JsonPropertyName("dateTime")]
  public string? DateTime { get; set; }
  [JsonPropertyName("_dateTime")]
  public Element _DateTime { get; set; }
  /// <summary>
  /// This identifier identifies this copy of the consent. Where this identifier is also used elsewhere as the identifier for a consent record (e.g. a CDA consent document) then the consent details are expected to be the same.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The organization that manages the consent, and the framework within which it is executed.
  /// </summary>
  [JsonPropertyName("organization")]
  public Reference?[] Organization { get; set; }
  [JsonPropertyName("_organization")]
  public Element[] _Organization { get; set; }
  /// <summary>
  /// Commonly, the patient the consent pertains to is the consentor, but particularly for young and old people, it may be some other person - e.g. a legal guardian.  Where HealthCareService is listed, some services might not be appropriate based on the type of service and if they can be segmented as an independent or dependent individual entity that might not be eligible to be a grantee.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// if policy and policyRule are not present, the resource must include the policy being agreed to, or complied with, and that policy and/or policyRule SHOULD be populated as soon as is practical to support workflows that require computability. In addition, the policy could be indicated via the sourceReference or sourceAttachment content.
  /// 
  /// Alternately, creating an invariant for individual scopes that forces one or more of the elements to be populated as part of a profile or Implementation Guide may be advisable.
  /// </summary>
  [JsonPropertyName("policy")]
  public ConsentPolicy?[] Policy { get; set; }
  [JsonPropertyName("_policy")]
  public Element[] _Policy { get; set; }
  /// <summary>
  /// If the policyRule is absent, computable consent would need to be constructed from the elements of the Consent resource.
  /// </summary>
  [JsonPropertyName("policyRule")]
  public CodeableConcept? PolicyRule { get; set; }
  [JsonPropertyName("_policyRule")]
  public Element _PolicyRule { get; set; }
  /// <summary>
  /// An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
  /// </summary>
  [JsonPropertyName("provision")]
  public ConsentProvision? Provision { get; set; }
  [JsonPropertyName("_provision")]
  public Element _Provision { get; set; }
  /// <summary>
  /// A selector of the type of consent being presented: Privacy, Treatment,  or Research.  This list is now extensible.
  /// </summary>
  [JsonPropertyName("scope")]
  public CodeableConcept Scope { get; set; }
  [JsonPropertyName("_scope")]
  public Element _Scope { get; set; }
  /// <summary>
  /// The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
  /// </summary>
  [JsonPropertyName("sourceAttachment")]
  public Attachment?[] SourceAttachment { get; set; }
  [JsonPropertyName("_sourceAttachment")]
  public Element[] _SourceAttachment { get; set; }
  /// <summary>
  /// The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
  /// </summary>
  [JsonPropertyName("sourceReference")]
  public Reference?[] SourceReference { get; set; }
  [JsonPropertyName("_sourceReference")]
  public Element[] _SourceReference { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Commonly, the subject the consent pertains to is the author, but for young and old people, it may be some other person.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
  /// </summary>
  [JsonPropertyName("verification")]
  public ConsentVerification?[] Verification { get; set; }
  [JsonPropertyName("_verification")]
  public Element[] _Verification { get; set; }
}
/// <summary>
/// Code Values for the Consent.status field
/// </summary>
public sealed class ConsentStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
/// </summary>
public class ContractContentDefinition : BackboneElement {
  /// <summary>
  /// A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// The date (and optionally time) when the contract was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
  /// </summary>
  [JsonPropertyName("publicationDate")]
  public string? PublicationDate { get; set; }
  [JsonPropertyName("_publicationDate")]
  public Element _PublicationDate { get; set; }
  /// <summary>
  /// amended | appended | cancelled | disputed | entered-in-error | executable +.
  /// </summary>
  [JsonPropertyName("publicationStatus")]
  public string PublicationStatus { get; set; }
  [JsonPropertyName("_publicationStatus")]
  public Element _PublicationStatus { get; set; }
  /// <summary>
  /// The  individual or organization that published the Contract precursor content.
  /// </summary>
  [JsonPropertyName("publisher")]
  public Reference? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// Detailed Precusory content type.
  /// </summary>
  [JsonPropertyName("subType")]
  public CodeableConcept? SubType { get; set; }
  [JsonPropertyName("_subType")]
  public Element _SubType { get; set; }
  /// <summary>
  /// Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Contract.contentDefinition.publicationStatus field
/// </summary>
public sealed class ContractContentDefinitionPublicationStatusCodes {
  public const string AMENDED = "amended";
  public const string APPENDED = "appended";
  public const string CANCELLED = "cancelled";
  public const string DISPUTED = "disputed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string EXECUTABLE = "executable";
}
/// <summary>
/// Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
/// </summary>
public class ContractTermSecurityLabel : BackboneElement {
  /// <summary>
  /// Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.
  /// </summary>
  [JsonPropertyName("category")]
  public Coding?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// Security label privacy tag that species the level of confidentiality protection required for this term and/or term elements.
  /// </summary>
  [JsonPropertyName("classification")]
  public Coding Classification { get; set; }
  [JsonPropertyName("_classification")]
  public Element _Classification { get; set; }
  /// <summary>
  /// Security label privacy tag that species the manner in which term and/or term elements are to be protected.
  /// </summary>
  [JsonPropertyName("control")]
  public Coding?[] Control { get; set; }
  [JsonPropertyName("_control")]
  public Element[] _Control { get; set; }
  /// <summary>
  /// Number used to link this term or term element to the applicable Security Label.
  /// </summary>
  [JsonPropertyName("number")]
  public uint?[] Number { get; set; }
  [JsonPropertyName("_number")]
  public Element[] _Number { get; set; }
}
/// <summary>
/// Offer Recipient.
/// </summary>
public class ContractTermOfferParty : BackboneElement {
  /// <summary>
  /// Participant in the offer.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference[] Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element[] _Reference { get; set; }
  /// <summary>
  /// How the party participates in the offer.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
/// <summary>
/// Response to offer text.
/// </summary>
public class ContractTermOfferAnswer : BackboneElement {
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
}
/// <summary>
/// The matter of concern in the context of this provision of the agrement.
/// </summary>
public class ContractTermOffer : BackboneElement {
  /// <summary>
  /// Response to offer text.
  /// </summary>
  [JsonPropertyName("answer")]
  public ContractTermOfferAnswer?[] Answer { get; set; }
  [JsonPropertyName("_answer")]
  public Element[] _Answer { get; set; }
  /// <summary>
  /// Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
  /// </summary>
  [JsonPropertyName("decision")]
  public CodeableConcept? Decision { get; set; }
  [JsonPropertyName("_decision")]
  public Element _Decision { get; set; }
  /// <summary>
  /// How the decision about a Contract was conveyed.
  /// </summary>
  [JsonPropertyName("decisionMode")]
  public CodeableConcept?[] DecisionMode { get; set; }
  [JsonPropertyName("_decisionMode")]
  public Element[] _DecisionMode { get; set; }
  /// <summary>
  /// Unique identifier for this particular Contract Provision.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The id of the clause or question text of the offer in the referenced questionnaire/response.
  /// </summary>
  [JsonPropertyName("linkId")]
  public string?[] LinkId { get; set; }
  [JsonPropertyName("_linkId")]
  public Element[] _LinkId { get; set; }
  /// <summary>
  /// Offer Recipient.
  /// </summary>
  [JsonPropertyName("party")]
  public ContractTermOfferParty?[] Party { get; set; }
  [JsonPropertyName("_party")]
  public Element[] _Party { get; set; }
  /// <summary>
  /// Security labels that protects the offer.
  /// </summary>
  [JsonPropertyName("securityLabelNumber")]
  public uint?[] SecurityLabelNumber { get; set; }
  [JsonPropertyName("_securityLabelNumber")]
  public Element[] _SecurityLabelNumber { get; set; }
  /// <summary>
  /// Human readable form of this Contract Offer.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// The Contract.topic may be an application for or offer of a policy or service (e.g., uri to a consent directive form or a health insurance policy), which becomes the Contract once accepted by both the grantor and grantee. The Contract Resource may function simply as the computable representation of the executed contract, which may be the attached to the Contract Resource as the “binding” or as the “friendly” electronic form.  For example, a Contract Resource may be automatically populated with the values expressed in a related QuestionnaireResponse. However, the Contract Resource may be considered the legally binding contract if it is the only “executed” form of this contract, and includes the signatures as *The Contract Resource may function as the computable representation of an application or offer in a pre-executed Contract if the grantor has not entered any values.  In this case, it is populated with values in a “legal” form of the application or offer or by the values in an associated Questionnaire.  If the grantor has filled in the legal form or the associated Questionnaire Response, then these values are used to populate a pre-executed Contract Resource.If the Contract.topic is considered an application or offer, then the policy is often required to be attached as the “legal” basis for the application to ensure “informed consent” to the contract, and that any discrepancy between the application and the policy are interpreted against the policy.  Implementers should check organizational and jurisdictional policies to determine the relationship among multiple representations of a contract pre- and post-execution.
  /// </summary>
  [JsonPropertyName("topic")]
  public Reference? Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element _Topic { get; set; }
  /// <summary>
  /// Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Circumstance of the asset.
/// </summary>
public class ContractTermAssetContext : BackboneElement {
  /// <summary>
  /// Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
  /// <summary>
  /// Context description.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
}
/// <summary>
/// Contract Valued Item List.
/// </summary>
public class ContractTermAssetValuedItem : BackboneElement {
  /// <summary>
  /// Indicates the time during which this Contract ValuedItem information is effective.
  /// </summary>
  [JsonPropertyName("effectiveTime")]
  public string? EffectiveTime { get; set; }
  [JsonPropertyName("_effectiveTime")]
  public Element _EffectiveTime { get; set; }
  /// <summary>
  /// Specific type of Contract Valued Item that may be priced.
  /// </summary>
  [JsonPropertyName("entityCodeableConcept")]
  public CodeableConcept? EntityCodeableConcept { get; set; }
  [JsonPropertyName("_entityCodeableConcept")]
  public Element _EntityCodeableConcept { get; set; }
  /// <summary>
  /// Specific type of Contract Valued Item that may be priced.
  /// </summary>
  [JsonPropertyName("entityReference")]
  public Reference? EntityReference { get; set; }
  [JsonPropertyName("_entityReference")]
  public Element _EntityReference { get; set; }
  /// <summary>
  /// A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// Identifies a Contract Valued Item instance.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("linkId")]
  public string?[] LinkId { get; set; }
  [JsonPropertyName("_linkId")]
  public Element[] _LinkId { get; set; }
  /// <summary>
  /// Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// Terms of valuation.
  /// </summary>
  [JsonPropertyName("payment")]
  public string? Payment { get; set; }
  [JsonPropertyName("_payment")]
  public Element _Payment { get; set; }
  /// <summary>
  /// When payment is due.
  /// </summary>
  [JsonPropertyName("paymentDate")]
  public string? PaymentDate { get; set; }
  [JsonPropertyName("_paymentDate")]
  public Element _PaymentDate { get; set; }
  /// <summary>
  /// An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
  /// </summary>
  [JsonPropertyName("points")]
  public decimal? Points { get; set; }
  [JsonPropertyName("_points")]
  public Element _Points { get; set; }
  /// <summary>
  /// Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Who will receive payment.
  /// </summary>
  [JsonPropertyName("recipient")]
  public Reference? Recipient { get; set; }
  [JsonPropertyName("_recipient")]
  public Element _Recipient { get; set; }
  /// <summary>
  /// Who will make payment.
  /// </summary>
  [JsonPropertyName("responsible")]
  public Reference? Responsible { get; set; }
  [JsonPropertyName("_responsible")]
  public Element _Responsible { get; set; }
  /// <summary>
  /// A set of security labels that define which terms are controlled by this condition.
  /// </summary>
  [JsonPropertyName("securityLabelNumber")]
  public uint?[] SecurityLabelNumber { get; set; }
  [JsonPropertyName("_securityLabelNumber")]
  public Element[] _SecurityLabelNumber { get; set; }
  /// <summary>
  /// A Contract Valued Item unit valuation measure.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// Contract Term Asset List.
/// </summary>
public class ContractTermAsset : BackboneElement {
  /// <summary>
  /// Response to assets.
  /// </summary>
  [JsonPropertyName("answer")]
  public ContractTermOfferAnswer?[] Answer { get; set; }
  [JsonPropertyName("_answer")]
  public Element[] _Answer { get; set; }
  /// <summary>
  /// Description of the quality and completeness of the asset that imay be a factor in its valuation.
  /// </summary>
  [JsonPropertyName("condition")]
  public string? Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element _Condition { get; set; }
  /// <summary>
  /// Circumstance of the asset.
  /// </summary>
  [JsonPropertyName("context")]
  public ContractTermAssetContext?[] Context { get; set; }
  [JsonPropertyName("_context")]
  public Element[] _Context { get; set; }
  /// <summary>
  /// Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("linkId")]
  public string?[] LinkId { get; set; }
  [JsonPropertyName("_linkId")]
  public Element[] _LinkId { get; set; }
  /// <summary>
  /// Asset relevant contractual time period.
  /// </summary>
  [JsonPropertyName("period")]
  public Period?[] Period { get; set; }
  [JsonPropertyName("_period")]
  public Element[] _Period { get; set; }
  /// <summary>
  /// Type of Asset availability for use or ownership.
  /// </summary>
  [JsonPropertyName("periodType")]
  public CodeableConcept?[] PeriodType { get; set; }
  [JsonPropertyName("_periodType")]
  public Element[] _PeriodType { get; set; }
  /// <summary>
  /// Specifies the applicability of the term to an asset resource instance, and instances it refers to orinstances that refer to it, and/or are owned by the offeree.
  /// </summary>
  [JsonPropertyName("relationship")]
  public Coding? Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
  /// <summary>
  /// Differentiates the kind of the asset .
  /// </summary>
  [JsonPropertyName("scope")]
  public CodeableConcept? Scope { get; set; }
  [JsonPropertyName("_scope")]
  public Element _Scope { get; set; }
  /// <summary>
  /// Security labels that protects the asset.
  /// </summary>
  [JsonPropertyName("securityLabelNumber")]
  public uint?[] SecurityLabelNumber { get; set; }
  [JsonPropertyName("_securityLabelNumber")]
  public Element[] _SecurityLabelNumber { get; set; }
  /// <summary>
  /// May be a subtype or part of an offered asset.
  /// </summary>
  [JsonPropertyName("subtype")]
  public CodeableConcept?[] Subtype { get; set; }
  [JsonPropertyName("_subtype")]
  public Element[] _Subtype { get; set; }
  /// <summary>
  /// Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// Target entity type about which the term may be concerned.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
  /// <summary>
  /// Associated entities.
  /// </summary>
  [JsonPropertyName("typeReference")]
  public Reference?[] TypeReference { get; set; }
  [JsonPropertyName("_typeReference")]
  public Element[] _TypeReference { get; set; }
  /// <summary>
  /// Time period of asset use.
  /// </summary>
  [JsonPropertyName("usePeriod")]
  public Period?[] UsePeriod { get; set; }
  [JsonPropertyName("_usePeriod")]
  public Element[] _UsePeriod { get; set; }
  /// <summary>
  /// Contract Valued Item List.
  /// </summary>
  [JsonPropertyName("valuedItem")]
  public ContractTermAssetValuedItem?[] ValuedItem { get; set; }
  [JsonPropertyName("_valuedItem")]
  public Element[] _ValuedItem { get; set; }
}
/// <summary>
/// Entity of the action.
/// </summary>
public class ContractTermActionSubject : BackboneElement {
  /// <summary>
  /// The entity the action is performed or not performed on or for.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference[] Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element[] _Reference { get; set; }
  /// <summary>
  /// Role type of agent assigned roles in this Contract.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
/// <summary>
/// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
/// </summary>
public class ContractTermAction : BackboneElement {
  /// <summary>
  /// Encounter or Episode with primary association to specified term activity.
  /// </summary>
  [JsonPropertyName("context")]
  public Reference? Context { get; set; }
  [JsonPropertyName("_context")]
  public Element _Context { get; set; }
  /// <summary>
  /// Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("contextLinkId")]
  public string?[] ContextLinkId { get; set; }
  [JsonPropertyName("_contextLinkId")]
  public Element[] _ContextLinkId { get; set; }
  /// <summary>
  /// True if the term prohibits the  action.
  /// </summary>
  [JsonPropertyName("doNotPerform")]
  public bool? DoNotPerform { get; set; }
  [JsonPropertyName("_doNotPerform")]
  public Element _DoNotPerform { get; set; }
  /// <summary>
  /// Reason or purpose for the action stipulated by this Contract Provision.
  /// </summary>
  [JsonPropertyName("intent")]
  public CodeableConcept Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("linkId")]
  public string?[] LinkId { get; set; }
  [JsonPropertyName("_linkId")]
  public Element[] _LinkId { get; set; }
  /// <summary>
  /// Comments made about the term action made by the requester, performer, subject or other participants.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// When action happens.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// When action happens.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// When action happens.
  /// </summary>
  [JsonPropertyName("occurrenceTiming")]
  public Timing? OccurrenceTiming { get; set; }
  [JsonPropertyName("_occurrenceTiming")]
  public Element _OccurrenceTiming { get; set; }
  /// <summary>
  /// Indicates who or what is being asked to perform (or not perform) the ction.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference? Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element _Performer { get; set; }
  /// <summary>
  /// Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("performerLinkId")]
  public string?[] PerformerLinkId { get; set; }
  [JsonPropertyName("_performerLinkId")]
  public Element[] _PerformerLinkId { get; set; }
  /// <summary>
  /// The type of role or competency of an individual desired or required to perform or not perform the action.
  /// </summary>
  [JsonPropertyName("performerRole")]
  public CodeableConcept? PerformerRole { get; set; }
  [JsonPropertyName("_performerRole")]
  public Element _PerformerRole { get; set; }
  /// <summary>
  /// The type of individual that is desired or required to perform or not perform the action.
  /// </summary>
  [JsonPropertyName("performerType")]
  public CodeableConcept?[] PerformerType { get; set; }
  [JsonPropertyName("_performerType")]
  public Element[] _PerformerType { get; set; }
  /// <summary>
  /// Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited. Either a coded concept, or another resource whose existence justifies permitting or not permitting this action.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("reasonLinkId")]
  public string?[] ReasonLinkId { get; set; }
  [JsonPropertyName("_reasonLinkId")]
  public Element[] _ReasonLinkId { get; set; }
  /// <summary>
  /// Who or what initiated the action and has responsibility for its activation.
  /// </summary>
  [JsonPropertyName("requester")]
  public Reference?[] Requester { get; set; }
  [JsonPropertyName("_requester")]
  public Element[] _Requester { get; set; }
  /// <summary>
  /// Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("requesterLinkId")]
  public string?[] RequesterLinkId { get; set; }
  [JsonPropertyName("_requesterLinkId")]
  public Element[] _RequesterLinkId { get; set; }
  /// <summary>
  /// Security labels that protects the action.
  /// </summary>
  [JsonPropertyName("securityLabelNumber")]
  public uint?[] SecurityLabelNumber { get; set; }
  [JsonPropertyName("_securityLabelNumber")]
  public Element[] _SecurityLabelNumber { get; set; }
  /// <summary>
  /// Current state of the term action.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Entity of the action.
  /// </summary>
  [JsonPropertyName("subject")]
  public ContractTermActionSubject?[] Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element[] _Subject { get; set; }
  /// <summary>
  /// Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
/// </summary>
public class ContractTerm : BackboneElement {
  /// <summary>
  /// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
  /// </summary>
  [JsonPropertyName("action")]
  public ContractTermAction?[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
  /// <summary>
  /// Relevant time or time-period when this Contract Provision is applicable.
  /// </summary>
  [JsonPropertyName("applies")]
  public Period? Applies { get; set; }
  [JsonPropertyName("_applies")]
  public Element _Applies { get; set; }
  /// <summary>
  /// Contract Term Asset List.
  /// </summary>
  [JsonPropertyName("asset")]
  public ContractTermAsset?[] Asset { get; set; }
  [JsonPropertyName("_asset")]
  public Element[] _Asset { get; set; }
  /// <summary>
  /// Nested group of Contract Provisions.
  /// </summary>
  [JsonPropertyName("group")]
  public ContractTerm?[] Group { get; set; }
  [JsonPropertyName("_group")]
  public Element[] _Group { get; set; }
  /// <summary>
  /// Unique identifier for this particular Contract Provision.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// When this Contract Provision was issued.
  /// </summary>
  [JsonPropertyName("issued")]
  public string? Issued { get; set; }
  [JsonPropertyName("_issued")]
  public Element _Issued { get; set; }
  /// <summary>
  /// The matter of concern in the context of this provision of the agrement.
  /// </summary>
  [JsonPropertyName("offer")]
  public ContractTermOffer Offer { get; set; }
  [JsonPropertyName("_offer")]
  public Element _Offer { get; set; }
  /// <summary>
  /// Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
  /// </summary>
  [JsonPropertyName("securityLabel")]
  public ContractTermSecurityLabel?[] SecurityLabel { get; set; }
  [JsonPropertyName("_securityLabel")]
  public Element[] _SecurityLabel { get; set; }
  /// <summary>
  /// A specialized legal clause or condition based on overarching contract type.
  /// </summary>
  [JsonPropertyName("subType")]
  public CodeableConcept? SubType { get; set; }
  [JsonPropertyName("_subType")]
  public Element _SubType { get; set; }
  /// <summary>
  /// Statement of a provision in a policy or a contract.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// The entity that the term applies to.
  /// </summary>
  [JsonPropertyName("topicCodeableConcept")]
  public CodeableConcept? TopicCodeableConcept { get; set; }
  [JsonPropertyName("_topicCodeableConcept")]
  public Element _TopicCodeableConcept { get; set; }
  /// <summary>
  /// The entity that the term applies to.
  /// </summary>
  [JsonPropertyName("topicReference")]
  public Reference? TopicReference { get; set; }
  [JsonPropertyName("_topicReference")]
  public Element _TopicReference { get; set; }
  /// <summary>
  /// A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
/// </summary>
public class ContractSigner : BackboneElement {
  /// <summary>
  /// Party which is a signator to this Contract.
  /// </summary>
  [JsonPropertyName("party")]
  public Reference Party { get; set; }
  [JsonPropertyName("_party")]
  public Element _Party { get; set; }
  /// <summary>
  /// Legally binding Contract DSIG signature contents in Base64.
  /// </summary>
  [JsonPropertyName("signature")]
  public Signature[] Signature { get; set; }
  [JsonPropertyName("_signature")]
  public Element[] _Signature { get; set; }
  /// <summary>
  /// Role of this Contract signer, e.g. notary, grantee.
  /// </summary>
  [JsonPropertyName("type")]
  public Coding Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
/// </summary>
public class ContractFriendly : BackboneElement {
  /// <summary>
  /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
  /// </summary>
  [JsonPropertyName("contentAttachment")]
  public Attachment ContentAttachment { get; set; }
  [JsonPropertyName("_contentAttachment")]
  public Element _ContentAttachment { get; set; }
  /// <summary>
  /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
  /// </summary>
  [JsonPropertyName("contentReference")]
  public Reference ContentReference { get; set; }
  [JsonPropertyName("_contentReference")]
  public Element _ContentReference { get; set; }
}
/// <summary>
/// List of Legal expressions or representations of this Contract.
/// </summary>
public class ContractLegal : BackboneElement {
  /// <summary>
  /// Contract legal text in human renderable form.
  /// </summary>
  [JsonPropertyName("contentAttachment")]
  public Attachment ContentAttachment { get; set; }
  [JsonPropertyName("_contentAttachment")]
  public Element _ContentAttachment { get; set; }
  /// <summary>
  /// Contract legal text in human renderable form.
  /// </summary>
  [JsonPropertyName("contentReference")]
  public Reference ContentReference { get; set; }
  [JsonPropertyName("_contentReference")]
  public Element _ContentReference { get; set; }
}
/// <summary>
/// List of Computable Policy Rule Language Representations of this Contract.
/// </summary>
public class ContractRule : BackboneElement {
  /// <summary>
  /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
  /// </summary>
  [JsonPropertyName("contentAttachment")]
  public Attachment ContentAttachment { get; set; }
  [JsonPropertyName("_contentAttachment")]
  public Element _ContentAttachment { get; set; }
  /// <summary>
  /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
  /// </summary>
  [JsonPropertyName("contentReference")]
  public Reference ContentReference { get; set; }
  [JsonPropertyName("_contentReference")]
  public Element _ContentReference { get; set; }
}
public class Contract : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Contract";
  /// <summary>
  /// Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
  /// </summary>
  [JsonPropertyName("alias")]
  public string?[] Alias { get; set; }
  [JsonPropertyName("_alias")]
  public Element[] _Alias { get; set; }
  /// <summary>
  /// Relevant time or time-period when this Contract is applicable.
  /// </summary>
  [JsonPropertyName("applies")]
  public Period? Applies { get; set; }
  [JsonPropertyName("_applies")]
  public Element _Applies { get; set; }
  /// <summary>
  /// The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
  /// </summary>
  [JsonPropertyName("authority")]
  public Reference?[] Authority { get; set; }
  [JsonPropertyName("_authority")]
  public Element[] _Authority { get; set; }
  /// <summary>
  /// Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
  /// </summary>
  [JsonPropertyName("contentDefinition")]
  public ContractContentDefinition? ContentDefinition { get; set; }
  [JsonPropertyName("_contentDefinition")]
  public Element _ContentDefinition { get; set; }
  /// <summary>
  /// The minimal content derived from the basal information source at a specific stage in its lifecycle.
  /// </summary>
  [JsonPropertyName("contentDerivative")]
  public CodeableConcept? ContentDerivative { get; set; }
  [JsonPropertyName("_contentDerivative")]
  public Element _ContentDerivative { get; set; }
  /// <summary>
  /// Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
  /// </summary>
  [JsonPropertyName("domain")]
  public Reference?[] Domain { get; set; }
  [JsonPropertyName("_domain")]
  public Element[] _Domain { get; set; }
  /// <summary>
  /// Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
  /// </summary>
  [JsonPropertyName("expirationType")]
  public CodeableConcept? ExpirationType { get; set; }
  [JsonPropertyName("_expirationType")]
  public Element _ExpirationType { get; set; }
  /// <summary>
  /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
  /// </summary>
  [JsonPropertyName("friendly")]
  public ContractFriendly?[] Friendly { get; set; }
  [JsonPropertyName("_friendly")]
  public Element[] _Friendly { get; set; }
  /// <summary>
  /// Unique identifier for this Contract or a derivative that references a Source Contract.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public Reference? InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element _InstantiatesCanonical { get; set; }
  /// <summary>
  /// The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string? InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element _InstantiatesUri { get; set; }
  /// <summary>
  /// When this  Contract was issued.
  /// </summary>
  [JsonPropertyName("issued")]
  public string? Issued { get; set; }
  [JsonPropertyName("_issued")]
  public Element _Issued { get; set; }
  /// <summary>
  /// List of Legal expressions or representations of this Contract.
  /// </summary>
  [JsonPropertyName("legal")]
  public ContractLegal?[] Legal { get; set; }
  [JsonPropertyName("_legal")]
  public Element[] _Legal { get; set; }
  /// <summary>
  /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
  /// </summary>
  [JsonPropertyName("legallyBindingAttachment")]
  public Attachment? LegallyBindingAttachment { get; set; }
  [JsonPropertyName("_legallyBindingAttachment")]
  public Element _LegallyBindingAttachment { get; set; }
  /// <summary>
  /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
  /// </summary>
  [JsonPropertyName("legallyBindingReference")]
  public Reference? LegallyBindingReference { get; set; }
  [JsonPropertyName("_legallyBindingReference")]
  public Element _LegallyBindingReference { get; set; }
  /// <summary>
  /// Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
  /// </summary>
  [JsonPropertyName("legalState")]
  public CodeableConcept? LegalState { get; set; }
  [JsonPropertyName("_legalState")]
  public Element _LegalState { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provence.entity indicates the target that was changed in the update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
  /// </summary>
  [JsonPropertyName("relevantHistory")]
  public Reference?[] RelevantHistory { get; set; }
  [JsonPropertyName("_relevantHistory")]
  public Element[] _RelevantHistory { get; set; }
  /// <summary>
  /// List of Computable Policy Rule Language Representations of this Contract.
  /// </summary>
  [JsonPropertyName("rule")]
  public ContractRule?[] Rule { get; set; }
  [JsonPropertyName("_rule")]
  public Element[] _Rule { get; set; }
  /// <summary>
  /// A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
  /// </summary>
  [JsonPropertyName("scope")]
  public CodeableConcept? Scope { get; set; }
  [JsonPropertyName("_scope")]
  public Element _Scope { get; set; }
  /// <summary>
  /// Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
  /// </summary>
  [JsonPropertyName("signer")]
  public ContractSigner?[] Signer { get; set; }
  [JsonPropertyName("_signer")]
  public Element[] _Signer { get; set; }
  /// <summary>
  /// Sites in which the contract is complied with,  exercised, or in force.
  /// </summary>
  [JsonPropertyName("site")]
  public Reference?[] Site { get; set; }
  [JsonPropertyName("_site")]
  public Element[] _Site { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The Contract.subject is an entity that has some role with respect to the Contract.topic and Contract.topic.term, which is of focal interest to the parties to the contract and likely impacted in a significant way by the Contract.action/Contract.action.reason and the Contract.term.action/Contract.action.reason. In many cases, the Contract.subject is a Contract.signer if the subject is an adult; has a legal interest in the contract; and incompetent to participate in the contract agreement.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference?[] Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element[] _Subject { get; set; }
  /// <summary>
  /// An explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
  /// </summary>
  [JsonPropertyName("subtitle")]
  public string? Subtitle { get; set; }
  [JsonPropertyName("_subtitle")]
  public Element _Subtitle { get; set; }
  /// <summary>
  /// Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
  /// </summary>
  [JsonPropertyName("subType")]
  public CodeableConcept?[] SubType { get; set; }
  [JsonPropertyName("_subType")]
  public Element[] _SubType { get; set; }
  /// <summary>
  /// Information that may be needed by/relevant to the performer in their execution of this term action.
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public Reference?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
  /// <summary>
  /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
  /// </summary>
  [JsonPropertyName("term")]
  public ContractTerm?[] Term { get; set; }
  [JsonPropertyName("_term")]
  public Element[] _Term { get; set; }
  /// <summary>
  /// A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
  /// </summary>
  [JsonPropertyName("topicCodeableConcept")]
  public CodeableConcept? TopicCodeableConcept { get; set; }
  [JsonPropertyName("_topicCodeableConcept")]
  public Element _TopicCodeableConcept { get; set; }
  /// <summary>
  /// Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
  /// </summary>
  [JsonPropertyName("topicReference")]
  public Reference? TopicReference { get; set; }
  [JsonPropertyName("_topicReference")]
  public Element _TopicReference { get; set; }
  /// <summary>
  /// A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Used in a domain that uses a supplied contract repository.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// Note -  This is a business versionId, not a resource version id (see discussion http://build.fhir.org/resource.html#versions) Comments - There may be different contract instances that have the same identifier but different versions. The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the Contract.status field
/// </summary>
public sealed class ContractStatusCodes {
  public const string AMENDED = "amended";
  public const string APPENDED = "appended";
  public const string CANCELLED = "cancelled";
  public const string DISPUTED = "disputed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string EXECUTABLE = "executable";
}
/// <summary>
/// For example may be used to identify a class of coverage or employer group, Policy, Plan.
/// </summary>
public class CoverageClass : BackboneElement {
  /// <summary>
  /// A short description for the class.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The type of classification for which an insurer-specific class label or number and optional name is provided, for example may be used to identify a class of coverage or employer group, Policy, Plan.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// For example, the Group or Plan number.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
/// </summary>
public class CoverageCostToBeneficiaryException : BackboneElement {
  /// <summary>
  /// The timeframe during when the exception is in force.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// The code for the specific exception.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
/// </summary>
public class CoverageCostToBeneficiary : BackboneElement {
  /// <summary>
  /// A suite of codes indicating exceptions or reductions to patient costs and their effective periods.
  /// </summary>
  [JsonPropertyName("exception")]
  public CoverageCostToBeneficiaryException?[] Exception { get; set; }
  [JsonPropertyName("_exception")]
  public Element[] _Exception { get; set; }
  /// <summary>
  /// For example visit, specialist visits, emergency, inpatient care, etc.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Amount may be expressed as a percentage of the service/product cost or a fixed amount of currency.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Amount may be expressed as a percentage of the service/product cost or a fixed amount of currency.
  /// </summary>
  [JsonPropertyName("valueMoney")]
  public Money ValueMoney { get; set; }
  [JsonPropertyName("_valueMoney")]
  public Element _ValueMoney { get; set; }
}
/// <summary>
/// Coverage provides a link between covered parties (patients) and the payors of their healthcare costs (both insurance and self-pay).
/// </summary>
public class Coverage : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Coverage";
  /// <summary>
  /// The party who benefits from the insurance coverage; the patient when products and/or services are provided.
  /// </summary>
  [JsonPropertyName("beneficiary")]
  public Reference Beneficiary { get; set; }
  [JsonPropertyName("_beneficiary")]
  public Element _Beneficiary { get; set; }
  /// <summary>
  /// For example may be used to identify a class of coverage or employer group, Policy, Plan.
  /// </summary>
  [JsonPropertyName("class")]
  public CoverageClass?[] Class { get; set; }
  [JsonPropertyName("_class")]
  public Element[] _Class { get; set; }
  /// <summary>
  /// The policy(s) which constitute this insurance coverage.
  /// </summary>
  [JsonPropertyName("contract")]
  public Reference?[] Contract { get; set; }
  [JsonPropertyName("_contract")]
  public Element[] _Contract { get; set; }
  /// <summary>
  /// For example by knowing the patient visit co-pay, the provider can collect the amount prior to undertaking treatment.
  /// </summary>
  [JsonPropertyName("costToBeneficiary")]
  public CoverageCostToBeneficiary?[] CostToBeneficiary { get; set; }
  [JsonPropertyName("_costToBeneficiary")]
  public Element[] _CostToBeneficiary { get; set; }
  /// <summary>
  /// Sometimes the member number is constructed from the subscriberId and the dependant number.
  /// </summary>
  [JsonPropertyName("dependent")]
  public string? Dependent { get; set; }
  [JsonPropertyName("_dependent")]
  public Element _Dependent { get; set; }
  /// <summary>
  /// The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Certificate number, Personal Health Number or Case ID. May be constructed as the concatenation of the Coverage.SubscriberID and the Coverage.dependant.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
  /// </summary>
  [JsonPropertyName("network")]
  public string? Network { get; set; }
  [JsonPropertyName("_network")]
  public Element _Network { get; set; }
  /// <summary>
  /// The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care.
  /// </summary>
  [JsonPropertyName("order")]
  public uint? Order { get; set; }
  [JsonPropertyName("_order")]
  public Element _Order { get; set; }
  /// <summary>
  /// May provide multiple identifiers such as insurance company identifier or business identifier (BIN number).
  /// For selfpay it may provide multiple paying persons and/or organizations.
  /// </summary>
  [JsonPropertyName("payor")]
  public Reference[] Payor { get; set; }
  [JsonPropertyName("_payor")]
  public Element[] _Payor { get; set; }
  /// <summary>
  /// Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// For example: may be an individual, corporation or the subscriber's employer.
  /// </summary>
  [JsonPropertyName("policyHolder")]
  public Reference? PolicyHolder { get; set; }
  [JsonPropertyName("_policyHolder")]
  public Element _PolicyHolder { get; set; }
  /// <summary>
  /// Typically, an individual uses policies which are theirs (relationship='self') before policies owned by others.
  /// </summary>
  [JsonPropertyName("relationship")]
  public CodeableConcept? Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the code entered-in-error that marks the coverage as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Typically, automotive and worker's compensation policies would be flagged with 'subrogation=true' to enable healthcare payors to collect against accident claims.
  /// </summary>
  [JsonPropertyName("subrogation")]
  public bool? Subrogation { get; set; }
  [JsonPropertyName("_subrogation")]
  public Element _Subrogation { get; set; }
  /// <summary>
  /// May be self or a parent in the case of dependants.
  /// </summary>
  [JsonPropertyName("subscriber")]
  public Reference? Subscriber { get; set; }
  [JsonPropertyName("_subscriber")]
  public Element _Subscriber { get; set; }
  /// <summary>
  /// The insurer assigned ID for the Subscriber.
  /// </summary>
  [JsonPropertyName("subscriberId")]
  public Identifier? SubscriberId { get; set; }
  [JsonPropertyName("_subscriberId")]
  public Element _SubscriberId { get; set; }
  /// <summary>
  /// The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Coverage.status field
/// </summary>
public sealed class CoverageStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Often there are multiple jurisdiction specific valuesets which are required.
/// </summary>
public class CoverageEligibilityRequestSupportingInfo : BackboneElement {
  /// <summary>
  /// The supporting materials are applicable for all detail items, product/servce categories and specific billing codes.
  /// </summary>
  [JsonPropertyName("appliesToAll")]
  public bool? AppliesToAll { get; set; }
  [JsonPropertyName("_appliesToAll")]
  public Element _AppliesToAll { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("information")]
  public Reference Information { get; set; }
  [JsonPropertyName("_information")]
  public Element _Information { get; set; }
  /// <summary>
  /// A number to uniquely identify supporting information entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
}
/// <summary>
/// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
/// </summary>
public class CoverageEligibilityRequestInsurance : BackboneElement {
  /// <summary>
  /// A business agreement number established between the provider and the insurer for special business processing purposes.
  /// </summary>
  [JsonPropertyName("businessArrangement")]
  public string? BusinessArrangement { get; set; }
  [JsonPropertyName("_businessArrangement")]
  public Element _BusinessArrangement { get; set; }
  /// <summary>
  /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
  /// </summary>
  [JsonPropertyName("coverage")]
  public Reference Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element _Coverage { get; set; }
  /// <summary>
  /// A patient may (will) have multiple insurance policies which provide reimburement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for evaluating this request. Other requests would be created to request evaluation against the other listed policies.
  /// </summary>
  [JsonPropertyName("focal")]
  public bool? Focal { get; set; }
  [JsonPropertyName("_focal")]
  public Element _Focal { get; set; }
}
/// <summary>
/// Patient diagnosis for which care is sought.
/// </summary>
public class CoverageEligibilityRequestItemDiagnosis : BackboneElement {
  /// <summary>
  /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
  /// </summary>
  [JsonPropertyName("diagnosisCodeableConcept")]
  public CodeableConcept? DiagnosisCodeableConcept { get; set; }
  [JsonPropertyName("_diagnosisCodeableConcept")]
  public Element _DiagnosisCodeableConcept { get; set; }
  /// <summary>
  /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
  /// </summary>
  [JsonPropertyName("diagnosisReference")]
  public Reference? DiagnosisReference { get; set; }
  [JsonPropertyName("_diagnosisReference")]
  public Element _DiagnosisReference { get; set; }
}
/// <summary>
/// Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
/// </summary>
public class CoverageEligibilityRequestItem : BackboneElement {
  /// <summary>
  /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// The plan/proposal/order describing the proposed service in detail.
  /// </summary>
  [JsonPropertyName("detail")]
  public Reference?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// Patient diagnosis for which care is sought.
  /// </summary>
  [JsonPropertyName("diagnosis")]
  public CoverageEligibilityRequestItemDiagnosis?[] Diagnosis { get; set; }
  [JsonPropertyName("_diagnosis")]
  public Element[] _Diagnosis { get; set; }
  /// <summary>
  /// Facility where the services will be provided.
  /// </summary>
  [JsonPropertyName("facility")]
  public Reference? Facility { get; set; }
  [JsonPropertyName("_facility")]
  public Element _Facility { get; set; }
  /// <summary>
  /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept? ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// The practitioner who is responsible for the product or service to be rendered to the patient.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference? Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Exceptions, special conditions and supporting information applicable for this service or product line.
  /// </summary>
  [JsonPropertyName("supportingInfoSequence")]
  public uint?[] SupportingInfoSequence { get; set; }
  [JsonPropertyName("_supportingInfoSequence")]
  public Element[] _SupportingInfoSequence { get; set; }
  /// <summary>
  /// The amount charged to the patient by the provider for a single unit.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
public class CoverageEligibilityRequest : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CoverageEligibilityRequest";
  /// <summary>
  /// The date when this resource was created.
  /// </summary>
  [JsonPropertyName("created")]
  public string Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// Person who created the request.
  /// </summary>
  [JsonPropertyName("enterer")]
  public Reference? Enterer { get; set; }
  [JsonPropertyName("_enterer")]
  public Element _Enterer { get; set; }
  /// <summary>
  /// Facility where the services are intended to be provided.
  /// </summary>
  [JsonPropertyName("facility")]
  public Reference? Facility { get; set; }
  [JsonPropertyName("_facility")]
  public Element _Facility { get; set; }
  /// <summary>
  /// A unique identifier assigned to this coverage eligiblity request.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonPropertyName("insurance")]
  public CoverageEligibilityRequestInsurance?[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// The Insurer who issued the coverage in question and is the recipient of the request.
  /// </summary>
  [JsonPropertyName("insurer")]
  public Reference Insurer { get; set; }
  [JsonPropertyName("_insurer")]
  public Element _Insurer { get; set; }
  /// <summary>
  /// Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
  /// </summary>
  [JsonPropertyName("item")]
  public CoverageEligibilityRequestItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// 1..1.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// When the requestor expects the processor to complete processing.
  /// </summary>
  [JsonPropertyName("priority")]
  public CodeableConcept? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// Typically this field would be 1..1 where this party is responsible for the eligibility request but not necessarily professionally responsible for the provision of the individual products and services listed below.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference? Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string[] Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element[] _Purpose { get; set; }
  /// <summary>
  /// The date or dates when the enclosed suite of services were performed or completed.
  /// </summary>
  [JsonPropertyName("servicedDate")]
  public string? ServicedDate { get; set; }
  [JsonPropertyName("_servicedDate")]
  public Element _ServicedDate { get; set; }
  /// <summary>
  /// The date or dates when the enclosed suite of services were performed or completed.
  /// </summary>
  [JsonPropertyName("servicedPeriod")]
  public Period? ServicedPeriod { get; set; }
  [JsonPropertyName("_servicedPeriod")]
  public Element _ServicedPeriod { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Often there are multiple jurisdiction specific valuesets which are required.
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public CoverageEligibilityRequestSupportingInfo?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
}
/// <summary>
/// Code Values for the CoverageEligibilityRequest.purpose field
/// </summary>
public sealed class CoverageEligibilityRequestPurposeCodes {
  public const string AUTH_REQUIREMENTS = "auth-requirements";
  public const string BENEFITS = "benefits";
  public const string DISCOVERY = "discovery";
  public const string VALIDATION = "validation";
}
/// <summary>
/// Code Values for the CoverageEligibilityRequest.status field
/// </summary>
public sealed class CoverageEligibilityRequestStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Benefits used to date.
/// </summary>
public class CoverageEligibilityResponseInsuranceItemBenefit : BackboneElement {
  /// <summary>
  /// The quantity of the benefit which is permitted under the coverage.
  /// </summary>
  [JsonPropertyName("allowedUnsignedInt")]
  public uint? AllowedUnsignedInt { get; set; }
  [JsonPropertyName("_allowedUnsignedInt")]
  public Element _AllowedUnsignedInt { get; set; }
  /// <summary>
  /// The quantity of the benefit which is permitted under the coverage.
  /// </summary>
  [JsonPropertyName("allowedString")]
  public string? AllowedString { get; set; }
  [JsonPropertyName("_allowedString")]
  public Element _AllowedString { get; set; }
  /// <summary>
  /// The quantity of the benefit which is permitted under the coverage.
  /// </summary>
  [JsonPropertyName("allowedMoney")]
  public Money? AllowedMoney { get; set; }
  [JsonPropertyName("_allowedMoney")]
  public Element _AllowedMoney { get; set; }
  /// <summary>
  /// For example: deductible, visits, benefit amount.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The quantity of the benefit which have been consumed to date.
  /// </summary>
  [JsonPropertyName("usedUnsignedInt")]
  public uint? UsedUnsignedInt { get; set; }
  [JsonPropertyName("_usedUnsignedInt")]
  public Element _UsedUnsignedInt { get; set; }
  /// <summary>
  /// The quantity of the benefit which have been consumed to date.
  /// </summary>
  [JsonPropertyName("usedString")]
  public string? UsedString { get; set; }
  [JsonPropertyName("_usedString")]
  public Element _UsedString { get; set; }
  /// <summary>
  /// The quantity of the benefit which have been consumed to date.
  /// </summary>
  [JsonPropertyName("usedMoney")]
  public Money? UsedMoney { get; set; }
  [JsonPropertyName("_usedMoney")]
  public Element _UsedMoney { get; set; }
}
/// <summary>
/// Benefits and optionally current balances, and authorization details by category or service.
/// </summary>
public class CoverageEligibilityResponseInsuranceItem : BackboneElement {
  /// <summary>
  /// A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
  /// </summary>
  [JsonPropertyName("authorizationRequired")]
  public bool? AuthorizationRequired { get; set; }
  [JsonPropertyName("_authorizationRequired")]
  public Element _AuthorizationRequired { get; set; }
  /// <summary>
  /// Codes or comments regarding information or actions associated with the preauthorization.
  /// </summary>
  [JsonPropertyName("authorizationSupporting")]
  public CodeableConcept?[] AuthorizationSupporting { get; set; }
  [JsonPropertyName("_authorizationSupporting")]
  public Element[] _AuthorizationSupporting { get; set; }
  /// <summary>
  /// A web location for obtaining requirements or descriptive information regarding the preauthorization.
  /// </summary>
  [JsonPropertyName("authorizationUrl")]
  public string? AuthorizationUrl { get; set; }
  [JsonPropertyName("_authorizationUrl")]
  public Element _AuthorizationUrl { get; set; }
  /// <summary>
  /// Benefits used to date.
  /// </summary>
  [JsonPropertyName("benefit")]
  public CoverageEligibilityResponseInsuranceItemBenefit?[] Benefit { get; set; }
  [JsonPropertyName("_benefit")]
  public Element[] _Benefit { get; set; }
  /// <summary>
  /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// For example 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
  /// </summary>
  [JsonPropertyName("excluded")]
  public bool? Excluded { get; set; }
  [JsonPropertyName("_excluded")]
  public Element _Excluded { get; set; }
  /// <summary>
  /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example: MED01, or DENT2.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
  /// </summary>
  [JsonPropertyName("network")]
  public CodeableConcept? Network { get; set; }
  [JsonPropertyName("_network")]
  public Element _Network { get; set; }
  /// <summary>
  /// Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept? ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// The practitioner who is eligible for the provision of the product or service.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference? Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
  /// </summary>
  [JsonPropertyName("term")]
  public CodeableConcept? Term { get; set; }
  [JsonPropertyName("_term")]
  public Element _Term { get; set; }
  /// <summary>
  /// Indicates if the benefits apply to an individual or to the family.
  /// </summary>
  [JsonPropertyName("unit")]
  public CodeableConcept? Unit { get; set; }
  [JsonPropertyName("_unit")]
  public Element _Unit { get; set; }
}
/// <summary>
/// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
/// </summary>
public class CoverageEligibilityResponseInsurance : BackboneElement {
  /// <summary>
  /// The term of the benefits documented in this response.
  /// </summary>
  [JsonPropertyName("benefitPeriod")]
  public Period? BenefitPeriod { get; set; }
  [JsonPropertyName("_benefitPeriod")]
  public Element _BenefitPeriod { get; set; }
  /// <summary>
  /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
  /// </summary>
  [JsonPropertyName("coverage")]
  public Reference Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element _Coverage { get; set; }
  /// <summary>
  /// Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
  /// </summary>
  [JsonPropertyName("inforce")]
  public bool? Inforce { get; set; }
  [JsonPropertyName("_inforce")]
  public Element _Inforce { get; set; }
  /// <summary>
  /// Benefits and optionally current balances, and authorization details by category or service.
  /// </summary>
  [JsonPropertyName("item")]
  public CoverageEligibilityResponseInsuranceItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
}
/// <summary>
/// Errors encountered during the processing of the request.
/// </summary>
public class CoverageEligibilityResponseError : BackboneElement {
  /// <summary>
  /// An error code,from a specified code system, which details why the eligibility check could not be performed.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
}
public class CoverageEligibilityResponse : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "CoverageEligibilityResponse";
  /// <summary>
  /// The date this resource was created.
  /// </summary>
  [JsonPropertyName("created")]
  public string Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// A human readable description of the status of the adjudication.
  /// </summary>
  [JsonPropertyName("disposition")]
  public string? Disposition { get; set; }
  [JsonPropertyName("_disposition")]
  public Element _Disposition { get; set; }
  /// <summary>
  /// Errors encountered during the processing of the request.
  /// </summary>
  [JsonPropertyName("error")]
  public CoverageEligibilityResponseError?[] Error { get; set; }
  [JsonPropertyName("_error")]
  public Element[] _Error { get; set; }
  /// <summary>
  /// May be needed to identify specific jurisdictional forms.
  /// </summary>
  [JsonPropertyName("form")]
  public CodeableConcept? Form { get; set; }
  [JsonPropertyName("_form")]
  public Element _Form { get; set; }
  /// <summary>
  /// A unique identifier assigned to this coverage eligiblity request.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonPropertyName("insurance")]
  public CoverageEligibilityResponseInsurance?[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// The Insurer who issued the coverage in question and is the author of the response.
  /// </summary>
  [JsonPropertyName("insurer")]
  public Reference Insurer { get; set; }
  [JsonPropertyName("_insurer")]
  public Element _Insurer { get; set; }
  /// <summary>
  /// The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
  /// </summary>
  [JsonPropertyName("outcome")]
  public string Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
  /// </summary>
  [JsonPropertyName("preAuthRef")]
  public string? PreAuthRef { get; set; }
  [JsonPropertyName("_preAuthRef")]
  public Element _PreAuthRef { get; set; }
  /// <summary>
  /// Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string[] Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element[] _Purpose { get; set; }
  /// <summary>
  /// Reference to the original request resource.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
  /// </summary>
  [JsonPropertyName("requestor")]
  public Reference? Requestor { get; set; }
  [JsonPropertyName("_requestor")]
  public Element _Requestor { get; set; }
  /// <summary>
  /// The date or dates when the enclosed suite of services were performed or completed.
  /// </summary>
  [JsonPropertyName("servicedDate")]
  public string? ServicedDate { get; set; }
  [JsonPropertyName("_servicedDate")]
  public Element _ServicedDate { get; set; }
  /// <summary>
  /// The date or dates when the enclosed suite of services were performed or completed.
  /// </summary>
  [JsonPropertyName("servicedPeriod")]
  public Period? ServicedPeriod { get; set; }
  [JsonPropertyName("_servicedPeriod")]
  public Element _ServicedPeriod { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the CoverageEligibilityResponse.outcome field
/// </summary>
public sealed class CoverageEligibilityResponseOutcomeCodes {
  public const string QUEUED = "queued";
  public const string COMPLETE = "complete";
  public const string ERROR = "error";
  public const string PARTIAL = "partial";
}
/// <summary>
/// Code Values for the CoverageEligibilityResponse.purpose field
/// </summary>
public sealed class CoverageEligibilityResponsePurposeCodes {
  public const string AUTH_REQUIREMENTS = "auth-requirements";
  public const string BENEFITS = "benefits";
  public const string DISCOVERY = "discovery";
  public const string VALIDATION = "validation";
}
/// <summary>
/// Code Values for the CoverageEligibilityResponse.status field
/// </summary>
public sealed class CoverageEligibilityResponseStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
/// </summary>
public class DetectedIssueEvidence : BackboneElement {
  /// <summary>
  /// A manifestation that led to the recording of this detected issue.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
  /// </summary>
  [JsonPropertyName("detail")]
  public Reference?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
}
/// <summary>
/// Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
/// </summary>
public class DetectedIssueMitigation : BackboneElement {
  /// <summary>
  /// The "text" component can be used for detail or when no appropriate code exists.
  /// </summary>
  [JsonPropertyName("action")]
  public CodeableConcept Action { get; set; }
  [JsonPropertyName("_action")]
  public Element _Action { get; set; }
  /// <summary>
  /// Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// This might not be the same as when the mitigating step was actually taken.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
}
public class DetectedIssue : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "DetectedIssue";
  /// <summary>
  /// Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// Identifies the general type of issue identified.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Should focus on information not covered elsewhere as discrete data - no need to duplicate the narrative.
  /// </summary>
  [JsonPropertyName("detail")]
  public string? Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element _Detail { get; set; }
  /// <summary>
  /// Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
  /// </summary>
  [JsonPropertyName("evidence")]
  public DetectedIssueEvidence?[] Evidence { get; set; }
  [JsonPropertyName("_evidence")]
  public Element[] _Evidence { get; set; }
  /// <summary>
  /// The date or period when the detected issue was initially identified.
  /// </summary>
  [JsonPropertyName("identifiedDateTime")]
  public string? IdentifiedDateTime { get; set; }
  [JsonPropertyName("_identifiedDateTime")]
  public Element _IdentifiedDateTime { get; set; }
  /// <summary>
  /// The date or period when the detected issue was initially identified.
  /// </summary>
  [JsonPropertyName("identifiedPeriod")]
  public Period? IdentifiedPeriod { get; set; }
  [JsonPropertyName("_identifiedPeriod")]
  public Element _IdentifiedPeriod { get; set; }
  /// <summary>
  /// Business identifier associated with the detected issue record.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// There's an implicit constraint on the number of implicated resources based on DetectedIssue.type; e.g. For drug-drug, there would be more than one.  For timing, there would typically only be one.
  /// </summary>
  [JsonPropertyName("implicated")]
  public Reference?[] Implicated { get; set; }
  [JsonPropertyName("_implicated")]
  public Element[] _Implicated { get; set; }
  /// <summary>
  /// Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
  /// </summary>
  [JsonPropertyName("mitigation")]
  public DetectedIssueMitigation?[] Mitigation { get; set; }
  [JsonPropertyName("_mitigation")]
  public Element[] _Mitigation { get; set; }
  /// <summary>
  /// Indicates the patient whose record the detected issue is associated with.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference? Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
  /// </summary>
  [JsonPropertyName("reference")]
  public string? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
  /// <summary>
  /// Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
  /// </summary>
  [JsonPropertyName("severity")]
  public string? Severity { get; set; }
  [JsonPropertyName("_severity")]
  public Element _Severity { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the issue as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the DetectedIssue.severity field
/// </summary>
public sealed class DetectedIssueSeverityCodes {
  public const string HIGH = "high";
  public const string MODERATE = "moderate";
  public const string LOW = "low";
}
/// <summary>
/// Code Values for the DetectedIssue.status field
/// </summary>
public sealed class DetectedIssueStatusCodes {
  public const string REGISTERED = "registered";
  public const string PRELIMINARY = "preliminary";
  public const string FINAL = "final";
  public const string AMENDED = "amended";
}
/// <summary>
/// UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
/// </summary>
public class DeviceUdiCarrier : BackboneElement {
  /// <summary>
  /// The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
  /// </summary>
  [JsonPropertyName("carrierAIDC")]
  public string? CarrierAIDC { get; set; }
  [JsonPropertyName("_carrierAIDC")]
  public Element _CarrierAIDC { get; set; }
  /// <summary>
  /// If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
  /// </summary>
  [JsonPropertyName("carrierHRF")]
  public string? CarrierHRF { get; set; }
  [JsonPropertyName("_carrierHRF")]
  public Element _CarrierHRF { get; set; }
  /// <summary>
  /// The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
  /// </summary>
  [JsonPropertyName("deviceIdentifier")]
  public string? DeviceIdentifier { get; set; }
  [JsonPropertyName("_deviceIdentifier")]
  public Element _DeviceIdentifier { get; set; }
  /// <summary>
  /// A coded entry to indicate how the data was entered.
  /// </summary>
  [JsonPropertyName("entryType")]
  public string? EntryType { get; set; }
  [JsonPropertyName("_entryType")]
  public Element _EntryType { get; set; }
  /// <summary>
  /// Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
  /// 1) GS1: 
  /// http://hl7.org/fhir/NamingSystem/gs1-di, 
  /// 2) HIBCC:
  /// http://hl7.org/fhir/NamingSystem/hibcc-dI, 
  /// 3) ICCBBA for blood containers:
  /// http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
  /// 4) ICCBA for other devices:
  /// http://hl7.org/fhir/NamingSystem/iccbba-other-di.
  /// </summary>
  [JsonPropertyName("issuer")]
  public string? Issuer { get; set; }
  [JsonPropertyName("_issuer")]
  public Element _Issuer { get; set; }
  /// <summary>
  /// The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public string? Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element _Jurisdiction { get; set; }
}
/// <summary>
/// Code Values for the Device.udiCarrier.entryType field
/// </summary>
public sealed class DeviceUdiCarrierEntryTypeCodes {
  public const string BARCODE = "barcode";
  public const string RFID = "rfid";
  public const string MANUAL = "manual";
  public const string CARD = "card";
  public const string SELF_REPORTED = "self-reported";
  public const string ELECTRONIC_TRANSMISSION = "electronic-transmission";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
/// </summary>
public class DeviceDeviceName : BackboneElement {
  /// <summary>
  /// The name that identifies the device.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The type of deviceName. Note that ManufactureDeviceName means that the name is the name as given by the manufacturer, not the name of the manufacturer.
  /// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Device.deviceName.type field
/// </summary>
public sealed class DeviceDeviceNameTypeCodes {
  public const string UDI_LABEL_NAME = "udi-label-name";
  public const string USER_FRIENDLY_NAME = "user-friendly-name";
  public const string PATIENT_REPORTED_NAME = "patient-reported-name";
  public const string MANUFACTURER_NAME = "manufacturer-name";
  public const string MODEL_NAME = "model-name";
  public const string OTHER = "other";
}
/// <summary>
/// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
/// </summary>
public class DeviceSpecialization : BackboneElement {
  /// <summary>
  /// The standard that is used to operate and communicate.
  /// </summary>
  [JsonPropertyName("systemType")]
  public CodeableConcept SystemType { get; set; }
  [JsonPropertyName("_systemType")]
  public Element _SystemType { get; set; }
  /// <summary>
  /// The version of the standard that is used to operate and communicate.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// The actual design of the device or software version running on the device.
/// </summary>
public class DeviceVersion : BackboneElement {
  /// <summary>
  /// Note that the module of the device would not need to be tracked as a separate device, e.g., using different UDI, thus would typically involve one or more software modules. For example, a device may involve two software modules each on a different version.
  /// </summary>
  [JsonPropertyName("component")]
  public Identifier? Component { get; set; }
  [JsonPropertyName("_component")]
  public Element _Component { get; set; }
  /// <summary>
  /// The type of the device version, e.g. manufacturer, approved, internal.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The version text.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
/// </summary>
public class DeviceProperty : BackboneElement {
  /// <summary>
  /// Code that specifies the property being represented. No codes are specified but the MDC codes are an example: https://build.fhir.org/mdc.html.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Property value as a code, e.g., NTP4 (synced to NTP).
  /// </summary>
  [JsonPropertyName("valueCode")]
  public CodeableConcept?[] ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element[] _ValueCode { get; set; }
  /// <summary>
  /// Property value as a quantity.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity?[] ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element[] _ValueQuantity { get; set; }
}
/// <summary>
/// The status of the device itself - whether it is switched on, or activated, etc.
/// </summary>
public class DeviceOperationalStatus : BackboneElement {
  /// <summary>
  /// The reasons given for the current operational status - i.e. why is the device switched on etc.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// on |off | standby.
  /// </summary>
  [JsonPropertyName("value")]
  public CodeableConcept? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// The state of the usage or application of the device - whether the device is implanted, or explanted, or attached to the patient.
/// </summary>
public class DeviceAssociationStatus : BackboneElement {
  /// <summary>
  /// The reasons given for the current association status - i.e. why is the device explanted, or attached to the patient, etc.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// implanted|explanted|attached.
  /// </summary>
  [JsonPropertyName("value")]
  public CodeableConcept? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Allows institutions to track their devices.
/// </summary>
public class Device : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Device";
  /// <summary>
  /// The state of the usage or application of the device - whether the device is implanted, or explanted, or attached to the patient.
  /// </summary>
  [JsonPropertyName("associationStatus")]
  public DeviceAssociationStatus? AssociationStatus { get; set; }
  [JsonPropertyName("_associationStatus")]
  public Element _AssociationStatus { get; set; }
  /// <summary>
  /// used for troubleshooting etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactPoint?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// The reference to the definition for the device.
  /// </summary>
  [JsonPropertyName("definition")]
  public Reference? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
  /// </summary>
  [JsonPropertyName("deviceName")]
  public DeviceDeviceName?[] DeviceName { get; set; }
  [JsonPropertyName("_deviceName")]
  public Element[] _DeviceName { get; set; }
  /// <summary>
  /// The name used to display by default when the device is referenced. Based on intent of use by the resource creator, this may reflect one of the names in Device.deviceName, or may be another simple name.
  /// </summary>
  [JsonPropertyName("displayName")]
  public string? DisplayName { get; set; }
  [JsonPropertyName("_displayName")]
  public Element _DisplayName { get; set; }
  /// <summary>
  /// For example, this applies to devices in the United States regulated under *Code of Federal Regulation 21CFR§1271.290(c)*.
  /// </summary>
  [JsonPropertyName("distinctIdentifier")]
  public string? DistinctIdentifier { get; set; }
  [JsonPropertyName("_distinctIdentifier")]
  public Element _DistinctIdentifier { get; set; }
  /// <summary>
  /// The date and time beyond which this device is no longer valid or should not be used (if applicable).
  /// </summary>
  [JsonPropertyName("expirationDate")]
  public string? ExpirationDate { get; set; }
  [JsonPropertyName("_expirationDate")]
  public Element _ExpirationDate { get; set; }
  /// <summary>
  /// The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The place where the device can be found.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// Lot number assigned by the manufacturer.
  /// </summary>
  [JsonPropertyName("lotNumber")]
  public string? LotNumber { get; set; }
  [JsonPropertyName("_lotNumber")]
  public Element _LotNumber { get; set; }
  /// <summary>
  /// The date and time when the device was manufactured.
  /// </summary>
  [JsonPropertyName("manufactureDate")]
  public string? ManufactureDate { get; set; }
  [JsonPropertyName("_manufactureDate")]
  public Element _ManufactureDate { get; set; }
  /// <summary>
  /// A name of the manufacturer or entity legally responsible for the device.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public string? Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element _Manufacturer { get; set; }
  /// <summary>
  /// The manufacturer's model number for the device.
  /// </summary>
  [JsonPropertyName("modelNumber")]
  public string? ModelNumber { get; set; }
  [JsonPropertyName("_modelNumber")]
  public Element _ModelNumber { get; set; }
  /// <summary>
  /// Descriptive information, usage information or implantation information that is not captured in an existing element.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The status of the device itself - whether it is switched on, or activated, etc.
  /// </summary>
  [JsonPropertyName("operationalStatus")]
  public DeviceOperationalStatus? OperationalStatus { get; set; }
  [JsonPropertyName("_operationalStatus")]
  public Element _OperationalStatus { get; set; }
  /// <summary>
  /// An organization that is responsible for the provision and ongoing maintenance of the device.
  /// </summary>
  [JsonPropertyName("owner")]
  public Reference? Owner { get; set; }
  [JsonPropertyName("_owner")]
  public Element _Owner { get; set; }
  /// <summary>
  /// The device that this device is attached to or is part of.
  /// </summary>
  [JsonPropertyName("parent")]
  public Reference? Parent { get; set; }
  [JsonPropertyName("_parent")]
  public Element _Parent { get; set; }
  /// <summary>
  /// Alphanumeric Maximum 20.
  /// </summary>
  [JsonPropertyName("partNumber")]
  public string? PartNumber { get; set; }
  [JsonPropertyName("_partNumber")]
  public Element _PartNumber { get; set; }
  /// <summary>
  /// Patient information, if the device is affixed to, or associated to a patient for their specific use, irrespective of the procedure, use, observation, or other activity that the device is involved in.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference? Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
  /// </summary>
  [JsonPropertyName("property")]
  public DeviceProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// Provides additional safety characteristics about a medical device.  For example devices containing latex.
  /// </summary>
  [JsonPropertyName("safety")]
  public CodeableConcept?[] Safety { get; set; }
  [JsonPropertyName("_safety")]
  public Element[] _Safety { get; set; }
  /// <summary>
  /// Alphanumeric Maximum 20.
  /// </summary>
  [JsonPropertyName("serialNumber")]
  public string? SerialNumber { get; set; }
  [JsonPropertyName("_serialNumber")]
  public Element _SerialNumber { get; set; }
  /// <summary>
  /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
  /// </summary>
  [JsonPropertyName("specialization")]
  public DeviceSpecialization?[] Specialization { get; set; }
  [JsonPropertyName("_specialization")]
  public Element[] _Specialization { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Reason for the dtatus of the Device availability.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept?[] StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element[] _StatusReason { get; set; }
  /// <summary>
  /// The kind or type of device. A device instance may have more than one type - in which case those are the types that apply to the specific instance of the device.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
  /// <summary>
  /// UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
  /// </summary>
  [JsonPropertyName("udiCarrier")]
  public DeviceUdiCarrier?[] UdiCarrier { get; set; }
  [JsonPropertyName("_udiCarrier")]
  public Element[] _UdiCarrier { get; set; }
  /// <summary>
  /// If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// The actual design of the device or software version running on the device.
  /// </summary>
  [JsonPropertyName("version")]
  public DeviceVersion?[] Version { get; set; }
  [JsonPropertyName("_version")]
  public Element[] _Version { get; set; }
}
/// <summary>
/// Code Values for the Device.status field
/// </summary>
public sealed class DeviceStatusCodes {
  public const string ACTIVE = "active";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
/// </summary>
public class DeviceDefinitionUdiDeviceIdentifier : BackboneElement {
  /// <summary>
  /// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
  /// </summary>
  [JsonPropertyName("deviceIdentifier")]
  public string DeviceIdentifier { get; set; }
  [JsonPropertyName("_deviceIdentifier")]
  public Element _DeviceIdentifier { get; set; }
  /// <summary>
  /// The organization that assigns the identifier algorithm.
  /// </summary>
  [JsonPropertyName("issuer")]
  public string Issuer { get; set; }
  [JsonPropertyName("_issuer")]
  public Element _Issuer { get; set; }
  /// <summary>
  /// The jurisdiction to which the deviceIdentifier applies.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public string Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element _Jurisdiction { get; set; }
}
/// <summary>
/// The name or names of the device as given by the manufacturer.
/// </summary>
public class DeviceDefinitionDeviceName : BackboneElement {
  /// <summary>
  /// A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The type of deviceName.
  /// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the DeviceDefinition.deviceName.type field
/// </summary>
public sealed class DeviceDefinitionDeviceNameTypeCodes {
  public const string UDI_LABEL_NAME = "udi-label-name";
  public const string USER_FRIENDLY_NAME = "user-friendly-name";
  public const string PATIENT_REPORTED_NAME = "patient-reported-name";
  public const string MANUFACTURER_NAME = "manufacturer-name";
  public const string MODEL_NAME = "model-name";
  public const string OTHER = "other";
}
/// <summary>
/// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
/// </summary>
public class DeviceDefinitionSpecialization : BackboneElement {
  /// <summary>
  /// The standard that is used to operate and communicate.
  /// </summary>
  [JsonPropertyName("systemType")]
  public string SystemType { get; set; }
  [JsonPropertyName("_systemType")]
  public Element _SystemType { get; set; }
  /// <summary>
  /// The version of the standard that is used to operate and communicate.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Additional capabilities that the device is defined or required to have e.g. "water resistant", "long life".
/// </summary>
public class DeviceDefinitionCapability : BackboneElement {
  /// <summary>
  /// The actual capability of the device e.g. IP67.
  /// </summary>
  [JsonPropertyName("description")]
  public CodeableConcept?[] Description { get; set; }
  [JsonPropertyName("_description")]
  public Element[] _Description { get; set; }
  /// <summary>
  /// The type of capability - whether it is a physical attribute, a customization needed. For exampl e "water ingress protection".
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
/// </summary>
public class DeviceDefinitionProperty : BackboneElement {
  /// <summary>
  /// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Property value as a code, e.g., NTP4 (synced to NTP).
  /// </summary>
  [JsonPropertyName("valueCode")]
  public CodeableConcept?[] ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element[] _ValueCode { get; set; }
  /// <summary>
  /// Property value as a quantity.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity?[] ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element[] _ValueQuantity { get; set; }
}
/// <summary>
/// A substance used to create the material(s) of which the device is made.
/// </summary>
public class DeviceDefinitionMaterial : BackboneElement {
  /// <summary>
  /// Whether the substance is a known or suspected allergen.
  /// </summary>
  [JsonPropertyName("allergenicIndicator")]
  public bool? AllergenicIndicator { get; set; }
  [JsonPropertyName("_allergenicIndicator")]
  public Element _AllergenicIndicator { get; set; }
  /// <summary>
  /// Indicates an alternative material of the device.
  /// </summary>
  [JsonPropertyName("alternate")]
  public bool? Alternate { get; set; }
  [JsonPropertyName("_alternate")]
  public Element _Alternate { get; set; }
  /// <summary>
  /// A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.
  /// </summary>
  [JsonPropertyName("substance")]
  public CodeableConcept Substance { get; set; }
  [JsonPropertyName("_substance")]
  public Element _Substance { get; set; }
}
public class DeviceDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "DeviceDefinition";
  /// <summary>
  /// Additional capabilities that the device is defined or required to have e.g. "water resistant", "long life".
  /// </summary>
  [JsonPropertyName("capability")]
  public DeviceDefinitionCapability?[] Capability { get; set; }
  [JsonPropertyName("_capability")]
  public Element[] _Capability { get; set; }
  /// <summary>
  /// used for troubleshooting etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactPoint?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// The name or names of the device as given by the manufacturer.
  /// </summary>
  [JsonPropertyName("deviceName")]
  public DeviceDefinitionDeviceName?[] DeviceName { get; set; }
  [JsonPropertyName("_deviceName")]
  public Element[] _DeviceName { get; set; }
  /// <summary>
  /// Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Language code for the human-readable text strings produced by the device (all supported).
  /// </summary>
  [JsonPropertyName("languageCode")]
  public CodeableConcept?[] LanguageCode { get; set; }
  [JsonPropertyName("_languageCode")]
  public Element[] _LanguageCode { get; set; }
  /// <summary>
  /// A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
  /// </summary>
  [JsonPropertyName("manufacturerString")]
  public string? ManufacturerString { get; set; }
  [JsonPropertyName("_manufacturerString")]
  public Element _ManufacturerString { get; set; }
  /// <summary>
  /// A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
  /// </summary>
  [JsonPropertyName("manufacturerReference")]
  public Reference? ManufacturerReference { get; set; }
  [JsonPropertyName("_manufacturerReference")]
  public Element _ManufacturerReference { get; set; }
  /// <summary>
  /// A substance used to create the material(s) of which the device is made.
  /// </summary>
  [JsonPropertyName("material")]
  public DeviceDefinitionMaterial?[] Material { get; set; }
  [JsonPropertyName("_material")]
  public Element[] _Material { get; set; }
  /// <summary>
  /// The model number for the device for example as defined by the manufacturer or labeler, or other agency.
  /// </summary>
  [JsonPropertyName("modelNumber")]
  public string? ModelNumber { get; set; }
  [JsonPropertyName("_modelNumber")]
  public Element _ModelNumber { get; set; }
  /// <summary>
  /// Descriptive information, usage information or implantation information that is not captured in an existing element.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Access to on-line information about the device.
  /// </summary>
  [JsonPropertyName("onlineInformation")]
  public string? OnlineInformation { get; set; }
  [JsonPropertyName("_onlineInformation")]
  public Element _OnlineInformation { get; set; }
  /// <summary>
  /// An organization that is responsible for the provision and ongoing maintenance of the device.
  /// </summary>
  [JsonPropertyName("owner")]
  public Reference? Owner { get; set; }
  [JsonPropertyName("_owner")]
  public Element _Owner { get; set; }
  /// <summary>
  /// The parent device it can be part of.
  /// </summary>
  [JsonPropertyName("parentDevice")]
  public Reference? ParentDevice { get; set; }
  [JsonPropertyName("_parentDevice")]
  public Element _ParentDevice { get; set; }
  /// <summary>
  /// Physical characteristics to define or specify the product - for example dimensions, color etc. These can be defined by the manufacturer or labeler, or can be used to specify characteristics when ordering.
  /// </summary>
  [JsonPropertyName("physicalCharacteristics")]
  public ProdCharacteristic? PhysicalCharacteristics { get; set; }
  [JsonPropertyName("_physicalCharacteristics")]
  public Element _PhysicalCharacteristics { get; set; }
  /// <summary>
  /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
  /// </summary>
  [JsonPropertyName("property")]
  public DeviceDefinitionProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Safety characteristics of the device.
  /// </summary>
  [JsonPropertyName("safety")]
  public CodeableConcept?[] Safety { get; set; }
  [JsonPropertyName("_safety")]
  public Element[] _Safety { get; set; }
  /// <summary>
  /// Shelf Life and storage information.
  /// </summary>
  [JsonPropertyName("shelfLifeStorage")]
  public ProductShelfLife?[] ShelfLifeStorage { get; set; }
  [JsonPropertyName("_shelfLifeStorage")]
  public Element[] _ShelfLifeStorage { get; set; }
  /// <summary>
  /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
  /// </summary>
  [JsonPropertyName("specialization")]
  public DeviceDefinitionSpecialization?[] Specialization { get; set; }
  [JsonPropertyName("_specialization")]
  public Element[] _Specialization { get; set; }
  /// <summary>
  /// What kind of device or device system this is.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
  /// </summary>
  [JsonPropertyName("udiDeviceIdentifier")]
  public DeviceDefinitionUdiDeviceIdentifier?[] UdiDeviceIdentifier { get; set; }
  [JsonPropertyName("_udiDeviceIdentifier")]
  public Element[] _UdiDeviceIdentifier { get; set; }
  /// <summary>
  /// The available versions of the device, e.g., software versions.
  /// </summary>
  [JsonPropertyName("version")]
  public string?[] Version { get; set; }
  [JsonPropertyName("_version")]
  public Element[] _Version { get; set; }
}
/// <summary>
/// Describes the calibrations that have been performed or that are required to be performed.
/// </summary>
public class DeviceMetricCalibration : BackboneElement {
  /// <summary>
  /// Describes the state of the calibration.
  /// </summary>
  [JsonPropertyName("state")]
  public string? State { get; set; }
  [JsonPropertyName("_state")]
  public Element _State { get; set; }
  /// <summary>
  /// Describes the time last calibration has been performed.
  /// </summary>
  [JsonPropertyName("time")]
  public string? Time { get; set; }
  [JsonPropertyName("_time")]
  public Element _Time { get; set; }
  /// <summary>
  /// Describes the type of the calibration method.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the DeviceMetric.calibration.state field
/// </summary>
public sealed class DeviceMetricCalibrationStateCodes {
  public const string NOT_CALIBRATED = "not-calibrated";
  public const string CALIBRATION_REQUIRED = "calibration-required";
  public const string CALIBRATED = "calibrated";
  public const string UNSPECIFIED = "unspecified";
}
/// <summary>
/// Code Values for the DeviceMetric.calibration.type field
/// </summary>
public sealed class DeviceMetricCalibrationTypeCodes {
  public const string UNSPECIFIED = "unspecified";
  public const string OFFSET = "offset";
  public const string GAIN = "gain";
  public const string TWO_POINT = "two-point";
}
public class DeviceMetric : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "DeviceMetric";
  /// <summary>
  /// Describes the calibrations that have been performed or that are required to be performed.
  /// </summary>
  [JsonPropertyName("calibration")]
  public DeviceMetricCalibration?[] Calibration { get; set; }
  [JsonPropertyName("_calibration")]
  public Element[] _Calibration { get; set; }
  /// <summary>
  /// Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
  /// </summary>
  [JsonPropertyName("category")]
  public string Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.
  /// </summary>
  [JsonPropertyName("color")]
  public string? Color { get; set; }
  [JsonPropertyName("_color")]
  public Element _Color { get; set; }
  /// <summary>
  /// For identifiers assigned to a device by the device or gateway software, the `system` element of the identifier should be set to the unique identifier of the device.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
  /// </summary>
  [JsonPropertyName("measurementPeriod")]
  public Timing? MeasurementPeriod { get; set; }
  [JsonPropertyName("_measurementPeriod")]
  public Element _MeasurementPeriod { get; set; }
  /// <summary>
  /// Indicates current operational state of the device. For example: On, Off, Standby, etc.
  /// </summary>
  [JsonPropertyName("operationalStatus")]
  public string? OperationalStatus { get; set; }
  [JsonPropertyName("_operationalStatus")]
  public Element _OperationalStatus { get; set; }
  /// <summary>
  /// Describes the link to the  Device that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a Device that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
  /// </summary>
  [JsonPropertyName("parent")]
  public Reference? Parent { get; set; }
  [JsonPropertyName("_parent")]
  public Element _Parent { get; set; }
  /// <summary>
  /// Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// DeviceMetric.type can be referred to either IEEE 11073-10101 or LOINC.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// DeviceMetric.unit can refer to either UCUM or preferable a RTMMS coding system.
  /// </summary>
  [JsonPropertyName("unit")]
  public CodeableConcept? Unit { get; set; }
  [JsonPropertyName("_unit")]
  public Element _Unit { get; set; }
}
/// <summary>
/// Code Values for the DeviceMetric.category field
/// </summary>
public sealed class DeviceMetricCategoryCodes {
  public const string MEASUREMENT = "measurement";
  public const string SETTING = "setting";
  public const string CALCULATION = "calculation";
  public const string UNSPECIFIED = "unspecified";
}
/// <summary>
/// Code Values for the DeviceMetric.color field
/// </summary>
public sealed class DeviceMetricColorCodes {
  public const string BLACK = "black";
  public const string RED = "red";
  public const string GREEN = "green";
  public const string YELLOW = "yellow";
  public const string BLUE = "blue";
  public const string MAGENTA = "magenta";
  public const string CYAN = "cyan";
  public const string WHITE = "white";
}
/// <summary>
/// Code Values for the DeviceMetric.operationalStatus field
/// </summary>
public sealed class DeviceMetricOperationalStatusCodes {
  public const string ON = "on";
  public const string OFF = "off";
  public const string STANDBY = "standby";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Specific parameters for the ordered item.  For example, the prism value for lenses.
/// </summary>
public class DeviceRequestParameter : BackboneElement {
  /// <summary>
  /// A code or string that identifies the device detail being asserted.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Range means device should have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// Range means device should have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Range means device should have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range? ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// Range means device should have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
}
public class DeviceRequest : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "DeviceRequest";
  /// <summary>
  /// When the request transitioned to being actionable.
  /// </summary>
  [JsonPropertyName("authoredOn")]
  public string? AuthoredOn { get; set; }
  [JsonPropertyName("_authoredOn")]
  public Element _AuthoredOn { get; set; }
  /// <summary>
  /// Plan/proposal/order fulfilled by this request.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// The details of the device to be used.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableReference Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// An encounter that provides additional context in which this request is made.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Composite request this is part of.
  /// </summary>
  [JsonPropertyName("groupIdentifier")]
  public Identifier? GroupIdentifier { get; set; }
  [JsonPropertyName("_groupIdentifier")]
  public Element _GroupIdentifier { get; set; }
  /// <summary>
  /// Identifiers assigned to this order by the orderer or by the receiver.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
  /// </summary>
  [JsonPropertyName("insurance")]
  public Reference?[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// Whether the request is a proposal, plan, an original order or a reflex order.
  /// </summary>
  [JsonPropertyName("intent")]
  public string Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
  /// </summary>
  [JsonPropertyName("occurrenceTiming")]
  public Timing? OccurrenceTiming { get; set; }
  [JsonPropertyName("_occurrenceTiming")]
  public Element _OccurrenceTiming { get; set; }
  /// <summary>
  /// Specific parameters for the ordered item.  For example, the prism value for lenses.
  /// </summary>
  [JsonPropertyName("parameter")]
  public DeviceRequestParameter?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
  /// <summary>
  /// The desired performer for doing the diagnostic testing.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference? Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element _Performer { get; set; }
  /// <summary>
  /// Desired type of performer for doing the diagnostic testing.
  /// </summary>
  [JsonPropertyName("performerType")]
  public CodeableConcept? PerformerType { get; set; }
  [JsonPropertyName("_performerType")]
  public Element _PerformerType { get; set; }
  /// <summary>
  /// Indicates how quickly the {{title}} should be addressed with respect to other requests.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// The request takes the place of the referenced completed or terminated request(s).
  /// </summary>
  [JsonPropertyName("priorRequest")]
  public Reference?[] PriorRequest { get; set; }
  [JsonPropertyName("_priorRequest")]
  public Element[] _PriorRequest { get; set; }
  /// <summary>
  /// Reason or justification for the use of this device.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// This might not include provenances for all versions of the request - only those deemed "relevant" or important.This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a "relevant" change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revincludeAll Provenances should have some historical version of this Request as their subject.
  /// </summary>
  [JsonPropertyName("relevantHistory")]
  public Reference?[] RelevantHistory { get; set; }
  [JsonPropertyName("_relevantHistory")]
  public Element[] _RelevantHistory { get; set; }
  /// <summary>
  /// The individual who initiated the request and has responsibility for its activation.
  /// </summary>
  [JsonPropertyName("requester")]
  public Reference? Requester { get; set; }
  [JsonPropertyName("_requester")]
  public Element _Requester { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the codes cancelled and entered-in-error that mark the request as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The patient who will use the device.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public Reference?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
}
/// <summary>
/// Code Values for the DeviceRequest.intent field
/// </summary>
public sealed class DeviceRequestIntentCodes {
  public const string PROPOSAL = "proposal";
  public const string PLAN = "plan";
  public const string DIRECTIVE = "directive";
  public const string ORDER = "order";
  public const string ORIGINAL_ORDER = "original-order";
  public const string REFLEX_ORDER = "reflex-order";
  public const string FILLER_ORDER = "filler-order";
  public const string INSTANCE_ORDER = "instance-order";
  public const string OPTION = "option";
}
/// <summary>
/// Code Values for the DeviceRequest.priority field
/// </summary>
public sealed class DeviceRequestPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the DeviceRequest.status field
/// </summary>
public sealed class DeviceRequestStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string ON_HOLD = "on-hold";
  public const string REVOKED = "revoked";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
public class DeviceUseStatement : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "DeviceUseStatement";
  /// <summary>
  /// A plan, proposal or order that is fulfilled in whole or in part by this DeviceUseStatement.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableReference? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// This attribute indicates a category for the statement - The device statement may be made in an inpatient or outpatient settting (inpatient | outpatient | community | patientspecified).
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The encounter or episode of care that establishes the context for this device use statement.
  /// </summary>
  [JsonPropertyName("context")]
  public Reference? Context { get; set; }
  [JsonPropertyName("_context")]
  public Element _Context { get; set; }
  /// <summary>
  /// The time at which the statement was recorded by informationSource.
  /// </summary>
  [JsonPropertyName("dateAsserted")]
  public string? DateAsserted { get; set; }
  [JsonPropertyName("_dateAsserted")]
  public Element _DateAsserted { get; set; }
  /// <summary>
  /// The most common use cases for deriving a DeviceUseStatement comes from creating it from a request or from an observation or a claim. it should be noted that the amount of information that is available varies from the type resource that you derive the DeviceUseStatement from.
  /// </summary>
  [JsonPropertyName("derivedFrom")]
  public Reference?[] DerivedFrom { get; set; }
  [JsonPropertyName("_derivedFrom")]
  public Element[] _DerivedFrom { get; set; }
  /// <summary>
  /// Code or Reference to device used.
  /// </summary>
  [JsonPropertyName("device")]
  public CodeableReference Device { get; set; }
  [JsonPropertyName("_device")]
  public Element _Device { get; set; }
  /// <summary>
  /// An external identifier for this statement such as an IRI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Who reported the device was being used by the patient.
  /// </summary>
  [JsonPropertyName("informationSource")]
  public Reference? InformationSource { get; set; }
  [JsonPropertyName("_informationSource")]
  public Element _InformationSource { get; set; }
  /// <summary>
  /// Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Reason or justification for the use of the device. A coded concept, or another resource whose existence justifies this DeviceUseStatement.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// DeviceUseStatment is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for contains codes that assert the status of the use  by the patient (for example, stopped or on hold) as well as codes that assert the status of the resource itself (for example, entered in error).This element is labeled as a modifier because the status contains the codes that mark the statement as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The patient who used the device.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// How often the device was used.
  /// </summary>
  [JsonPropertyName("timingTiming")]
  public Timing? TimingTiming { get; set; }
  [JsonPropertyName("_timingTiming")]
  public Element _TimingTiming { get; set; }
  /// <summary>
  /// How often the device was used.
  /// </summary>
  [JsonPropertyName("timingPeriod")]
  public Period? TimingPeriod { get; set; }
  [JsonPropertyName("_timingPeriod")]
  public Element _TimingPeriod { get; set; }
  /// <summary>
  /// How often the device was used.
  /// </summary>
  [JsonPropertyName("timingDateTime")]
  public string? TimingDateTime { get; set; }
  [JsonPropertyName("_timingDateTime")]
  public Element _TimingDateTime { get; set; }
  /// <summary>
  /// The reason for asserting the usage status - for example forgot, lost, stolen, broken.
  /// </summary>
  [JsonPropertyName("usageReason")]
  public CodeableConcept?[] UsageReason { get; set; }
  [JsonPropertyName("_usageReason")]
  public Element[] _UsageReason { get; set; }
  /// <summary>
  /// The status of the device usage, for example always, sometimes, never. This is not the same as the status of the statement.
  /// </summary>
  [JsonPropertyName("usageStatus")]
  public CodeableConcept? UsageStatus { get; set; }
  [JsonPropertyName("_usageStatus")]
  public Element _UsageStatus { get; set; }
}
/// <summary>
/// Code Values for the DeviceUseStatement.status field
/// </summary>
public sealed class DeviceUseStatementStatusCodes {
  public const string ACTIVE = "active";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
/// </summary>
public class DiagnosticReportMedia : BackboneElement {
  /// <summary>
  /// The comment should be displayed with the image. It would be common for the report to include additional discussion of the image contents in other sections such as the conclusion.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// Reference to the image source.
  /// </summary>
  [JsonPropertyName("link")]
  public Reference Link { get; set; }
  [JsonPropertyName("_link")]
  public Element _Link { get; set; }
}
/// <summary>
/// To support reporting for any diagnostic report into a clinical data repository.
/// </summary>
public class DiagnosticReport : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "DiagnosticReport";
  /// <summary>
  /// Note: Usually there is one test request for each result, however in some circumstances multiple test requests may be represented using a single test result resource. Note that there are also cases where one request leads to multiple reports.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Multiple categories are allowed using various categorization schemes.   The level of granularity is defined by the category concepts in the value set. More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in DiagnosticReport.code.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// A code or name that describes this diagnostic report.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report.
  /// </summary>
  [JsonPropertyName("conclusion")]
  public string? Conclusion { get; set; }
  [JsonPropertyName("_conclusion")]
  public Element _Conclusion { get; set; }
  /// <summary>
  /// One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report.
  /// </summary>
  [JsonPropertyName("conclusionCode")]
  public CodeableConcept?[] ConclusionCode { get; set; }
  [JsonPropertyName("_conclusionCode")]
  public Element[] _ConclusionCode { get; set; }
  /// <summary>
  /// If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
  /// </summary>
  [JsonPropertyName("effectiveDateTime")]
  public string? EffectiveDateTime { get; set; }
  [JsonPropertyName("_effectiveDateTime")]
  public Element _EffectiveDateTime { get; set; }
  /// <summary>
  /// If the diagnostic procedure was performed on the patient, this is the time it was performed. If there are specimens, the diagnostically relevant time can be derived from the specimen collection times, but the specimen information is not always available, and the exact relationship between the specimens and the diagnostically relevant time is not always automatic.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter  but still be tied to the context of the encounter  (e.g. pre-admission laboratory tests).
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Usually assigned by the Information System of the diagnostic service provider (filler id).
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// ImagingStudy and the image element are somewhat overlapping - typically, the list of image references in the image element will also be found in one of the imaging study resources. However, each caters to different types of displays for different types of purposes. Neither, either, or both may be provided.
  /// </summary>
  [JsonPropertyName("imagingStudy")]
  public Reference?[] ImagingStudy { get; set; }
  [JsonPropertyName("_imagingStudy")]
  public Element[] _ImagingStudy { get; set; }
  /// <summary>
  /// May be different from the update time of the resource itself, because that is the status of the record (potentially a secondary copy), not the actual release time of the report.
  /// </summary>
  [JsonPropertyName("issued")]
  public string? Issued { get; set; }
  [JsonPropertyName("_issued")]
  public Element _Issued { get; set; }
  /// <summary>
  /// A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).
  /// </summary>
  [JsonPropertyName("media")]
  public DiagnosticReportMedia?[] Media { get; set; }
  [JsonPropertyName("_media")]
  public Element[] _Media { get; set; }
  /// <summary>
  /// This is not necessarily the source of the atomic data items or the entity that interpreted the results. It is the entity that takes responsibility for the clinical report.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// "application/pdf" is recommended as the most reliable and interoperable in this context.
  /// </summary>
  [JsonPropertyName("presentedForm")]
  public Attachment?[] PresentedForm { get; set; }
  [JsonPropertyName("_presentedForm")]
  public Element[] _PresentedForm { get; set; }
  /// <summary>
  /// Observations can contain observations.
  /// </summary>
  [JsonPropertyName("result")]
  public Reference?[] Result { get; set; }
  [JsonPropertyName("_result")]
  public Element[] _Result { get; set; }
  /// <summary>
  /// Might not be the same entity that takes responsibility for the clinical report.
  /// </summary>
  [JsonPropertyName("resultsInterpreter")]
  public Reference?[] ResultsInterpreter { get; set; }
  [JsonPropertyName("_resultsInterpreter")]
  public Element[] _ResultsInterpreter { get; set; }
  /// <summary>
  /// If the specimen is sufficiently specified with a code in the test result name, then this additional data may be redundant. If there are multiple specimens, these may be represented per observation or group.
  /// </summary>
  [JsonPropertyName("specimen")]
  public Reference?[] Specimen { get; set; }
  [JsonPropertyName("_specimen")]
  public Element[] _Specimen { get; set; }
  /// <summary>
  /// The status of the diagnostic report.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the DiagnosticReport.status field
/// </summary>
public sealed class DiagnosticReportStatusCodes {
  public const string REGISTERED = "registered";
  public const string PARTIAL = "partial";
  public const string PRELIMINARY = "preliminary";
  public const string FINAL = "final";
}
/// <summary>
/// May be identifiers or resources that caused the DocumentManifest to be created.
/// </summary>
public class DocumentManifestRelated : BackboneElement {
  /// <summary>
  /// If both identifier and ref elements are present they shall refer to the same thing.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// If both identifier and ref elements are present they shall refer to the same thing.
  /// </summary>
  [JsonPropertyName("ref")]
  public Reference? Ref { get; set; }
  [JsonPropertyName("_ref")]
  public Element _Ref { get; set; }
}
public class DocumentManifest : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "DocumentManifest";
  /// <summary>
  /// Not necessarily who did the actual data entry (i.e. typist) or who was the source (informant).
  /// </summary>
  [JsonPropertyName("author")]
  public Reference?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// When used for XDS the intended focus of the DocumentManifest is for the reference to target to be a set of DocumentReference Resources. The reference is to "Any" to support EN 13606 usage, where an extract is DocumentManifest that references  List and Composition resources.
  /// </summary>
  [JsonPropertyName("content")]
  public Reference[] Content { get; set; }
  [JsonPropertyName("_content")]
  public Element[] _Content { get; set; }
  /// <summary>
  /// Creation time is used for tracking, organizing versions and searching. This is the creation time of the document set, not the documents on which it is based.
  /// </summary>
  [JsonPropertyName("created")]
  public string? Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// What the document is about, rather than a terse summary of the document. It is commonly the case that records do not have a title and are collectively referred to by the display name of Record code (e.g. a "consultation" or "progress note").
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Other identifiers associated with the document manifest, including version independent  identifiers.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.
  /// </summary>
  [JsonPropertyName("masterIdentifier")]
  public Identifier? MasterIdentifier { get; set; }
  [JsonPropertyName("_masterIdentifier")]
  public Element _MasterIdentifier { get; set; }
  /// <summary>
  /// How the recipient receives the document set or is notified of it is up to the implementation. This element is just a statement of intent. If the recipient is a person, and it is not known whether the person is a patient or a practitioner, RelatedPerson would be the default choice.
  /// </summary>
  [JsonPropertyName("recipient")]
  public Reference?[] Recipient { get; set; }
  [JsonPropertyName("_recipient")]
  public Element[] _Recipient { get; set; }
  /// <summary>
  /// May be identifiers or resources that caused the DocumentManifest to be created.
  /// </summary>
  [JsonPropertyName("related")]
  public DocumentManifestRelated?[] Related { get; set; }
  [JsonPropertyName("_related")]
  public Element[] _Related { get; set; }
  /// <summary>
  /// Identifies the source system, application, or software that produced the document manifest.
  /// </summary>
  [JsonPropertyName("source")]
  public string? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains the codes that mark the manifest as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the DocumentManifest.status field
/// </summary>
public sealed class DocumentManifestStatusCodes {
  public const string CURRENT = "current";
  public const string SUPERSEDED = "superseded";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
/// </summary>
public class DocumentReferenceRelatesTo : BackboneElement {
  /// <summary>
  /// If this document appends another document, then the document cannot be fully understood without also accessing the referenced document.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The target document of this relationship.
  /// </summary>
  [JsonPropertyName("target")]
  public Reference Target { get; set; }
  [JsonPropertyName("_target")]
  public Element _Target { get; set; }
}
/// <summary>
/// Code Values for the DocumentReference.relatesTo.code field
/// </summary>
public sealed class DocumentReferenceRelatesToCodeCodes {
  public const string REPLACES = "replaces";
  public const string TRANSFORMS = "transforms";
  public const string SIGNS = "signs";
  public const string APPENDS = "appends";
}
/// <summary>
/// Note that .relatesTo may also include references to other DocumentReference with a transforms relationship to represent the same document in multiple formats.
/// </summary>
public class DocumentReferenceContent : BackboneElement {
  /// <summary>
  /// The document or URL of the document along with critical metadata to prove content has integrity.
  /// </summary>
  [JsonPropertyName("attachment")]
  public Attachment Attachment { get; set; }
  [JsonPropertyName("_attachment")]
  public Element _Attachment { get; set; }
  /// <summary>
  /// Note that while IHE mostly issues URNs for format types, not all documents can be identified by a URI.
  /// </summary>
  [JsonPropertyName("format")]
  public Coding? Format { get; set; }
  [JsonPropertyName("_format")]
  public Element _Format { get; set; }
}
/// <summary>
/// These values are primarily added to help with searching for interesting/relevant documents.
/// </summary>
public class DocumentReferenceContext : BackboneElement {
  /// <summary>
  /// A procedure that is fulfilled in whole or in part by the creation of this media.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Describes the clinical encounter or type of care that the document content is associated with.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference?[] Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element[] _Encounter { get; set; }
  /// <summary>
  /// An event can further specialize the act inherent in the type, such as  where it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or more event codes are included, they shall not conflict with the values inherent in the class or type elements as such a conflict would create an ambiguous situation.
  /// </summary>
  [JsonPropertyName("event")]
  public CodeableConcept?[] Event { get; set; }
  [JsonPropertyName("_event")]
  public Element[] _Event { get; set; }
  /// <summary>
  /// The kind of facility where the patient was seen.
  /// </summary>
  [JsonPropertyName("facilityType")]
  public CodeableConcept? FacilityType { get; set; }
  [JsonPropertyName("_facilityType")]
  public Element _FacilityType { get; set; }
  /// <summary>
  /// The time period over which the service that is described by the document was provided.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// This element should be based on a coarse classification system for the class of specialty practice. Recommend the use of the classification system for Practice Setting, such as that described by the Subject Matter Domain in LOINC.
  /// </summary>
  [JsonPropertyName("practiceSetting")]
  public CodeableConcept? PracticeSetting { get; set; }
  [JsonPropertyName("_practiceSetting")]
  public Element _PracticeSetting { get; set; }
  /// <summary>
  /// May be identifiers or resources that caused the DocumentReference or referenced Document to be created.
  /// </summary>
  [JsonPropertyName("related")]
  public Reference?[] Related { get; set; }
  [JsonPropertyName("_related")]
  public Element[] _Related { get; set; }
  /// <summary>
  /// The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
  /// </summary>
  [JsonPropertyName("sourcePatientInfo")]
  public Reference? SourcePatientInfo { get; set; }
  [JsonPropertyName("_sourcePatientInfo")]
  public Element _SourcePatientInfo { get; set; }
}
public class DocumentReference : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "DocumentReference";
  /// <summary>
  /// Represents a participant within the author institution who has legally authenticated or attested the document. Legal authentication implies that a document has been signed manually or electronically by the legal Authenticator.
  /// </summary>
  [JsonPropertyName("authenticator")]
  public Reference? Authenticator { get; set; }
  [JsonPropertyName("_authenticator")]
  public Element _Authenticator { get; set; }
  /// <summary>
  /// Not necessarily who did the actual data entry (i.e. typist) or who was the source (informant).
  /// </summary>
  [JsonPropertyName("author")]
  public Reference?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// Key metadata element describing the the category or classification of the document. This is a broader perspective that groups similar documents based on how they would be used. This is a primary key used in searching.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// Note that .relatesTo may also include references to other DocumentReference with a transforms relationship to represent the same document in multiple formats.
  /// </summary>
  [JsonPropertyName("content")]
  public DocumentReferenceContent[] Content { get; set; }
  [JsonPropertyName("_content")]
  public Element[] _Content { get; set; }
  /// <summary>
  /// These values are primarily added to help with searching for interesting/relevant documents.
  /// </summary>
  [JsonPropertyName("context")]
  public DocumentReferenceContext? Context { get; set; }
  [JsonPropertyName("_context")]
  public Element _Context { get; set; }
  /// <summary>
  /// Identifies the logical organization (software system, vendor, or department) to go to find the current version, where to report issues, etc. This is different from the physical location (URL, disk drive, or server) of the document, which is the technical location of the document, which host may be delegated to the management of some other organization.
  /// </summary>
  [JsonPropertyName("custodian")]
  public Reference? Custodian { get; set; }
  [JsonPropertyName("_custodian")]
  public Element _Custodian { get; set; }
  /// <summary>
  /// Referencing/indexing time is used for tracking, organizing versions and searching.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// What the document is about,  a terse summary of the document.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The document that is pointed to might be in various lifecycle states.
  /// </summary>
  [JsonPropertyName("docStatus")]
  public string? DocStatus { get; set; }
  [JsonPropertyName("_docStatus")]
  public Element _DocStatus { get; set; }
  /// <summary>
  /// Other identifiers associated with the document, including version independent identifiers.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// CDA Document Id extension and root.
  /// </summary>
  [JsonPropertyName("masterIdentifier")]
  public Identifier? MasterIdentifier { get; set; }
  [JsonPropertyName("_masterIdentifier")]
  public Element _MasterIdentifier { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because documents that append to other documents are incomplete on their own.
  /// </summary>
  [JsonPropertyName("relatesTo")]
  public DocumentReferenceRelatesTo?[] RelatesTo { get; set; }
  [JsonPropertyName("_relatesTo")]
  public Element[] _RelatesTo { get; set; }
  /// <summary>
  /// The confidentiality codes can carry multiple vocabulary items. HL7 has developed an understanding of security and privacy tags that might be desirable in a Document Sharing environment, called HL7 Healthcare Privacy and Security Classification System (HCS). The following specification is recommended but not mandated, as the vocabulary bindings are an administrative domain responsibility. The use of this method is up to the policy domain such as the XDS Affinity Domain or other Trust Domain where all parties including sender and recipients are trusted to appropriately tag and enforce.   
  /// 
  /// In the HL7 Healthcare Privacy and Security Classification (HCS) there are code systems specific to Confidentiality, Sensitivity, Integrity, and Handling Caveats. Some values would come from a local vocabulary as they are related to workflow roles and special projects.
  /// </summary>
  [JsonPropertyName("securityLabel")]
  public CodeableConcept?[] SecurityLabel { get; set; }
  [JsonPropertyName("_securityLabel")]
  public Element[] _SecurityLabel { get; set; }
  /// <summary>
  /// This is the status of the DocumentReference object, which might be independent from the docStatus element.
  /// 
  /// This element is labeled as a modifier because the status contains the codes that mark the document or reference as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Key metadata element describing the document that describes he exact type of document. Helps humans to assess whether the document is of interest when viewing a list of documents.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the DocumentReference.docStatus field
/// </summary>
public sealed class DocumentReferenceDocStatusCodes {
  public const string PRELIMINARY = "preliminary";
  public const string FINAL = "final";
  public const string AMENDED = "amended";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Code Values for the DocumentReference.status field
/// </summary>
public sealed class DocumentReferenceStatusCodes {
  public const string CURRENT = "current";
  public const string SUPERSEDED = "superseded";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
public class DomainResource : Resource {
  /// <summary>
  /// This should never be done when the content can be identified properly, as once identification is lost, it is extremely difficult (and context dependent) to restore it again. Contained resources may have profiles and tags In their meta elements, but SHALL NOT have security labels.
  /// </summary>
  [JsonPropertyName("contained")]
  public Resource?[] Contained { get; set; }
  [JsonPropertyName("_contained")]
  public Element[] _Contained { get; set; }
  /// <summary>
  /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
  /// </summary>
  [JsonPropertyName("extension")]
  public Extension?[] Extension { get; set; }
  [JsonPropertyName("_extension")]
  public Element[] _Extension { get; set; }
  /// <summary>
  /// There can be no stigma associated with the use of extensions by any application, project, or standard - regardless of the institution or jurisdiction that uses or defines the extensions.  The use of extensions is what allows the FHIR specification to retain a core level of simplicity for everyone.
  /// </summary>
  [JsonPropertyName("modifierExtension")]
  public Extension?[] ModifierExtension { get; set; }
  [JsonPropertyName("_modifierExtension")]
  public Element[] _ModifierExtension { get; set; }
  /// <summary>
  /// Contained resources do not have narrative. Resources that are not contained SHOULD have a narrative. In some cases, a resource may only have text with little or no additional discrete data (as long as all minOccurs=1 elements are satisfied).  This may be necessary for data from legacy systems where information is captured as a "text blob" or where text is additionally entered raw or narrated and encoded information is added later.
  /// </summary>
  [JsonPropertyName("text")]
  public Narrative? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
}
/// <summary>
/// The current status is always found in the current version of the resource, not the status history.
/// </summary>
public class EncounterStatusHistory : BackboneElement {
  /// <summary>
  /// The time that the episode was in the specified status.
  /// </summary>
  [JsonPropertyName("period")]
  public Period Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// planned | in-progress | onhold | completed | cancelled | entered-in-error | unknown.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the Encounter.statusHistory.status field
/// </summary>
public sealed class EncounterStatusHistoryStatusCodes {
  public const string PLANNED = "planned";
  public const string IN_PROGRESS = "in-progress";
  public const string ONHOLD = "onhold";
  public const string COMPLETED = "completed";
  public const string CANCELLED = "cancelled";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
/// </summary>
public class EncounterClassHistory : BackboneElement {
  /// <summary>
  /// inpatient | outpatient | ambulatory | emergency +.
  /// </summary>
  [JsonPropertyName("class")]
  public Coding Class { get; set; }
  [JsonPropertyName("_class")]
  public Element _Class { get; set; }
  /// <summary>
  /// The time that the episode was in the specified class.
  /// </summary>
  [JsonPropertyName("period")]
  public Period Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
}
/// <summary>
/// The list of people responsible for providing the service.
/// </summary>
public class EncounterParticipant : BackboneElement {
  /// <summary>
  /// Persons involved in the encounter other than the patient.
  /// </summary>
  [JsonPropertyName("individual")]
  public Reference? Individual { get; set; }
  [JsonPropertyName("_individual")]
  public Element _Individual { get; set; }
  /// <summary>
  /// The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// The participant type indicates how an individual participates in an encounter. It includes non-practitioner participants, and for practitioners this is to describe the action type in the context of this encounter (e.g. Admitting Dr, Attending Dr, Translator, Consulting Dr). This is different to the practitioner roles which are functional roles, derived from terms of employment, education, licensing, etc.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// The list of diagnosis relevant to this encounter.
/// </summary>
public class EncounterDiagnosis : BackboneElement {
  /// <summary>
  /// For systems that need to know which was the primary diagnosis, these will be marked with the standard extension primaryDiagnosis (which is a sequence value rather than a flag, 1 = primary diagnosis).
  /// </summary>
  [JsonPropertyName("condition")]
  public Reference Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element _Condition { get; set; }
  /// <summary>
  /// Ranking of the diagnosis (for each role type).
  /// </summary>
  [JsonPropertyName("rank")]
  public uint? Rank { get; set; }
  [JsonPropertyName("_rank")]
  public Element _Rank { get; set; }
  /// <summary>
  /// Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
  /// </summary>
  [JsonPropertyName("use")]
  public CodeableConcept? Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
/// </summary>
public class EncounterHospitalization : BackboneElement {
  /// <summary>
  /// From where patient was admitted (physician referral, transfer).
  /// </summary>
  [JsonPropertyName("admitSource")]
  public CodeableConcept? AdmitSource { get; set; }
  [JsonPropertyName("_admitSource")]
  public Element _AdmitSource { get; set; }
  /// <summary>
  /// Location/organization to which the patient is discharged.
  /// </summary>
  [JsonPropertyName("destination")]
  public Reference? Destination { get; set; }
  [JsonPropertyName("_destination")]
  public Element _Destination { get; set; }
  /// <summary>
  /// For example, a patient may request both a dairy-free and nut-free diet preference (not mutually exclusive).
  /// </summary>
  [JsonPropertyName("dietPreference")]
  public CodeableConcept?[] DietPreference { get; set; }
  [JsonPropertyName("_dietPreference")]
  public Element[] _DietPreference { get; set; }
  /// <summary>
  /// Category or kind of location after discharge.
  /// </summary>
  [JsonPropertyName("dischargeDisposition")]
  public CodeableConcept? DischargeDisposition { get; set; }
  [JsonPropertyName("_dischargeDisposition")]
  public Element _DischargeDisposition { get; set; }
  /// <summary>
  /// The location/organization from which the patient came before admission.
  /// </summary>
  [JsonPropertyName("origin")]
  public Reference? Origin { get; set; }
  [JsonPropertyName("_origin")]
  public Element _Origin { get; set; }
  /// <summary>
  /// Pre-admission identifier.
  /// </summary>
  [JsonPropertyName("preAdmissionIdentifier")]
  public Identifier? PreAdmissionIdentifier { get; set; }
  [JsonPropertyName("_preAdmissionIdentifier")]
  public Element _PreAdmissionIdentifier { get; set; }
  /// <summary>
  /// Whether this hospitalization is a readmission and why if known.
  /// </summary>
  [JsonPropertyName("reAdmission")]
  public CodeableConcept? ReAdmission { get; set; }
  [JsonPropertyName("_reAdmission")]
  public Element _ReAdmission { get; set; }
  /// <summary>
  /// Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
  /// </summary>
  [JsonPropertyName("specialArrangement")]
  public CodeableConcept?[] SpecialArrangement { get; set; }
  [JsonPropertyName("_specialArrangement")]
  public Element[] _SpecialArrangement { get; set; }
  /// <summary>
  /// Special courtesies (VIP, board member).
  /// </summary>
  [JsonPropertyName("specialCourtesy")]
  public CodeableConcept?[] SpecialCourtesy { get; set; }
  [JsonPropertyName("_specialCourtesy")]
  public Element[] _SpecialCourtesy { get; set; }
}
/// <summary>
/// Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
/// </summary>
public class EncounterLocation : BackboneElement {
  /// <summary>
  /// The location where the encounter takes place.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// Time period during which the patient was present at the location.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// This information is de-normalized from the Location resource to support the easier understanding of the encounter resource and processing in messaging or query.
  /// 
  /// There may be many levels in the hierachy, and this may only pic specific levels that are required for a specific usage scenario.
  /// </summary>
  [JsonPropertyName("physicalType")]
  public CodeableConcept? PhysicalType { get; set; }
  [JsonPropertyName("_physicalType")]
  public Element _PhysicalType { get; set; }
  /// <summary>
  /// When the patient is no longer active at a location, then the period end date is entered, and the status may be changed to completed.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the Encounter.location.status field
/// </summary>
public sealed class EncounterLocationStatusCodes {
  public const string PLANNED = "planned";
  public const string ACTIVE = "active";
  public const string RESERVED = "reserved";
  public const string COMPLETED = "completed";
}
public class Encounter : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Encounter";
  /// <summary>
  /// The billing system may choose to allocate billable items associated with the Encounter to different referenced Accounts based on internal business rules.
  /// </summary>
  [JsonPropertyName("account")]
  public Reference?[] Account { get; set; }
  [JsonPropertyName("_account")]
  public Element[] _Account { get; set; }
  /// <summary>
  /// The appointment that scheduled this encounter.
  /// </summary>
  [JsonPropertyName("appointment")]
  public Reference?[] Appointment { get; set; }
  [JsonPropertyName("_appointment")]
  public Element[] _Appointment { get; set; }
  /// <summary>
  /// The request this encounter satisfies (e.g. incoming referral or procedure request).
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
  /// </summary>
  [JsonPropertyName("class")]
  public Coding Class { get; set; }
  [JsonPropertyName("_class")]
  public Element _Class { get; set; }
  /// <summary>
  /// The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
  /// </summary>
  [JsonPropertyName("classHistory")]
  public EncounterClassHistory?[] ClassHistory { get; set; }
  [JsonPropertyName("_classHistory")]
  public Element[] _ClassHistory { get; set; }
  /// <summary>
  /// The list of diagnosis relevant to this encounter.
  /// </summary>
  [JsonPropertyName("diagnosis")]
  public EncounterDiagnosis?[] Diagnosis { get; set; }
  [JsonPropertyName("_diagnosis")]
  public Element[] _Diagnosis { get; set; }
  /// <summary>
  /// Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
  /// </summary>
  [JsonPropertyName("episodeOfCare")]
  public Reference?[] EpisodeOfCare { get; set; }
  [JsonPropertyName("_episodeOfCare")]
  public Element[] _EpisodeOfCare { get; set; }
  /// <summary>
  /// An Encounter may cover more than just the inpatient stay. Contexts such as outpatients, community clinics, and aged care facilities are also included.The duration recorded in the period of this encounter covers the entire scope of this hospitalization record.
  /// </summary>
  [JsonPropertyName("hospitalization")]
  public EncounterHospitalization? Hospitalization { get; set; }
  [JsonPropertyName("_hospitalization")]
  public Element _Hospitalization { get; set; }
  /// <summary>
  /// Identifier(s) by which this encounter is known.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// May differ from the time the Encounter.period lasted because of leave of absence.
  /// </summary>
  [JsonPropertyName("length")]
  public Duration? Length { get; set; }
  [JsonPropertyName("_length")]
  public Element _Length { get; set; }
  /// <summary>
  /// Virtual encounters can be recorded in the Encounter by specifying a location reference to a location of type "kind" such as "client's home" and an encounter.class = "virtual".
  /// </summary>
  [JsonPropertyName("location")]
  public EncounterLocation?[] Location { get; set; }
  [JsonPropertyName("_location")]
  public Element[] _Location { get; set; }
  /// <summary>
  /// The list of people responsible for providing the service.
  /// </summary>
  [JsonPropertyName("participant")]
  public EncounterParticipant?[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// This is also used for associating a child's encounter back to the mother's encounter.Refer to the Notes section in the Patient resource for further details.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference? PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element _PartOf { get; set; }
  /// <summary>
  /// If not (yet) known, the end of the Period may be omitted.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Indicates the urgency of the encounter.
  /// </summary>
  [JsonPropertyName("priority")]
  public CodeableConcept? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// For systems that need to know which was the primary diagnosis, these will be marked with the standard extension primaryDiagnosis (which is a sequence value rather than a flag, 1 = primary diagnosis).
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
  /// </summary>
  [JsonPropertyName("serviceProvider")]
  public Reference? ServiceProvider { get; set; }
  [JsonPropertyName("_serviceProvider")]
  public Element _ServiceProvider { get; set; }
  /// <summary>
  /// Broad categorization of the service that is to be provided (e.g. cardiology).
  /// </summary>
  [JsonPropertyName("serviceType")]
  public CodeableConcept? ServiceType { get; set; }
  [JsonPropertyName("_serviceType")]
  public Element _ServiceType { get; set; }
  /// <summary>
  /// Note that internal business rules will determine the appropriate transitions that may occur between statuses (and also classes).
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The current status is always found in the current version of the resource, not the status history.
  /// </summary>
  [JsonPropertyName("statusHistory")]
  public EncounterStatusHistory?[] StatusHistory { get; set; }
  [JsonPropertyName("_statusHistory")]
  public Element[] _StatusHistory { get; set; }
  /// <summary>
  /// While the encounter is always about the patient, the patient might not actually be known in all contexts of use, and there may be a group of patients that could be anonymous (such as in a group therapy for Alcoholics Anonymous - where the recording of the encounter could be used for billing on the number of people/staff and not important to the context of the specific patients) or alternately in veterinary care a herd of sheep receiving treatment (where the animals are not individually tracked).
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.
  /// </summary>
  [JsonPropertyName("subjectStatus")]
  public CodeableConcept? SubjectStatus { get; set; }
  [JsonPropertyName("_subjectStatus")]
  public Element _SubjectStatus { get; set; }
  /// <summary>
  /// Since there are many ways to further classify encounters, this element is 0..*.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Code Values for the Encounter.status field
/// </summary>
public sealed class EncounterStatusCodes {
  public const string PLANNED = "planned";
  public const string IN_PROGRESS = "in-progress";
  public const string ONHOLD = "onhold";
  public const string COMPLETED = "completed";
  public const string CANCELLED = "cancelled";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
public class Endpoint : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Endpoint";
  /// <summary>
  /// For rest-hook, and websocket, the end-point must be an http: or https: URL; for email, a mailto: url, for sms, a tel: url, and for message the endpoint can be in any form of url the server understands (usually, http: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs)
  /// 
  /// This address will be to the service base, without any parameters, or sub-services or resources tacked on.
  /// 
  /// E.g. for a WADO-RS endpoint, the url should be "https://pacs.hospital.org/wado-rs"
  /// 
  /// and not "https://pacs.hospital.org/wado-rs/studies/1.2.250.1.59.40211.12345678.678910/series/1.2.250.1.59.40211.789001276.14556172.67789/instances/...".
  /// </summary>
  [JsonPropertyName("address")]
  public string Address { get; set; }
  [JsonPropertyName("_address")]
  public Element _Address { get; set; }
  /// <summary>
  /// For additional connectivity details for the protocol, extensions will be used at this point, as in the XDS example.
  /// </summary>
  [JsonPropertyName("connectionType")]
  public Coding ConnectionType { get; set; }
  [JsonPropertyName("_connectionType")]
  public Element _ConnectionType { get; set; }
  /// <summary>
  /// Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactPoint?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Exactly what these mean depends on the channel type. The can convey additional information to the recipient and/or meet security requirements.
  /// </summary>
  [JsonPropertyName("header")]
  public string?[] Header { get; set; }
  [JsonPropertyName("_header")]
  public Element[] _Header { get; set; }
  /// <summary>
  /// Identifier for the organization that is used to identify the endpoint across multiple disparate systems.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This property is not typically used when searching for Endpoint resources for usage. The typical usage is via the reference from an applicable Organization/Location/Practitioner resource, which is where the context is provided. Multiple Locations may reference a single endpoint, and don't have to be within the same organization resource, but most likely within the same organizational hierarchy.
  /// </summary>
  [JsonPropertyName("managingOrganization")]
  public Reference? ManagingOrganization { get; set; }
  [JsonPropertyName("_managingOrganization")]
  public Element _ManagingOrganization { get; set; }
  /// <summary>
  /// A friendly name that this endpoint can be referred to with.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Sending the payload has obvious security consequences. The server is responsible for ensuring that the content is appropriately secured.
  /// </summary>
  [JsonPropertyName("payloadMimeType")]
  public string?[] PayloadMimeType { get; set; }
  [JsonPropertyName("_payloadMimeType")]
  public Element[] _PayloadMimeType { get; set; }
  /// <summary>
  /// The payloadFormat describes the serialization format of the data, where the payloadType indicates the specific document/schema that is being transferred; e.g. DischargeSummary or CarePlan.
  /// </summary>
  [JsonPropertyName("payloadType")]
  public CodeableConcept[] PayloadType { get; set; }
  [JsonPropertyName("_payloadType")]
  public Element[] _PayloadType { get; set; }
  /// <summary>
  /// The interval during which the endpoint is expected to be operational.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the endpoint as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the Endpoint.payloadMimeType field
/// </summary>
public sealed class EndpointPayloadMimeTypeCodes {
  public const string MIMETYPE = "Mimetype";
}
/// <summary>
/// Code Values for the Endpoint.status field
/// </summary>
public sealed class EndpointStatusCodes {
  public const string ACTIVE = "active";
  public const string SUSPENDED = "suspended";
  public const string ERROR = "error";
  public const string OFF = "off";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string TEST = "test";
}
public class EnrollmentRequest : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "EnrollmentRequest";
  /// <summary>
  /// Patient Resource.
  /// </summary>
  [JsonPropertyName("candidate")]
  public Reference? Candidate { get; set; }
  [JsonPropertyName("_candidate")]
  public Element _Candidate { get; set; }
  /// <summary>
  /// Reference to the program or plan identification, underwriter or payor.
  /// </summary>
  [JsonPropertyName("coverage")]
  public Reference? Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element _Coverage { get; set; }
  /// <summary>
  /// The date when this resource was created.
  /// </summary>
  [JsonPropertyName("created")]
  public string? Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// The Response business identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The Insurer who is target  of the request.
  /// </summary>
  [JsonPropertyName("insurer")]
  public Reference? Insurer { get; set; }
  [JsonPropertyName("_insurer")]
  public Element _Insurer { get; set; }
  /// <summary>
  /// The practitioner who is responsible for the services rendered to the patient.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference? Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the request as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the EnrollmentRequest.status field
/// </summary>
public sealed class EnrollmentRequestStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
public class EnrollmentResponse : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "EnrollmentResponse";
  /// <summary>
  /// The date when the enclosed suite of services were performed or completed.
  /// </summary>
  [JsonPropertyName("created")]
  public string? Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// A description of the status of the adjudication.
  /// </summary>
  [JsonPropertyName("disposition")]
  public string? Disposition { get; set; }
  [JsonPropertyName("_disposition")]
  public Element _Disposition { get; set; }
  /// <summary>
  /// The Response business identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The Insurer who produced this adjudicated response.
  /// </summary>
  [JsonPropertyName("organization")]
  public Reference? Organization { get; set; }
  [JsonPropertyName("_organization")]
  public Element _Organization { get; set; }
  /// <summary>
  /// Processing status: error, complete.
  /// </summary>
  [JsonPropertyName("outcome")]
  public string? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// Original request resource reference.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference? Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// The practitioner who is responsible for the services rendered to the patient.
  /// </summary>
  [JsonPropertyName("requestProvider")]
  public Reference? RequestProvider { get; set; }
  [JsonPropertyName("_requestProvider")]
  public Element _RequestProvider { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the response as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the EnrollmentResponse.outcome field
/// </summary>
public sealed class EnrollmentResponseOutcomeCodes {
  public const string QUEUED = "queued";
  public const string COMPLETE = "complete";
  public const string ERROR = "error";
  public const string PARTIAL = "partial";
}
/// <summary>
/// Code Values for the EnrollmentResponse.status field
/// </summary>
public sealed class EnrollmentResponseStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
/// </summary>
public class EpisodeOfCareStatusHistory : BackboneElement {
  /// <summary>
  /// The period during this EpisodeOfCare that the specific status applied.
  /// </summary>
  [JsonPropertyName("period")]
  public Period Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// planned | waitlist | active | onhold | finished | cancelled.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the EpisodeOfCare.statusHistory.status field
/// </summary>
public sealed class EpisodeOfCareStatusHistoryStatusCodes {
  public const string PLANNED = "planned";
  public const string WAITLIST = "waitlist";
  public const string ACTIVE = "active";
  public const string ONHOLD = "onhold";
  public const string FINISHED = "finished";
  public const string CANCELLED = "cancelled";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// The list of diagnosis relevant to this episode of care.
/// </summary>
public class EpisodeOfCareDiagnosis : BackboneElement {
  /// <summary>
  /// A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
  /// </summary>
  [JsonPropertyName("condition")]
  public Reference Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element _Condition { get; set; }
  /// <summary>
  /// Ranking of the diagnosis (for each role type).
  /// </summary>
  [JsonPropertyName("rank")]
  public uint? Rank { get; set; }
  [JsonPropertyName("_rank")]
  public Element _Rank { get; set; }
  /// <summary>
  /// Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
public class EpisodeOfCare : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "EpisodeOfCare";
  /// <summary>
  /// The billing system may choose to allocate billable items associated with the EpisodeOfCare to different referenced Accounts based on internal business rules.
  /// </summary>
  [JsonPropertyName("account")]
  public Reference?[] Account { get; set; }
  [JsonPropertyName("_account")]
  public Element[] _Account { get; set; }
  /// <summary>
  /// The practitioner that is the care manager/care coordinator for this patient.
  /// </summary>
  [JsonPropertyName("careManager")]
  public Reference? CareManager { get; set; }
  [JsonPropertyName("_careManager")]
  public Element _CareManager { get; set; }
  /// <summary>
  /// The list of diagnosis relevant to this episode of care.
  /// </summary>
  [JsonPropertyName("diagnosis")]
  public EpisodeOfCareDiagnosis?[] Diagnosis { get; set; }
  [JsonPropertyName("_diagnosis")]
  public Element[] _Diagnosis { get; set; }
  /// <summary>
  /// The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The organization that has assumed the specific responsibilities for the specified duration.
  /// </summary>
  [JsonPropertyName("managingOrganization")]
  public Reference? ManagingOrganization { get; set; }
  [JsonPropertyName("_managingOrganization")]
  public Element _ManagingOrganization { get; set; }
  /// <summary>
  /// The patient who is the focus of this episode of care.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// The interval during which the managing organization assumes the defined responsibility.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
  /// </summary>
  [JsonPropertyName("referralRequest")]
  public Reference?[] ReferralRequest { get; set; }
  [JsonPropertyName("_referralRequest")]
  public Element[] _ReferralRequest { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the episode as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
  /// </summary>
  [JsonPropertyName("statusHistory")]
  public EpisodeOfCareStatusHistory?[] StatusHistory { get; set; }
  [JsonPropertyName("_statusHistory")]
  public Element[] _StatusHistory { get; set; }
  /// <summary>
  /// The list of practitioners that may be facilitating this episode of care for specific purposes.
  /// </summary>
  [JsonPropertyName("team")]
  public Reference?[] Team { get; set; }
  [JsonPropertyName("_team")]
  public Element[] _Team { get; set; }
  /// <summary>
  /// The type can be very important in processing as this could be used in determining if the EpisodeOfCare is relevant to specific government reporting, or other types of classifications.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Code Values for the EpisodeOfCare.status field
/// </summary>
public sealed class EpisodeOfCareStatusCodes {
  public const string PLANNED = "planned";
  public const string WAITLIST = "waitlist";
  public const string ACTIVE = "active";
  public const string ONHOLD = "onhold";
  public const string FINISHED = "finished";
  public const string CANCELLED = "cancelled";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
public class EventDefinition : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "EventDefinition";
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// An individiual or organization primarily involved in the creation and maintenance of the content.
  /// </summary>
  [JsonPropertyName("author")]
  public ContactDetail?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the event definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the event definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the event definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the event definition is presumed to be the predominant language in the place the event definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for internal coherence of the content.
  /// </summary>
  [JsonPropertyName("editor")]
  public ContactDetail?[] Editor { get; set; }
  [JsonPropertyName("_editor")]
  public Element[] _Editor { get; set; }
  /// <summary>
  /// The effective period for a event definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// An individual or organization responsible for officially endorsing the content for use in some setting.
  /// </summary>
  [JsonPropertyName("endorser")]
  public ContactDetail?[] Endorser { get; set; }
  [JsonPropertyName("_endorser")]
  public Element[] _Endorser { get; set; }
  /// <summary>
  /// Allows filtering of event definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this event definition outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the event definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the event definition is the organization or individual primarily responsible for the maintenance and upkeep of the event definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the event definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the event definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this event definition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Each related resource is either an attachment, or a reference to another resource, but not both.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for review of some aspect of the content.
  /// </summary>
  [JsonPropertyName("reviewer")]
  public ContactDetail?[] Reviewer { get; set; }
  [JsonPropertyName("_reviewer")]
  public Element[] _Reviewer { get; set; }
  /// <summary>
  /// Allows filtering of event definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A code or group definition that describes the intended subject of the event definition.
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// A code or group definition that describes the intended subject of the event definition.
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// An explanatory or alternate title for the event definition giving additional information about its content.
  /// </summary>
  [JsonPropertyName("subtitle")]
  public string? Subtitle { get; set; }
  [JsonPropertyName("_subtitle")]
  public Element _Subtitle { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.
  /// </summary>
  [JsonPropertyName("topic")]
  public CodeableConcept?[] Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element[] _Topic { get; set; }
  /// <summary>
  /// The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met.
  /// </summary>
  [JsonPropertyName("trigger")]
  public TriggerDefinition[] Trigger { get; set; }
  [JsonPropertyName("_trigger")]
  public Element[] _Trigger { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// A detailed description of how the event definition is used from a clinical perspective.
  /// </summary>
  [JsonPropertyName("usage")]
  public string? Usage { get; set; }
  [JsonPropertyName("_usage")]
  public Element _Usage { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different event definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the event definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the EventDefinition.status field
/// </summary>
public sealed class EventDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Evidence variable.
/// </summary>
public class EvidenceVariableDefinition : BackboneElement {
  /// <summary>
  /// Description of the variable.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Indication of quality of match between intended variable to actual variable.
  /// </summary>
  [JsonPropertyName("directnessMatch")]
  public CodeableConcept? DirectnessMatch { get; set; }
  [JsonPropertyName("_directnessMatch")]
  public Element _DirectnessMatch { get; set; }
  /// <summary>
  /// Definition of the intended variable related to the Evidence.
  /// </summary>
  [JsonPropertyName("intended")]
  public Reference? Intended { get; set; }
  [JsonPropertyName("_intended")]
  public Element _Intended { get; set; }
  /// <summary>
  /// Footnotes and/or explanatory notes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Definition of the actual variable related to the statistic(s).
  /// </summary>
  [JsonPropertyName("observed")]
  public Reference? Observed { get; set; }
  [JsonPropertyName("_observed")]
  public Element _Observed { get; set; }
  /// <summary>
  /// population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.
  /// </summary>
  [JsonPropertyName("variableRole")]
  public CodeableConcept VariableRole { get; set; }
  [JsonPropertyName("_variableRole")]
  public Element _VariableRole { get; set; }
}
/// <summary>
/// Subcomponent of certainty.
/// </summary>
public class EvidenceCertaintyCertaintySubcomponent : BackboneElement {
  /// <summary>
  /// Textual description of certainty subcomponent.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Footnotes and/or explanatory notes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation? Note { get; set; }
  [JsonPropertyName("_note")]
  public Element _Note { get; set; }
  /// <summary>
  /// Rating of certainty subcomponent.
  /// </summary>
  [JsonPropertyName("rating")]
  public CodeableConcept?[] Rating { get; set; }
  [JsonPropertyName("_rating")]
  public Element[] _Rating { get; set; }
  /// <summary>
  /// Type of certainty being rated.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Level of certainty.
/// </summary>
public class EvidenceCertainty : BackboneElement {
  /// <summary>
  /// Subcomponent of certainty.
  /// </summary>
  [JsonPropertyName("certaintySubcomponent")]
  public EvidenceCertaintyCertaintySubcomponent?[] CertaintySubcomponent { get; set; }
  [JsonPropertyName("_certaintySubcomponent")]
  public Element[] _CertaintySubcomponent { get; set; }
  /// <summary>
  /// Textual description of certainty.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Footnotes and/or explanatory notes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation? Note { get; set; }
  [JsonPropertyName("_note")]
  public Element _Note { get; set; }
  /// <summary>
  /// Rating of certainty.
  /// </summary>
  [JsonPropertyName("rating")]
  public CodeableConcept?[] Rating { get; set; }
  [JsonPropertyName("_rating")]
  public Element[] _Rating { get; set; }
}
public class Evidence : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Evidence";
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// Declarative description of the Evidence.
  /// </summary>
  [JsonPropertyName("assertion")]
  public string? Assertion { get; set; }
  [JsonPropertyName("_assertion")]
  public Element _Assertion { get; set; }
  /// <summary>
  /// Level of certainty.
  /// </summary>
  [JsonPropertyName("certainty")]
  public EvidenceCertainty?[] Certainty { get; set; }
  [JsonPropertyName("_certainty")]
  public Element[] _Certainty { get; set; }
  /// <summary>
  /// Contact detail and role for contributor to summary.
  /// </summary>
  [JsonPropertyName("contributor")]
  public Contributor?[] Contributor { get; set; }
  [JsonPropertyName("_contributor")]
  public Element[] _Contributor { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the summary. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the evidence was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence is presumed to be the predominant language in the place the evidence was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Ordered distribution.
  /// </summary>
  [JsonPropertyName("distribution")]
  public OrderedDistribution?[] Distribution { get; set; }
  [JsonPropertyName("_distribution")]
  public Element[] _Distribution { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this summary outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// Footnotes and/or explanatory notes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Link or citation to artifact associated with the summary.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// The statistic value(s).
  /// </summary>
  [JsonPropertyName("statistic")]
  public Statistic?[] Statistic { get; set; }
  [JsonPropertyName("_statistic")]
  public Element[] _Statistic { get; set; }
  /// <summary>
  /// Allows filtering of summarys s that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The type of study that produced this summary.
  /// </summary>
  [JsonPropertyName("studyType")]
  public CodeableConcept? StudyType { get; set; }
  [JsonPropertyName("_studyType")]
  public Element _StudyType { get; set; }
  /// <summary>
  /// The particular type of synthesis if this is a synthesis summary.
  /// </summary>
  [JsonPropertyName("synthesisType")]
  public CodeableConcept? SynthesisType { get; set; }
  [JsonPropertyName("_synthesisType")]
  public Element _SynthesisType { get; set; }
  /// <summary>
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the meta.source element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// Evidence variable.
  /// </summary>
  [JsonPropertyName("variableDefinition")]
  public EvidenceVariableDefinition[] VariableDefinition { get; set; }
  [JsonPropertyName("_variableDefinition")]
  public Element[] _VariableDefinition { get; set; }
  /// <summary>
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author. Considerations for making this decision are found in Technical and Business Versions.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the Evidence.status field
/// </summary>
public sealed class EvidenceStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Characteristic.
/// </summary>
public class EvidenceFocusCharacteristic : BackboneElement {
  /// <summary>
  /// Characteristic code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Is used to express not the characteristic.
  /// </summary>
  [JsonPropertyName("exclude")]
  public bool? Exclude { get; set; }
  [JsonPropertyName("_exclude")]
  public Element _Exclude { get; set; }
  /// <summary>
  /// Timeframe for the characteristic.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Characteristic value.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
  /// <summary>
  /// Characteristic value.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// Characteristic value.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// Characteristic value.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Characteristic value.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
}
public class EvidenceFocus : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "EvidenceFocus";
  /// <summary>
  /// Characteristic.
  /// </summary>
  [JsonPropertyName("characteristic")]
  public EvidenceFocusCharacteristic?[] Characteristic { get; set; }
  [JsonPropertyName("_characteristic")]
  public Element[] _Characteristic { get; set; }
  /// <summary>
  /// Citation for this EvidenceFocus resource.
  /// </summary>
  [JsonPropertyName("citeAs")]
  public Reference? CiteAs { get; set; }
  [JsonPropertyName("_citeAs")]
  public Element _CiteAs { get; set; }
  /// <summary>
  /// A copyright statement relating to the evidence focus and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the evidence focus.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the evidence focus. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this summary outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Used for general notes and annotations not coded elsewhere.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Additional documentation.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// Allows filtering of summarys s that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author. Considerations for making this decision are found in Technical and Business Versions.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the EvidenceFocus.status field
/// </summary>
public sealed class EvidenceFocusStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Indicates duration, period, or point of observation from the participant's study entry.
/// </summary>
public class EvidenceVariableCharacteristicTimeFromStart : BackboneElement {
  /// <summary>
  /// A short, natural language description.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// A human-readable string to clarify or explain concepts about the resource.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Used to express the observation at a defined amount of time after the study start.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Used to express the observation within a period after the study start.
  /// </summary>
  [JsonPropertyName("range")]
  public Range? Range { get; set; }
  [JsonPropertyName("_range")]
  public Element _Range { get; set; }
}
/// <summary>
/// Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
/// </summary>
public class EvidenceVariableCharacteristic : BackboneElement {
  /// <summary>
  /// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
  /// </summary>
  [JsonPropertyName("definitionReference")]
  public Reference DefinitionReference { get; set; }
  [JsonPropertyName("_definitionReference")]
  public Element _DefinitionReference { get; set; }
  /// <summary>
  /// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
  /// </summary>
  [JsonPropertyName("definitionCanonical")]
  public string DefinitionCanonical { get; set; }
  [JsonPropertyName("_definitionCanonical")]
  public Element _DefinitionCanonical { get; set; }
  /// <summary>
  /// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
  /// </summary>
  [JsonPropertyName("definitionCodeableConcept")]
  public CodeableConcept DefinitionCodeableConcept { get; set; }
  [JsonPropertyName("_definitionCodeableConcept")]
  public Element _DefinitionCodeableConcept { get; set; }
  /// <summary>
  /// Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
  /// </summary>
  [JsonPropertyName("definitionExpression")]
  public Expression DefinitionExpression { get; set; }
  [JsonPropertyName("_definitionExpression")]
  public Element _DefinitionExpression { get; set; }
  /// <summary>
  /// A short, natural language description of the characteristic that could be used to communicate the criteria to an end-user.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Device used for determining characteristic.
  /// </summary>
  [JsonPropertyName("device")]
  public Reference? Device { get; set; }
  [JsonPropertyName("_device")]
  public Element _Device { get; set; }
  /// <summary>
  /// When true, members with this characteristic are excluded from the element.
  /// </summary>
  [JsonPropertyName("exclude")]
  public bool? Exclude { get; set; }
  [JsonPropertyName("_exclude")]
  public Element _Exclude { get; set; }
  /// <summary>
  /// Indicates how elements are aggregated within the study effective period.
  /// </summary>
  [JsonPropertyName("groupMeasure")]
  public string? GroupMeasure { get; set; }
  [JsonPropertyName("_groupMeasure")]
  public Element _GroupMeasure { get; set; }
  /// <summary>
  /// Method used for describing characteristic.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// Indicates duration, period, or point of observation from the participant's study entry.
  /// </summary>
  [JsonPropertyName("timeFromStart")]
  public EvidenceVariableCharacteristicTimeFromStart? TimeFromStart { get; set; }
  [JsonPropertyName("_timeFromStart")]
  public Element _TimeFromStart { get; set; }
}
/// <summary>
/// Code Values for the EvidenceVariable.characteristic.groupMeasure field
/// </summary>
public sealed class EvidenceVariableCharacteristicGroupMeasureCodes {
  public const string MEAN = "mean";
  public const string MEDIAN = "median";
  public const string MEAN_OF_MEAN = "mean-of-mean";
  public const string MEAN_OF_MEDIAN = "mean-of-median";
  public const string MEDIAN_OF_MEAN = "median-of-mean";
  public const string MEDIAN_OF_MEDIAN = "median-of-median";
}
/// <summary>
/// Need to be able to define and reuse the definition of individual elements of a research question.
/// </summary>
public class EvidenceVariable : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "EvidenceVariable";
  /// <summary>
  /// True if the actual variable measured, false if a conceptual representation of the intended variable.
  /// </summary>
  [JsonPropertyName("actual")]
  public bool? Actual { get; set; }
  [JsonPropertyName("_actual")]
  public Element _Actual { get; set; }
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// An individiual or organization primarily involved in the creation and maintenance of the content.
  /// </summary>
  [JsonPropertyName("author")]
  public ContactDetail?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// Characteristics can be defined flexibly to accommodate different use cases for membership criteria, ranging from simple codes, all the way to using an expression language to express the criteria.
  /// </summary>
  [JsonPropertyName("characteristic")]
  public EvidenceVariableCharacteristic?[] Characteristic { get; set; }
  [JsonPropertyName("_characteristic")]
  public Element[] _Characteristic { get; set; }
  /// <summary>
  /// Used to specify if two or more characteristics are combined with OR or AND.
  /// </summary>
  [JsonPropertyName("characteristicCombination")]
  public string? CharacteristicCombination { get; set; }
  [JsonPropertyName("_characteristicCombination")]
  public Element _CharacteristicCombination { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the evidence variable and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the evidence variable.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the evidence variable. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the evidence variable was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the evidence variable as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the evidence variable is presumed to be the predominant language in the place the evidence variable was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for internal coherence of the content.
  /// </summary>
  [JsonPropertyName("editor")]
  public ContactDetail?[] Editor { get; set; }
  [JsonPropertyName("_editor")]
  public Element[] _Editor { get; set; }
  /// <summary>
  /// The effective period for a evidence variable  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// An individual or organization responsible for officially endorsing the content for use in some setting.
  /// </summary>
  [JsonPropertyName("endorser")]
  public ContactDetail?[] Endorser { get; set; }
  [JsonPropertyName("_endorser")]
  public Element[] _Endorser { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this evidence variable outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the evidence variable to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// A human-readable string to clarify or explain concepts about the resource.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the evidence variable is the organization or individual primarily responsible for the maintenance and upkeep of the evidence variable. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the evidence variable. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// Each related artifact is either an attachment, or a reference to another resource, but not both.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for review of some aspect of the content.
  /// </summary>
  [JsonPropertyName("reviewer")]
  public ContactDetail?[] Reviewer { get; set; }
  [JsonPropertyName("_reviewer")]
  public Element[] _Reviewer { get; set; }
  /// <summary>
  /// The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
  /// </summary>
  [JsonPropertyName("shortTitle")]
  public string? ShortTitle { get; set; }
  [JsonPropertyName("_shortTitle")]
  public Element _ShortTitle { get; set; }
  /// <summary>
  /// Allows filtering of evidence variables that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// An explanatory or alternate title for the EvidenceVariable giving additional information about its content.
  /// </summary>
  [JsonPropertyName("subtitle")]
  public string? Subtitle { get; set; }
  [JsonPropertyName("_subtitle")]
  public Element _Subtitle { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Descriptive topics related to the content of the EvidenceVariable. Topics provide a high-level categorization grouping types of EvidenceVariables that can be useful for filtering and searching.
  /// </summary>
  [JsonPropertyName("topic")]
  public CodeableConcept?[] Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element[] _Topic { get; set; }
  /// <summary>
  /// Used for an outcome to classify.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different evidence variable instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the evidence variable with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the EvidenceVariable.characteristicCombination field
/// </summary>
public sealed class EvidenceVariableCharacteristicCombinationCodes {
  public const string INTERSECTION = "intersection";
  public const string UNION = "union";
}
/// <summary>
/// Code Values for the EvidenceVariable.status field
/// </summary>
public sealed class EvidenceVariableStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Code Values for the EvidenceVariable.type field
/// </summary>
public sealed class EvidenceVariableTypeCodes {
  public const string DICHOTOMOUS = "dichotomous";
  public const string CONTINUOUS = "continuous";
  public const string DESCRIPTIVE = "descriptive";
}
/// <summary>
/// Actor participating in the resource.
/// </summary>
public class ExampleScenarioActor : BackboneElement {
  /// <summary>
  /// should this be called ID or acronym?
  /// </summary>
  [JsonPropertyName("actorId")]
  public string ActorId { get; set; }
  [JsonPropertyName("_actorId")]
  public Element _ActorId { get; set; }
  /// <summary>
  /// Cardinality: is name and description 1..1?
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Cardinality: is name and description 1..1?
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The type of actor - person or system.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the ExampleScenario.actor.type field
/// </summary>
public sealed class ExampleScenarioActorTypeCodes {
  public const string PERSON = "person";
  public const string ENTITY = "entity";
}
/// <summary>
/// A specific version of the resource.
/// </summary>
public class ExampleScenarioInstanceVersion : BackboneElement {
  /// <summary>
  /// The description of the resource version.
  /// </summary>
  [JsonPropertyName("description")]
  public string Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The identifier of a specific version of a resource.
  /// </summary>
  [JsonPropertyName("versionId")]
  public string VersionId { get; set; }
  [JsonPropertyName("_versionId")]
  public Element _VersionId { get; set; }
}
/// <summary>
/// Resources contained in the instance (e.g. the observations contained in a bundle).
/// </summary>
public class ExampleScenarioInstanceContainedInstance : BackboneElement {
  /// <summary>
  /// Each resource contained in the instance.
  /// </summary>
  [JsonPropertyName("resourceId")]
  public string ResourceId { get; set; }
  [JsonPropertyName("_resourceId")]
  public Element _ResourceId { get; set; }
  /// <summary>
  /// A specific version of a resource contained in the instance.
  /// </summary>
  [JsonPropertyName("versionId")]
  public string? VersionId { get; set; }
  [JsonPropertyName("_versionId")]
  public Element _VersionId { get; set; }
}
/// <summary>
/// Each resource and each version that is present in the workflow.
/// </summary>
public class ExampleScenarioInstance : BackboneElement {
  /// <summary>
  /// Resources contained in the instance (e.g. the observations contained in a bundle).
  /// </summary>
  [JsonPropertyName("containedInstance")]
  public ExampleScenarioInstanceContainedInstance?[] ContainedInstance { get; set; }
  [JsonPropertyName("_containedInstance")]
  public Element[] _ContainedInstance { get; set; }
  /// <summary>
  /// Human-friendly description of the resource instance.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// A short name for the resource instance.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The id of the resource for referencing.
  /// </summary>
  [JsonPropertyName("resourceId")]
  public string ResourceId { get; set; }
  [JsonPropertyName("_resourceId")]
  public Element _ResourceId { get; set; }
  /// <summary>
  /// The type of the resource.
  /// </summary>
  [JsonPropertyName("resourceType")]
  public string ResourceType { get; set; }
  [JsonPropertyName("_resourceType")]
  public Element _ResourceType { get; set; }
  /// <summary>
  /// A specific version of the resource.
  /// </summary>
  [JsonPropertyName("version")]
  public ExampleScenarioInstanceVersion?[] Version { get; set; }
  [JsonPropertyName("_version")]
  public Element[] _Version { get; set; }
}
/// <summary>
/// Code Values for the ExampleScenario.instance.resourceType field
/// </summary>
public sealed class ExampleScenarioInstanceResourceTypeCodes {
  public const string THE = "The";
}
/// <summary>
/// Each interaction or action.
/// </summary>
public class ExampleScenarioProcessStepOperation : BackboneElement {
  /// <summary>
  /// A comment to be inserted in the diagram.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Who starts the transaction.
  /// </summary>
  [JsonPropertyName("initiator")]
  public string? Initiator { get; set; }
  [JsonPropertyName("_initiator")]
  public Element _Initiator { get; set; }
  /// <summary>
  /// Whether the initiator is deactivated right after the transaction.
  /// </summary>
  [JsonPropertyName("initiatorActive")]
  public bool? InitiatorActive { get; set; }
  [JsonPropertyName("_initiatorActive")]
  public Element _InitiatorActive { get; set; }
  /// <summary>
  /// The human-friendly name of the interaction.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The sequential number of the interaction, e.g. 1.2.5.
  /// </summary>
  [JsonPropertyName("number")]
  public string Number { get; set; }
  [JsonPropertyName("_number")]
  public Element _Number { get; set; }
  /// <summary>
  /// Who receives the transaction.
  /// </summary>
  [JsonPropertyName("receiver")]
  public string? Receiver { get; set; }
  [JsonPropertyName("_receiver")]
  public Element _Receiver { get; set; }
  /// <summary>
  /// Whether the receiver is deactivated right after the transaction.
  /// </summary>
  [JsonPropertyName("receiverActive")]
  public bool? ReceiverActive { get; set; }
  [JsonPropertyName("_receiverActive")]
  public Element _ReceiverActive { get; set; }
  /// <summary>
  /// Each resource instance used by the initiator.
  /// </summary>
  [JsonPropertyName("request")]
  public ExampleScenarioInstanceContainedInstance? Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// Each resource instance used by the responder.
  /// </summary>
  [JsonPropertyName("response")]
  public ExampleScenarioInstanceContainedInstance? Response { get; set; }
  [JsonPropertyName("_response")]
  public Element _Response { get; set; }
  /// <summary>
  /// The type of operation - CRUD.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
/// </summary>
public class ExampleScenarioProcessStepAlternative : BackboneElement {
  /// <summary>
  /// A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// What happens in each alternative option.
  /// </summary>
  [JsonPropertyName("step")]
  public ExampleScenarioProcessStep?[] Step { get; set; }
  [JsonPropertyName("_step")]
  public Element[] _Step { get; set; }
  /// <summary>
  /// The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
  /// </summary>
  [JsonPropertyName("title")]
  public string Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
/// <summary>
/// Each step of the process.
/// </summary>
public class ExampleScenarioProcessStep : BackboneElement {
  /// <summary>
  /// Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
  /// </summary>
  [JsonPropertyName("alternative")]
  public ExampleScenarioProcessStepAlternative?[] Alternative { get; set; }
  [JsonPropertyName("_alternative")]
  public Element[] _Alternative { get; set; }
  /// <summary>
  /// Each interaction or action.
  /// </summary>
  [JsonPropertyName("operation")]
  public ExampleScenarioProcessStepOperation? Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element _Operation { get; set; }
  /// <summary>
  /// If there is a pause in the flow.
  /// </summary>
  [JsonPropertyName("pause")]
  public bool? Pause { get; set; }
  [JsonPropertyName("_pause")]
  public Element _Pause { get; set; }
  /// <summary>
  /// Nested process.
  /// </summary>
  [JsonPropertyName("process")]
  public ExampleScenarioProcess?[] Process { get; set; }
  [JsonPropertyName("_process")]
  public Element[] _Process { get; set; }
}
/// <summary>
/// Each major process - a group of operations.
/// </summary>
public class ExampleScenarioProcess : BackboneElement {
  /// <summary>
  /// A longer description of the group of operations.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Description of final status after the process ends.
  /// </summary>
  [JsonPropertyName("postConditions")]
  public string? PostConditions { get; set; }
  [JsonPropertyName("_postConditions")]
  public Element _PostConditions { get; set; }
  /// <summary>
  /// Description of initial status before the process starts.
  /// </summary>
  [JsonPropertyName("preConditions")]
  public string? PreConditions { get; set; }
  [JsonPropertyName("_preConditions")]
  public Element _PreConditions { get; set; }
  /// <summary>
  /// Each step of the process.
  /// </summary>
  [JsonPropertyName("step")]
  public ExampleScenarioProcessStep?[] Step { get; set; }
  [JsonPropertyName("_step")]
  public Element[] _Step { get; set; }
  /// <summary>
  /// The diagram title of the group of operations.
  /// </summary>
  [JsonPropertyName("title")]
  public string Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
public class ExampleScenario : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ExampleScenario";
  /// <summary>
  /// Actor participating in the resource.
  /// </summary>
  [JsonPropertyName("actor")]
  public ExampleScenarioActor?[] Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element[] _Actor { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Allows filtering of example scenarios that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Each resource and each version that is present in the workflow.
  /// </summary>
  [JsonPropertyName("instance")]
  public ExampleScenarioInstance?[] Instance { get; set; }
  [JsonPropertyName("_instance")]
  public Element[] _Instance { get; set; }
  /// <summary>
  /// It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Each major process - a group of operations.
  /// </summary>
  [JsonPropertyName("process")]
  public ExampleScenarioProcess?[] Process { get; set; }
  [JsonPropertyName("_process")]
  public Element[] _Process { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Allows filtering of example scenarios that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
  /// <summary>
  /// Another nested workflow.
  /// </summary>
  [JsonPropertyName("workflow")]
  public string?[] Workflow { get; set; }
  [JsonPropertyName("_workflow")]
  public Element[] _Workflow { get; set; }
}
/// <summary>
/// Code Values for the ExampleScenario.status field
/// </summary>
public sealed class ExampleScenarioStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// For example,  for the original treatment and follow-up exams.
/// </summary>
public class ExplanationOfBenefitRelated : BackboneElement {
  /// <summary>
  /// Reference to a related claim.
  /// </summary>
  [JsonPropertyName("claim")]
  public Reference? Claim { get; set; }
  [JsonPropertyName("_claim")]
  public Element _Claim { get; set; }
  /// <summary>
  /// For example, Property/Casualty insurer claim number or Workers Compensation case number.
  /// </summary>
  [JsonPropertyName("reference")]
  public Identifier? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
  /// <summary>
  /// For example, prior claim or umbrella.
  /// </summary>
  [JsonPropertyName("relationship")]
  public CodeableConcept? Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
}
/// <summary>
/// Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
/// </summary>
public class ExplanationOfBenefitPayee : BackboneElement {
  /// <summary>
  /// Not required if the payee is 'subscriber' or 'provider'.
  /// </summary>
  [JsonPropertyName("party")]
  public Reference? Party { get; set; }
  [JsonPropertyName("_party")]
  public Element _Party { get; set; }
  /// <summary>
  /// Type of Party to be reimbursed: Subscriber, provider, other.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// The members of the team who provided the products and services.
/// </summary>
public class ExplanationOfBenefitCareTeam : BackboneElement {
  /// <summary>
  /// Member of the team who provided the product or service.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// The qualification of the practitioner which is applicable for this service.
  /// </summary>
  [JsonPropertyName("qualification")]
  public CodeableConcept? Qualification { get; set; }
  [JsonPropertyName("_qualification")]
  public Element _Qualification { get; set; }
  /// <summary>
  /// Responsible might not be required when there is only a single provider listed.
  /// </summary>
  [JsonPropertyName("responsible")]
  public bool? Responsible { get; set; }
  [JsonPropertyName("_responsible")]
  public Element _Responsible { get; set; }
  /// <summary>
  /// Role might not be required when there is only a single provider listed.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
  /// <summary>
  /// A number to uniquely identify care team entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
}
/// <summary>
/// Often there are multiple jurisdiction specific valuesets which are required.
/// </summary>
public class ExplanationOfBenefitSupportingInfo : BackboneElement {
  /// <summary>
  /// This may contain a category for the local bill type codes.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// This may contain the local bill type codes such as the US UB-04 bill type code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// For example: the reason for the additional stay, or why a tooth is  missing.
  /// </summary>
  [JsonPropertyName("reason")]
  public Coding? Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element _Reason { get; set; }
  /// <summary>
  /// A number to uniquely identify supporting information entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// The date when or period to which this information refers.
  /// </summary>
  [JsonPropertyName("timingDate")]
  public string? TimingDate { get; set; }
  [JsonPropertyName("_timingDate")]
  public Element _TimingDate { get; set; }
  /// <summary>
  /// The date when or period to which this information refers.
  /// </summary>
  [JsonPropertyName("timingPeriod")]
  public Period? TimingPeriod { get; set; }
  [JsonPropertyName("_timingPeriod")]
  public Element _TimingPeriod { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// Could be used to provide references to other resources, document. For example, could contain a PDF in an Attachment of the Police Report for an Accident.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference? ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
}
/// <summary>
/// Information about diagnoses relevant to the claim items.
/// </summary>
public class ExplanationOfBenefitDiagnosis : BackboneElement {
  /// <summary>
  /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
  /// </summary>
  [JsonPropertyName("diagnosisCodeableConcept")]
  public CodeableConcept DiagnosisCodeableConcept { get; set; }
  [JsonPropertyName("_diagnosisCodeableConcept")]
  public Element _DiagnosisCodeableConcept { get; set; }
  /// <summary>
  /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
  /// </summary>
  [JsonPropertyName("diagnosisReference")]
  public Reference DiagnosisReference { get; set; }
  [JsonPropertyName("_diagnosisReference")]
  public Element _DiagnosisReference { get; set; }
  /// <summary>
  /// Indication of whether the diagnosis was present on admission to a facility.
  /// </summary>
  [JsonPropertyName("onAdmission")]
  public CodeableConcept? OnAdmission { get; set; }
  [JsonPropertyName("_onAdmission")]
  public Element _OnAdmission { get; set; }
  /// <summary>
  /// For example, DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardio-infarction and a DRG for HeartAttack would assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
  /// </summary>
  [JsonPropertyName("packageCode")]
  public CodeableConcept? PackageCode { get; set; }
  [JsonPropertyName("_packageCode")]
  public Element _PackageCode { get; set; }
  /// <summary>
  /// Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// For example: admitting, primary, secondary, discharge.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Procedures performed on the patient relevant to the billing items with the claim.
/// </summary>
public class ExplanationOfBenefitProcedure : BackboneElement {
  /// <summary>
  /// Date and optionally time the procedure was performed.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The code or reference to a Procedure resource which identifies the clinical intervention performed.
  /// </summary>
  [JsonPropertyName("procedureCodeableConcept")]
  public CodeableConcept ProcedureCodeableConcept { get; set; }
  [JsonPropertyName("_procedureCodeableConcept")]
  public Element _ProcedureCodeableConcept { get; set; }
  /// <summary>
  /// The code or reference to a Procedure resource which identifies the clinical intervention performed.
  /// </summary>
  [JsonPropertyName("procedureReference")]
  public Reference ProcedureReference { get; set; }
  [JsonPropertyName("_procedureReference")]
  public Element _ProcedureReference { get; set; }
  /// <summary>
  /// A number to uniquely identify procedure entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// When the condition was observed or the relative ranking.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
  /// <summary>
  /// Unique Device Identifiers associated with this line item.
  /// </summary>
  [JsonPropertyName("udi")]
  public Reference?[] Udi { get; set; }
  [JsonPropertyName("_udi")]
  public Element[] _Udi { get; set; }
}
/// <summary>
/// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
/// </summary>
public class ExplanationOfBenefitInsurance : BackboneElement {
  /// <summary>
  /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
  /// </summary>
  [JsonPropertyName("coverage")]
  public Reference Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element _Coverage { get; set; }
  /// <summary>
  /// A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example, a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
  /// </summary>
  [JsonPropertyName("focal")]
  public bool Focal { get; set; }
  [JsonPropertyName("_focal")]
  public Element _Focal { get; set; }
  /// <summary>
  /// This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
  /// </summary>
  [JsonPropertyName("preAuthRef")]
  public string?[] PreAuthRef { get; set; }
  [JsonPropertyName("_preAuthRef")]
  public Element[] _PreAuthRef { get; set; }
}
/// <summary>
/// Details of a accident which resulted in injuries which required the products and services listed in the claim.
/// </summary>
public class ExplanationOfBenefitAccident : BackboneElement {
  /// <summary>
  /// The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The physical location of the accident event.
  /// </summary>
  [JsonPropertyName("locationAddress")]
  public Address? LocationAddress { get; set; }
  [JsonPropertyName("_locationAddress")]
  public Element _LocationAddress { get; set; }
  /// <summary>
  /// The physical location of the accident event.
  /// </summary>
  [JsonPropertyName("locationReference")]
  public Reference? LocationReference { get; set; }
  [JsonPropertyName("_locationReference")]
  public Element _LocationReference { get; set; }
  /// <summary>
  /// The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
/// </summary>
public class ExplanationOfBenefitItemAdjudication : BackboneElement {
  /// <summary>
  /// For example, amount submitted, eligible amount, co-payment, and benefit payable.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// For example, may indicate that the funds for this benefit type have been exhausted.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept? Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element _Reason { get; set; }
  /// <summary>
  /// For example: eligible percentage or co-payment percentage.
  /// </summary>
  [JsonPropertyName("value")]
  public decimal? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Third-tier of goods and services.
/// </summary>
public class ExplanationOfBenefitItemDetailSubDetail : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ExplanationOfBenefitItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// For example: Neonatal program, child dental program or drug users recovery program.
  /// </summary>
  [JsonPropertyName("programCode")]
  public CodeableConcept?[] ProgramCode { get; set; }
  [JsonPropertyName("_programCode")]
  public Element[] _ProgramCode { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The type of revenue or cost center providing the product and/or service.
  /// </summary>
  [JsonPropertyName("revenue")]
  public CodeableConcept? Revenue { get; set; }
  [JsonPropertyName("_revenue")]
  public Element _Revenue { get; set; }
  /// <summary>
  /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// Unique Device Identifiers associated with this line item.
  /// </summary>
  [JsonPropertyName("udi")]
  public Reference?[] Udi { get; set; }
  [JsonPropertyName("_udi")]
  public Element[] _Udi { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// Second-tier of goods and services.
/// </summary>
public class ExplanationOfBenefitItemDetail : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ExplanationOfBenefitItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// For example: Neonatal program, child dental program or drug users recovery program.
  /// </summary>
  [JsonPropertyName("programCode")]
  public CodeableConcept?[] ProgramCode { get; set; }
  [JsonPropertyName("_programCode")]
  public Element[] _ProgramCode { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The type of revenue or cost center providing the product and/or service.
  /// </summary>
  [JsonPropertyName("revenue")]
  public CodeableConcept? Revenue { get; set; }
  [JsonPropertyName("_revenue")]
  public Element _Revenue { get; set; }
  /// <summary>
  /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// Third-tier of goods and services.
  /// </summary>
  [JsonPropertyName("subDetail")]
  public ExplanationOfBenefitItemDetailSubDetail?[] SubDetail { get; set; }
  [JsonPropertyName("_subDetail")]
  public Element[] _SubDetail { get; set; }
  /// <summary>
  /// Unique Device Identifiers associated with this line item.
  /// </summary>
  [JsonPropertyName("udi")]
  public Reference?[] Udi { get; set; }
  [JsonPropertyName("_udi")]
  public Element[] _Udi { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
/// </summary>
public class ExplanationOfBenefitItem : BackboneElement {
  /// <summary>
  /// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ExplanationOfBenefitItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// Care team members related to this service or product.
  /// </summary>
  [JsonPropertyName("careTeamSequence")]
  public uint?[] CareTeamSequence { get; set; }
  [JsonPropertyName("_careTeamSequence")]
  public Element[] _CareTeamSequence { get; set; }
  /// <summary>
  /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Second-tier of goods and services.
  /// </summary>
  [JsonPropertyName("detail")]
  public ExplanationOfBenefitItemDetail?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// Diagnoses applicable for this service or product.
  /// </summary>
  [JsonPropertyName("diagnosisSequence")]
  public uint?[] DiagnosisSequence { get; set; }
  [JsonPropertyName("_diagnosisSequence")]
  public Element[] _DiagnosisSequence { get; set; }
  /// <summary>
  /// A billed item may include goods or services provided in multiple encounters.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference?[] Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element[] _Encounter { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// Exceptions, special conditions and supporting information applicable for this service or product.
  /// </summary>
  [JsonPropertyName("informationSequence")]
  public uint?[] InformationSequence { get; set; }
  [JsonPropertyName("_informationSequence")]
  public Element[] _InformationSequence { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationCodeableConcept")]
  public CodeableConcept? LocationCodeableConcept { get; set; }
  [JsonPropertyName("_locationCodeableConcept")]
  public Element _LocationCodeableConcept { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationAddress")]
  public Address? LocationAddress { get; set; }
  [JsonPropertyName("_locationAddress")]
  public Element _LocationAddress { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationReference")]
  public Reference? LocationReference { get; set; }
  [JsonPropertyName("_locationReference")]
  public Element _LocationReference { get; set; }
  /// <summary>
  /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// Procedures applicable for this service or product.
  /// </summary>
  [JsonPropertyName("procedureSequence")]
  public uint?[] ProcedureSequence { get; set; }
  [JsonPropertyName("_procedureSequence")]
  public Element[] _ProcedureSequence { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// For example: Neonatal program, child dental program or drug users recovery program.
  /// </summary>
  [JsonPropertyName("programCode")]
  public CodeableConcept?[] ProgramCode { get; set; }
  [JsonPropertyName("_programCode")]
  public Element[] _ProgramCode { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The type of revenue or cost center providing the product and/or service.
  /// </summary>
  [JsonPropertyName("revenue")]
  public CodeableConcept? Revenue { get; set; }
  [JsonPropertyName("_revenue")]
  public Element _Revenue { get; set; }
  /// <summary>
  /// A number to uniquely identify item entries.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// The date or dates when the service or product was supplied, performed or completed.
  /// </summary>
  [JsonPropertyName("servicedDate")]
  public string? ServicedDate { get; set; }
  [JsonPropertyName("_servicedDate")]
  public Element _ServicedDate { get; set; }
  /// <summary>
  /// The date or dates when the service or product was supplied, performed or completed.
  /// </summary>
  [JsonPropertyName("servicedPeriod")]
  public Period? ServicedPeriod { get; set; }
  [JsonPropertyName("_servicedPeriod")]
  public Element _ServicedPeriod { get; set; }
  /// <summary>
  /// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
  /// </summary>
  [JsonPropertyName("subSite")]
  public CodeableConcept?[] SubSite { get; set; }
  [JsonPropertyName("_subSite")]
  public Element[] _SubSite { get; set; }
  /// <summary>
  /// Unique Device Identifiers associated with this line item.
  /// </summary>
  [JsonPropertyName("udi")]
  public Reference?[] Udi { get; set; }
  [JsonPropertyName("_udi")]
  public Element[] _Udi { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// The third-tier service adjudications for payor added services.
/// </summary>
public class ExplanationOfBenefitAddItemDetailSubDetail : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ExplanationOfBenefitItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// The second-tier service adjudications for payor added services.
/// </summary>
public class ExplanationOfBenefitAddItemDetail : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ExplanationOfBenefitItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The third-tier service adjudications for payor added services.
  /// </summary>
  [JsonPropertyName("subDetail")]
  public ExplanationOfBenefitAddItemDetailSubDetail?[] SubDetail { get; set; }
  [JsonPropertyName("_subDetail")]
  public Element[] _SubDetail { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// The first-tier service adjudications for payor added product or service lines.
/// </summary>
public class ExplanationOfBenefitAddItem : BackboneElement {
  /// <summary>
  /// The adjudication results.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ExplanationOfBenefitItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// For example, providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// The second-tier service adjudications for payor added services.
  /// </summary>
  [JsonPropertyName("detail")]
  public ExplanationOfBenefitAddItemDetail?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// The sequence number of the details within the claim item which this line is intended to replace.
  /// </summary>
  [JsonPropertyName("detailSequence")]
  public uint?[] DetailSequence { get; set; }
  [JsonPropertyName("_detailSequence")]
  public Element[] _DetailSequence { get; set; }
  /// <summary>
  /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// Claim items which this service line is intended to replace.
  /// </summary>
  [JsonPropertyName("itemSequence")]
  public uint?[] ItemSequence { get; set; }
  [JsonPropertyName("_itemSequence")]
  public Element[] _ItemSequence { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationCodeableConcept")]
  public CodeableConcept? LocationCodeableConcept { get; set; }
  [JsonPropertyName("_locationCodeableConcept")]
  public Element _LocationCodeableConcept { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationAddress")]
  public Address? LocationAddress { get; set; }
  [JsonPropertyName("_locationAddress")]
  public Element _LocationAddress { get; set; }
  /// <summary>
  /// Where the product or service was provided.
  /// </summary>
  [JsonPropertyName("locationReference")]
  public Reference? LocationReference { get; set; }
  [JsonPropertyName("_locationReference")]
  public Element _LocationReference { get; set; }
  /// <summary>
  /// For example, in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
  /// </summary>
  [JsonPropertyName("net")]
  public Money? Net { get; set; }
  [JsonPropertyName("_net")]
  public Element _Net { get; set; }
  /// <summary>
  /// The numbers associated with notes below which apply to the adjudication of this item.
  /// </summary>
  [JsonPropertyName("noteNumber")]
  public uint?[] NoteNumber { get; set; }
  [JsonPropertyName("_noteNumber")]
  public Element[] _NoteNumber { get; set; }
  /// <summary>
  /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
  /// </summary>
  [JsonPropertyName("productOrService")]
  public CodeableConcept ProductOrService { get; set; }
  [JsonPropertyName("_productOrService")]
  public Element _ProductOrService { get; set; }
  /// <summary>
  /// For example: Neonatal program, child dental program or drug users recovery program.
  /// </summary>
  [JsonPropertyName("programCode")]
  public CodeableConcept?[] ProgramCode { get; set; }
  [JsonPropertyName("_programCode")]
  public Element[] _ProgramCode { get; set; }
  /// <summary>
  /// The providers who are authorized for the services rendered to the patient.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference?[] Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element[] _Provider { get; set; }
  /// <summary>
  /// The number of repetitions of a service or product.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The date or dates when the service or product was supplied, performed or completed.
  /// </summary>
  [JsonPropertyName("servicedDate")]
  public string? ServicedDate { get; set; }
  [JsonPropertyName("_servicedDate")]
  public Element _ServicedDate { get; set; }
  /// <summary>
  /// The date or dates when the service or product was supplied, performed or completed.
  /// </summary>
  [JsonPropertyName("servicedPeriod")]
  public Period? ServicedPeriod { get; set; }
  [JsonPropertyName("_servicedPeriod")]
  public Element _ServicedPeriod { get; set; }
  /// <summary>
  /// The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.
  /// </summary>
  [JsonPropertyName("subDetailSequence")]
  public uint?[] SubDetailSequence { get; set; }
  [JsonPropertyName("_subDetailSequence")]
  public Element[] _SubDetailSequence { get; set; }
  /// <summary>
  /// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
  /// </summary>
  [JsonPropertyName("subSite")]
  public CodeableConcept?[] SubSite { get; set; }
  [JsonPropertyName("_subSite")]
  public Element[] _SubSite { get; set; }
  /// <summary>
  /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
  /// </summary>
  [JsonPropertyName("unitPrice")]
  public Money? UnitPrice { get; set; }
  [JsonPropertyName("_unitPrice")]
  public Element _UnitPrice { get; set; }
}
/// <summary>
/// Totals for amounts submitted, co-pays, benefits payable etc.
/// </summary>
public class ExplanationOfBenefitTotal : BackboneElement {
  /// <summary>
  /// Monetary total amount associated with the category.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
}
/// <summary>
/// Payment details for the adjudication of the claim.
/// </summary>
public class ExplanationOfBenefitPayment : BackboneElement {
  /// <summary>
  /// Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
  /// </summary>
  [JsonPropertyName("adjustment")]
  public Money? Adjustment { get; set; }
  [JsonPropertyName("_adjustment")]
  public Element _Adjustment { get; set; }
  /// <summary>
  /// Reason for the payment adjustment.
  /// </summary>
  [JsonPropertyName("adjustmentReason")]
  public CodeableConcept? AdjustmentReason { get; set; }
  [JsonPropertyName("_adjustmentReason")]
  public Element _AdjustmentReason { get; set; }
  /// <summary>
  /// Benefits payable less any payment adjustment.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Estimated date the payment will be issued or the actual issue date of payment.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// For example: EFT number or check number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Whether this represents partial or complete payment of the benefits payable.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// A note that describes or explains adjudication results in a human readable form.
/// </summary>
public class ExplanationOfBenefitProcessNote : BackboneElement {
  /// <summary>
  /// Only required if the language is different from the resource language.
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// A number to uniquely identify a note entry.
  /// </summary>
  [JsonPropertyName("number")]
  public uint? Number { get; set; }
  [JsonPropertyName("_number")]
  public Element _Number { get; set; }
  /// <summary>
  /// The explanation or description associated with the processing.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// The business purpose of the note text.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the ExplanationOfBenefit.processNote.type field
/// </summary>
public sealed class ExplanationOfBenefitProcessNoteTypeCodes {
  public const string DISPLAY = "display";
  public const string PRINT = "print";
  public const string PRINTOPER = "printoper";
}
/// <summary>
/// Benefits Used to date.
/// </summary>
public class ExplanationOfBenefitBenefitBalanceFinancial : BackboneElement {
  /// <summary>
  /// The quantity of the benefit which is permitted under the coverage.
  /// </summary>
  [JsonPropertyName("allowedUnsignedInt")]
  public uint? AllowedUnsignedInt { get; set; }
  [JsonPropertyName("_allowedUnsignedInt")]
  public Element _AllowedUnsignedInt { get; set; }
  /// <summary>
  /// The quantity of the benefit which is permitted under the coverage.
  /// </summary>
  [JsonPropertyName("allowedString")]
  public string? AllowedString { get; set; }
  [JsonPropertyName("_allowedString")]
  public Element _AllowedString { get; set; }
  /// <summary>
  /// The quantity of the benefit which is permitted under the coverage.
  /// </summary>
  [JsonPropertyName("allowedMoney")]
  public Money? AllowedMoney { get; set; }
  [JsonPropertyName("_allowedMoney")]
  public Element _AllowedMoney { get; set; }
  /// <summary>
  /// For example: deductible, visits, benefit amount.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The quantity of the benefit which have been consumed to date.
  /// </summary>
  [JsonPropertyName("usedUnsignedInt")]
  public uint? UsedUnsignedInt { get; set; }
  [JsonPropertyName("_usedUnsignedInt")]
  public Element _UsedUnsignedInt { get; set; }
  /// <summary>
  /// The quantity of the benefit which have been consumed to date.
  /// </summary>
  [JsonPropertyName("usedMoney")]
  public Money? UsedMoney { get; set; }
  [JsonPropertyName("_usedMoney")]
  public Element _UsedMoney { get; set; }
}
/// <summary>
/// Balance by Benefit Category.
/// </summary>
public class ExplanationOfBenefitBenefitBalance : BackboneElement {
  /// <summary>
  /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
  /// </summary>
  [JsonPropertyName("excluded")]
  public bool? Excluded { get; set; }
  [JsonPropertyName("_excluded")]
  public Element _Excluded { get; set; }
  /// <summary>
  /// Benefits Used to date.
  /// </summary>
  [JsonPropertyName("financial")]
  public ExplanationOfBenefitBenefitBalanceFinancial?[] Financial { get; set; }
  [JsonPropertyName("_financial")]
  public Element[] _Financial { get; set; }
  /// <summary>
  /// For example: MED01, or DENT2.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
  /// </summary>
  [JsonPropertyName("network")]
  public CodeableConcept? Network { get; set; }
  [JsonPropertyName("_network")]
  public Element _Network { get; set; }
  /// <summary>
  /// The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
  /// </summary>
  [JsonPropertyName("term")]
  public CodeableConcept? Term { get; set; }
  [JsonPropertyName("_term")]
  public Element _Term { get; set; }
  /// <summary>
  /// Indicates if the benefits apply to an individual or to the family.
  /// </summary>
  [JsonPropertyName("unit")]
  public CodeableConcept? Unit { get; set; }
  [JsonPropertyName("_unit")]
  public Element _Unit { get; set; }
}
public class ExplanationOfBenefit : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ExplanationOfBenefit";
  /// <summary>
  /// Details of a accident which resulted in injuries which required the products and services listed in the claim.
  /// </summary>
  [JsonPropertyName("accident")]
  public ExplanationOfBenefitAccident? Accident { get; set; }
  [JsonPropertyName("_accident")]
  public Element _Accident { get; set; }
  /// <summary>
  /// The first-tier service adjudications for payor added product or service lines.
  /// </summary>
  [JsonPropertyName("addItem")]
  public ExplanationOfBenefitAddItem?[] AddItem { get; set; }
  [JsonPropertyName("_addItem")]
  public Element[] _AddItem { get; set; }
  /// <summary>
  /// The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
  /// </summary>
  [JsonPropertyName("adjudication")]
  public ExplanationOfBenefitItemAdjudication?[] Adjudication { get; set; }
  [JsonPropertyName("_adjudication")]
  public Element[] _Adjudication { get; set; }
  /// <summary>
  /// Balance by Benefit Category.
  /// </summary>
  [JsonPropertyName("benefitBalance")]
  public ExplanationOfBenefitBenefitBalance?[] BenefitBalance { get; set; }
  [JsonPropertyName("_benefitBalance")]
  public Element[] _BenefitBalance { get; set; }
  /// <summary>
  /// Not applicable when use=claim.
  /// </summary>
  [JsonPropertyName("benefitPeriod")]
  public Period? BenefitPeriod { get; set; }
  [JsonPropertyName("_benefitPeriod")]
  public Element _BenefitPeriod { get; set; }
  /// <summary>
  /// Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and prodeterminations. Typically line item dates of service should fall within the billing period if one is specified.
  /// </summary>
  [JsonPropertyName("billablePeriod")]
  public Period? BillablePeriod { get; set; }
  [JsonPropertyName("_billablePeriod")]
  public Element _BillablePeriod { get; set; }
  /// <summary>
  /// The members of the team who provided the products and services.
  /// </summary>
  [JsonPropertyName("careTeam")]
  public ExplanationOfBenefitCareTeam?[] CareTeam { get; set; }
  [JsonPropertyName("_careTeam")]
  public Element[] _CareTeam { get; set; }
  /// <summary>
  /// The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.
  /// </summary>
  [JsonPropertyName("claim")]
  public Reference? Claim { get; set; }
  [JsonPropertyName("_claim")]
  public Element _Claim { get; set; }
  /// <summary>
  /// The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
  /// </summary>
  [JsonPropertyName("claimResponse")]
  public Reference? ClaimResponse { get; set; }
  [JsonPropertyName("_claimResponse")]
  public Element _ClaimResponse { get; set; }
  /// <summary>
  /// This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
  /// </summary>
  [JsonPropertyName("created")]
  public string Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// Information about diagnoses relevant to the claim items.
  /// </summary>
  [JsonPropertyName("diagnosis")]
  public ExplanationOfBenefitDiagnosis?[] Diagnosis { get; set; }
  [JsonPropertyName("_diagnosis")]
  public Element[] _Diagnosis { get; set; }
  /// <summary>
  /// A human readable description of the status of the adjudication.
  /// </summary>
  [JsonPropertyName("disposition")]
  public string? Disposition { get; set; }
  [JsonPropertyName("_disposition")]
  public Element _Disposition { get; set; }
  /// <summary>
  /// Individual who created the claim, predetermination or preauthorization.
  /// </summary>
  [JsonPropertyName("enterer")]
  public Reference? Enterer { get; set; }
  [JsonPropertyName("_enterer")]
  public Element _Enterer { get; set; }
  /// <summary>
  /// Facility where the services were provided.
  /// </summary>
  [JsonPropertyName("facility")]
  public Reference? Facility { get; set; }
  [JsonPropertyName("_facility")]
  public Element _Facility { get; set; }
  /// <summary>
  /// Needed to permit insurers to include the actual form.
  /// </summary>
  [JsonPropertyName("form")]
  public Attachment? Form { get; set; }
  [JsonPropertyName("_form")]
  public Element _Form { get; set; }
  /// <summary>
  /// May be needed to identify specific jurisdictional forms.
  /// </summary>
  [JsonPropertyName("formCode")]
  public CodeableConcept? FormCode { get; set; }
  [JsonPropertyName("_formCode")]
  public Element _FormCode { get; set; }
  /// <summary>
  /// Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
  /// </summary>
  [JsonPropertyName("fundsReserve")]
  public CodeableConcept? FundsReserve { get; set; }
  [JsonPropertyName("_fundsReserve")]
  public Element _FundsReserve { get; set; }
  /// <summary>
  /// This field is only used for preauthorizations.
  /// </summary>
  [JsonPropertyName("fundsReserveRequested")]
  public CodeableConcept? FundsReserveRequested { get; set; }
  [JsonPropertyName("_fundsReserveRequested")]
  public Element _FundsReserveRequested { get; set; }
  /// <summary>
  /// A unique identifier assigned to this explanation of benefit.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonPropertyName("insurance")]
  public ExplanationOfBenefitInsurance[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// The party responsible for authorization, adjudication and reimbursement.
  /// </summary>
  [JsonPropertyName("insurer")]
  public Reference Insurer { get; set; }
  [JsonPropertyName("_insurer")]
  public Element _Insurer { get; set; }
  /// <summary>
  /// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
  /// </summary>
  [JsonPropertyName("item")]
  public ExplanationOfBenefitItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefor issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
  /// </summary>
  [JsonPropertyName("originalPrescription")]
  public Reference? OriginalPrescription { get; set; }
  [JsonPropertyName("_originalPrescription")]
  public Element _OriginalPrescription { get; set; }
  /// <summary>
  /// The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
  /// </summary>
  [JsonPropertyName("outcome")]
  public string Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and may choose to pay the subscriber instead.
  /// </summary>
  [JsonPropertyName("payee")]
  public ExplanationOfBenefitPayee? Payee { get; set; }
  [JsonPropertyName("_payee")]
  public Element _Payee { get; set; }
  /// <summary>
  /// Payment details for the adjudication of the claim.
  /// </summary>
  [JsonPropertyName("payment")]
  public ExplanationOfBenefitPayment? Payment { get; set; }
  [JsonPropertyName("_payment")]
  public Element _Payment { get; set; }
  /// <summary>
  /// This value is only present on preauthorization adjudications.
  /// </summary>
  [JsonPropertyName("preAuthRef")]
  public string?[] PreAuthRef { get; set; }
  [JsonPropertyName("_preAuthRef")]
  public Element[] _PreAuthRef { get; set; }
  /// <summary>
  /// This value is only present on preauthorization adjudications.
  /// </summary>
  [JsonPropertyName("preAuthRefPeriod")]
  public Period?[] PreAuthRefPeriod { get; set; }
  [JsonPropertyName("_preAuthRefPeriod")]
  public Element[] _PreAuthRefPeriod { get; set; }
  /// <summary>
  /// This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
  /// </summary>
  [JsonPropertyName("precedence")]
  public uint? Precedence { get; set; }
  [JsonPropertyName("_precedence")]
  public Element _Precedence { get; set; }
  /// <summary>
  /// Prescription to support the dispensing of pharmacy, device or vision products.
  /// </summary>
  [JsonPropertyName("prescription")]
  public Reference? Prescription { get; set; }
  [JsonPropertyName("_prescription")]
  public Element _Prescription { get; set; }
  /// <summary>
  /// If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
  /// </summary>
  [JsonPropertyName("priority")]
  public CodeableConcept? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// Procedures performed on the patient relevant to the billing items with the claim.
  /// </summary>
  [JsonPropertyName("procedure")]
  public ExplanationOfBenefitProcedure?[] Procedure { get; set; }
  [JsonPropertyName("_procedure")]
  public Element[] _Procedure { get; set; }
  /// <summary>
  /// A note that describes or explains adjudication results in a human readable form.
  /// </summary>
  [JsonPropertyName("processNote")]
  public ExplanationOfBenefitProcessNote?[] ProcessNote { get; set; }
  [JsonPropertyName("_processNote")]
  public Element[] _ProcessNote { get; set; }
  /// <summary>
  /// Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// The referral resource which lists the date, practitioner, reason and other supporting information.
  /// </summary>
  [JsonPropertyName("referral")]
  public Reference? Referral { get; set; }
  [JsonPropertyName("_referral")]
  public Element _Referral { get; set; }
  /// <summary>
  /// For example,  for the original treatment and follow-up exams.
  /// </summary>
  [JsonPropertyName("related")]
  public ExplanationOfBenefitRelated?[] Related { get; set; }
  [JsonPropertyName("_related")]
  public Element[] _Related { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This may contain the local bill type codes such as the US UB-04 bill type code.
  /// </summary>
  [JsonPropertyName("subType")]
  public CodeableConcept? SubType { get; set; }
  [JsonPropertyName("_subType")]
  public Element _SubType { get; set; }
  /// <summary>
  /// Often there are multiple jurisdiction specific valuesets which are required.
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public ExplanationOfBenefitSupportingInfo?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
  /// <summary>
  /// Totals for amounts submitted, co-pays, benefits payable etc.
  /// </summary>
  [JsonPropertyName("total")]
  public ExplanationOfBenefitTotal?[] Total { get; set; }
  [JsonPropertyName("_total")]
  public Element[] _Total { get; set; }
  /// <summary>
  /// The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
  /// </summary>
  [JsonPropertyName("use")]
  public string Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// Code Values for the ExplanationOfBenefit.outcome field
/// </summary>
public sealed class ExplanationOfBenefitOutcomeCodes {
  public const string QUEUED = "queued";
  public const string COMPLETE = "complete";
  public const string ERROR = "error";
  public const string PARTIAL = "partial";
}
/// <summary>
/// Code Values for the ExplanationOfBenefit.status field
/// </summary>
public sealed class ExplanationOfBenefitStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Code Values for the ExplanationOfBenefit.use field
/// </summary>
public sealed class ExplanationOfBenefitUseCodes {
  public const string CLAIM = "claim";
  public const string PREAUTHORIZATION = "preauthorization";
  public const string PREDETERMINATION = "predetermination";
}
/// <summary>
/// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
/// </summary>
public class FamilyMemberHistoryCondition : BackboneElement {
  /// <summary>
  /// The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
  /// </summary>
  [JsonPropertyName("contributedToDeath")]
  public bool? ContributedToDeath { get; set; }
  [JsonPropertyName("_contributedToDeath")]
  public Element _ContributedToDeath { get; set; }
  /// <summary>
  /// An area where general notes can be placed about this specific condition.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
  /// </summary>
  [JsonPropertyName("onsetAge")]
  public Age? OnsetAge { get; set; }
  [JsonPropertyName("_onsetAge")]
  public Element _OnsetAge { get; set; }
  /// <summary>
  /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
  /// </summary>
  [JsonPropertyName("onsetRange")]
  public Range? OnsetRange { get; set; }
  [JsonPropertyName("_onsetRange")]
  public Element _OnsetRange { get; set; }
  /// <summary>
  /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
  /// </summary>
  [JsonPropertyName("onsetPeriod")]
  public Period? OnsetPeriod { get; set; }
  [JsonPropertyName("_onsetPeriod")]
  public Element _OnsetPeriod { get; set; }
  /// <summary>
  /// Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
  /// </summary>
  [JsonPropertyName("onsetString")]
  public string? OnsetString { get; set; }
  [JsonPropertyName("_onsetString")]
  public Element _OnsetString { get; set; }
  /// <summary>
  /// Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
  /// </summary>
  [JsonPropertyName("outcome")]
  public CodeableConcept? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
}
/// <summary>
/// The significant Procedures (or procedure) that the family member had. This is a repeating section to allow a system to represent more than one procedure per resource, though there is nothing stopping multiple resources - one per procedure.
/// </summary>
public class FamilyMemberHistoryProcedure : BackboneElement {
  /// <summary>
  /// The actual procedure specified. Could be a coded procedure or a less specific string depending on how much is known about the procedure and the capabilities of the creating system.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// This procedure contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
  /// </summary>
  [JsonPropertyName("contributedToDeath")]
  public bool? ContributedToDeath { get; set; }
  [JsonPropertyName("_contributedToDeath")]
  public Element _ContributedToDeath { get; set; }
  /// <summary>
  /// An area where general notes can be placed about this specific procedure.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Indicates what happened following the procedure. If the procedure resulted in death, deceased date is captured on the relation.
  /// </summary>
  [JsonPropertyName("outcome")]
  public CodeableConcept? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
  /// </summary>
  [JsonPropertyName("performedAge")]
  public Age? PerformedAge { get; set; }
  [JsonPropertyName("_performedAge")]
  public Element _PerformedAge { get; set; }
  /// <summary>
  /// Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
  /// </summary>
  [JsonPropertyName("performedRange")]
  public Range? PerformedRange { get; set; }
  [JsonPropertyName("_performedRange")]
  public Element _PerformedRange { get; set; }
  /// <summary>
  /// Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
  /// </summary>
  [JsonPropertyName("performedPeriod")]
  public Period? PerformedPeriod { get; set; }
  [JsonPropertyName("_performedPeriod")]
  public Element _PerformedPeriod { get; set; }
  /// <summary>
  /// Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
  /// </summary>
  [JsonPropertyName("performedString")]
  public string? PerformedString { get; set; }
  [JsonPropertyName("_performedString")]
  public Element _PerformedString { get; set; }
  /// <summary>
  /// Estimated or actual date, date-time, period, or age when the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
  /// </summary>
  [JsonPropertyName("performedDateTime")]
  public string? PerformedDateTime { get; set; }
  [JsonPropertyName("_performedDateTime")]
  public Element _PerformedDateTime { get; set; }
}
public class FamilyMemberHistory : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "FamilyMemberHistory";
  /// <summary>
  /// use estimatedAge to indicate whether the age is actual or not.
  /// </summary>
  [JsonPropertyName("ageAge")]
  public Age? AgeAge { get; set; }
  [JsonPropertyName("_ageAge")]
  public Element _AgeAge { get; set; }
  /// <summary>
  /// use estimatedAge to indicate whether the age is actual or not.
  /// </summary>
  [JsonPropertyName("ageRange")]
  public Range? AgeRange { get; set; }
  [JsonPropertyName("_ageRange")]
  public Element _AgeRange { get; set; }
  /// <summary>
  /// use estimatedAge to indicate whether the age is actual or not.
  /// </summary>
  [JsonPropertyName("ageString")]
  public string? AgeString { get; set; }
  [JsonPropertyName("_ageString")]
  public Element _AgeString { get; set; }
  /// <summary>
  /// The actual or approximate date of birth of the relative.
  /// </summary>
  [JsonPropertyName("bornPeriod")]
  public Period? BornPeriod { get; set; }
  [JsonPropertyName("_bornPeriod")]
  public Element _BornPeriod { get; set; }
  /// <summary>
  /// The actual or approximate date of birth of the relative.
  /// </summary>
  [JsonPropertyName("bornDate")]
  public string? BornDate { get; set; }
  [JsonPropertyName("_bornDate")]
  public Element _BornDate { get; set; }
  /// <summary>
  /// The actual or approximate date of birth of the relative.
  /// </summary>
  [JsonPropertyName("bornString")]
  public string? BornString { get; set; }
  [JsonPropertyName("_bornString")]
  public Element _BornString { get; set; }
  /// <summary>
  /// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
  /// </summary>
  [JsonPropertyName("condition")]
  public FamilyMemberHistoryCondition?[] Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element[] _Condition { get; set; }
  /// <summary>
  /// Describes why the family member's history is not available.
  /// </summary>
  [JsonPropertyName("dataAbsentReason")]
  public CodeableConcept? DataAbsentReason { get; set; }
  [JsonPropertyName("_dataAbsentReason")]
  public Element _DataAbsentReason { get; set; }
  /// <summary>
  /// This should be captured even if the same as the date on the List aggregating the full family history.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
  /// </summary>
  [JsonPropertyName("deceasedBoolean")]
  public bool? DeceasedBoolean { get; set; }
  [JsonPropertyName("_deceasedBoolean")]
  public Element _DeceasedBoolean { get; set; }
  /// <summary>
  /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
  /// </summary>
  [JsonPropertyName("deceasedAge")]
  public Age? DeceasedAge { get; set; }
  [JsonPropertyName("_deceasedAge")]
  public Element _DeceasedAge { get; set; }
  /// <summary>
  /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
  /// </summary>
  [JsonPropertyName("deceasedRange")]
  public Range? DeceasedRange { get; set; }
  [JsonPropertyName("_deceasedRange")]
  public Element _DeceasedRange { get; set; }
  /// <summary>
  /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
  /// </summary>
  [JsonPropertyName("deceasedDate")]
  public string? DeceasedDate { get; set; }
  [JsonPropertyName("_deceasedDate")]
  public Element _DeceasedDate { get; set; }
  /// <summary>
  /// Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
  /// </summary>
  [JsonPropertyName("deceasedString")]
  public string? DeceasedString { get; set; }
  [JsonPropertyName("_deceasedString")]
  public Element _DeceasedString { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the fact that age is estimated can/should change the results of any algorithm that calculates based on the specified age.
  /// </summary>
  [JsonPropertyName("estimatedAge")]
  public bool? EstimatedAge { get; set; }
  [JsonPropertyName("_estimatedAge")]
  public Element _EstimatedAge { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// This is not the family member.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// The significant Procedures (or procedure) that the family member had. This is a repeating section to allow a system to represent more than one procedure per resource, though there is nothing stopping multiple resources - one per procedure.
  /// </summary>
  [JsonPropertyName("procedure")]
  public FamilyMemberHistoryProcedure?[] Procedure { get; set; }
  [JsonPropertyName("_procedure")]
  public Element[] _Procedure { get; set; }
  /// <summary>
  /// Textual reasons can be captured using reasonCode.text.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The type of relationship this person has to the patient (father, mother, brother etc.).
  /// </summary>
  [JsonPropertyName("relationship")]
  public CodeableConcept Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
  /// <summary>
  /// This element should ideally reflect whether the individual is genetically male or female.  However, as reported information based on the knowledge of the patient or reporting friend/relative, there may be situations where the reported sex might not be totally accurate.  E.g. 'Aunt Sue' might be XY rather than XX.  Questions soliciting this information should be phrased to encourage capture of genetic sex where known.  However, systems performing analysis should also allow for the possibility of imprecision with this element.
  /// </summary>
  [JsonPropertyName("sex")]
  public CodeableConcept? Sex { get; set; }
  [JsonPropertyName("_sex")]
  public Element _Sex { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the FamilyMemberHistory.status field
/// </summary>
public sealed class FamilyMemberHistoryStatusCodes {
  public const string PARTIAL = "partial";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string HEALTH_UNKNOWN = "health-unknown";
}
public class Flag : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Flag";
  /// <summary>
  /// The person, organization or device that created the flag.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// The value set will often need to be adjusted based on local business rules and usage context.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// If non-coded, use CodeableConcept.text.  This element should always be included in the narrative.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// If both Flag.encounter and Flag.period are valued, then Flag.period.start shall not be before Encounter.period.start and Flag.period.end shall not be after Encounter.period.end.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The patient, location, group, organization, or practitioner etc. this is about record this flag is associated with.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the Flag.status field
/// </summary>
public sealed class FlagStatusCodes {
  public const string ACTIVE = "active";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
/// </summary>
public class GoalTarget : BackboneElement {
  /// <summary>
  /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
  /// </summary>
  [JsonPropertyName("detailQuantity")]
  public Quantity? DetailQuantity { get; set; }
  [JsonPropertyName("_detailQuantity")]
  public Element _DetailQuantity { get; set; }
  /// <summary>
  /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
  /// </summary>
  [JsonPropertyName("detailRange")]
  public Range? DetailRange { get; set; }
  [JsonPropertyName("_detailRange")]
  public Element _DetailRange { get; set; }
  /// <summary>
  /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
  /// </summary>
  [JsonPropertyName("detailCodeableConcept")]
  public CodeableConcept? DetailCodeableConcept { get; set; }
  [JsonPropertyName("_detailCodeableConcept")]
  public Element _DetailCodeableConcept { get; set; }
  /// <summary>
  /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
  /// </summary>
  [JsonPropertyName("detailString")]
  public string? DetailString { get; set; }
  [JsonPropertyName("_detailString")]
  public Element _DetailString { get; set; }
  /// <summary>
  /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
  /// </summary>
  [JsonPropertyName("detailBoolean")]
  public bool? DetailBoolean { get; set; }
  [JsonPropertyName("_detailBoolean")]
  public Element _DetailBoolean { get; set; }
  /// <summary>
  /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
  /// </summary>
  [JsonPropertyName("detailInteger")]
  public int? DetailInteger { get; set; }
  [JsonPropertyName("_detailInteger")]
  public Element _DetailInteger { get; set; }
  /// <summary>
  /// A CodeableConcept with just a text would be used instead of a string if the field was usually coded, or if the type associated with the Goal.target.measure defines a coded value.
  /// </summary>
  [JsonPropertyName("detailRatio")]
  public Ratio? DetailRatio { get; set; }
  [JsonPropertyName("_detailRatio")]
  public Element _DetailRatio { get; set; }
  /// <summary>
  /// Indicates either the date or the duration after start by which the goal should be met.
  /// </summary>
  [JsonPropertyName("dueDate")]
  public string? DueDate { get; set; }
  [JsonPropertyName("_dueDate")]
  public Element _DueDate { get; set; }
  /// <summary>
  /// Indicates either the date or the duration after start by which the goal should be met.
  /// </summary>
  [JsonPropertyName("dueDuration")]
  public Duration? DueDuration { get; set; }
  [JsonPropertyName("_dueDuration")]
  public Element _DueDuration { get; set; }
  /// <summary>
  /// The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
  /// </summary>
  [JsonPropertyName("measure")]
  public CodeableConcept? Measure { get; set; }
  [JsonPropertyName("_measure")]
  public Element _Measure { get; set; }
}
public class Goal : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Goal";
  /// <summary>
  /// Describes the progression, or lack thereof, towards the goal against the target.
  /// </summary>
  [JsonPropertyName("achievementStatus")]
  public CodeableConcept? AchievementStatus { get; set; }
  [JsonPropertyName("_achievementStatus")]
  public Element _AchievementStatus { get; set; }
  /// <summary>
  /// The identified conditions and other health record elements that are intended to be addressed by the goal.
  /// </summary>
  [JsonPropertyName("addresses")]
  public Reference?[] Addresses { get; set; }
  [JsonPropertyName("_addresses")]
  public Element[] _Addresses { get; set; }
  /// <summary>
  /// Indicates a category the goal falls within.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// For example, getting a yellow fever vaccination for a planned trip is a goal that is designed to be completed (continuous = false).  A goal to sustain HbA1c levels would not be a one-time goal (continuous = true).
  /// </summary>
  [JsonPropertyName("continuous")]
  public bool? Continuous { get; set; }
  [JsonPropertyName("_continuous")]
  public Element _Continuous { get; set; }
  /// <summary>
  /// If no code is available, use CodeableConcept.text.
  /// </summary>
  [JsonPropertyName("description")]
  public CodeableConcept Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// This is the individual responsible for establishing the goal, not necessarily who recorded it.  (For that, use the Provenance resource.).
  /// </summary>
  [JsonPropertyName("expressedBy")]
  public Reference? ExpressedBy { get; set; }
  [JsonPropertyName("_expressedBy")]
  public Element _ExpressedBy { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the lifecycleStatus contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("lifecycleStatus")]
  public string LifecycleStatus { get; set; }
  [JsonPropertyName("_lifecycleStatus")]
  public Element _LifecycleStatus { get; set; }
  /// <summary>
  /// May be used for progress notes, concerns or other related information that doesn't actually describe the goal itself.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Note that this should not duplicate the goal status; The goal outcome is independent of the outcome of the related activities.  For example, if the Goal is to achieve a target body weight of 150 lb and a care plan activity is defined to diet, then the care plan’s activity outcome could be calories consumed whereas goal outcome is an observation for the actual body weight measured.
  /// </summary>
  [JsonPropertyName("outcome")]
  public CodeableReference?[] Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element[] _Outcome { get; set; }
  /// <summary>
  /// Extensions are available to track priorities as established by each participant (i.e. Priority from the patient's perspective, different practitioners' perspectives, family member's perspectives)The ordinal extension on Coding can be used to convey a numerically comparable ranking to priority.  (Keep in mind that different coding systems may use a "low value=important".
  /// </summary>
  [JsonPropertyName("priority")]
  public CodeableConcept? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// The date or event after which the goal should begin being pursued.
  /// </summary>
  [JsonPropertyName("startDate")]
  public string? StartDate { get; set; }
  [JsonPropertyName("_startDate")]
  public Element _StartDate { get; set; }
  /// <summary>
  /// The date or event after which the goal should begin being pursued.
  /// </summary>
  [JsonPropertyName("startCodeableConcept")]
  public CodeableConcept? StartCodeableConcept { get; set; }
  [JsonPropertyName("_startCodeableConcept")]
  public Element _StartCodeableConcept { get; set; }
  /// <summary>
  /// To see the date for past statuses, query history.
  /// </summary>
  [JsonPropertyName("statusDate")]
  public string? StatusDate { get; set; }
  [JsonPropertyName("_statusDate")]
  public Element _StatusDate { get; set; }
  /// <summary>
  /// This will typically be captured for statuses such as rejected, on-hold or cancelled, but could be present for others.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public string? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
  /// <summary>
  /// Identifies the patient, group or organization for whom the goal is being established.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// When multiple targets are present for a single goal instance, all targets must be met for the overall goal to be met.
  /// </summary>
  [JsonPropertyName("target")]
  public GoalTarget?[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
}
/// <summary>
/// Code Values for the Goal.lifecycleStatus field
/// </summary>
public sealed class GoalLifecycleStatusCodes {
  public const string PROPOSED = "proposed";
  public const string PLANNED = "planned";
  public const string ACCEPTED = "accepted";
  public const string ACTIVE = "active";
  public const string ON_HOLD = "on-hold";
  public const string COMPLETED = "completed";
  public const string CANCELLED = "cancelled";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string REJECTED = "rejected";
}
/// <summary>
/// Compartment Consistency Rules.
/// </summary>
public class GraphDefinitionLinkTargetCompartment : BackboneElement {
  /// <summary>
  /// Identifies the compartment.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Documentation for FHIRPath expression.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Custom rule, as a FHIRPath expression.
  /// </summary>
  [JsonPropertyName("expression")]
  public string? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// identical | matching | different | no-rule | custom.
  /// </summary>
  [JsonPropertyName("rule")]
  public string Rule { get; set; }
  [JsonPropertyName("_rule")]
  public Element _Rule { get; set; }
  /// <summary>
  /// All conditional rules are evaluated; if they are true, then the rules are evaluated.
  /// </summary>
  [JsonPropertyName("use")]
  public string Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// Code Values for the GraphDefinition.link.target.compartment.code field
/// </summary>
public sealed class GraphDefinitionLinkTargetCompartmentCodeCodes {
  public const string PATIENT = "Patient";
  public const string ENCOUNTER = "Encounter";
  public const string RELATEDPERSON = "RelatedPerson";
  public const string PRACTITIONER = "Practitioner";
  public const string DEVICE = "Device";
}
/// <summary>
/// Code Values for the GraphDefinition.link.target.compartment.rule field
/// </summary>
public sealed class GraphDefinitionLinkTargetCompartmentRuleCodes {
  public const string IDENTICAL = "identical";
  public const string MATCHING = "matching";
  public const string DIFFERENT = "different";
  public const string CUSTOM = "custom";
}
/// <summary>
/// Code Values for the GraphDefinition.link.target.compartment.use field
/// </summary>
public sealed class GraphDefinitionLinkTargetCompartmentUseCodes {
  public const string CONDITION = "condition";
  public const string REQUIREMENT = "requirement";
}
/// <summary>
/// Potential target for the link.
/// </summary>
public class GraphDefinitionLinkTarget : BackboneElement {
  /// <summary>
  /// Compartment Consistency Rules.
  /// </summary>
  [JsonPropertyName("compartment")]
  public GraphDefinitionLinkTargetCompartment?[] Compartment { get; set; }
  [JsonPropertyName("_compartment")]
  public Element[] _Compartment { get; set; }
  /// <summary>
  /// Additional links from target resource.
  /// </summary>
  [JsonPropertyName("link")]
  public GraphDefinitionLink?[] Link { get; set; }
  [JsonPropertyName("_link")]
  public Element[] _Link { get; set; }
  /// <summary>
  /// At least one of the parameters must have the value {ref} which identifies the focus resource.
  /// </summary>
  [JsonPropertyName("params")]
  public string? Params { get; set; }
  [JsonPropertyName("_params")]
  public Element _Params { get; set; }
  /// <summary>
  /// Profile for the target resource.
  /// </summary>
  [JsonPropertyName("profile")]
  public string? Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
  /// <summary>
  /// Type of resource this link refers to.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the GraphDefinition.link.target.type field
/// </summary>
public sealed class GraphDefinitionLinkTargetTypeCodes {
  public const string TYPE = "Type";
}
/// <summary>
/// Links this graph makes rules about.
/// </summary>
public class GraphDefinitionLink : BackboneElement {
  /// <summary>
  /// Information about why this link is of interest in this graph definition.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Maximum occurrences for this link.
  /// </summary>
  [JsonPropertyName("max")]
  public string? Max { get; set; }
  [JsonPropertyName("_max")]
  public Element _Max { get; set; }
  /// <summary>
  /// Minimum occurrences for this link.
  /// </summary>
  [JsonPropertyName("min")]
  public int? Min { get; set; }
  [JsonPropertyName("_min")]
  public Element _Min { get; set; }
  /// <summary>
  /// The path expression cannot contain a resolve() function. If there is no path, the link is a reverse lookup, using target.params. If the path is "*" then this means all references in the resource.
  /// </summary>
  [JsonPropertyName("path")]
  public string? Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
  /// <summary>
  /// Which slice (if profiled).
  /// </summary>
  [JsonPropertyName("sliceName")]
  public string? SliceName { get; set; }
  [JsonPropertyName("_sliceName")]
  public Element _SliceName { get; set; }
  /// <summary>
  /// Potential target for the link.
  /// </summary>
  [JsonPropertyName("target")]
  public GraphDefinitionLinkTarget?[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
}
public class GraphDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "GraphDefinition";
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the graph definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the graph definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the graph definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the graph definition is presumed to be the predominant language in the place the graph definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of graph definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// It may be possible for the graph definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// Links this graph makes rules about.
  /// </summary>
  [JsonPropertyName("link")]
  public GraphDefinitionLink?[] Link { get; set; }
  [JsonPropertyName("_link")]
  public Element[] _Link { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The code does not include the '$' prefix that is always included in the URL when the operation is invoked.
  /// </summary>
  [JsonPropertyName("profile")]
  public string? Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the graph definition is the organization or individual primarily responsible for the maintenance and upkeep of the graph definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the graph definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the graph definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this graph definition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// The type of FHIR resource at which instances of this graph start.
  /// </summary>
  [JsonPropertyName("start")]
  public string Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
  /// <summary>
  /// Allows filtering of graph definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different graph definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the graph definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the GraphDefinition.start field
/// </summary>
public sealed class GraphDefinitionStartCodes {
  public const string TYPE = "Type";
}
/// <summary>
/// Code Values for the GraphDefinition.status field
/// </summary>
public sealed class GraphDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// All the identified characteristics must be true for an entity to a member of the group.
/// </summary>
public class GroupCharacteristic : BackboneElement {
  /// <summary>
  /// A code that identifies the kind of trait being asserted.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// This is labeled as "Is Modifier" because applications cannot wrongly include excluded members as included or vice versa.
  /// </summary>
  [JsonPropertyName("exclude")]
  public bool Exclude { get; set; }
  [JsonPropertyName("_exclude")]
  public Element _Exclude { get; set; }
  /// <summary>
  /// The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// For Range, it means members of the group have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// For Range, it means members of the group have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// For Range, it means members of the group have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// For Range, it means members of the group have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// For Range, it means members of the group have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
}
/// <summary>
/// Identifies the resource instances that are members of the group.
/// </summary>
public class GroupMember : BackboneElement {
  /// <summary>
  /// A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
  /// </summary>
  [JsonPropertyName("entity")]
  public Reference Entity { get; set; }
  [JsonPropertyName("_entity")]
  public Element _Entity { get; set; }
  /// <summary>
  /// A flag to indicate that the member is no longer in the group, but previously may have been a member.
  /// </summary>
  [JsonPropertyName("inactive")]
  public bool? Inactive { get; set; }
  [JsonPropertyName("_inactive")]
  public Element _Inactive { get; set; }
  /// <summary>
  /// The period that the member was in the group, if known.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
}
public class Group : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Group";
  /// <summary>
  /// Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
  /// </summary>
  [JsonPropertyName("actual")]
  public bool Actual { get; set; }
  [JsonPropertyName("_actual")]
  public Element _Actual { get; set; }
  /// <summary>
  /// All the identified characteristics must be true for an entity to a member of the group.
  /// </summary>
  [JsonPropertyName("characteristic")]
  public GroupCharacteristic?[] Characteristic { get; set; }
  [JsonPropertyName("_characteristic")]
  public Element[] _Characteristic { get; set; }
  /// <summary>
  /// This would generally be omitted for Person resources.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A unique business identifier for this group.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This does not strictly align with ownership of a herd or flock, but may suffice to represent that relationship in simple cases. More complex cases will require an extension.
  /// </summary>
  [JsonPropertyName("managingEntity")]
  public Reference? ManagingEntity { get; set; }
  [JsonPropertyName("_managingEntity")]
  public Element _ManagingEntity { get; set; }
  /// <summary>
  /// Identifies the resource instances that are members of the group.
  /// </summary>
  [JsonPropertyName("member")]
  public GroupMember?[] Member { get; set; }
  [JsonPropertyName("_member")]
  public Element[] _Member { get; set; }
  /// <summary>
  /// A label assigned to the group for human identification and communication.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Note that the quantity may be less than the number of members if some of the members are not active.
  /// </summary>
  [JsonPropertyName("quantity")]
  public uint? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Group members SHALL be of the appropriate resource type (Patient for person or animal; or Practitioner, Device, Medication or Substance for the other types.).
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Group.type field
/// </summary>
public sealed class GroupTypeCodes {
  public const string PERSON = "person";
  public const string ANIMAL = "animal";
  public const string PRACTITIONER = "practitioner";
  public const string DEVICE = "device";
  public const string MEDICATION = "medication";
  public const string SUBSTANCE = "substance";
}
/// <summary>
/// The GuidanceResponse resource supports recording the results of decision support interactions, reportability determination for public health, as well as the communication of additional data requirements for subsequent interactions.
/// </summary>
public class GuidanceResponse : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "GuidanceResponse";
  /// <summary>
  /// If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.
  /// </summary>
  [JsonPropertyName("dataRequirement")]
  public DataRequirement?[] DataRequirement { get; set; }
  [JsonPropertyName("_dataRequirement")]
  public Element[] _DataRequirement { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official copmletion of an encounter but still be tied to the context of the encounter.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.
  /// </summary>
  [JsonPropertyName("evaluationMessage")]
  public Reference?[] EvaluationMessage { get; set; }
  [JsonPropertyName("_evaluationMessage")]
  public Element[] _EvaluationMessage { get; set; }
  /// <summary>
  /// Allows a service to provide  unique, business identifiers for the response.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// An identifier, CodeableConcept or canonical reference to the guidance that was requested.
  /// </summary>
  [JsonPropertyName("moduleUri")]
  public string ModuleUri { get; set; }
  [JsonPropertyName("_moduleUri")]
  public Element _ModuleUri { get; set; }
  /// <summary>
  /// An identifier, CodeableConcept or canonical reference to the guidance that was requested.
  /// </summary>
  [JsonPropertyName("moduleCanonical")]
  public string ModuleCanonical { get; set; }
  [JsonPropertyName("_moduleCanonical")]
  public Element _ModuleCanonical { get; set; }
  /// <summary>
  /// An identifier, CodeableConcept or canonical reference to the guidance that was requested.
  /// </summary>
  [JsonPropertyName("moduleCodeableConcept")]
  public CodeableConcept ModuleCodeableConcept { get; set; }
  [JsonPropertyName("_moduleCodeableConcept")]
  public Element _ModuleCodeableConcept { get; set; }
  /// <summary>
  /// Provides a mechanism to communicate additional information about the response.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Indicates when the guidance response was processed.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
  /// </summary>
  [JsonPropertyName("outputParameters")]
  public Reference? OutputParameters { get; set; }
  [JsonPropertyName("_outputParameters")]
  public Element _OutputParameters { get; set; }
  /// <summary>
  /// Provides a reference to the device that performed the guidance.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference? Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element _Performer { get; set; }
  /// <summary>
  /// Describes the reason for the guidance response in coded or textual form, or Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.
  /// </summary>
  [JsonPropertyName("requestIdentifier")]
  public Identifier? RequestIdentifier { get; set; }
  [JsonPropertyName("_requestIdentifier")]
  public Element _RequestIdentifier { get; set; }
  /// <summary>
  /// The actions, if any, produced by the evaluation of the artifact.
  /// </summary>
  [JsonPropertyName("result")]
  public Reference? Result { get; set; }
  [JsonPropertyName("_result")]
  public Element _Result { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The patient for which the request was processed.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the GuidanceResponse.status field
/// </summary>
public sealed class GuidanceResponseStatusCodes {
  public const string SUCCESS = "success";
  public const string DATA_REQUESTED = "data-requested";
  public const string DATA_REQUIRED = "data-required";
  public const string IN_PROGRESS = "in-progress";
  public const string FAILURE = "failure";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Does this service have specific eligibility requirements that need to be met in order to use the service?
/// </summary>
public class HealthcareServiceEligibility : BackboneElement {
  /// <summary>
  /// Coded value for the eligibility.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The description of service eligibility should, in general, not exceed one or two paragraphs. It should be sufficient for a prospective consumer to determine if they are likely to be eligible or not. Where eligibility requirements and conditions are complex, it may simply be noted that an eligibility assessment is required. Where eligibility is determined by an outside source, such as an Act of Parliament, this should be noted, preferably with a reference to a commonly available copy of the source document such as a web page.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
}
/// <summary>
/// More detailed availability information may be provided in associated Schedule/Slot resources.
/// </summary>
public class HealthcareServiceAvailableTime : BackboneElement {
  /// <summary>
  /// Is this always available? (hence times are irrelevant) e.g. 24 hour service.
  /// </summary>
  [JsonPropertyName("allDay")]
  public bool? AllDay { get; set; }
  [JsonPropertyName("_allDay")]
  public Element _AllDay { get; set; }
  /// <summary>
  /// The time zone is expected to be for where this HealthcareService is provided at.
  /// </summary>
  [JsonPropertyName("availableEndTime")]
  public string? AvailableEndTime { get; set; }
  [JsonPropertyName("_availableEndTime")]
  public Element _AvailableEndTime { get; set; }
  /// <summary>
  /// The time zone is expected to be for where this HealthcareService is provided at.
  /// </summary>
  [JsonPropertyName("availableStartTime")]
  public string? AvailableStartTime { get; set; }
  [JsonPropertyName("_availableStartTime")]
  public Element _AvailableStartTime { get; set; }
  /// <summary>
  /// Indicates which days of the week are available between the start and end Times.
  /// </summary>
  [JsonPropertyName("daysOfWeek")]
  public string?[] DaysOfWeek { get; set; }
  [JsonPropertyName("_daysOfWeek")]
  public Element[] _DaysOfWeek { get; set; }
}
/// <summary>
/// Code Values for the HealthcareService.availableTime.daysOfWeek field
/// </summary>
public sealed class HealthcareServiceAvailableTimeDaysOfWeekCodes {
  public const string MON = "mon";
  public const string TUE = "tue";
  public const string WED = "wed";
  public const string THU = "thu";
  public const string FRI = "fri";
  public const string SAT = "sat";
  public const string SUN = "sun";
}
/// <summary>
/// The HealthcareService is not available during this period of time due to the provided reason.
/// </summary>
public class HealthcareServiceNotAvailable : BackboneElement {
  /// <summary>
  /// The reason that can be presented to the user as to why this time is not available.
  /// </summary>
  [JsonPropertyName("description")]
  public string Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Service is not available (seasonally or for a public holiday) from this date.
  /// </summary>
  [JsonPropertyName("during")]
  public Period? During { get; set; }
  [JsonPropertyName("_during")]
  public Element _During { get; set; }
}
public class HealthcareService : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "HealthcareService";
  /// <summary>
  /// This element is labeled as a modifier because it may be used to mark that the resource was created in error.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
  /// </summary>
  [JsonPropertyName("appointmentRequired")]
  public bool? AppointmentRequired { get; set; }
  [JsonPropertyName("_appointmentRequired")]
  public Element _AppointmentRequired { get; set; }
  /// <summary>
  /// A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
  /// </summary>
  [JsonPropertyName("availabilityExceptions")]
  public string? AvailabilityExceptions { get; set; }
  [JsonPropertyName("_availabilityExceptions")]
  public Element _AvailabilityExceptions { get; set; }
  /// <summary>
  /// More detailed availability information may be provided in associated Schedule/Slot resources.
  /// </summary>
  [JsonPropertyName("availableTime")]
  public HealthcareServiceAvailableTime?[] AvailableTime { get; set; }
  [JsonPropertyName("_availableTime")]
  public Element[] _AvailableTime { get; set; }
  /// <summary>
  /// Selecting a Service Category then determines the list of relevant service types that can be selected in the primary service type.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// These could be such things as is wheelchair accessible.
  /// </summary>
  [JsonPropertyName("characteristic")]
  public CodeableConcept?[] Characteristic { get; set; }
  [JsonPropertyName("_characteristic")]
  public Element[] _Characteristic { get; set; }
  /// <summary>
  /// Would expect that a user would not see this information on a search results, and it would only be available when viewing the complete details of the service.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// When using this property it indicates that the service is available with this language, it is not derived from the practitioners, and not all are required to use this language, just that this language is available while scheduling.
  /// </summary>
  [JsonPropertyName("communication")]
  public CodeableConcept?[] Communication { get; set; }
  [JsonPropertyName("_communication")]
  public Element[] _Communication { get; set; }
  /// <summary>
  /// The locations referenced by the coverage area can include both specific locations, including areas, and also conceptual domains too (mode = kind), such as a physical area (tri-state area) and some other attribute (covered by Example Care Organization). These types of Locations are often not managed by any specific organization. This could also include generic locations such as "in-home".
  /// </summary>
  [JsonPropertyName("coverageArea")]
  public Reference?[] CoverageArea { get; set; }
  [JsonPropertyName("_coverageArea")]
  public Element[] _CoverageArea { get; set; }
  /// <summary>
  /// Does this service have specific eligibility requirements that need to be met in order to use the service?
  /// </summary>
  [JsonPropertyName("eligibility")]
  public HealthcareServiceEligibility?[] Eligibility { get; set; }
  [JsonPropertyName("_eligibility")]
  public Element[] _Eligibility { get; set; }
  /// <summary>
  /// Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public Reference?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// Extra details about the service that can't be placed in the other fields.
  /// </summary>
  [JsonPropertyName("extraDetails")]
  public string? ExtraDetails { get; set; }
  [JsonPropertyName("_extraDetails")]
  public Element _ExtraDetails { get; set; }
  /// <summary>
  /// External identifiers for this item.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The location(s) where this healthcare service may be provided.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference?[] Location { get; set; }
  [JsonPropertyName("_location")]
  public Element[] _Location { get; set; }
  /// <summary>
  /// Further description of the service as it would be presented to a consumer while searching.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The HealthcareService is not available during this period of time due to the provided reason.
  /// </summary>
  [JsonPropertyName("notAvailable")]
  public HealthcareServiceNotAvailable?[] NotAvailable { get; set; }
  [JsonPropertyName("_notAvailable")]
  public Element[] _NotAvailable { get; set; }
  /// <summary>
  /// If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
  /// </summary>
  [JsonPropertyName("photo")]
  public Attachment? Photo { get; set; }
  [JsonPropertyName("_photo")]
  public Element _Photo { get; set; }
  /// <summary>
  /// Programs are often defined externally to an Organization, commonly by governments; e.g. Home and Community Care Programs, Homeless Program, ….
  /// </summary>
  [JsonPropertyName("program")]
  public CodeableConcept?[] Program { get; set; }
  [JsonPropertyName("_program")]
  public Element[] _Program { get; set; }
  /// <summary>
  /// This property is recommended to be the same as the Location's managingOrganization, and if not provided should be interpreted as such. If the Location does not have a managing Organization, then this property should be populated.
  /// </summary>
  [JsonPropertyName("providedBy")]
  public Reference? ProvidedBy { get; set; }
  [JsonPropertyName("_providedBy")]
  public Element _ProvidedBy { get; set; }
  /// <summary>
  /// Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.
  /// </summary>
  [JsonPropertyName("referralMethod")]
  public CodeableConcept?[] ReferralMethod { get; set; }
  [JsonPropertyName("_referralMethod")]
  public Element[] _ReferralMethod { get; set; }
  /// <summary>
  /// The provision means being commissioned by, contractually obliged or financially sourced. Types of costings that may apply to this healthcare service, such if the service may be available for free, some discounts available, or fees apply.
  /// </summary>
  [JsonPropertyName("serviceProvisionCode")]
  public CodeableConcept?[] ServiceProvisionCode { get; set; }
  [JsonPropertyName("_serviceProvisionCode")]
  public Element[] _ServiceProvisionCode { get; set; }
  /// <summary>
  /// Collection of specialties handled by the service site. This is more of a medical term.
  /// </summary>
  [JsonPropertyName("specialty")]
  public CodeableConcept?[] Specialty { get; set; }
  [JsonPropertyName("_specialty")]
  public Element[] _Specialty { get; set; }
  /// <summary>
  /// If this is empty, then refer to the location's contacts.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
  /// <summary>
  /// The specific type of service that may be delivered or performed.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// The procedure or code from which this ImagingStudy was part of.
/// </summary>
public class ImagingStudyProcedure : BackboneElement {
  /// <summary>
  /// The procedure which this ImagingStudy was part of.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
  /// <summary>
  /// The procedure which this ImagingStudy was part of.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
}
/// <summary>
/// If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
/// </summary>
public class ImagingStudySeriesPerformer : BackboneElement {
  /// <summary>
  /// Indicates who or what performed the series.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Distinguishes the type of involvement of the performer in the series.
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept? Function { get; set; }
  [JsonPropertyName("_function")]
  public Element _Function { get; set; }
}
/// <summary>
/// A single SOP instance within the series, e.g. an image, or presentation state.
/// </summary>
public class ImagingStudySeriesInstance : BackboneElement {
  /// <summary>
  /// The number of instance in the series.
  /// </summary>
  [JsonPropertyName("number")]
  public uint? Number { get; set; }
  [JsonPropertyName("_number")]
  public Element _Number { get; set; }
  /// <summary>
  /// DICOM instance  type.
  /// </summary>
  [JsonPropertyName("sopClass")]
  public Coding SopClass { get; set; }
  [JsonPropertyName("_sopClass")]
  public Element _SopClass { get; set; }
  /// <summary>
  /// Particularly for post-acquisition analytic objects, such as SR, presentation states, value mapping, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// See  [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html#sect_C.12.1).
  /// </summary>
  [JsonPropertyName("uid")]
  public string Uid { get; set; }
  [JsonPropertyName("_uid")]
  public Element _Uid { get; set; }
}
/// <summary>
/// Each study has one or more series of images or other content.
/// </summary>
public class ImagingStudySeries : BackboneElement {
  /// <summary>
  /// The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public Coding? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// A description of the series.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; and DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public Reference?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// A single SOP instance within the series, e.g. an image, or presentation state.
  /// </summary>
  [JsonPropertyName("instance")]
  public ImagingStudySeriesInstance?[] Instance { get; set; }
  [JsonPropertyName("_instance")]
  public Element[] _Instance { get; set; }
  /// <summary>
  /// The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
  /// </summary>
  [JsonPropertyName("laterality")]
  public Coding? Laterality { get; set; }
  [JsonPropertyName("_laterality")]
  public Element _Laterality { get; set; }
  /// <summary>
  /// The distinct modality for this series. This may include both aquisition and non-aquisition modalities.
  /// </summary>
  [JsonPropertyName("modality")]
  public Coding Modality { get; set; }
  [JsonPropertyName("_modality")]
  public Element _Modality { get; set; }
  /// <summary>
  /// The numeric identifier of this series in the study.
  /// </summary>
  [JsonPropertyName("number")]
  public uint? Number { get; set; }
  [JsonPropertyName("_number")]
  public Element _Number { get; set; }
  /// <summary>
  /// Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
  /// </summary>
  [JsonPropertyName("numberOfInstances")]
  public uint? NumberOfInstances { get; set; }
  [JsonPropertyName("_numberOfInstances")]
  public Element _NumberOfInstances { get; set; }
  /// <summary>
  /// If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
  /// </summary>
  [JsonPropertyName("performer")]
  public ImagingStudySeriesPerformer?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// The specimen imaged, e.g., for whole slide imaging of a biopsy.
  /// </summary>
  [JsonPropertyName("specimen")]
  public Reference?[] Specimen { get; set; }
  [JsonPropertyName("_specimen")]
  public Element[] _Specimen { get; set; }
  /// <summary>
  /// The date and time the series was started.
  /// </summary>
  [JsonPropertyName("started")]
  public string? Started { get; set; }
  [JsonPropertyName("_started")]
  public Element _Started { get; set; }
  /// <summary>
  /// See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
  /// </summary>
  [JsonPropertyName("uid")]
  public string Uid { get; set; }
  [JsonPropertyName("_uid")]
  public Element _Uid { get; set; }
}
public class ImagingStudy : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ImagingStudy";
  /// <summary>
  /// A list of the diagnostic requests that resulted in this imaging study being performed.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission test).
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances; or IHE Invoke Image Display (IID), which provides standard invocation of an imaging web viewer.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public Reference?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// See discussion under [Imaging Study Implementation Notes](imagingstudy.html#notes) for encoding of DICOM Study Instance UID. Accession Number should use ACSN Identifier type.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Who read the study and interpreted the images or other content.
  /// </summary>
  [JsonPropertyName("interpreter")]
  public Reference?[] Interpreter { get; set; }
  [JsonPropertyName("_interpreter")]
  public Element[] _Interpreter { get; set; }
  /// <summary>
  /// The principal physical location where the ImagingStudy was performed.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// A list of all the distinct values of series.modality. This may include both aquisition and non-aquisition modalities.
  /// </summary>
  [JsonPropertyName("modality")]
  public Coding?[] Modality { get; set; }
  [JsonPropertyName("_modality")]
  public Element[] _Modality { get; set; }
  /// <summary>
  /// Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
  /// </summary>
  [JsonPropertyName("numberOfInstances")]
  public uint? NumberOfInstances { get; set; }
  [JsonPropertyName("_numberOfInstances")]
  public Element _NumberOfInstances { get; set; }
  /// <summary>
  /// Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
  /// </summary>
  [JsonPropertyName("numberOfSeries")]
  public uint? NumberOfSeries { get; set; }
  [JsonPropertyName("_numberOfSeries")]
  public Element _NumberOfSeries { get; set; }
  /// <summary>
  /// The procedure or code from which this ImagingStudy was part of.
  /// </summary>
  [JsonPropertyName("procedure")]
  public ImagingStudyProcedure?[] Procedure { get; set; }
  [JsonPropertyName("_procedure")]
  public Element[] _Procedure { get; set; }
  /// <summary>
  /// Description of clinical condition indicating why the ImagingStudy was requested, and/or Indicates another resource whose existence justifies this Study.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The requesting/referring physician.
  /// </summary>
  [JsonPropertyName("referrer")]
  public Reference? Referrer { get; set; }
  [JsonPropertyName("_referrer")]
  public Element _Referrer { get; set; }
  /// <summary>
  /// Each study has one or more series of images or other content.
  /// </summary>
  [JsonPropertyName("series")]
  public ImagingStudySeries?[] Series { get; set; }
  [JsonPropertyName("_series")]
  public Element[] _Series { get; set; }
  /// <summary>
  /// Date and time the study started.
  /// </summary>
  [JsonPropertyName("started")]
  public string? Started { get; set; }
  [JsonPropertyName("_started")]
  public Element _Started { get; set; }
  /// <summary>
  /// Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// QA phantoms can be recorded with a Device; multiple subjects (such as mice) can be recorded with a Group.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the ImagingStudy.status field
/// </summary>
public sealed class ImagingStudyStatusCodes {
  public const string REGISTERED = "registered";
  public const string AVAILABLE = "available";
  public const string CANCELLED = "cancelled";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Indicates who performed the immunization event.
/// </summary>
public class ImmunizationPerformer : BackboneElement {
  /// <summary>
  /// When the individual practitioner who performed the action is known, it is best to send.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Describes the type of performance (e.g. ordering provider, administering provider, etc.).
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept? Function { get; set; }
  [JsonPropertyName("_function")]
  public Element _Function { get; set; }
}
/// <summary>
/// Educational material presented to the patient (or guardian) at the time of vaccine administration.
/// </summary>
public class ImmunizationEducation : BackboneElement {
  /// <summary>
  /// Identifier of the material presented to the patient.
  /// </summary>
  [JsonPropertyName("documentType")]
  public string? DocumentType { get; set; }
  [JsonPropertyName("_documentType")]
  public Element _DocumentType { get; set; }
  /// <summary>
  /// Date the educational material was given to the patient.
  /// </summary>
  [JsonPropertyName("presentationDate")]
  public string? PresentationDate { get; set; }
  [JsonPropertyName("_presentationDate")]
  public Element _PresentationDate { get; set; }
  /// <summary>
  /// Date the educational material was published.
  /// </summary>
  [JsonPropertyName("publicationDate")]
  public string? PublicationDate { get; set; }
  [JsonPropertyName("_publicationDate")]
  public Element _PublicationDate { get; set; }
  /// <summary>
  /// Reference pointer to the educational material given to the patient if the information was on line.
  /// </summary>
  [JsonPropertyName("reference")]
  public string? Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
}
/// <summary>
/// A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
/// </summary>
public class ImmunizationReaction : BackboneElement {
  /// <summary>
  /// Date of reaction to the immunization.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Details of the reaction.
  /// </summary>
  [JsonPropertyName("detail")]
  public Reference? Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element _Detail { get; set; }
  /// <summary>
  /// Self-reported indicator.
  /// </summary>
  [JsonPropertyName("reported")]
  public bool? Reported { get; set; }
  [JsonPropertyName("_reported")]
  public Element _Reported { get; set; }
}
/// <summary>
/// The protocol (set of recommendations) being followed by the provider who administered the dose.
/// </summary>
public class ImmunizationProtocolApplied : BackboneElement {
  /// <summary>
  /// Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
  /// </summary>
  [JsonPropertyName("authority")]
  public Reference? Authority { get; set; }
  [JsonPropertyName("_authority")]
  public Element _Authority { get; set; }
  /// <summary>
  /// The use of an integer is preferred if known. Text should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
  /// </summary>
  [JsonPropertyName("doseNumber")]
  public string DoseNumber { get; set; }
  [JsonPropertyName("_doseNumber")]
  public Element _DoseNumber { get; set; }
  /// <summary>
  /// One possible path to achieve presumed immunity against a disease - within the context of an authority.
  /// </summary>
  [JsonPropertyName("series")]
  public string? Series { get; set; }
  [JsonPropertyName("_series")]
  public Element _Series { get; set; }
  /// <summary>
  /// The use of an integer is preferred if known.
  /// </summary>
  [JsonPropertyName("seriesDoses")]
  public string? SeriesDoses { get; set; }
  [JsonPropertyName("_seriesDoses")]
  public Element _SeriesDoses { get; set; }
  /// <summary>
  /// The vaccine preventable disease the dose is being administered against.
  /// </summary>
  [JsonPropertyName("targetDisease")]
  public CodeableConcept?[] TargetDisease { get; set; }
  [JsonPropertyName("_targetDisease")]
  public Element[] _TargetDisease { get; set; }
}
public class Immunization : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Immunization";
  /// <summary>
  /// The quantity of vaccine product that was administered.
  /// </summary>
  [JsonPropertyName("doseQuantity")]
  public Quantity? DoseQuantity { get; set; }
  [JsonPropertyName("_doseQuantity")]
  public Element _DoseQuantity { get; set; }
  /// <summary>
  /// Educational material presented to the patient (or guardian) at the time of vaccine administration.
  /// </summary>
  [JsonPropertyName("education")]
  public ImmunizationEducation?[] Education { get; set; }
  [JsonPropertyName("_education")]
  public Element[] _Education { get; set; }
  /// <summary>
  /// The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Date vaccine batch expires.
  /// </summary>
  [JsonPropertyName("expirationDate")]
  public string? ExpirationDate { get; set; }
  [JsonPropertyName("_expirationDate")]
  public Element _ExpirationDate { get; set; }
  /// <summary>
  /// Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
  /// </summary>
  [JsonPropertyName("fundingSource")]
  public CodeableConcept? FundingSource { get; set; }
  [JsonPropertyName("_fundingSource")]
  public Element _FundingSource { get; set; }
  /// <summary>
  /// A unique identifier assigned to this immunization record.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Typically will not be populated if primarySource = True, not required even if primarySource = False.
  /// </summary>
  [JsonPropertyName("informationSourceCodeableConcept")]
  public CodeableConcept? InformationSourceCodeableConcept { get; set; }
  [JsonPropertyName("_informationSourceCodeableConcept")]
  public Element _InformationSourceCodeableConcept { get; set; }
  /// <summary>
  /// Typically will not be populated if primarySource = True, not required even if primarySource = False.
  /// </summary>
  [JsonPropertyName("informationSourceReference")]
  public Reference? InformationSourceReference { get; set; }
  [JsonPropertyName("_informationSourceReference")]
  public Element _InformationSourceReference { get; set; }
  /// <summary>
  /// Typically, the recognition of the dose being sub-potent is retrospective, after the administration (ex. notification of a manufacturer recall after administration). However, in the case of a partial administration (the patient moves unexpectedly and only some of the dose is actually administered), subpotency may be recognized immediately, but it is still important to record the event.
  /// </summary>
  [JsonPropertyName("isSubpotent")]
  public bool? IsSubpotent { get; set; }
  [JsonPropertyName("_isSubpotent")]
  public Element _IsSubpotent { get; set; }
  /// <summary>
  /// The service delivery location where the vaccine administration occurred.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// Lot number of the  vaccine product.
  /// </summary>
  [JsonPropertyName("lotNumber")]
  public string? LotNumber { get; set; }
  [JsonPropertyName("_lotNumber")]
  public Element _LotNumber { get; set; }
  /// <summary>
  /// Name of vaccine manufacturer.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference? Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element _Manufacturer { get; set; }
  /// <summary>
  /// Extra information about the immunization that is not conveyed by the other attributes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// When immunizations are given a specific date and time should always be known.   When immunizations are patient reported, a specific date might not be known.  Although partial dates are allowed, an adult patient might not be able to recall the year a childhood immunization was given. An exact date is always preferable, but the use of the String data type is acceptable when an exact date is not known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as a series of patient self-administered dose over a span of time. In cases like this, often, only the first dose (typically a provider supervised dose) is recorded with the occurrence indicating the date/time of the first dose.
  /// </summary>
  [JsonPropertyName("occurrenceString")]
  public string OccurrenceString { get; set; }
  [JsonPropertyName("_occurrenceString")]
  public Element _OccurrenceString { get; set; }
  /// <summary>
  /// The patient who either received or did not receive the immunization.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// Indicates who performed the immunization event.
  /// </summary>
  [JsonPropertyName("performer")]
  public ImmunizationPerformer?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// Reflects the “reliability” of the content.
  /// </summary>
  [JsonPropertyName("primarySource")]
  public bool? PrimarySource { get; set; }
  [JsonPropertyName("_primarySource")]
  public Element _PrimarySource { get; set; }
  /// <summary>
  /// Indicates a patient's eligibility for a funding program.
  /// </summary>
  [JsonPropertyName("programEligibility")]
  public CodeableConcept?[] ProgramEligibility { get; set; }
  [JsonPropertyName("_programEligibility")]
  public Element[] _ProgramEligibility { get; set; }
  /// <summary>
  /// The protocol (set of recommendations) being followed by the provider who administered the dose.
  /// </summary>
  [JsonPropertyName("protocolApplied")]
  public ImmunizationProtocolApplied?[] ProtocolApplied { get; set; }
  [JsonPropertyName("_protocolApplied")]
  public Element[] _ProtocolApplied { get; set; }
  /// <summary>
  /// A reaction may be an indication of an allergy or intolerance and, if this is determined to be the case, it should be recorded as a new AllergyIntolerance resource instance as most systems will not query against past Immunization.reaction elements.
  /// </summary>
  [JsonPropertyName("reaction")]
  public ImmunizationReaction?[] Reaction { get; set; }
  [JsonPropertyName("_reaction")]
  public Element[] _Reaction { get; set; }
  /// <summary>
  /// Describes why the immunization occurred in coded or textual form, or Indicates another resource (Condition, Observation or DiagnosticReport) whose existence justifies this immunization.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
  /// </summary>
  [JsonPropertyName("recorded")]
  public string? Recorded { get; set; }
  [JsonPropertyName("_recorded")]
  public Element _Recorded { get; set; }
  /// <summary>
  /// The path by which the vaccine product is taken into the body.
  /// </summary>
  [JsonPropertyName("route")]
  public CodeableConcept? Route { get; set; }
  [JsonPropertyName("_route")]
  public Element _Route { get; set; }
  /// <summary>
  /// Body site where vaccine was administered.
  /// </summary>
  [JsonPropertyName("site")]
  public CodeableConcept? Site { get; set; }
  [JsonPropertyName("_site")]
  public Element _Site { get; set; }
  /// <summary>
  /// Will generally be set to show that the immunization has been completed or not done.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This is generally only used for the status of "not-done". The reason for performing the immunization event is captured in reasonCode, not here.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
  /// <summary>
  /// Reason why a dose is considered to be subpotent.
  /// </summary>
  [JsonPropertyName("subpotentReason")]
  public CodeableConcept?[] SubpotentReason { get; set; }
  [JsonPropertyName("_subpotentReason")]
  public Element[] _SubpotentReason { get; set; }
  /// <summary>
  /// Vaccine that was administered or was to be administered.
  /// </summary>
  [JsonPropertyName("vaccineCode")]
  public CodeableConcept VaccineCode { get; set; }
  [JsonPropertyName("_vaccineCode")]
  public Element _VaccineCode { get; set; }
}
/// <summary>
/// Code Values for the Immunization.status field
/// </summary>
public sealed class ImmunizationStatusCodes {
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string NOT_DONE = "not-done";
}
public class ImmunizationEvaluation : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ImmunizationEvaluation";
  /// <summary>
  /// Indicates the authority who published the protocol (e.g. ACIP).
  /// </summary>
  [JsonPropertyName("authority")]
  public Reference? Authority { get; set; }
  [JsonPropertyName("_authority")]
  public Element _Authority { get; set; }
  /// <summary>
  /// The date the evaluation of the vaccine administration event was performed.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Additional information about the evaluation.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
  /// </summary>
  [JsonPropertyName("doseNumber")]
  public string? DoseNumber { get; set; }
  [JsonPropertyName("_doseNumber")]
  public Element _DoseNumber { get; set; }
  /// <summary>
  /// Indicates if the dose is valid or not valid with respect to the published recommendations.
  /// </summary>
  [JsonPropertyName("doseStatus")]
  public CodeableConcept DoseStatus { get; set; }
  [JsonPropertyName("_doseStatus")]
  public Element _DoseStatus { get; set; }
  /// <summary>
  /// Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.
  /// </summary>
  [JsonPropertyName("doseStatusReason")]
  public CodeableConcept?[] DoseStatusReason { get; set; }
  [JsonPropertyName("_doseStatusReason")]
  public Element[] _DoseStatusReason { get; set; }
  /// <summary>
  /// A unique identifier assigned to this immunization evaluation record.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The vaccine administration event being evaluated.
  /// </summary>
  [JsonPropertyName("immunizationEvent")]
  public Reference ImmunizationEvent { get; set; }
  [JsonPropertyName("_immunizationEvent")]
  public Element _ImmunizationEvent { get; set; }
  /// <summary>
  /// The individual for whom the evaluation is being done.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// One possible path to achieve presumed immunity against a disease - within the context of an authority.
  /// </summary>
  [JsonPropertyName("series")]
  public string? Series { get; set; }
  [JsonPropertyName("_series")]
  public Element _Series { get; set; }
  /// <summary>
  /// The use of an integer is preferred if known.
  /// </summary>
  [JsonPropertyName("seriesDoses")]
  public string? SeriesDoses { get; set; }
  [JsonPropertyName("_seriesDoses")]
  public Element _SeriesDoses { get; set; }
  /// <summary>
  /// Indicates the current status of the evaluation of the vaccination administration event.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The vaccine preventable disease the dose is being evaluated against.
  /// </summary>
  [JsonPropertyName("targetDisease")]
  public CodeableConcept TargetDisease { get; set; }
  [JsonPropertyName("_targetDisease")]
  public Element _TargetDisease { get; set; }
}
/// <summary>
/// Code Values for the ImmunizationEvaluation.status field
/// </summary>
public sealed class ImmunizationEvaluationStatusCodes {
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
/// </summary>
public class ImmunizationRecommendationRecommendationDateCriterion : BackboneElement {
  /// <summary>
  /// Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The date whose meaning is specified by dateCriterion.code.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// A given instance of the .recommendation backbone element should correspond to a single recommended administration.
/// </summary>
public class ImmunizationRecommendationRecommendation : BackboneElement {
  /// <summary>
  /// Vaccine(s) which should not be used to fulfill the recommendation.
  /// </summary>
  [JsonPropertyName("contraindicatedVaccineCode")]
  public CodeableConcept?[] ContraindicatedVaccineCode { get; set; }
  [JsonPropertyName("_contraindicatedVaccineCode")]
  public Element[] _ContraindicatedVaccineCode { get; set; }
  /// <summary>
  /// Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
  /// </summary>
  [JsonPropertyName("dateCriterion")]
  public ImmunizationRecommendationRecommendationDateCriterion?[] DateCriterion { get; set; }
  [JsonPropertyName("_dateCriterion")]
  public Element[] _DateCriterion { get; set; }
  /// <summary>
  /// Contains the description about the protocol under which the vaccine was administered.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The use of an integer is preferred if known. A string should only be used in cases where an integer is not available (such as when documenting a recurring booster dose).
  /// </summary>
  [JsonPropertyName("doseNumber")]
  public string? DoseNumber { get; set; }
  [JsonPropertyName("_doseNumber")]
  public Element _DoseNumber { get; set; }
  /// <summary>
  /// The reason for the assigned forecast status.
  /// </summary>
  [JsonPropertyName("forecastReason")]
  public CodeableConcept?[] ForecastReason { get; set; }
  [JsonPropertyName("_forecastReason")]
  public Element[] _ForecastReason { get; set; }
  /// <summary>
  /// Indicates the patient status with respect to the path to immunity for the target disease.
  /// </summary>
  [JsonPropertyName("forecastStatus")]
  public CodeableConcept ForecastStatus { get; set; }
  [JsonPropertyName("_forecastStatus")]
  public Element _ForecastStatus { get; set; }
  /// <summary>
  /// One possible path to achieve presumed immunity against a disease - within the context of an authority.
  /// </summary>
  [JsonPropertyName("series")]
  public string? Series { get; set; }
  [JsonPropertyName("_series")]
  public Element _Series { get; set; }
  /// <summary>
  /// The use of an integer is preferred if known.
  /// </summary>
  [JsonPropertyName("seriesDoses")]
  public string? SeriesDoses { get; set; }
  [JsonPropertyName("_seriesDoses")]
  public Element _SeriesDoses { get; set; }
  /// <summary>
  /// Immunization event history and/or evaluation that supports the status and recommendation.
  /// </summary>
  [JsonPropertyName("supportingImmunization")]
  public Reference?[] SupportingImmunization { get; set; }
  [JsonPropertyName("_supportingImmunization")]
  public Element[] _SupportingImmunization { get; set; }
  /// <summary>
  /// Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
  /// </summary>
  [JsonPropertyName("supportingPatientInformation")]
  public Reference?[] SupportingPatientInformation { get; set; }
  [JsonPropertyName("_supportingPatientInformation")]
  public Element[] _SupportingPatientInformation { get; set; }
  /// <summary>
  /// A given instance of the .recommendation backbone element should correspond to a single recommended administration but sometimes that administration (eg. MMR) will encompass multiple diseases, thus the targetDisease element is allowed to repeat.
  /// </summary>
  [JsonPropertyName("targetDisease")]
  public CodeableConcept?[] TargetDisease { get; set; }
  [JsonPropertyName("_targetDisease")]
  public Element[] _TargetDisease { get; set; }
  /// <summary>
  /// Vaccine(s) or vaccine group that pertain to the recommendation.
  /// </summary>
  [JsonPropertyName("vaccineCode")]
  public CodeableConcept?[] VaccineCode { get; set; }
  [JsonPropertyName("_vaccineCode")]
  public Element[] _VaccineCode { get; set; }
}
public class ImmunizationRecommendation : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ImmunizationRecommendation";
  /// <summary>
  /// Indicates the authority who published the protocol (e.g. ACIP).
  /// </summary>
  [JsonPropertyName("authority")]
  public Reference? Authority { get; set; }
  [JsonPropertyName("_authority")]
  public Element _Authority { get; set; }
  /// <summary>
  /// The date the immunization recommendation(s) were created.
  /// </summary>
  [JsonPropertyName("date")]
  public string Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// A unique identifier assigned to this particular recommendation record.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The patient the recommendation(s) are for.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// A given instance of the .recommendation backbone element should correspond to a single recommended administration.
  /// </summary>
  [JsonPropertyName("recommendation")]
  public ImmunizationRecommendationRecommendation[] Recommendation { get; set; }
  [JsonPropertyName("_recommendation")]
  public Element[] _Recommendation { get; set; }
}
/// <summary>
/// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
/// </summary>
public class ImplementationGuideDependsOn : BackboneElement {
  /// <summary>
  /// The NPM package name for the Implementation Guide that this IG depends on.
  /// </summary>
  [JsonPropertyName("packageId")]
  public string? PackageId { get; set; }
  [JsonPropertyName("_packageId")]
  public Element _PackageId { get; set; }
  /// <summary>
  /// Usually, A canonical reference to the implementation guide is the same as the master location at which the implementation guide is published.
  /// </summary>
  [JsonPropertyName("uri")]
  public string Uri { get; set; }
  [JsonPropertyName("_uri")]
  public Element _Uri { get; set; }
  /// <summary>
  /// This follows the syntax of the NPM packaging version field - see [[reference]].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
/// </summary>
public class ImplementationGuideGlobal : BackboneElement {
  /// <summary>
  /// A reference to the profile that all instances must conform to.
  /// </summary>
  [JsonPropertyName("profile")]
  public string Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
  /// <summary>
  /// The type must match that of the profile that is referred to but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the ImplementationGuide.global.type field
/// </summary>
public sealed class ImplementationGuideGlobalTypeCodes {
  public const string TYPE = "Type";
}
/// <summary>
/// Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
/// </summary>
public class ImplementationGuideDefinitionGrouping : BackboneElement {
  /// <summary>
  /// Human readable text describing the package.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The human-readable title to display for the package of resources when rendering the implementation guide.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
}
/// <summary>
/// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
/// </summary>
public class ImplementationGuideDefinitionResource : BackboneElement {
  /// <summary>
  /// This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Examples: 
  /// 
  /// * StructureDefinition -> Any 
  /// * ValueSet -> expansion 
  /// * OperationDefinition -> Parameters 
  /// * Questionnaire -> QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("exampleBoolean")]
  public bool? ExampleBoolean { get; set; }
  [JsonPropertyName("_exampleBoolean")]
  public Element _ExampleBoolean { get; set; }
  /// <summary>
  /// Examples: 
  /// 
  /// * StructureDefinition -> Any 
  /// * ValueSet -> expansion 
  /// * OperationDefinition -> Parameters 
  /// * Questionnaire -> QuestionnaireResponse.
  /// </summary>
  [JsonPropertyName("exampleCanonical")]
  public string? ExampleCanonical { get; set; }
  [JsonPropertyName("_exampleCanonical")]
  public Element _ExampleCanonical { get; set; }
  /// <summary>
  /// The resource SHALL be valid against all the versions it is specified to apply to. If the resource referred to is a StructureDefinition, the fhirVersion stated in the StructureDefinition cannot disagree with the version specified here; the specified versions SHALL include the version specified by the StructureDefinition, and may include additional versions using the [applicable-version](extension-structuredefinition-applicable-version.html) extension.
  /// </summary>
  [JsonPropertyName("fhirVersion")]
  public string?[] FhirVersion { get; set; }
  [JsonPropertyName("_fhirVersion")]
  public Element[] _FhirVersion { get; set; }
  /// <summary>
  /// This must correspond to a package.id element within this implementation guide.
  /// </summary>
  [JsonPropertyName("groupingId")]
  public string? GroupingId { get; set; }
  [JsonPropertyName("_groupingId")]
  public Element _GroupingId { get; set; }
  /// <summary>
  /// A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
}
/// <summary>
/// Code Values for the ImplementationGuide.definition.resource.fhirVersion field
/// </summary>
public sealed class ImplementationGuideDefinitionResourceFhirVersionCodes {
  public const string VERSIONS = "Versions";
}
/// <summary>
/// Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
/// </summary>
public class ImplementationGuideDefinitionPage : BackboneElement {
  /// <summary>
  /// A code that indicates how the page is generated.
  /// </summary>
  [JsonPropertyName("generation")]
  public string Generation { get; set; }
  [JsonPropertyName("_generation")]
  public Element _Generation { get; set; }
  /// <summary>
  /// The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).
  /// </summary>
  [JsonPropertyName("nameUrl")]
  public string NameUrl { get; set; }
  [JsonPropertyName("_nameUrl")]
  public Element _NameUrl { get; set; }
  /// <summary>
  /// The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).
  /// </summary>
  [JsonPropertyName("nameReference")]
  public Reference NameReference { get; set; }
  [JsonPropertyName("_nameReference")]
  public Element _NameReference { get; set; }
  /// <summary>
  /// The implementation guide breadcrumbs may be generated from this structure.
  /// </summary>
  [JsonPropertyName("page")]
  public ImplementationGuideDefinitionPage?[] Page { get; set; }
  [JsonPropertyName("_page")]
  public Element[] _Page { get; set; }
  /// <summary>
  /// A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
/// <summary>
/// Code Values for the ImplementationGuide.definition.page.generation field
/// </summary>
public sealed class ImplementationGuideDefinitionPageGenerationCodes {
  public const string HTML = "html";
  public const string MARKDOWN = "markdown";
  public const string XML = "xml";
  public const string GENERATED = "generated";
}
/// <summary>
/// see [confluence](https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parameters) for the parameters defined by the HL7 IG publisher.
/// </summary>
public class ImplementationGuideDefinitionParameter : BackboneElement {
  /// <summary>
  /// Code that identifies parameter.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Value for named type.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// A template for building resources.
/// </summary>
public class ImplementationGuideDefinitionTemplate : BackboneElement {
  /// <summary>
  /// Type of template specified.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The scope in which the template applies.
  /// </summary>
  [JsonPropertyName("scope")]
  public string? Scope { get; set; }
  [JsonPropertyName("_scope")]
  public Element _Scope { get; set; }
  /// <summary>
  /// The source location for the template.
  /// </summary>
  [JsonPropertyName("source")]
  public string Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
}
/// <summary>
/// Code Values for the ImplementationGuide.definition.template.code field
/// </summary>
public sealed class ImplementationGuideDefinitionTemplateCodeCodes {
  public const string TYPE = "Type";
}
/// <summary>
/// Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
/// </summary>
public class ImplementationGuideDefinition : BackboneElement {
  /// <summary>
  /// Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
  /// </summary>
  [JsonPropertyName("grouping")]
  public ImplementationGuideDefinitionGrouping?[] Grouping { get; set; }
  [JsonPropertyName("_grouping")]
  public Element[] _Grouping { get; set; }
  /// <summary>
  /// Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
  /// </summary>
  [JsonPropertyName("page")]
  public ImplementationGuideDefinitionPage? Page { get; set; }
  [JsonPropertyName("_page")]
  public Element _Page { get; set; }
  /// <summary>
  /// see [confluence](https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parameters) for the parameters defined by the HL7 IG publisher.
  /// </summary>
  [JsonPropertyName("parameter")]
  public ImplementationGuideDefinitionParameter?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
  /// <summary>
  /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
  /// </summary>
  [JsonPropertyName("resource")]
  public ImplementationGuideDefinitionResource[] Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element[] _Resource { get; set; }
  /// <summary>
  /// A template for building resources.
  /// </summary>
  [JsonPropertyName("template")]
  public ImplementationGuideDefinitionTemplate?[] Template { get; set; }
  [JsonPropertyName("_template")]
  public Element[] _Template { get; set; }
}
/// <summary>
/// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
/// </summary>
public class ImplementationGuideManifestResource : BackboneElement {
  /// <summary>
  /// Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
  /// </summary>
  [JsonPropertyName("exampleBoolean")]
  public bool? ExampleBoolean { get; set; }
  [JsonPropertyName("_exampleBoolean")]
  public Element _ExampleBoolean { get; set; }
  /// <summary>
  /// Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
  /// </summary>
  [JsonPropertyName("exampleCanonical")]
  public string? ExampleCanonical { get; set; }
  [JsonPropertyName("_exampleCanonical")]
  public Element _ExampleCanonical { get; set; }
  /// <summary>
  /// Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element _Reference { get; set; }
  /// <summary>
  /// Appending 'rendering' + "/" + this should resolve to the resource page.
  /// </summary>
  [JsonPropertyName("relativePath")]
  public string? RelativePath { get; set; }
  [JsonPropertyName("_relativePath")]
  public Element _RelativePath { get; set; }
}
/// <summary>
/// Information about a page within the IG.
/// </summary>
public class ImplementationGuideManifestPage : BackboneElement {
  /// <summary>
  /// Appending 'rendering' + "/" + page.name + "#" + page.anchor should resolve to the anchor.
  /// </summary>
  [JsonPropertyName("anchor")]
  public string?[] Anchor { get; set; }
  [JsonPropertyName("_anchor")]
  public Element[] _Anchor { get; set; }
  /// <summary>
  /// Appending 'rendering' + "/" + this should resolve to the page.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Label for the page intended for human display.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
/// <summary>
/// Information about an assembled implementation guide, created by the publication tooling.
/// </summary>
public class ImplementationGuideManifest : BackboneElement {
  /// <summary>
  /// Indicates a relative path to an image that exists within the IG.
  /// </summary>
  [JsonPropertyName("image")]
  public string?[] Image { get; set; }
  [JsonPropertyName("_image")]
  public Element[] _Image { get; set; }
  /// <summary>
  /// Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
  /// </summary>
  [JsonPropertyName("other")]
  public string?[] Other { get; set; }
  [JsonPropertyName("_other")]
  public Element[] _Other { get; set; }
  /// <summary>
  /// Information about a page within the IG.
  /// </summary>
  [JsonPropertyName("page")]
  public ImplementationGuideManifestPage?[] Page { get; set; }
  [JsonPropertyName("_page")]
  public Element[] _Page { get; set; }
  /// <summary>
  /// A pointer to official web page, PDF or other rendering of the implementation guide.
  /// </summary>
  [JsonPropertyName("rendering")]
  public string? Rendering { get; set; }
  [JsonPropertyName("_rendering")]
  public Element _Rendering { get; set; }
  /// <summary>
  /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
  /// </summary>
  [JsonPropertyName("resource")]
  public ImplementationGuideManifestResource[] Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element[] _Resource { get; set; }
}
/// <summary>
/// An implementation guide is able to define default profiles that must apply to any use of a resource, so validation services may need to take one or more implementation guide resources when validating.
/// </summary>
public class ImplementationGuide : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ImplementationGuide";
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
  /// </summary>
  [JsonPropertyName("definition")]
  public ImplementationGuideDefinition? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
  /// </summary>
  [JsonPropertyName("dependsOn")]
  public ImplementationGuideDependsOn?[] DependsOn { get; set; }
  [JsonPropertyName("_dependsOn")]
  public Element[] _DependsOn { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the implementation guide is presumed to be the predominant language in the place the implementation guide was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of implementation guides that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Most implementation guides target a single version - e.g. they describe how to use a particular version, and the profiles and examples etc are valid for that version. But some implementation guides describe how to use multiple different versions of FHIR to solve the same problem, or in concert with each other. Typically, the requirement to support multiple versions arises as implementation matures and different implementation communities are stuck at different versions by regulation or market dynamics.
  /// </summary>
  [JsonPropertyName("fhirVersion")]
  public string[] FhirVersion { get; set; }
  [JsonPropertyName("_fhirVersion")]
  public Element[] _FhirVersion { get; set; }
  /// <summary>
  /// See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
  /// </summary>
  [JsonPropertyName("global")]
  public ImplementationGuideGlobal?[] Global { get; set; }
  [JsonPropertyName("_global")]
  public Element[] _Global { get; set; }
  /// <summary>
  /// It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
  /// </summary>
  [JsonPropertyName("license")]
  public string? License { get; set; }
  [JsonPropertyName("_license")]
  public Element _License { get; set; }
  /// <summary>
  /// Information about an assembled implementation guide, created by the publication tooling.
  /// </summary>
  [JsonPropertyName("manifest")]
  public ImplementationGuideManifest? Manifest { get; set; }
  [JsonPropertyName("_manifest")]
  public Element _Manifest { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Many (if not all) IG publishing tools will require that this element be present. For implementation guides published through HL7 or the FHIR foundation, the FHIR product director assigns package IDs.
  /// </summary>
  [JsonPropertyName("packageId")]
  public string PackageId { get; set; }
  [JsonPropertyName("_packageId")]
  public Element _PackageId { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// Allows filtering of implementation guides that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the implementation guide with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the ImplementationGuide.fhirVersion field
/// </summary>
public sealed class ImplementationGuideFhirVersionCodes {
  public const string FHIR = "FHIR";
}
/// <summary>
/// Code Values for the ImplementationGuide.license field
/// </summary>
public sealed class ImplementationGuideLicenseCodes {
  public const string SPDX = "SPDX";
}
/// <summary>
/// Code Values for the ImplementationGuide.status field
/// </summary>
public sealed class ImplementationGuideStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Strength expressed in terms of a reference substance.
/// </summary>
public class IngredientSpecifiedSubstanceStrengthReferenceStrength : BackboneElement {
  /// <summary>
  /// The country or countries for which the strength range applies.
  /// </summary>
  [JsonPropertyName("country")]
  public CodeableConcept?[] Country { get; set; }
  [JsonPropertyName("_country")]
  public Element[] _Country { get; set; }
  /// <summary>
  /// For when strength is measured at a particular point or distance.
  /// </summary>
  [JsonPropertyName("measurementPoint")]
  public string? MeasurementPoint { get; set; }
  [JsonPropertyName("_measurementPoint")]
  public Element _MeasurementPoint { get; set; }
  /// <summary>
  /// Strength expressed in terms of a reference substance.
  /// </summary>
  [JsonPropertyName("strength")]
  public Ratio Strength { get; set; }
  [JsonPropertyName("_strength")]
  public Element _Strength { get; set; }
  /// <summary>
  /// Strength expressed in terms of a reference substance, upper limit.
  /// </summary>
  [JsonPropertyName("strengthHighLimit")]
  public Ratio? StrengthHighLimit { get; set; }
  [JsonPropertyName("_strengthHighLimit")]
  public Element _StrengthHighLimit { get; set; }
  /// <summary>
  /// Relevant reference substance.
  /// </summary>
  [JsonPropertyName("substanceCodeableConcept")]
  public CodeableConcept? SubstanceCodeableConcept { get; set; }
  [JsonPropertyName("_substanceCodeableConcept")]
  public Element _SubstanceCodeableConcept { get; set; }
  /// <summary>
  /// Relevant reference substance.
  /// </summary>
  [JsonPropertyName("substanceReference")]
  public Reference? SubstanceReference { get; set; }
  [JsonPropertyName("_substanceReference")]
  public Element _SubstanceReference { get; set; }
}
/// <summary>
/// Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
/// </summary>
public class IngredientSpecifiedSubstanceStrength : BackboneElement {
  /// <summary>
  /// The strength per unitary volume (or mass).
  /// </summary>
  [JsonPropertyName("concentration")]
  public Ratio? Concentration { get; set; }
  [JsonPropertyName("_concentration")]
  public Element _Concentration { get; set; }
  /// <summary>
  /// An upper limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the lower limit.
  /// </summary>
  [JsonPropertyName("concentrationHighLimit")]
  public Ratio? ConcentrationHighLimit { get; set; }
  [JsonPropertyName("_concentrationHighLimit")]
  public Element _ConcentrationHighLimit { get; set; }
  /// <summary>
  /// A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
  /// </summary>
  [JsonPropertyName("concentrationText")]
  public string? ConcentrationText { get; set; }
  [JsonPropertyName("_concentrationText")]
  public Element _ConcentrationText { get; set; }
  /// <summary>
  /// The country or countries for which the strength range applies.
  /// </summary>
  [JsonPropertyName("country")]
  public CodeableConcept?[] Country { get; set; }
  [JsonPropertyName("_country")]
  public Element[] _Country { get; set; }
  /// <summary>
  /// For when strength is measured at a particular point or distance.
  /// </summary>
  [JsonPropertyName("measurementPoint")]
  public string? MeasurementPoint { get; set; }
  [JsonPropertyName("_measurementPoint")]
  public Element _MeasurementPoint { get; set; }
  /// <summary>
  /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
  /// </summary>
  [JsonPropertyName("presentation")]
  public Ratio? Presentation { get; set; }
  [JsonPropertyName("_presentation")]
  public Element _Presentation { get; set; }
  /// <summary>
  /// An upper limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the high limit, with the presentation attribute becoming the lower limit.
  /// </summary>
  [JsonPropertyName("presentationHighLimit")]
  public Ratio? PresentationHighLimit { get; set; }
  [JsonPropertyName("_presentationHighLimit")]
  public Element _PresentationHighLimit { get; set; }
  /// <summary>
  /// A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
  /// </summary>
  [JsonPropertyName("presentationText")]
  public string? PresentationText { get; set; }
  [JsonPropertyName("_presentationText")]
  public Element _PresentationText { get; set; }
  /// <summary>
  /// Strength expressed in terms of a reference substance.
  /// </summary>
  [JsonPropertyName("referenceStrength")]
  public IngredientSpecifiedSubstanceStrengthReferenceStrength?[] ReferenceStrength { get; set; }
  [JsonPropertyName("_referenceStrength")]
  public Element[] _ReferenceStrength { get; set; }
}
/// <summary>
/// A specified substance that comprises this ingredient.
/// </summary>
public class IngredientSpecifiedSubstance : BackboneElement {
  /// <summary>
  /// Substance as a 'specified substance', implying extra substance related characteristics.
  /// </summary>
  [JsonPropertyName("codeCodeableConcept")]
  public CodeableConcept CodeCodeableConcept { get; set; }
  [JsonPropertyName("_codeCodeableConcept")]
  public Element _CodeCodeableConcept { get; set; }
  /// <summary>
  /// Substance as a 'specified substance', implying extra substance related characteristics.
  /// </summary>
  [JsonPropertyName("codeReference")]
  public Reference CodeReference { get; set; }
  [JsonPropertyName("_codeReference")]
  public Element _CodeReference { get; set; }
  /// <summary>
  /// Confidentiality level of the specified substance as the ingredient.
  /// </summary>
  [JsonPropertyName("confidentiality")]
  public CodeableConcept? Confidentiality { get; set; }
  [JsonPropertyName("_confidentiality")]
  public Element _Confidentiality { get; set; }
  /// <summary>
  /// The group of specified substance, e.g. group 1 to 4.
  /// </summary>
  [JsonPropertyName("group")]
  public CodeableConcept Group { get; set; }
  [JsonPropertyName("_group")]
  public Element _Group { get; set; }
  /// <summary>
  /// Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
  /// </summary>
  [JsonPropertyName("strength")]
  public IngredientSpecifiedSubstanceStrength?[] Strength { get; set; }
  [JsonPropertyName("_strength")]
  public Element[] _Strength { get; set; }
}
/// <summary>
/// The substance that comprises this ingredient.
/// </summary>
public class IngredientSubstance : BackboneElement {
  /// <summary>
  /// A code that represents the ingredient substance.
  /// </summary>
  [JsonPropertyName("codeCodeableConcept")]
  public CodeableConcept CodeCodeableConcept { get; set; }
  [JsonPropertyName("_codeCodeableConcept")]
  public Element _CodeCodeableConcept { get; set; }
  /// <summary>
  /// A code that represents the ingredient substance.
  /// </summary>
  [JsonPropertyName("codeReference")]
  public Reference CodeReference { get; set; }
  [JsonPropertyName("_codeReference")]
  public Element _CodeReference { get; set; }
  /// <summary>
  /// Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
  /// </summary>
  [JsonPropertyName("strength")]
  public IngredientSpecifiedSubstanceStrength?[] Strength { get; set; }
  [JsonPropertyName("_strength")]
  public Element[] _Strength { get; set; }
}
public class Ingredient : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Ingredient";
  /// <summary>
  /// If the ingredient is a known or suspected allergen.
  /// </summary>
  [JsonPropertyName("allergenicIndicator")]
  public bool? AllergenicIndicator { get; set; }
  [JsonPropertyName("_allergenicIndicator")]
  public Element _AllergenicIndicator { get; set; }
  /// <summary>
  /// A general description of the ingredient, or any supporting text. May be used for an unstructured list of excipients.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: Antioxidant, Alkalizing Agent.
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept?[] Function { get; set; }
  [JsonPropertyName("_function")]
  public Element[] _Function { get; set; }
  /// <summary>
  /// The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// The organization that manufactures this ingredient.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference?[] Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element[] _Manufacturer { get; set; }
  /// <summary>
  /// Ingredient role within a drug product e.g. Active ingredient, Excipient.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
  /// <summary>
  /// A specified substance that comprises this ingredient.
  /// </summary>
  [JsonPropertyName("specifiedSubstance")]
  public IngredientSpecifiedSubstance?[] SpecifiedSubstance { get; set; }
  [JsonPropertyName("_specifiedSubstance")]
  public Element[] _SpecifiedSubstance { get; set; }
  /// <summary>
  /// The substance that comprises this ingredient.
  /// </summary>
  [JsonPropertyName("substance")]
  public IngredientSubstance? Substance { get; set; }
  [JsonPropertyName("_substance")]
  public Element _Substance { get; set; }
}
/// <summary>
/// Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
/// </summary>
public class InsurancePlanContact : BackboneElement {
  /// <summary>
  /// Visiting or postal addresses for the contact.
  /// </summary>
  [JsonPropertyName("address")]
  public Address? Address { get; set; }
  [JsonPropertyName("_address")]
  public Element _Address { get; set; }
  /// <summary>
  /// A name associated with the contact.
  /// </summary>
  [JsonPropertyName("name")]
  public HumanName? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Indicates a purpose for which the contact can be reached.
  /// </summary>
  [JsonPropertyName("purpose")]
  public CodeableConcept? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// The specific limits on the benefit.
/// </summary>
public class InsurancePlanCoverageBenefitLimit : BackboneElement {
  /// <summary>
  /// Use `CodeableConcept.text` element if the data is free (uncoded) text.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
  /// </summary>
  [JsonPropertyName("value")]
  public Quantity? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Specific benefits under this type of coverage.
/// </summary>
public class InsurancePlanCoverageBenefit : BackboneElement {
  /// <summary>
  /// The specific limits on the benefit.
  /// </summary>
  [JsonPropertyName("limit")]
  public InsurancePlanCoverageBenefitLimit?[] Limit { get; set; }
  [JsonPropertyName("_limit")]
  public Element[] _Limit { get; set; }
  /// <summary>
  /// The referral requirements to have access/coverage for this benefit.
  /// </summary>
  [JsonPropertyName("requirement")]
  public string? Requirement { get; set; }
  [JsonPropertyName("_requirement")]
  public Element _Requirement { get; set; }
  /// <summary>
  /// Type of benefit (primary care; speciality care; inpatient; outpatient).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Details about the coverage offered by the insurance product.
/// </summary>
public class InsurancePlanCoverage : BackboneElement {
  /// <summary>
  /// Specific benefits under this type of coverage.
  /// </summary>
  [JsonPropertyName("benefit")]
  public InsurancePlanCoverageBenefit[] Benefit { get; set; }
  [JsonPropertyName("_benefit")]
  public Element[] _Benefit { get; set; }
  /// <summary>
  /// Networks are represented as a hierarchy of organization resources.
  /// </summary>
  [JsonPropertyName("network")]
  public Reference?[] Network { get; set; }
  [JsonPropertyName("_network")]
  public Element[] _Network { get; set; }
  /// <summary>
  /// Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Overall costs associated with the plan.
/// </summary>
public class InsurancePlanPlanGeneralCost : BackboneElement {
  /// <summary>
  /// Additional information about the general costs associated with this plan.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// Value of the cost.
  /// </summary>
  [JsonPropertyName("cost")]
  public Money? Cost { get; set; }
  [JsonPropertyName("_cost")]
  public Element _Cost { get; set; }
  /// <summary>
  /// Number of participants enrolled in the plan.
  /// </summary>
  [JsonPropertyName("groupSize")]
  public uint? GroupSize { get; set; }
  [JsonPropertyName("_groupSize")]
  public Element _GroupSize { get; set; }
  /// <summary>
  /// Type of cost.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// List of the costs associated with a specific benefit.
/// </summary>
public class InsurancePlanPlanSpecificCostBenefitCost : BackboneElement {
  /// <summary>
  /// Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
  /// </summary>
  [JsonPropertyName("applicability")]
  public CodeableConcept? Applicability { get; set; }
  [JsonPropertyName("_applicability")]
  public Element _Applicability { get; set; }
  /// <summary>
  /// Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
  /// </summary>
  [JsonPropertyName("qualifiers")]
  public CodeableConcept?[] Qualifiers { get; set; }
  [JsonPropertyName("_qualifiers")]
  public Element[] _Qualifiers { get; set; }
  /// <summary>
  /// Type of cost (copay; individual cap; family cap; coinsurance; deductible).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
  /// </summary>
  [JsonPropertyName("value")]
  public Quantity? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// List of the specific benefits under this category of benefit.
/// </summary>
public class InsurancePlanPlanSpecificCostBenefit : BackboneElement {
  /// <summary>
  /// List of the costs associated with a specific benefit.
  /// </summary>
  [JsonPropertyName("cost")]
  public InsurancePlanPlanSpecificCostBenefitCost?[] Cost { get; set; }
  [JsonPropertyName("_cost")]
  public Element[] _Cost { get; set; }
  /// <summary>
  /// Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Costs associated with the coverage provided by the product.
/// </summary>
public class InsurancePlanPlanSpecificCost : BackboneElement {
  /// <summary>
  /// List of the specific benefits under this category of benefit.
  /// </summary>
  [JsonPropertyName("benefit")]
  public InsurancePlanPlanSpecificCostBenefit?[] Benefit { get; set; }
  [JsonPropertyName("_benefit")]
  public Element[] _Benefit { get; set; }
  /// <summary>
  /// General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
}
/// <summary>
/// Details about an insurance plan.
/// </summary>
public class InsurancePlanPlan : BackboneElement {
  /// <summary>
  /// The geographic region in which a health insurance plan's benefits apply.
  /// </summary>
  [JsonPropertyName("coverageArea")]
  public Reference?[] CoverageArea { get; set; }
  [JsonPropertyName("_coverageArea")]
  public Element[] _CoverageArea { get; set; }
  /// <summary>
  /// Overall costs associated with the plan.
  /// </summary>
  [JsonPropertyName("generalCost")]
  public InsurancePlanPlanGeneralCost?[] GeneralCost { get; set; }
  [JsonPropertyName("_generalCost")]
  public Element[] _GeneralCost { get; set; }
  /// <summary>
  /// Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Networks are represented as a hierarchy of organization resources.
  /// </summary>
  [JsonPropertyName("network")]
  public Reference?[] Network { get; set; }
  [JsonPropertyName("_network")]
  public Element[] _Network { get; set; }
  /// <summary>
  /// Costs associated with the coverage provided by the product.
  /// </summary>
  [JsonPropertyName("specificCost")]
  public InsurancePlanPlanSpecificCost?[] SpecificCost { get; set; }
  [JsonPropertyName("_specificCost")]
  public Element[] _SpecificCost { get; set; }
  /// <summary>
  /// Type of plan. For example, "Platinum" or "High Deductable".
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class InsurancePlan : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "InsurancePlan";
  /// <summary>
  /// An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
  /// </summary>
  [JsonPropertyName("administeredBy")]
  public Reference? AdministeredBy { get; set; }
  [JsonPropertyName("_administeredBy")]
  public Element _AdministeredBy { get; set; }
  /// <summary>
  /// There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
  /// </summary>
  [JsonPropertyName("alias")]
  public string?[] Alias { get; set; }
  [JsonPropertyName("_alias")]
  public Element[] _Alias { get; set; }
  /// <summary>
  /// Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
  /// </summary>
  [JsonPropertyName("contact")]
  public InsurancePlanContact?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Details about the coverage offered by the insurance product.
  /// </summary>
  [JsonPropertyName("coverage")]
  public InsurancePlanCoverage?[] Coverage { get; set; }
  [JsonPropertyName("_coverage")]
  public Element[] _Coverage { get; set; }
  /// <summary>
  /// The geographic region in which a health insurance product's benefits apply.
  /// </summary>
  [JsonPropertyName("coverageArea")]
  public Reference?[] CoverageArea { get; set; }
  [JsonPropertyName("_coverageArea")]
  public Element[] _CoverageArea { get; set; }
  /// <summary>
  /// The technical endpoints providing access to services operated for the health insurance product.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public Reference?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Networks are represented as a hierarchy of organization resources.
  /// </summary>
  [JsonPropertyName("network")]
  public Reference?[] Network { get; set; }
  [JsonPropertyName("_network")]
  public Element[] _Network { get; set; }
  /// <summary>
  /// The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
  /// </summary>
  [JsonPropertyName("ownedBy")]
  public Reference? OwnedBy { get; set; }
  [JsonPropertyName("_ownedBy")]
  public Element _OwnedBy { get; set; }
  /// <summary>
  /// The period of time that the health insurance product is available.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Details about an insurance plan.
  /// </summary>
  [JsonPropertyName("plan")]
  public InsurancePlanPlan?[] Plan { get; set; }
  [JsonPropertyName("_plan")]
  public Element[] _Plan { get; set; }
  /// <summary>
  /// The current state of the health insurance product.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The kind of health insurance product.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Code Values for the InsurancePlan.status field
/// </summary>
public sealed class InsurancePlanStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Indicates who or what performed or participated in the charged service.
/// </summary>
public class InvoiceParticipant : BackboneElement {
  /// <summary>
  /// The device, practitioner, etc. who performed or participated in the service.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
}
/// <summary>
/// The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
/// </summary>
public class InvoiceLineItemPriceComponent : BackboneElement {
  /// <summary>
  /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
  /// </summary>
  [JsonPropertyName("factor")]
  public decimal? Factor { get; set; }
  [JsonPropertyName("_factor")]
  public Element _Factor { get; set; }
  /// <summary>
  /// This code identifies the type of the component.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Invoice.lineItem.priceComponent.type field
/// </summary>
public sealed class InvoiceLineItemPriceComponentTypeCodes {
  public const string VAL_BASE = "base";
  public const string SURCHARGE = "surcharge";
  public const string DEDUCTION = "deduction";
  public const string DISCOUNT = "discount";
  public const string TAX = "tax";
  public const string INFORMATIONAL = "informational";
}
/// <summary>
/// Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
/// </summary>
public class InvoiceLineItem : BackboneElement {
  /// <summary>
  /// The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
  /// </summary>
  [JsonPropertyName("chargeItemReference")]
  public Reference ChargeItemReference { get; set; }
  [JsonPropertyName("_chargeItemReference")]
  public Element _ChargeItemReference { get; set; }
  /// <summary>
  /// The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
  /// </summary>
  [JsonPropertyName("chargeItemCodeableConcept")]
  public CodeableConcept ChargeItemCodeableConcept { get; set; }
  [JsonPropertyName("_chargeItemCodeableConcept")]
  public Element _ChargeItemCodeableConcept { get; set; }
  /// <summary>
  /// The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
  /// </summary>
  [JsonPropertyName("priceComponent")]
  public InvoiceLineItemPriceComponent?[] PriceComponent { get; set; }
  [JsonPropertyName("_priceComponent")]
  public Element[] _PriceComponent { get; set; }
  /// <summary>
  /// Sequence in which the items appear on the invoice.
  /// </summary>
  [JsonPropertyName("sequence")]
  public uint? Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
}
public class Invoice : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Invoice";
  /// <summary>
  /// Systems posting the ChargeItems might not always be able to determine, which accounts the Items need to be places into. It is up to the potprocessing Financial System to apply internal rules to decide based on the Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem, which Account is appropriate.
  /// </summary>
  [JsonPropertyName("account")]
  public Reference? Account { get; set; }
  [JsonPropertyName("_account")]
  public Element _Account { get; set; }
  /// <summary>
  /// Derived Profiles may choose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
  /// </summary>
  [JsonPropertyName("cancelledReason")]
  public string? CancelledReason { get; set; }
  [JsonPropertyName("_cancelledReason")]
  public Element _CancelledReason { get; set; }
  /// <summary>
  /// The list of types may be constrained as appropriate for the type of charge item.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Practitioners and Devices can be associated with multiple organizations. It has to be made clear, on behalf of which Organization the services have been rendered.
  /// </summary>
  [JsonPropertyName("issuer")]
  public Reference? Issuer { get; set; }
  [JsonPropertyName("_issuer")]
  public Element _Issuer { get; set; }
  /// <summary>
  /// Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
  /// </summary>
  [JsonPropertyName("lineItem")]
  public InvoiceLineItem?[] LineItem { get; set; }
  [JsonPropertyName("_lineItem")]
  public Element[] _LineItem { get; set; }
  /// <summary>
  /// Comments made about the invoice by the issuer, subject, or other participants.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Indicates who or what performed or participated in the charged service.
  /// </summary>
  [JsonPropertyName("participant")]
  public InvoiceParticipant?[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// Derived Profiles may chose to add invariants requiring this field to be populated if either priceOverride or factorOverride have been filled.
  /// </summary>
  [JsonPropertyName("paymentTerms")]
  public string? PaymentTerms { get; set; }
  [JsonPropertyName("_paymentTerms")]
  public Element _PaymentTerms { get; set; }
  /// <summary>
  /// The individual or Organization responsible for balancing of this invoice.
  /// </summary>
  [JsonPropertyName("recipient")]
  public Reference? Recipient { get; set; }
  [JsonPropertyName("_recipient")]
  public Element _Recipient { get; set; }
  /// <summary>
  /// The current state of the Invoice.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The individual or set of individuals receiving the goods and services billed in this invoice.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
  /// </summary>
  [JsonPropertyName("totalGross")]
  public Money? TotalGross { get; set; }
  [JsonPropertyName("_totalGross")]
  public Element _TotalGross { get; set; }
  /// <summary>
  /// There is no reason to carry the price in the instance of a ChargeItem unless circumstances require a manual override. The list prices or are usually defined in a back catalogue of the billing codes  (see ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason to be provided if either factor or price are manually overridden.
  /// </summary>
  [JsonPropertyName("totalNet")]
  public Money? TotalNet { get; set; }
  [JsonPropertyName("_totalNet")]
  public Element _TotalNet { get; set; }
  /// <summary>
  /// The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
  /// </summary>
  [JsonPropertyName("totalPriceComponent")]
  public InvoiceLineItemPriceComponent?[] TotalPriceComponent { get; set; }
  [JsonPropertyName("_totalPriceComponent")]
  public Element[] _TotalPriceComponent { get; set; }
  /// <summary>
  /// Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Invoice.status field
/// </summary>
public sealed class InvoiceStatusCodes {
  public const string DRAFT = "draft";
  public const string ISSUED = "issued";
  public const string BALANCED = "balanced";
  public const string CANCELLED = "cancelled";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
public class Library : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Library";
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// An individiual or organization primarily involved in the creation and maintenance of the content.
  /// </summary>
  [JsonPropertyName("author")]
  public ContactDetail?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.
  /// </summary>
  [JsonPropertyName("content")]
  public Attachment?[] Content { get; set; }
  [JsonPropertyName("_content")]
  public Element[] _Content { get; set; }
  /// <summary>
  /// A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.
  /// </summary>
  [JsonPropertyName("dataRequirement")]
  public DataRequirement?[] DataRequirement { get; set; }
  [JsonPropertyName("_dataRequirement")]
  public Element[] _DataRequirement { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the library. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the library was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the library as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the library is presumed to be the predominant language in the place the library was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for internal coherence of the content.
  /// </summary>
  [JsonPropertyName("editor")]
  public ContactDetail?[] Editor { get; set; }
  [JsonPropertyName("_editor")]
  public Element[] _Editor { get; set; }
  /// <summary>
  /// The effective period for a library  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// An individual or organization responsible for officially endorsing the content for use in some setting.
  /// </summary>
  [JsonPropertyName("endorser")]
  public ContactDetail?[] Endorser { get; set; }
  [JsonPropertyName("_endorser")]
  public Element[] _Endorser { get; set; }
  /// <summary>
  /// Allows filtering of librarys that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this library outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the library to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The parameter element defines parameters used by the library.
  /// </summary>
  [JsonPropertyName("parameter")]
  public ParameterDefinition?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the library is the organization or individual primarily responsible for the maintenance and upkeep of the library. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the library. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the library. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this library.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Each related artifact is either an attachment, or a reference to another resource, but not both.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for review of some aspect of the content.
  /// </summary>
  [JsonPropertyName("reviewer")]
  public ContactDetail?[] Reviewer { get; set; }
  [JsonPropertyName("_reviewer")]
  public Element[] _Reviewer { get; set; }
  /// <summary>
  /// Allows filtering of libraries that are appropriate for use vs. not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A code or group definition that describes the intended subject of the contents of the library.
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// A code or group definition that describes the intended subject of the contents of the library.
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// An explanatory or alternate title for the library giving additional information about its content.
  /// </summary>
  [JsonPropertyName("subtitle")]
  public string? Subtitle { get; set; }
  [JsonPropertyName("_subtitle")]
  public Element _Subtitle { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.
  /// </summary>
  [JsonPropertyName("topic")]
  public CodeableConcept?[] Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element[] _Topic { get; set; }
  /// <summary>
  /// Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// A detailed description of how the library is used from a clinical perspective.
  /// </summary>
  [JsonPropertyName("usage")]
  public string? Usage { get; set; }
  [JsonPropertyName("_usage")]
  public Element _Usage { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different library instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the library with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the Library.status field
/// </summary>
public sealed class LibraryStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
/// </summary>
public class LinkageItem : BackboneElement {
  /// <summary>
  /// The resource instance being linked as part of the group.
  /// </summary>
  [JsonPropertyName("resource")]
  public Reference Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element _Resource { get; set; }
  /// <summary>
  /// Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Linkage.item.type field
/// </summary>
public sealed class LinkageItemTypeCodes {
  public const string SOURCE = "source";
  public const string ALTERNATE = "alternate";
  public const string HISTORICAL = "historical";
}
public class Linkage : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Linkage";
  /// <summary>
  /// If false, any asserted linkages should not be considered current/relevant/applicable.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.
  /// </summary>
  [JsonPropertyName("item")]
  public LinkageItem[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
}
/// <summary>
/// If there are no entries in the list, an emptyReason SHOULD be provided.
/// </summary>
public class ListEntry : BackboneElement {
  /// <summary>
  /// When this item was added to the list.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true. Both flag and deleted can only be used if the List.mode is "changes". A deleted entry should be displayed in narrative as deleted.  This element is labeled as a modifier because it indicates that an item is (to be) no longer in the list.
  /// </summary>
  [JsonPropertyName("deleted")]
  public bool? Deleted { get; set; }
  [JsonPropertyName("_deleted")]
  public Element _Deleted { get; set; }
  /// <summary>
  /// The flag can only be understood in the context of the List.code. If the flag means that the entry has actually been deleted from the list, the deleted element SHALL be true. Deleted can only be used if the List.mode is "changes".
  /// </summary>
  [JsonPropertyName("flag")]
  public CodeableConcept? Flag { get; set; }
  [JsonPropertyName("_flag")]
  public Element _Flag { get; set; }
  /// <summary>
  /// A reference to the actual resource from which data was derived.
  /// </summary>
  [JsonPropertyName("item")]
  public Reference Item { get; set; }
  [JsonPropertyName("_item")]
  public Element _Item { get; set; }
}
public class List : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "List";
  /// <summary>
  /// If there is no code, the purpose of the list is implied where it is used, such as in a document section using Document.section.code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The actual important date is the date of currency of the resources that were summarized, but it is usually assumed that these are current when the preparation occurs.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The various reasons for an empty list make a significant interpretation to its interpretation. Note that this code is for use when the entire list has been suppressed, and not for when individual items are omitted - implementers may consider using a text note or a flag on an entry in these cases.
  /// </summary>
  [JsonPropertyName("emptyReason")]
  public CodeableConcept? EmptyReason { get; set; }
  [JsonPropertyName("_emptyReason")]
  public Element _EmptyReason { get; set; }
  /// <summary>
  /// The encounter that is the context in which this list was created.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// If there are no entries in the list, an emptyReason SHOULD be provided.
  /// </summary>
  [JsonPropertyName("entry")]
  public ListEntry?[] Entry { get; set; }
  [JsonPropertyName("_entry")]
  public Element[] _Entry { get; set; }
  /// <summary>
  /// Identifier for the List assigned for business purposes outside the context of FHIR.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because a change list must not be misunderstood as a complete list.
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// Comments that apply to the overall list.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Applications SHOULD render ordered lists in the order provided, but MAY allow users to re-order based on their own preferences as well. If there is no order specified, the order is unknown, though there may still be some order.
  /// </summary>
  [JsonPropertyName("orderedBy")]
  public CodeableConcept? OrderedBy { get; set; }
  [JsonPropertyName("_orderedBy")]
  public Element _OrderedBy { get; set; }
  /// <summary>
  /// The primary source is the entity that made the decisions what items are in the list. This may be software or user.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Some purely arbitrary lists do not have a common subject, so this is optional.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// A label for the list assigned by the author.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
/// <summary>
/// Code Values for the List.mode field
/// </summary>
public sealed class ListModeCodes {
  public const string WORKING = "working";
  public const string SNAPSHOT = "snapshot";
  public const string CHANGES = "changes";
}
/// <summary>
/// Code Values for the List.status field
/// </summary>
public sealed class ListStatusCodes {
  public const string CURRENT = "current";
  public const string RETIRED = "retired";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
/// </summary>
public class LocationPosition : BackboneElement {
  /// <summary>
  /// Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
  /// </summary>
  [JsonPropertyName("altitude")]
  public decimal? Altitude { get; set; }
  [JsonPropertyName("_altitude")]
  public Element _Altitude { get; set; }
  /// <summary>
  /// Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
  /// </summary>
  [JsonPropertyName("latitude")]
  public decimal Latitude { get; set; }
  [JsonPropertyName("_latitude")]
  public Element _Latitude { get; set; }
  /// <summary>
  /// Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
  /// </summary>
  [JsonPropertyName("longitude")]
  public decimal Longitude { get; set; }
  [JsonPropertyName("_longitude")]
  public Element _Longitude { get; set; }
}
/// <summary>
/// This type of information is commonly found published in directories and on websites informing customers when the facility is available.
/// 
/// Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
/// </summary>
public class LocationHoursOfOperation : BackboneElement {
  /// <summary>
  /// The Location is open all day.
  /// </summary>
  [JsonPropertyName("allDay")]
  public bool? AllDay { get; set; }
  [JsonPropertyName("_allDay")]
  public Element _AllDay { get; set; }
  /// <summary>
  /// Time that the Location closes.
  /// </summary>
  [JsonPropertyName("closingTime")]
  public string? ClosingTime { get; set; }
  [JsonPropertyName("_closingTime")]
  public Element _ClosingTime { get; set; }
  /// <summary>
  /// Indicates which days of the week are available between the start and end Times.
  /// </summary>
  [JsonPropertyName("daysOfWeek")]
  public string?[] DaysOfWeek { get; set; }
  [JsonPropertyName("_daysOfWeek")]
  public Element[] _DaysOfWeek { get; set; }
  /// <summary>
  /// Time that the Location opens.
  /// </summary>
  [JsonPropertyName("openingTime")]
  public string? OpeningTime { get; set; }
  [JsonPropertyName("_openingTime")]
  public Element _OpeningTime { get; set; }
}
/// <summary>
/// Code Values for the Location.hoursOfOperation.daysOfWeek field
/// </summary>
public sealed class LocationHoursOfOperationDaysOfWeekCodes {
  public const string MON = "mon";
  public const string TUE = "tue";
  public const string WED = "wed";
  public const string THU = "thu";
  public const string FRI = "fri";
  public const string SAT = "sat";
  public const string SUN = "sun";
}
public class Location : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Location";
  /// <summary>
  /// Additional addresses should be recorded using another instance of the Location resource, or via the Organization.
  /// </summary>
  [JsonPropertyName("address")]
  public Address? Address { get; set; }
  [JsonPropertyName("_address")]
  public Element _Address { get; set; }
  /// <summary>
  /// There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the location.
  /// </summary>
  [JsonPropertyName("alias")]
  public string?[] Alias { get; set; }
  [JsonPropertyName("_alias")]
  public Element[] _Alias { get; set; }
  /// <summary>
  /// A description of when the locations opening ours are different to normal, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as detailed in the opening hours Times.
  /// </summary>
  [JsonPropertyName("availabilityExceptions")]
  public string? AvailabilityExceptions { get; set; }
  [JsonPropertyName("_availabilityExceptions")]
  public Element _AvailabilityExceptions { get; set; }
  /// <summary>
  /// Description of the Location, which helps in finding or referencing the place.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Technical endpoints providing access to services operated for the location.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public Reference?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// This type of information is commonly found published in directories and on websites informing customers when the facility is available.
  /// 
  /// Specific services within the location may have their own hours which could be shorter (or longer) than the locations hours.
  /// </summary>
  [JsonPropertyName("hoursOfOperation")]
  public LocationHoursOfOperation?[] HoursOfOperation { get; set; }
  [JsonPropertyName("_hoursOfOperation")]
  public Element[] _HoursOfOperation { get; set; }
  /// <summary>
  /// Unique code or number identifying the location to its users.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This can also be used as the part of the organization hierarchy where this location provides services. These services can be defined through the HealthcareService resource.
  /// </summary>
  [JsonPropertyName("managingOrganization")]
  public Reference? ManagingOrganization { get; set; }
  [JsonPropertyName("_managingOrganization")]
  public Element _ManagingOrganization { get; set; }
  /// <summary>
  /// This is labeled as a modifier because whether or not the location is a class of locations changes how it can be used and understood.
  /// </summary>
  [JsonPropertyName("mode")]
  public string? Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// If the name of a location changes, consider putting the old name in the alias column so that it can still be located through searches.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
  /// </summary>
  [JsonPropertyName("operationalStatus")]
  public Coding? OperationalStatus { get; set; }
  [JsonPropertyName("_operationalStatus")]
  public Element _OperationalStatus { get; set; }
  /// <summary>
  /// Another Location of which this Location is physically a part of.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference? PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element _PartOf { get; set; }
  /// <summary>
  /// Physical form of the location, e.g. building, room, vehicle, road.
  /// </summary>
  [JsonPropertyName("physicalType")]
  public CodeableConcept? PhysicalType { get; set; }
  [JsonPropertyName("_physicalType")]
  public Element _PhysicalType { get; set; }
  /// <summary>
  /// The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).
  /// </summary>
  [JsonPropertyName("position")]
  public LocationPosition? Position { get; set; }
  [JsonPropertyName("_position")]
  public Element _Position { get; set; }
  /// <summary>
  /// The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
  /// <summary>
  /// Indicates the type of function performed at the location.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Code Values for the Location.mode field
/// </summary>
public sealed class LocationModeCodes {
  public const string INSTANCE = "instance";
  public const string KIND = "kind";
}
/// <summary>
/// Code Values for the Location.status field
/// </summary>
public sealed class LocationStatusCodes {
  public const string ACTIVE = "active";
  public const string SUSPENDED = "suspended";
  public const string INACTIVE = "inactive";
}
/// <summary>
/// General characteristics of this item.
/// </summary>
public class ManufacturedItemDefinitionProperty : BackboneElement {
  /// <summary>
  /// A code expressing the type of characteristic.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string? ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
}
public class ManufacturedItemDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ManufacturedItemDefinition";
  /// <summary>
  /// Unique identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The ingredients that make up this manufactured item.
  /// </summary>
  [JsonPropertyName("ingredient")]
  public Reference?[] Ingredient { get; set; }
  [JsonPropertyName("_ingredient")]
  public Element[] _Ingredient { get; set; }
  /// <summary>
  /// Dose form as manufactured and before any transformation into the pharmaceutical product.
  /// </summary>
  [JsonPropertyName("manufacturedDoseForm")]
  public CodeableConcept ManufacturedDoseForm { get; set; }
  [JsonPropertyName("_manufacturedDoseForm")]
  public Element _ManufacturedDoseForm { get; set; }
  /// <summary>
  /// Manufacturer of the item (Note that this should be named "manufacturer" but it currently causes technical issues).
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference?[] Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element[] _Manufacturer { get; set; }
  /// <summary>
  /// General characteristics of this item.
  /// </summary>
  [JsonPropertyName("property")]
  public ManufacturedItemDefinitionProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// The “real world” units in which the quantity of the manufactured item is described.
  /// </summary>
  [JsonPropertyName("unitOfPresentation")]
  public CodeableConcept? UnitOfPresentation { get; set; }
  [JsonPropertyName("_unitOfPresentation")]
  public Element _UnitOfPresentation { get; set; }
}
/// <summary>
/// A population criteria for the measure.
/// </summary>
public class MeasureGroupPopulation : BackboneElement {
  /// <summary>
  /// The type of population criteria.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// In the case of a continuous-variable or ratio measure, this may be the name of a function that calculates the value of the individual observation for each patient or event in the population. For these types of measures, individual observations are reported as observation resources included in the evaluatedResources bundle for each patient. See the MeasureReport resource or the Quality Reporting topic for more information.
  /// </summary>
  [JsonPropertyName("criteria")]
  public Expression Criteria { get; set; }
  [JsonPropertyName("_criteria")]
  public Element _Criteria { get; set; }
  /// <summary>
  /// The human readable description of this population criteria.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
}
/// <summary>
/// Stratifiers are defined either as a single criteria, or as a set of component criteria.
/// </summary>
public class MeasureGroupStratifierComponent : BackboneElement {
  /// <summary>
  /// Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
  /// </summary>
  [JsonPropertyName("criteria")]
  public Expression Criteria { get; set; }
  [JsonPropertyName("_criteria")]
  public Element _Criteria { get; set; }
  /// <summary>
  /// The human readable description of this stratifier criteria component.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
}
/// <summary>
/// The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
/// </summary>
public class MeasureGroupStratifier : BackboneElement {
  /// <summary>
  /// Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Stratifiers are defined either as a single criteria, or as a set of component criteria.
  /// </summary>
  [JsonPropertyName("component")]
  public MeasureGroupStratifierComponent?[] Component { get; set; }
  [JsonPropertyName("_component")]
  public Element[] _Component { get; set; }
  /// <summary>
  /// An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
  /// </summary>
  [JsonPropertyName("criteria")]
  public Expression? Criteria { get; set; }
  [JsonPropertyName("_criteria")]
  public Element _Criteria { get; set; }
  /// <summary>
  /// The human readable description of this stratifier criteria.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
}
/// <summary>
/// A group of population criteria for the measure.
/// </summary>
public class MeasureGroup : BackboneElement {
  /// <summary>
  /// Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The human readable description of this population group.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// A population criteria for the measure.
  /// </summary>
  [JsonPropertyName("population")]
  public MeasureGroupPopulation?[] Population { get; set; }
  [JsonPropertyName("_population")]
  public Element[] _Population { get; set; }
  /// <summary>
  /// The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
  /// </summary>
  [JsonPropertyName("stratifier")]
  public MeasureGroupStratifier?[] Stratifier { get; set; }
  [JsonPropertyName("_stratifier")]
  public Element[] _Stratifier { get; set; }
}
/// <summary>
/// Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
/// </summary>
public class MeasureSupplementalData : BackboneElement {
  /// <summary>
  /// Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element.
  /// </summary>
  [JsonPropertyName("criteria")]
  public Expression Criteria { get; set; }
  [JsonPropertyName("_criteria")]
  public Element _Criteria { get; set; }
  /// <summary>
  /// The human readable description of this supplemental data.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.
  /// </summary>
  [JsonPropertyName("usage")]
  public CodeableConcept?[] Usage { get; set; }
  [JsonPropertyName("_usage")]
  public Element[] _Usage { get; set; }
}
public class Measure : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Measure";
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// An individiual or organization primarily involved in the creation and maintenance of the content.
  /// </summary>
  [JsonPropertyName("author")]
  public ContactDetail?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
  /// </summary>
  [JsonPropertyName("clinicalRecommendationStatement")]
  public string? ClinicalRecommendationStatement { get; set; }
  [JsonPropertyName("_clinicalRecommendationStatement")]
  public Element _ClinicalRecommendationStatement { get; set; }
  /// <summary>
  /// If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
  /// </summary>
  [JsonPropertyName("compositeScoring")]
  public CodeableConcept? CompositeScoring { get; set; }
  [JsonPropertyName("_compositeScoring")]
  public Element _CompositeScoring { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the measure. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Provides a description of an individual term used within the measure.
  /// </summary>
  [JsonPropertyName("definition")]
  public string?[] Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element[] _Definition { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the measure was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the measure as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the measure is presumed to be the predominant language in the place the measure was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.
  /// </summary>
  [JsonPropertyName("disclaimer")]
  public string? Disclaimer { get; set; }
  [JsonPropertyName("_disclaimer")]
  public Element _Disclaimer { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for internal coherence of the content.
  /// </summary>
  [JsonPropertyName("editor")]
  public ContactDetail?[] Editor { get; set; }
  [JsonPropertyName("_editor")]
  public Element[] _Editor { get; set; }
  /// <summary>
  /// The effective period for a measure  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// An individual or organization responsible for officially endorsing the content for use in some setting.
  /// </summary>
  [JsonPropertyName("endorser")]
  public ContactDetail?[] Endorser { get; set; }
  [JsonPropertyName("_endorser")]
  public Element[] _Endorser { get; set; }
  /// <summary>
  /// Allows filtering of measures that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// A group of population criteria for the measure.
  /// </summary>
  [JsonPropertyName("group")]
  public MeasureGroup?[] Group { get; set; }
  [JsonPropertyName("_group")]
  public Element[] _Group { get; set; }
  /// <summary>
  /// Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
  /// </summary>
  [JsonPropertyName("guidance")]
  public string? Guidance { get; set; }
  [JsonPropertyName("_guidance")]
  public Element _Guidance { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this measure outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
  /// </summary>
  [JsonPropertyName("improvementNotation")]
  public CodeableConcept? ImprovementNotation { get; set; }
  [JsonPropertyName("_improvementNotation")]
  public Element _ImprovementNotation { get; set; }
  /// <summary>
  /// It may be possible for the measure to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// A reference to a Library resource containing the formal logic used by the measure.
  /// </summary>
  [JsonPropertyName("library")]
  public string?[] Library { get; set; }
  [JsonPropertyName("_library")]
  public Element[] _Library { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the measure is the organization or individual primarily responsible for the maintenance and upkeep of the measure. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the measure. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the measure. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this measure.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// The measure rate for an organization or clinician is based upon the entities’ aggregate data and summarizes the performance of the entity over a given time period (e.g., monthly, quarterly, yearly). The aggregated data are derived from the results of a specific measure algorithm and, if appropriate, the application of specific risk adjustment models.  Can also be used to describe how to risk adjust the data based on supplemental data elements described in the eMeasure (e.g., pneumonia hospital measures antibiotic selection in the ICU versus non-ICU and then the roll-up of the two). This could be applied to aggregated cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state level).
  /// </summary>
  [JsonPropertyName("rateAggregation")]
  public string? RateAggregation { get; set; }
  [JsonPropertyName("_rateAggregation")]
  public Element _RateAggregation { get; set; }
  /// <summary>
  /// Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
  /// </summary>
  [JsonPropertyName("rationale")]
  public string? Rationale { get; set; }
  [JsonPropertyName("_rationale")]
  public Element _Rationale { get; set; }
  /// <summary>
  /// Each related artifact is either an attachment, or a reference to another resource, but not both.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for review of some aspect of the content.
  /// </summary>
  [JsonPropertyName("reviewer")]
  public ContactDetail?[] Reviewer { get; set; }
  [JsonPropertyName("_reviewer")]
  public Element[] _Reviewer { get; set; }
  /// <summary>
  /// Describes the method of adjusting for clinical severity and conditions present at the start of care that can influence patient outcomes for making valid comparisons of outcome measures across providers. Indicates whether a measure is subject to the statistical process for reducing, removing, or clarifying the influences of confounding factors to allow for more useful comparisons.
  /// </summary>
  [JsonPropertyName("riskAdjustment")]
  public string? RiskAdjustment { get; set; }
  [JsonPropertyName("_riskAdjustment")]
  public Element _RiskAdjustment { get; set; }
  /// <summary>
  /// Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
  /// </summary>
  [JsonPropertyName("scoring")]
  public CodeableConcept? Scoring { get; set; }
  [JsonPropertyName("_scoring")]
  public Element _Scoring { get; set; }
  /// <summary>
  /// Allows filtering of measures that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// The subject of the measure is critical in interpreting the criteria definitions, as the logic in the measures is evaluated with respect to a particular subject. This corresponds roughly to the notion of a Compartment in that it limits what content is available based on its relationship to the subject. In CQL, this corresponds to the context declaration.
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// An explanatory or alternate title for the measure giving additional information about its content.
  /// </summary>
  [JsonPropertyName("subtitle")]
  public string? Subtitle { get; set; }
  [JsonPropertyName("_subtitle")]
  public Element _Subtitle { get; set; }
  /// <summary>
  /// Note that supplemental data are reported as observations for each patient and included in the evaluatedResources bundle. See the MeasureReport resource or the Quality Reporting topic for more information.
  /// </summary>
  [JsonPropertyName("supplementalData")]
  public MeasureSupplementalData?[] SupplementalData { get; set; }
  [JsonPropertyName("_supplementalData")]
  public Element[] _SupplementalData { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.
  /// </summary>
  [JsonPropertyName("topic")]
  public CodeableConcept?[] Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element[] _Topic { get; set; }
  /// <summary>
  /// Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// A detailed description, from a clinical perspective, of how the measure is used.
  /// </summary>
  [JsonPropertyName("usage")]
  public string? Usage { get; set; }
  [JsonPropertyName("_usage")]
  public Element _Usage { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different measure instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the measure with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the Measure.status field
/// </summary>
public sealed class MeasureStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// The populations that make up the population group, one for each type of population appropriate for the measure.
/// </summary>
public class MeasureReportGroupPopulation : BackboneElement {
  /// <summary>
  /// The type of the population.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The number of members of the population.
  /// </summary>
  [JsonPropertyName("count")]
  public int? Count { get; set; }
  [JsonPropertyName("_count")]
  public Element _Count { get; set; }
  /// <summary>
  /// This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
  /// </summary>
  [JsonPropertyName("subjectResults")]
  public Reference? SubjectResults { get; set; }
  [JsonPropertyName("_subjectResults")]
  public Element _SubjectResults { get; set; }
}
/// <summary>
/// A stratifier component value.
/// </summary>
public class MeasureReportGroupStratifierStratumComponent : BackboneElement {
  /// <summary>
  /// The code for the stratum component value.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The stratum component value.
  /// </summary>
  [JsonPropertyName("value")]
  public CodeableConcept Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// The populations that make up the stratum, one for each type of population appropriate to the measure.
/// </summary>
public class MeasureReportGroupStratifierStratumPopulation : BackboneElement {
  /// <summary>
  /// The type of the population.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The number of members of the population in this stratum.
  /// </summary>
  [JsonPropertyName("count")]
  public int? Count { get; set; }
  [JsonPropertyName("_count")]
  public Element _Count { get; set; }
  /// <summary>
  /// This element refers to a List of subject level MeasureReport resources, one for each subject in this population in this stratum.
  /// </summary>
  [JsonPropertyName("subjectResults")]
  public Reference? SubjectResults { get; set; }
  [JsonPropertyName("_subjectResults")]
  public Element _SubjectResults { get; set; }
}
/// <summary>
/// This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
/// </summary>
public class MeasureReportGroupStratifierStratum : BackboneElement {
  /// <summary>
  /// A stratifier component value.
  /// </summary>
  [JsonPropertyName("component")]
  public MeasureReportGroupStratifierStratumComponent?[] Component { get; set; }
  [JsonPropertyName("_component")]
  public Element[] _Component { get; set; }
  /// <summary>
  /// The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
  /// </summary>
  [JsonPropertyName("measureScore")]
  public Quantity? MeasureScore { get; set; }
  [JsonPropertyName("_measureScore")]
  public Element _MeasureScore { get; set; }
  /// <summary>
  /// The populations that make up the stratum, one for each type of population appropriate to the measure.
  /// </summary>
  [JsonPropertyName("population")]
  public MeasureReportGroupStratifierStratumPopulation?[] Population { get; set; }
  [JsonPropertyName("_population")]
  public Element[] _Population { get; set; }
  /// <summary>
  /// The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
  /// </summary>
  [JsonPropertyName("value")]
  public CodeableConcept? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
/// </summary>
public class MeasureReportGroupStratifier : BackboneElement {
  /// <summary>
  /// The meaning of this stratifier, as defined in the measure definition.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.
  /// </summary>
  [JsonPropertyName("stratum")]
  public MeasureReportGroupStratifierStratum?[] Stratum { get; set; }
  [JsonPropertyName("_stratum")]
  public Element[] _Stratum { get; set; }
}
/// <summary>
/// The results of the calculation, one for each population group in the measure.
/// </summary>
public class MeasureReportGroup : BackboneElement {
  /// <summary>
  /// The meaning of the population group as defined in the measure definition.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
  /// </summary>
  [JsonPropertyName("measureScore")]
  public Quantity? MeasureScore { get; set; }
  [JsonPropertyName("_measureScore")]
  public Element _MeasureScore { get; set; }
  /// <summary>
  /// The populations that make up the population group, one for each type of population appropriate for the measure.
  /// </summary>
  [JsonPropertyName("population")]
  public MeasureReportGroupPopulation?[] Population { get; set; }
  [JsonPropertyName("_population")]
  public Element[] _Population { get; set; }
  /// <summary>
  /// When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.
  /// </summary>
  [JsonPropertyName("stratifier")]
  public MeasureReportGroupStratifier?[] Stratifier { get; set; }
  [JsonPropertyName("_stratifier")]
  public Element[] _Stratifier { get; set; }
}
public class MeasureReport : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MeasureReport";
  /// <summary>
  /// The date this measure report was generated.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// A reference to a Bundle containing the Resources that were used in the calculation of this measure.
  /// </summary>
  [JsonPropertyName("evaluatedResource")]
  public Reference?[] EvaluatedResource { get; set; }
  [JsonPropertyName("_evaluatedResource")]
  public Element[] _EvaluatedResource { get; set; }
  /// <summary>
  /// The results of the calculation, one for each population group in the measure.
  /// </summary>
  [JsonPropertyName("group")]
  public MeasureReportGroup?[] Group { get; set; }
  [JsonPropertyName("_group")]
  public Element[] _Group { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II data type - e.g. to identify this {{title}} outside of FHIR, where the logical URL is not possible to use.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This element is typically defined by the measure, but reproduced here to ensure the measure score can be interpreted. The element is labeled as a modifier because it changes the interpretation of the reported measure score.
  /// </summary>
  [JsonPropertyName("improvementNotation")]
  public CodeableConcept? ImprovementNotation { get; set; }
  [JsonPropertyName("_improvementNotation")]
  public Element _ImprovementNotation { get; set; }
  /// <summary>
  /// A reference to the Measure that was calculated to produce this report.
  /// </summary>
  [JsonPropertyName("measure")]
  public string Measure { get; set; }
  [JsonPropertyName("_measure")]
  public Element _Measure { get; set; }
  /// <summary>
  /// The reporting period for which the report was calculated.
  /// </summary>
  [JsonPropertyName("period")]
  public Period Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// The individual, location, or organization that is reporting the data.
  /// </summary>
  [JsonPropertyName("reporter")]
  public Reference? Reporter { get; set; }
  [JsonPropertyName("_reporter")]
  public Element _Reporter { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Optional subject identifying the individual or individuals the report is for.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Data-collection reports are used only to communicate data-of-interest for a measure. They do not necessarily include all the data for a particular subject or population, but they may.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the MeasureReport.status field
/// </summary>
public sealed class MeasureReportStatusCodes {
  public const string COMPLETE = "complete";
  public const string PENDING = "pending";
  public const string ERROR = "error";
}
/// <summary>
/// Code Values for the MeasureReport.type field
/// </summary>
public sealed class MeasureReportTypeCodes {
  public const string INDIVIDUAL = "individual";
  public const string SUBJECT_LIST = "subject-list";
  public const string SUMMARY = "summary";
  public const string DATA_COLLECTION = "data-collection";
}
/// <summary>
/// The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
/// </summary>
public class MedicationIngredient : BackboneElement {
  /// <summary>
  /// Indication of whether this ingredient affects the therapeutic action of the drug.
  /// </summary>
  [JsonPropertyName("isActive")]
  public bool? IsActive { get; set; }
  [JsonPropertyName("_isActive")]
  public Element _IsActive { get; set; }
  /// <summary>
  /// The ingredient (substance or medication) that the ingredient.strength relates to.  This is represented as a concept from a code system or described in another resource (Substance or Medication).
  /// </summary>
  [JsonPropertyName("item")]
  public CodeableReference Item { get; set; }
  [JsonPropertyName("_item")]
  public Element _Item { get; set; }
  /// <summary>
  /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
  /// </summary>
  [JsonPropertyName("strengthRatio")]
  public Ratio? StrengthRatio { get; set; }
  [JsonPropertyName("_strengthRatio")]
  public Element _StrengthRatio { get; set; }
  /// <summary>
  /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
  /// </summary>
  [JsonPropertyName("strengthCodeableConcept")]
  public CodeableConcept? StrengthCodeableConcept { get; set; }
  [JsonPropertyName("_strengthCodeableConcept")]
  public Element _StrengthCodeableConcept { get; set; }
  /// <summary>
  /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
  /// </summary>
  [JsonPropertyName("strengthQuantity")]
  public Quantity? StrengthQuantity { get; set; }
  [JsonPropertyName("_strengthQuantity")]
  public Element _StrengthQuantity { get; set; }
}
/// <summary>
/// Information that only applies to packages (not products).
/// </summary>
public class MedicationBatch : BackboneElement {
  /// <summary>
  /// When this specific batch of product will expire.
  /// </summary>
  [JsonPropertyName("expirationDate")]
  public string? ExpirationDate { get; set; }
  [JsonPropertyName("_expirationDate")]
  public Element _ExpirationDate { get; set; }
  /// <summary>
  /// The assigned lot number of a batch of the specified product.
  /// </summary>
  [JsonPropertyName("lotNumber")]
  public string? LotNumber { get; set; }
  [JsonPropertyName("_lotNumber")]
  public Element _LotNumber { get; set; }
}
public class Medication : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Medication";
  /// <summary>
  /// Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
  /// </summary>
  [JsonPropertyName("amount")]
  public Ratio? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Information that only applies to packages (not products).
  /// </summary>
  [JsonPropertyName("batch")]
  public MedicationBatch? Batch { get; set; }
  [JsonPropertyName("_batch")]
  public Element _Batch { get; set; }
  /// <summary>
  /// Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
  /// </summary>
  [JsonPropertyName("doseForm")]
  public CodeableConcept? DoseForm { get; set; }
  [JsonPropertyName("_doseForm")]
  public Element _DoseForm { get; set; }
  /// <summary>
  /// The serial number could be included as an identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The ingredients need not be a complete list.  If an ingredient is not specified, this does not indicate whether an ingredient is present or absent.  If an ingredient is specified it does not mean that all ingredients are specified.  It is possible to specify both inactive and active ingredients.
  /// </summary>
  [JsonPropertyName("ingredient")]
  public MedicationIngredient?[] Ingredient { get; set; }
  [JsonPropertyName("_ingredient")]
  public Element[] _Ingredient { get; set; }
  /// <summary>
  /// Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference? Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element _Manufacturer { get; set; }
  /// <summary>
  /// This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the Medication.status field
/// </summary>
public sealed class MedicationStatusCodes {
  public const string ACTIVE = "active";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Indicates who or what performed the medication administration and how they were involved.
/// </summary>
public class MedicationAdministrationPerformer : BackboneElement {
  /// <summary>
  /// Indicates who or what performed the medication administration.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Distinguishes the type of involvement of the performer in the medication administration.
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept? Function { get; set; }
  [JsonPropertyName("_function")]
  public Element _Function { get; set; }
}
/// <summary>
/// Describes the medication dosage information details e.g. dose, rate, site, route, etc.
/// </summary>
public class MedicationAdministrationDosage : BackboneElement {
  /// <summary>
  /// If the administration is not instantaneous (rate is present), this can be specified to convey the total amount administered over period of time of a single administration.
  /// </summary>
  [JsonPropertyName("dose")]
  public Quantity? Dose { get; set; }
  [JsonPropertyName("_dose")]
  public Element _Dose { get; set; }
  /// <summary>
  /// One of the reasons this attribute is not used often, is that the method is often pre-coordinated with the route and/or form of administration.  This means the codes used in route or form may pre-coordinate the method in the route code or the form code.  The implementation decision about what coding system to use for route or form code will determine how frequently the method code will be populated e.g. if route or form code pre-coordinate method code, then this attribute will not be populated often; if there is no pre-coordination then method code may  be used frequently.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
  /// </summary>
  [JsonPropertyName("rateRatio")]
  public Ratio? RateRatio { get; set; }
  [JsonPropertyName("_rateRatio")]
  public Element _RateRatio { get; set; }
  /// <summary>
  /// If the rate changes over time, and you want to capture this in MedicationAdministration, then each change should be captured as a distinct MedicationAdministration, with a specific MedicationAdministration.dosage.rate, and the date time when the rate change occurred. Typically, the MedicationAdministration.dosage.rate element is not used to convey an average rate.
  /// </summary>
  [JsonPropertyName("rateQuantity")]
  public Quantity? RateQuantity { get; set; }
  [JsonPropertyName("_rateQuantity")]
  public Element _RateQuantity { get; set; }
  /// <summary>
  /// A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
  /// </summary>
  [JsonPropertyName("route")]
  public CodeableConcept? Route { get; set; }
  [JsonPropertyName("_route")]
  public Element _Route { get; set; }
  /// <summary>
  /// If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [bodySite](extension-bodysite.html).  May be a summary code, or a reference to a very precise definition of the location, or both.
  /// </summary>
  [JsonPropertyName("site")]
  public CodeableConcept? Site { get; set; }
  [JsonPropertyName("_site")]
  public Element _Site { get; set; }
  /// <summary>
  /// Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.The dosage instructions should reflect the dosage of the medication that was administered.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
}
public class MedicationAdministration : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MedicationAdministration";
  /// <summary>
  /// A plan that is fulfilled in whole or in part by this MedicationDispense.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// The type of medication administration (for example, drug classification like ATC, where meds would be administered, legal category of the medication).
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The device used in administering the medication to the patient.  For example, a particular infusion pump.
  /// </summary>
  [JsonPropertyName("device")]
  public Reference?[] Device { get; set; }
  [JsonPropertyName("_device")]
  public Element[] _Device { get; set; }
  /// <summary>
  /// Describes the medication dosage information details e.g. dose, rate, site, route, etc.
  /// </summary>
  [JsonPropertyName("dosage")]
  public MedicationAdministrationDosage? Dosage { get; set; }
  [JsonPropertyName("_dosage")]
  public Element _Dosage { get; set; }
  /// <summary>
  /// The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.
  /// </summary>
  [JsonPropertyName("eventHistory")]
  public Reference?[] EventHistory { get; set; }
  [JsonPropertyName("_eventHistory")]
  public Element[] _EventHistory { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// A protocol, guideline, orderset, or other definition that was adhered to in whole or in part by this event.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationAdministration.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
  /// </summary>
  [JsonPropertyName("medication")]
  public CodeableReference Medication { get; set; }
  [JsonPropertyName("_medication")]
  public Element _Medication { get; set; }
  /// <summary>
  /// Extra information about the medication administration that is not conveyed by the other attributes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
  /// </summary>
  [JsonPropertyName("occurenceDateTime")]
  public string OccurenceDateTime { get; set; }
  [JsonPropertyName("_occurenceDateTime")]
  public Element _OccurenceDateTime { get; set; }
  /// <summary>
  /// A specific date/time or interval of time during which the administration took place (or did not take place). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
  /// </summary>
  [JsonPropertyName("occurencePeriod")]
  public Period OccurencePeriod { get; set; }
  [JsonPropertyName("_occurencePeriod")]
  public Element _OccurencePeriod { get; set; }
  /// <summary>
  /// A larger event of which this particular event is a component or step.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Indicates who or what performed the medication administration and how they were involved.
  /// </summary>
  [JsonPropertyName("performer")]
  public MedicationAdministrationPerformer?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// A code, Condition or observation that supports why the medication was administered.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The date the occurrence of the  MedicationAdministration was first captured in the record - potentially significantly after the occurrence of the event.
  /// </summary>
  [JsonPropertyName("recorded")]
  public string? Recorded { get; set; }
  [JsonPropertyName("_recorded")]
  public Element _Recorded { get; set; }
  /// <summary>
  /// This is a reference to the MedicationRequest  where the intent is either order or instance-order.  It should not reference MedicationRequests where the intent is any other value.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference? Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A code indicating why the administration was not performed.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept?[] StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element[] _StatusReason { get; set; }
  /// <summary>
  /// The person or animal or group receiving the medication.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Additional information (for example, patient height and weight) that supports the administration of the medication.  This attribute can be used to provide documentation of specific characteristics of the patient present at the time of administration.  For example, if the dose says "give "x" if the heartrate exceeds "y"", then the heart rate can be included using this attribute.
  /// </summary>
  [JsonPropertyName("supportingInformation")]
  public Reference?[] SupportingInformation { get; set; }
  [JsonPropertyName("_supportingInformation")]
  public Element[] _SupportingInformation { get; set; }
}
/// <summary>
/// Code Values for the MedicationAdministration.status field
/// </summary>
public sealed class MedicationAdministrationStatusCodes {
  public const string IN_PROGRESS = "in-progress";
  public const string NOT_DONE = "not-done";
  public const string ON_HOLD = "on-hold";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string STOPPED = "stopped";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Indicates who or what performed the event.
/// </summary>
public class MedicationDispensePerformer : BackboneElement {
  /// <summary>
  /// The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept? Function { get; set; }
  [JsonPropertyName("_function")]
  public Element _Function { get; set; }
}
/// <summary>
/// Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
/// </summary>
public class MedicationDispenseSubstitution : BackboneElement {
  /// <summary>
  /// Indicates the reason for the substitution (or lack of substitution) from what was prescribed.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The person or organization that has primary responsibility for the substitution.
  /// </summary>
  [JsonPropertyName("responsibleParty")]
  public Reference? ResponsibleParty { get; set; }
  [JsonPropertyName("_responsibleParty")]
  public Element _ResponsibleParty { get; set; }
  /// <summary>
  /// A code signifying whether a different drug was dispensed from what was prescribed.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// True if the dispenser dispensed a different drug or product from what was prescribed.
  /// </summary>
  [JsonPropertyName("wasSubstituted")]
  public bool WasSubstituted { get; set; }
  [JsonPropertyName("_wasSubstituted")]
  public Element _WasSubstituted { get; set; }
}
public class MedicationDispense : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MedicationDispense";
  /// <summary>
  /// Maps to basedOn in Event logical model.
  /// </summary>
  [JsonPropertyName("authorizingPrescription")]
  public Reference?[] AuthorizingPrescription { get; set; }
  [JsonPropertyName("_authorizingPrescription")]
  public Element[] _AuthorizingPrescription { get; set; }
  /// <summary>
  /// A plan that is fulfilled in whole or in part by this MedicationDispense.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// The category can be used to include where the medication is expected to be consumed or other types of dispenses.  Invariants can be used to bind to different value sets when profiling to bind.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The amount of medication expressed as a timing amount.
  /// </summary>
  [JsonPropertyName("daysSupply")]
  public Quantity? DaysSupply { get; set; }
  [JsonPropertyName("_daysSupply")]
  public Element _DaysSupply { get; set; }
  /// <summary>
  /// Identification of the facility/location where the medication was shipped to, as part of the dispense event.
  /// </summary>
  [JsonPropertyName("destination")]
  public Reference? Destination { get; set; }
  [JsonPropertyName("_destination")]
  public Element _Destination { get; set; }
  /// <summary>
  /// This element can include a detected issue that has been identified either by a decision support system or by a clinician and may include information on the steps that were taken to address the issue.
  /// </summary>
  [JsonPropertyName("detectedIssue")]
  public Reference?[] DetectedIssue { get; set; }
  [JsonPropertyName("_detectedIssue")]
  public Element[] _DetectedIssue { get; set; }
  /// <summary>
  /// When the dose or rate is intended to change over the entire administration period (e.g. Tapering dose prescriptions), multiple instances of dosage instructions will need to be supplied to convey the different doses/rates.The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.
  /// </summary>
  [JsonPropertyName("dosageInstruction")]
  public Dosage?[] DosageInstruction { get; set; }
  [JsonPropertyName("_dosageInstruction")]
  public Element[] _DosageInstruction { get; set; }
  /// <summary>
  /// The encounter that establishes the context for this event.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the Provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the Provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
  /// </summary>
  [JsonPropertyName("eventHistory")]
  public Reference?[] EventHistory { get; set; }
  [JsonPropertyName("_eventHistory")]
  public Element[] _EventHistory { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The principal physical location where the dispense was performed.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
  /// </summary>
  [JsonPropertyName("medication")]
  public CodeableReference Medication { get; set; }
  [JsonPropertyName("_medication")]
  public Element _Medication { get; set; }
  /// <summary>
  /// Extra information about the dispense that could not be conveyed in the other attributes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The procedure that trigger the dispense.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Indicates who or what performed the event.
  /// </summary>
  [JsonPropertyName("performer")]
  public MedicationDispensePerformer?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// The amount of medication that has been dispensed. Includes unit of measure.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Identifies the person who picked up the medication or the location of where the medication was delivered.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.
  /// </summary>
  [JsonPropertyName("receiver")]
  public Reference?[] Receiver { get; set; }
  [JsonPropertyName("_receiver")]
  public Element[] _Receiver { get; set; }
  /// <summary>
  /// The content of the renderedDosageInstructions must not be different than the dose represented in the dosageInstruction content.
  /// </summary>
  [JsonPropertyName("renderedDosageInstruction")]
  public string? RenderedDosageInstruction { get; set; }
  [JsonPropertyName("_renderedDosageInstruction")]
  public Element _RenderedDosageInstruction { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Indicates the reason why a dispense was not performed.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableReference? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
  /// <summary>
  /// SubstanceAdministration->subject->Patient.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
  /// </summary>
  [JsonPropertyName("substitution")]
  public MedicationDispenseSubstitution? Substitution { get; set; }
  [JsonPropertyName("_substitution")]
  public Element _Substitution { get; set; }
  /// <summary>
  /// Additional information that supports the medication being dispensed.  For example, there may be requirements that a specific lab test has been completed prior to dispensing or the patient's weight at the time of dispensing is documented.
  /// </summary>
  [JsonPropertyName("supportingInformation")]
  public Reference?[] SupportingInformation { get; set; }
  [JsonPropertyName("_supportingInformation")]
  public Element[] _SupportingInformation { get; set; }
  /// <summary>
  /// Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The time the dispensed product was provided to the patient or their representative.
  /// </summary>
  [JsonPropertyName("whenHandedOver")]
  public string? WhenHandedOver { get; set; }
  [JsonPropertyName("_whenHandedOver")]
  public Element _WhenHandedOver { get; set; }
  /// <summary>
  /// The time when the dispensed product was packaged and reviewed.
  /// </summary>
  [JsonPropertyName("whenPrepared")]
  public string? WhenPrepared { get; set; }
  [JsonPropertyName("_whenPrepared")]
  public Element _WhenPrepared { get; set; }
}
/// <summary>
/// Code Values for the MedicationDispense.status field
/// </summary>
public sealed class MedicationDispenseStatusCodes {
  public const string PREPARATION = "preparation";
  public const string IN_PROGRESS = "in-progress";
  public const string CANCELLED = "cancelled";
  public const string ON_HOLD = "on-hold";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string STOPPED = "stopped";
  public const string DECLINED = "declined";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Associated or related knowledge about a medication.
/// </summary>
public class MedicationKnowledgeRelatedMedicationKnowledge : BackboneElement {
  /// <summary>
  /// Associated documentation about the associated medication knowledge.
  /// </summary>
  [JsonPropertyName("reference")]
  public Reference[] Reference { get; set; }
  [JsonPropertyName("_reference")]
  public Element[] _Reference { get; set; }
  /// <summary>
  /// The category of the associated medication knowledge reference.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Associated documentation about the medication.
/// </summary>
public class MedicationKnowledgeMonograph : BackboneElement {
  /// <summary>
  /// Associated documentation about the medication.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Identifies a particular constituent of interest in the product.
/// </summary>
public class MedicationKnowledgeIngredient : BackboneElement {
  /// <summary>
  /// Indication of whether this ingredient affects the therapeutic action of the drug.
  /// </summary>
  [JsonPropertyName("isActive")]
  public bool? IsActive { get; set; }
  [JsonPropertyName("_isActive")]
  public Element _IsActive { get; set; }
  /// <summary>
  /// The actual ingredient - either a substance (simple ingredient) or another medication.
  /// </summary>
  [JsonPropertyName("item")]
  public CodeableReference Item { get; set; }
  [JsonPropertyName("_item")]
  public Element _Item { get; set; }
  /// <summary>
  /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
  /// </summary>
  [JsonPropertyName("strengthRatio")]
  public Ratio? StrengthRatio { get; set; }
  [JsonPropertyName("_strengthRatio")]
  public Element _StrengthRatio { get; set; }
  /// <summary>
  /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
  /// </summary>
  [JsonPropertyName("strengthCodeableConcept")]
  public CodeableConcept? StrengthCodeableConcept { get; set; }
  [JsonPropertyName("_strengthCodeableConcept")]
  public Element _StrengthCodeableConcept { get; set; }
  /// <summary>
  /// Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet but can also be expressed a quantity when the denominator is assumed to be 1 tablet.
  /// </summary>
  [JsonPropertyName("strengthQuantity")]
  public Quantity? StrengthQuantity { get; set; }
  [JsonPropertyName("_strengthQuantity")]
  public Element _StrengthQuantity { get; set; }
}
/// <summary>
/// The price of the medication.
/// </summary>
public class MedicationKnowledgeCost : BackboneElement {
  /// <summary>
  /// The price of the medication.
  /// </summary>
  [JsonPropertyName("cost")]
  public Money Cost { get; set; }
  [JsonPropertyName("_cost")]
  public Element _Cost { get; set; }
  /// <summary>
  /// The source or owner that assigns the price to the medication.
  /// </summary>
  [JsonPropertyName("source")]
  public string? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// The program under which the medication is reviewed.
/// </summary>
public class MedicationKnowledgeMonitoringProgram : BackboneElement {
  /// <summary>
  /// Name of the reviewing program.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Type of program under which the medication is monitored.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Dosage for the medication for the specific guidelines.
/// </summary>
public class MedicationKnowledgeAdministrationGuidelineDosage : BackboneElement {
  /// <summary>
  /// Dosage for the medication for the specific guidelines.
  /// </summary>
  [JsonPropertyName("dosage")]
  public Dosage[] Dosage { get; set; }
  [JsonPropertyName("_dosage")]
  public Element[] _Dosage { get; set; }
  /// <summary>
  /// The type or category of dosage for a given medication (for example, prophylaxis, maintenance, therapeutic, etc.).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
/// </summary>
public class MedicationKnowledgeAdministrationGuidelinePatientCharacteristic : BackboneElement {
  /// <summary>
  /// The categorization of the specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The specific characteristic (e.g. height, weight, gender, etc.).
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// The specific characteristic (e.g. height, weight, gender, etc.).
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
}
/// <summary>
/// Guidelines or protocols that are applicable for the administration of the medication.
/// </summary>
public class MedicationKnowledgeAdministrationGuideline : BackboneElement {
  /// <summary>
  /// Dosage for the medication for the specific guidelines.
  /// </summary>
  [JsonPropertyName("dosage")]
  public MedicationKnowledgeAdministrationGuidelineDosage?[] Dosage { get; set; }
  [JsonPropertyName("_dosage")]
  public Element[] _Dosage { get; set; }
  /// <summary>
  /// Indication or reason for use of the medication that applies to the specific administration guidelines.
  /// </summary>
  [JsonPropertyName("indication")]
  public CodeableReference? Indication { get; set; }
  [JsonPropertyName("_indication")]
  public Element _Indication { get; set; }
  /// <summary>
  /// Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).
  /// </summary>
  [JsonPropertyName("patientCharacteristic")]
  public MedicationKnowledgeAdministrationGuidelinePatientCharacteristic?[] PatientCharacteristic { get; set; }
  [JsonPropertyName("_patientCharacteristic")]
  public Element[] _PatientCharacteristic { get; set; }
}
/// <summary>
/// Categorization of the medication within a formulary or classification system.
/// </summary>
public class MedicationKnowledgeMedicineClassification : BackboneElement {
  /// <summary>
  /// Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).
  /// </summary>
  [JsonPropertyName("classification")]
  public CodeableConcept?[] Classification { get; set; }
  [JsonPropertyName("_classification")]
  public Element[] _Classification { get; set; }
  /// <summary>
  /// The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Information that only applies to packages (not products).
/// </summary>
public class MedicationKnowledgePackaging : BackboneElement {
  /// <summary>
  /// The device used to administer the medication (e.g. scoop, applicator, syringe).
  /// </summary>
  [JsonPropertyName("device")]
  public Reference? Device { get; set; }
  [JsonPropertyName("_device")]
  public Element _Device { get; set; }
  /// <summary>
  /// Material type of the package item.
  /// </summary>
  [JsonPropertyName("material")]
  public CodeableConcept? Material { get; set; }
  [JsonPropertyName("_material")]
  public Element _Material { get; set; }
  /// <summary>
  /// Allows packages within packages (e.g. blister packages within a box or vials of medications within a box).
  /// </summary>
  [JsonPropertyName("packaging")]
  public MedicationKnowledgePackaging?[] Packaging { get; set; }
  [JsonPropertyName("_packaging")]
  public Element[] _Packaging { get; set; }
  /// <summary>
  /// The number of product units the package would contain if fully loaded.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// A code that defines the specific type of packaging that the medication can be found in (e.g. blister sleeve, tube, bottle).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
/// </summary>
public class MedicationKnowledgeDrugCharacteristic : BackboneElement {
  /// <summary>
  /// A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueBase64Binary")]
  public string? ValueBase64Binary { get; set; }
  [JsonPropertyName("_valueBase64Binary")]
  public Element _ValueBase64Binary { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
}
/// <summary>
/// Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
/// </summary>
public class MedicationKnowledgeRegulatorySubstitution : BackboneElement {
  /// <summary>
  /// Specifies if regulation allows for changes in the medication when dispensing.
  /// </summary>
  [JsonPropertyName("allowed")]
  public bool Allowed { get; set; }
  [JsonPropertyName("_allowed")]
  public Element _Allowed { get; set; }
  /// <summary>
  /// Specifies the type of substitution allowed.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// The maximum number of units of the medication that can be dispensed in a period.
/// </summary>
public class MedicationKnowledgeRegulatoryMaxDispense : BackboneElement {
  /// <summary>
  /// The period that applies to the maximum number of units.
  /// </summary>
  [JsonPropertyName("period")]
  public Duration? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// The maximum number of units of the medication that can be dispensed.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
}
/// <summary>
/// Regulatory information about a medication.
/// </summary>
public class MedicationKnowledgeRegulatory : BackboneElement {
  /// <summary>
  /// The maximum number of units of the medication that can be dispensed in a period.
  /// </summary>
  [JsonPropertyName("maxDispense")]
  public MedicationKnowledgeRegulatoryMaxDispense? MaxDispense { get; set; }
  [JsonPropertyName("_maxDispense")]
  public Element _MaxDispense { get; set; }
  /// <summary>
  /// The authority that is specifying the regulations.
  /// </summary>
  [JsonPropertyName("regulatoryAuthority")]
  public Reference RegulatoryAuthority { get; set; }
  [JsonPropertyName("_regulatoryAuthority")]
  public Element _RegulatoryAuthority { get; set; }
  /// <summary>
  /// Specifies the schedule of a medication in jurisdiction.
  /// </summary>
  [JsonPropertyName("schedule")]
  public CodeableConcept?[] Schedule { get; set; }
  [JsonPropertyName("_schedule")]
  public Element[] _Schedule { get; set; }
  /// <summary>
  /// Specifies if changes are allowed when dispensing a medication from a regulatory perspective.
  /// </summary>
  [JsonPropertyName("substitution")]
  public MedicationKnowledgeRegulatorySubstitution?[] Substitution { get; set; }
  [JsonPropertyName("_substitution")]
  public Element[] _Substitution { get; set; }
}
/// <summary>
/// The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
/// </summary>
public class MedicationKnowledgeKineticCharacteristic : BackboneElement {
  /// <summary>
  /// Code specifying the type of kinetics (e.g. area under the curve, half life period, lethal dose 50.).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Description of the characteristic.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Description of the characteristic.
  /// </summary>
  [JsonPropertyName("valueDuration")]
  public Duration? ValueDuration { get; set; }
  [JsonPropertyName("_valueDuration")]
  public Element _ValueDuration { get; set; }
}
public class MedicationKnowledge : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MedicationKnowledge";
  /// <summary>
  /// Guidelines or protocols that are applicable for the administration of the medication.
  /// </summary>
  [JsonPropertyName("administrationGuideline")]
  public MedicationKnowledgeAdministrationGuideline?[] AdministrationGuideline { get; set; }
  [JsonPropertyName("_administrationGuideline")]
  public Element[] _AdministrationGuideline { get; set; }
  /// <summary>
  /// This is the quantity of medication in a package.  To specify the strength of the medication, the Ingredient.strength attribute is used.
  /// </summary>
  [JsonPropertyName("amount")]
  public Quantity? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
  /// </summary>
  [JsonPropertyName("associatedMedication")]
  public Reference?[] AssociatedMedication { get; set; }
  [JsonPropertyName("_associatedMedication")]
  public Element[] _AssociatedMedication { get; set; }
  /// <summary>
  /// Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
  /// </summary>
  [JsonPropertyName("clinicalUseIssue")]
  public Reference?[] ClinicalUseIssue { get; set; }
  [JsonPropertyName("_clinicalUseIssue")]
  public Element[] _ClinicalUseIssue { get; set; }
  /// <summary>
  /// Depending on the context of use, the code that was actually selected by the user (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As described in the coding datatype: "A coding may be marked as a "userSelected" if a user selected the particular coded value in a user interface (e.g. the user selects an item in a pick-list). If a user selected coding exists, it is the preferred choice for performing translations etc. Other codes can only be literal translations to alternative code systems, or codes at a lower level of granularity (e.g. a generic code for a vendor-specific primary one).
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The price of the medication.
  /// </summary>
  [JsonPropertyName("cost")]
  public MedicationKnowledgeCost?[] Cost { get; set; }
  [JsonPropertyName("_cost")]
  public Element[] _Cost { get; set; }
  /// <summary>
  /// A device associated with the medication (for example, a drug coated catheter or a drug impregnated dressing).
  /// </summary>
  [JsonPropertyName("device")]
  public Reference?[] Device { get; set; }
  [JsonPropertyName("_device")]
  public Element[] _Device { get; set; }
  /// <summary>
  /// When Medication is referenced from MedicationRequest, this is the ordered form.  When Medication is referenced within MedicationDispense, this is the dispensed form.  When Medication is referenced within MedicationAdministration, this is administered form.
  /// </summary>
  [JsonPropertyName("doseForm")]
  public CodeableConcept? DoseForm { get; set; }
  [JsonPropertyName("_doseForm")]
  public Element _DoseForm { get; set; }
  /// <summary>
  /// Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
  /// </summary>
  [JsonPropertyName("drugCharacteristic")]
  public MedicationKnowledgeDrugCharacteristic?[] DrugCharacteristic { get; set; }
  [JsonPropertyName("_drugCharacteristic")]
  public Element[] _DrugCharacteristic { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see discussion).
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Identifies a particular constituent of interest in the product.
  /// </summary>
  [JsonPropertyName("ingredient")]
  public MedicationKnowledgeIngredient?[] Ingredient { get; set; }
  [JsonPropertyName("_ingredient")]
  public Element[] _Ingredient { get; set; }
  /// <summary>
  /// The intended or approved route of administration.
  /// </summary>
  [JsonPropertyName("intendedRoute")]
  public CodeableConcept?[] IntendedRoute { get; set; }
  [JsonPropertyName("_intendedRoute")]
  public Element[] _IntendedRoute { get; set; }
  /// <summary>
  /// The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
  /// </summary>
  [JsonPropertyName("kineticCharacteristic")]
  public MedicationKnowledgeKineticCharacteristic?[] KineticCharacteristic { get; set; }
  [JsonPropertyName("_kineticCharacteristic")]
  public Element[] _KineticCharacteristic { get; set; }
  /// <summary>
  /// Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference? Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element _Manufacturer { get; set; }
  /// <summary>
  /// Categorization of the medication within a formulary or classification system.
  /// </summary>
  [JsonPropertyName("medicineClassification")]
  public MedicationKnowledgeMedicineClassification?[] MedicineClassification { get; set; }
  [JsonPropertyName("_medicineClassification")]
  public Element[] _MedicineClassification { get; set; }
  /// <summary>
  /// The program under which the medication is reviewed.
  /// </summary>
  [JsonPropertyName("monitoringProgram")]
  public MedicationKnowledgeMonitoringProgram?[] MonitoringProgram { get; set; }
  [JsonPropertyName("_monitoringProgram")]
  public Element[] _MonitoringProgram { get; set; }
  /// <summary>
  /// Associated documentation about the medication.
  /// </summary>
  [JsonPropertyName("monograph")]
  public MedicationKnowledgeMonograph?[] Monograph { get; set; }
  [JsonPropertyName("_monograph")]
  public Element[] _Monograph { get; set; }
  /// <summary>
  /// Information that only applies to packages (not products).
  /// </summary>
  [JsonPropertyName("packaging")]
  public MedicationKnowledgePackaging? Packaging { get; set; }
  [JsonPropertyName("_packaging")]
  public Element _Packaging { get; set; }
  /// <summary>
  /// The instructions for preparing the medication.
  /// </summary>
  [JsonPropertyName("preparationInstruction")]
  public string? PreparationInstruction { get; set; }
  [JsonPropertyName("_preparationInstruction")]
  public Element _PreparationInstruction { get; set; }
  /// <summary>
  /// Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
  /// </summary>
  [JsonPropertyName("productType")]
  public CodeableConcept?[] ProductType { get; set; }
  [JsonPropertyName("_productType")]
  public Element[] _ProductType { get; set; }
  /// <summary>
  /// Regulatory information about a medication.
  /// </summary>
  [JsonPropertyName("regulatory")]
  public MedicationKnowledgeRegulatory?[] Regulatory { get; set; }
  [JsonPropertyName("_regulatory")]
  public Element[] _Regulatory { get; set; }
  /// <summary>
  /// Associated or related knowledge about a medication.
  /// </summary>
  [JsonPropertyName("relatedMedicationKnowledge")]
  public MedicationKnowledgeRelatedMedicationKnowledge?[] RelatedMedicationKnowledge { get; set; }
  [JsonPropertyName("_relatedMedicationKnowledge")]
  public Element[] _RelatedMedicationKnowledge { get; set; }
  /// <summary>
  /// This status is intended to identify if the medication in a local system is in active use within a drug database or inventory.  For example, a pharmacy system may create a new drug file record for a compounded product "ABC Hospital Special Cream" with an active status.  At some point in the future, it may be determined that the drug record was created with an error and the status is changed to "entered in error".   This status is not intended to specify if a medication is part of a particular formulary.  It is possible that the drug record may be referenced by multiple formularies or catalogues and each of those entries would have a separate status.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
  /// </summary>
  [JsonPropertyName("synonym")]
  public string?[] Synonym { get; set; }
  [JsonPropertyName("_synonym")]
  public Element[] _Synonym { get; set; }
}
/// <summary>
/// Code Values for the MedicationKnowledge.status field
/// </summary>
public sealed class MedicationKnowledgeStatusCodes {
  public const string ACTIVE = "active";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// If populating this element, either the quantity or the duration must be included.
/// </summary>
public class MedicationRequestDispenseRequestInitialFill : BackboneElement {
  /// <summary>
  /// The length of time that the first dispense is expected to last.
  /// </summary>
  [JsonPropertyName("duration")]
  public Duration? Duration { get; set; }
  [JsonPropertyName("_duration")]
  public Element _Duration { get; set; }
  /// <summary>
  /// The amount or quantity to provide as part of the first dispense.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
}
/// <summary>
/// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
/// </summary>
public class MedicationRequestDispenseRequest : BackboneElement {
  /// <summary>
  /// The minimum period of time that must occur between dispenses of the medication.
  /// </summary>
  [JsonPropertyName("dispenseInterval")]
  public Duration? DispenseInterval { get; set; }
  [JsonPropertyName("_dispenseInterval")]
  public Element _DispenseInterval { get; set; }
  /// <summary>
  /// Indicates the intended performing Organization that will dispense the medication as specified by the prescriber.
  /// </summary>
  [JsonPropertyName("dispenser")]
  public Reference? Dispenser { get; set; }
  [JsonPropertyName("_dispenser")]
  public Element _Dispenser { get; set; }
  /// <summary>
  /// In some situations, this attribute may be used instead of quantity to identify the amount supplied by how long it is expected to last, rather than the physical quantity issued, e.g. 90 days supply of medication (based on an ordered dosage). When possible, it is always better to specify quantity, as this tends to be more precise. expectedSupplyDuration will always be an estimate that can be influenced by external factors.
  /// </summary>
  [JsonPropertyName("expectedSupplyDuration")]
  public Duration? ExpectedSupplyDuration { get; set; }
  [JsonPropertyName("_expectedSupplyDuration")]
  public Element _ExpectedSupplyDuration { get; set; }
  /// <summary>
  /// If populating this element, either the quantity or the duration must be included.
  /// </summary>
  [JsonPropertyName("initialFill")]
  public MedicationRequestDispenseRequestInitialFill? InitialFill { get; set; }
  [JsonPropertyName("_initialFill")]
  public Element _InitialFill { get; set; }
  /// <summary>
  /// If displaying "number of authorized fills", add 1 to this number.
  /// </summary>
  [JsonPropertyName("numberOfRepeatsAllowed")]
  public uint? NumberOfRepeatsAllowed { get; set; }
  [JsonPropertyName("_numberOfRepeatsAllowed")]
  public Element _NumberOfRepeatsAllowed { get; set; }
  /// <summary>
  /// The amount that is to be dispensed for one fill.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// It reflects the prescribers' perspective for the validity of the prescription. Dispenses must not be made against the prescription outside of this period. The lower-bound of the Dispensing Window signifies the earliest date that the prescription can be filled for the first time. If an upper-bound is not specified then the Prescription is open-ended or will default to a stale-date based on regulations.
  /// </summary>
  [JsonPropertyName("validityPeriod")]
  public Period? ValidityPeriod { get; set; }
  [JsonPropertyName("_validityPeriod")]
  public Element _ValidityPeriod { get; set; }
}
/// <summary>
/// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
/// </summary>
public class MedicationRequestSubstitution : BackboneElement {
  /// <summary>
  /// This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
  /// </summary>
  [JsonPropertyName("allowedBoolean")]
  public bool AllowedBoolean { get; set; }
  [JsonPropertyName("_allowedBoolean")]
  public Element _AllowedBoolean { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
  /// </summary>
  [JsonPropertyName("allowedCodeableConcept")]
  public CodeableConcept AllowedCodeableConcept { get; set; }
  [JsonPropertyName("_allowedCodeableConcept")]
  public Element _AllowedCodeableConcept { get; set; }
  /// <summary>
  /// Indicates the reason for the substitution, or why substitution must or must not be performed.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept? Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element _Reason { get; set; }
}
public class MedicationRequest : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MedicationRequest";
  /// <summary>
  /// The date (and perhaps time) when the prescription was initially written or authored on.
  /// </summary>
  [JsonPropertyName("authoredOn")]
  public string? AuthoredOn { get; set; }
  [JsonPropertyName("_authoredOn")]
  public Element _AuthoredOn { get; set; }
  /// <summary>
  /// A plan or request that is fulfilled in whole or in part by this medication request.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// The category can be used to include where the medication is expected to be consumed or other types of requests.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// This attribute should not be confused with the protocol of the medication.
  /// </summary>
  [JsonPropertyName("courseOfTherapyType")]
  public CodeableConcept? CourseOfTherapyType { get; set; }
  [JsonPropertyName("_courseOfTherapyType")]
  public Element _CourseOfTherapyType { get; set; }
  /// <summary>
  /// This element can include a detected issue that has been identified either by a decision support system or by a clinician and may include information on the steps that were taken to address the issue.
  /// </summary>
  [JsonPropertyName("detectedIssue")]
  public Reference?[] DetectedIssue { get; set; }
  [JsonPropertyName("_detectedIssue")]
  public Element[] _DetectedIssue { get; set; }
  /// <summary>
  /// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
  /// </summary>
  [JsonPropertyName("dispenseRequest")]
  public MedicationRequestDispenseRequest? DispenseRequest { get; set; }
  [JsonPropertyName("_dispenseRequest")]
  public Element _DispenseRequest { get; set; }
  /// <summary>
  /// If do not perform is not specified, the request is a positive request e.g. "do perform".
  /// </summary>
  [JsonPropertyName("doNotPerform")]
  public bool? DoNotPerform { get; set; }
  [JsonPropertyName("_doNotPerform")]
  public Element _DoNotPerform { get; set; }
  /// <summary>
  /// There are examples where a medication request may include the option of an oral dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg orally or IV twice a day as needed for nausea" or "Compazine® (prochlorperazine) 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two medication requests would be created that could be grouped together.  The decision on which dose and route of administration to use is based on the patient's condition at the time the dose is needed.
  /// </summary>
  [JsonPropertyName("dosageInstruction")]
  public Dosage?[] DosageInstruction { get; set; }
  [JsonPropertyName("_dosageInstruction")]
  public Element[] _DosageInstruction { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter."    If there is a need to link to episodes of care they will be handled with an extension.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
  /// </summary>
  [JsonPropertyName("eventHistory")]
  public Reference?[] EventHistory { get; set; }
  [JsonPropertyName("_eventHistory")]
  public Element[] _EventHistory { get; set; }
  /// <summary>
  /// A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
  /// </summary>
  [JsonPropertyName("groupIdentifier")]
  public Identifier? GroupIdentifier { get; set; }
  [JsonPropertyName("_groupIdentifier")]
  public Element _GroupIdentifier { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The person or organization who provided the information about this request, if the source is someone other than the requestor.  This is often used when the MedicationRequest is reported by another person.
  /// </summary>
  [JsonPropertyName("informationSource")]
  public Reference? InformationSource { get; set; }
  [JsonPropertyName("_informationSource")]
  public Element _InformationSource { get; set; }
  /// <summary>
  /// The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
  /// </summary>
  [JsonPropertyName("insurance")]
  public Reference?[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
  /// </summary>
  [JsonPropertyName("intent")]
  public string Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the Medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource.
  /// </summary>
  [JsonPropertyName("medication")]
  public CodeableReference Medication { get; set; }
  [JsonPropertyName("_medication")]
  public Element _Medication { get; set; }
  /// <summary>
  /// Extra information about the prescription that could not be conveyed by the other attributes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference? Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element _Performer { get; set; }
  /// <summary>
  /// If specified without indicating a performer, this indicates that the performer must be of the specified type. If specified with a performer then it indicates the requirements of the performer if the designated performer is not available.
  /// </summary>
  [JsonPropertyName("performerType")]
  public CodeableConcept? PerformerType { get; set; }
  [JsonPropertyName("_performerType")]
  public Element _PerformerType { get; set; }
  /// <summary>
  /// Indicates how quickly the Medication Request should be addressed with respect to other requests.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// A link to a resource representing an earlier order related order or prescription.
  /// </summary>
  [JsonPropertyName("priorPrescription")]
  public Reference? PriorPrescription { get; set; }
  [JsonPropertyName("_priorPrescription")]
  public Element _PriorPrescription { get; set; }
  /// <summary>
  /// This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonReference.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
  /// </summary>
  [JsonPropertyName("recorder")]
  public Reference? Recorder { get; set; }
  [JsonPropertyName("_recorder")]
  public Element _Recorder { get; set; }
  /// <summary>
  /// The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
  /// </summary>
  [JsonPropertyName("renderedDosageInstruction")]
  public string? RenderedDosageInstruction { get; set; }
  [JsonPropertyName("_renderedDosageInstruction")]
  public Element _RenderedDosageInstruction { get; set; }
  /// <summary>
  /// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  /// </summary>
  [JsonPropertyName("reported")]
  public bool? Reported { get; set; }
  [JsonPropertyName("_reported")]
  public Element _Reported { get; set; }
  /// <summary>
  /// The individual, organization, or device that initiated the request and has responsibility for its activation.
  /// </summary>
  [JsonPropertyName("requester")]
  public Reference? Requester { get; set; }
  [JsonPropertyName("_requester")]
  public Element _Requester { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This is generally only used for "exception" statuses such as "suspended" or "cancelled". The reason why the MedicationRequest was created at all is captured in reasonCode, not here.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
  /// <summary>
  /// The subject on a medication request is mandatory.  For the secondary use case where the actual subject is not provided, there still must be an anonymized subject specified.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
  /// </summary>
  [JsonPropertyName("substitution")]
  public MedicationRequestSubstitution? Substitution { get; set; }
  [JsonPropertyName("_substitution")]
  public Element _Substitution { get; set; }
  /// <summary>
  /// This attribute can be used to reference a MedicationUsage about the patients' medication use.
  /// </summary>
  [JsonPropertyName("supportingInformation")]
  public Reference?[] SupportingInformation { get; set; }
  [JsonPropertyName("_supportingInformation")]
  public Element[] _SupportingInformation { get; set; }
}
/// <summary>
/// Code Values for the MedicationRequest.intent field
/// </summary>
public sealed class MedicationRequestIntentCodes {
  public const string PROPOSAL = "proposal";
  public const string PLAN = "plan";
  public const string ORDER = "order";
  public const string ORIGINAL_ORDER = "original-order";
  public const string REFLEX_ORDER = "reflex-order";
  public const string FILLER_ORDER = "filler-order";
  public const string INSTANCE_ORDER = "instance-order";
  public const string OPTION = "option";
}
/// <summary>
/// Code Values for the MedicationRequest.priority field
/// </summary>
public sealed class MedicationRequestPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the MedicationRequest.status field
/// </summary>
public sealed class MedicationRequestStatusCodes {
  public const string ACTIVE = "active";
  public const string ON_HOLD = "on-hold";
  public const string CANCELLED = "cancelled";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string STOPPED = "stopped";
  public const string DRAFT = "draft";
  public const string UNKNOWN = "unknown";
}
public class MedicationUsage : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MedicationUsage";
  /// <summary>
  /// A plan, proposal or order that is fulfilled in whole or in part by this event.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Type of medication usage (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The date when the Medication Usage was asserted by the information source.
  /// </summary>
  [JsonPropertyName("dateAsserted")]
  public string? DateAsserted { get; set; }
  [JsonPropertyName("_dateAsserted")]
  public Element _DateAsserted { get; set; }
  /// <summary>
  /// Likely references would be to MedicationRequest, MedicationDispense, Claim, Observation or QuestionnaireAnswers.  The most common use cases for deriving a MedicationUsage comes from creating a MedicationUsage from a MedicationRequest or from a lab observation or a claim.  it should be noted that the amount of information that is available varies from the type resource that you derive the MedicationUsage from.
  /// </summary>
  [JsonPropertyName("derivedFrom")]
  public Reference?[] DerivedFrom { get; set; }
  [JsonPropertyName("_derivedFrom")]
  public Element[] _DerivedFrom { get; set; }
  /// <summary>
  /// The dates included in the dosage on a Medication Usage reflect the dates for a given dose.  For example, "from November 1, 2016 to November 3, 2016, take one tablet daily and from November 4, 2016 to November 7, 2016, take two tablets daily."  It is expected that this specificity may only be populated where the patient brings in their labeled container or where the Medication Usage is derived from a MedicationRequest.
  /// </summary>
  [JsonPropertyName("dosage")]
  public Dosage?[] Dosage { get; set; }
  [JsonPropertyName("_dosage")]
  public Element[] _Dosage { get; set; }
  /// <summary>
  /// This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Usages. If the medication is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
  /// </summary>
  [JsonPropertyName("effectiveDateTime")]
  public string? EffectiveDateTime { get; set; }
  [JsonPropertyName("_effectiveDateTime")]
  public Element _EffectiveDateTime { get; set; }
  /// <summary>
  /// This attribute reflects the period over which the patient consumed the medication and is expected to be populated on the majority of Medication Usages. If the medication is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// The encounter that establishes the context for this MedicationUsage.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationUsage is derived from other resources, e.g. Claim or MedicationRequest.
  /// </summary>
  [JsonPropertyName("informationSource")]
  public Reference? InformationSource { get; set; }
  [JsonPropertyName("_informationSource")]
  public Element _InformationSource { get; set; }
  /// <summary>
  /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the medication resource is recommended.  For example, if you require form or lot number, then you must reference the Medication resource.
  /// </summary>
  [JsonPropertyName("medication")]
  public CodeableReference Medication { get; set; }
  [JsonPropertyName("_medication")]
  public Element _Medication { get; set; }
  /// <summary>
  /// Provides extra information about the Medication Usage that is not conveyed by the other attributes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// A larger event of which this particular event is a component or step.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonForUseReference.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.
  /// </summary>
  [JsonPropertyName("renderedDosageInstruction")]
  public string? RenderedDosageInstruction { get; set; }
  [JsonPropertyName("_renderedDosageInstruction")]
  public Element _RenderedDosageInstruction { get; set; }
  /// <summary>
  /// MedicationUsage is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for MedicationUsage.status contains codes that assert the status of the use of the medication by the patient (for example, stopped or on hold) as well as codes that assert the status of the Medication Usage itself (for example, entered in error).This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This is generally only used for "exception" statuses such as "not-taken", "on-hold", "cancelled" or "entered-in-error". The reason for performing the event at all is captured in reasonCode, not here.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept?[] StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element[] _StatusReason { get; set; }
  /// <summary>
  /// The person, animal or group who is/was taking the medication.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Indicates if the medication is being consumed or administered as prescribed.
  /// </summary>
  [JsonPropertyName("takenAsOrdered")]
  public bool? TakenAsOrdered { get; set; }
  [JsonPropertyName("_takenAsOrdered")]
  public Element _TakenAsOrdered { get; set; }
}
/// <summary>
/// Code Values for the MedicationUsage.status field
/// </summary>
public sealed class MedicationUsageStatusCodes {
  public const string ACTIVE = "active";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string INTENDED = "intended";
  public const string STOPPED = "stopped";
  public const string ON_HOLD = "on-hold";
  public const string UNKNOWN = "unknown";
  public const string NOT_TAKEN = "not-taken";
}
/// <summary>
/// A product specific contact, person (in a role), or an organization.
/// </summary>
public class MedicinalProductDefinitionContact : BackboneElement {
  /// <summary>
  /// A product specific contact, person (in a role), or an organization.
  /// </summary>
  [JsonPropertyName("contact")]
  public Reference Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element _Contact { get; set; }
  /// <summary>
  /// Allows the contact to be classified, for example QPPV, Pharmacovigilence Enquiry Information.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Coding words or phrases of the name.
/// </summary>
public class MedicinalProductDefinitionNameNamePart : BackboneElement {
  /// <summary>
  /// A fragment of a product name.
  /// </summary>
  [JsonPropertyName("part")]
  public string Part { get; set; }
  [JsonPropertyName("_part")]
  public Element _Part { get; set; }
  /// <summary>
  /// Idenifying type for this part of the name (e.g. strength part).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Country where the name applies.
/// </summary>
public class MedicinalProductDefinitionNameCountryLanguage : BackboneElement {
  /// <summary>
  /// Country code for where this name applies.
  /// </summary>
  [JsonPropertyName("country")]
  public CodeableConcept Country { get; set; }
  [JsonPropertyName("_country")]
  public Element _Country { get; set; }
  /// <summary>
  /// Jurisdiction code for where this name applies.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept? Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element _Jurisdiction { get; set; }
  /// <summary>
  /// Language code for this name.
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
}
/// <summary>
/// The product's name, including full name and possibly coded parts.
/// </summary>
public class MedicinalProductDefinitionName : BackboneElement {
  /// <summary>
  /// Country where the name applies.
  /// </summary>
  [JsonPropertyName("countryLanguage")]
  public MedicinalProductDefinitionNameCountryLanguage?[] CountryLanguage { get; set; }
  [JsonPropertyName("_countryLanguage")]
  public Element[] _CountryLanguage { get; set; }
  /// <summary>
  /// Coding words or phrases of the name.
  /// </summary>
  [JsonPropertyName("namePart")]
  public MedicinalProductDefinitionNameNamePart?[] NamePart { get; set; }
  [JsonPropertyName("_namePart")]
  public Element[] _NamePart { get; set; }
  /// <summary>
  /// The full product name.
  /// </summary>
  [JsonPropertyName("productName")]
  public string ProductName { get; set; }
  [JsonPropertyName("_productName")]
  public Element _ProductName { get; set; }
  /// <summary>
  /// Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Reference to another product, e.g. for linking authorised to investigational product.
/// </summary>
public class MedicinalProductDefinitionCrossReference : BackboneElement {
  /// <summary>
  /// Reference to another product, e.g. for linking authorised to investigational product.
  /// </summary>
  [JsonPropertyName("productIdentifier")]
  public Identifier ProductIdentifier { get; set; }
  [JsonPropertyName("_productIdentifier")]
  public Element _ProductIdentifier { get; set; }
  /// <summary>
  /// Reference to another product, e.g. for linking authorised to investigational product.
  /// </summary>
  [JsonPropertyName("productReference")]
  public Reference ProductReference { get; set; }
  [JsonPropertyName("_productReference")]
  public Element _ProductReference { get; set; }
  /// <summary>
  /// The type of relationship, for instance branded to generic, product to development product (investigational), parallel import version.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// An operation applied to the product, for manufacturing or adminsitrative purpose.
/// </summary>
public class MedicinalProductDefinitionManufacturingBusinessOperation : BackboneElement {
  /// <summary>
  /// An authorization for this process, either as a logical reference, holding just an identifier, or a full refererence to a resource that captures the details. The authorization mayu possibly apply to several products or a wider scope of process of which this is a part.
  /// </summary>
  [JsonPropertyName("authorization")]
  public Reference? Authorization { get; set; }
  [JsonPropertyName("_authorization")]
  public Element _Authorization { get; set; }
  /// <summary>
  /// To indicate if this proces is commercially confidential.
  /// </summary>
  [JsonPropertyName("confidentialityIndicator")]
  public CodeableConcept? ConfidentialityIndicator { get; set; }
  [JsonPropertyName("_confidentialityIndicator")]
  public Element _ConfidentialityIndicator { get; set; }
  /// <summary>
  /// Date range of applicability.
  /// </summary>
  [JsonPropertyName("effectiveDate")]
  public Period? EffectiveDate { get; set; }
  [JsonPropertyName("_effectiveDate")]
  public Element _EffectiveDate { get; set; }
  /// <summary>
  /// The manufacturer or establishment associated with the process.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference?[] Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element[] _Manufacturer { get; set; }
  /// <summary>
  /// The type of manufacturing operation e.g. manufacturing itself, re-packaging. This may be a subtype of some other wider scope of authorized operation, referenced by the authorization attribute.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableReference? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class MedicinalProductDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MedicinalProductDefinition";
  /// <summary>
  /// Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
  /// </summary>
  [JsonPropertyName("additionalMonitoringIndicator")]
  public CodeableConcept? AdditionalMonitoringIndicator { get; set; }
  [JsonPropertyName("_additionalMonitoringIndicator")]
  public Element _AdditionalMonitoringIndicator { get; set; }
  /// <summary>
  /// Supporting documentation, typically for regulatory submission.
  /// </summary>
  [JsonPropertyName("attachedDocument")]
  public Reference?[] AttachedDocument { get; set; }
  [JsonPropertyName("_attachedDocument")]
  public Element[] _AttachedDocument { get; set; }
  /// <summary>
  /// Allows the key product features to be recorded, such as "suger free", "modified release", "parallel import".
  /// </summary>
  [JsonPropertyName("characteristic")]
  public CodeableConcept?[] Characteristic { get; set; }
  [JsonPropertyName("_characteristic")]
  public Element[] _Characteristic { get; set; }
  /// <summary>
  /// Clinical trials or studies that this product is involved in.
  /// </summary>
  [JsonPropertyName("clinicalTrial")]
  public Reference?[] ClinicalTrial { get; set; }
  [JsonPropertyName("_clinicalTrial")]
  public Element[] _ClinicalTrial { get; set; }
  /// <summary>
  /// The dose form for a single part product, or combined form of a multiple part product.
  /// </summary>
  [JsonPropertyName("combinedPharmaceuticalDoseForm")]
  public CodeableConcept? CombinedPharmaceuticalDoseForm { get; set; }
  [JsonPropertyName("_combinedPharmaceuticalDoseForm")]
  public Element _CombinedPharmaceuticalDoseForm { get; set; }
  /// <summary>
  /// A product specific contact, person (in a role), or an organization.
  /// </summary>
  [JsonPropertyName("contact")]
  public MedicinalProductDefinitionContact?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Reference to another product, e.g. for linking authorised to investigational product.
  /// </summary>
  [JsonPropertyName("crossReference")]
  public MedicinalProductDefinitionCrossReference?[] CrossReference { get; set; }
  [JsonPropertyName("_crossReference")]
  public Element[] _CrossReference { get; set; }
  /// <summary>
  /// General description of this product.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// If this medicine applies to human or veterinary uses.
  /// </summary>
  [JsonPropertyName("domain")]
  public CodeableConcept? Domain { get; set; }
  [JsonPropertyName("_domain")]
  public Element _Domain { get; set; }
  /// <summary>
  /// Business identifier for this product. Could be an MPID.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// General combined description of indication(s) for this product. See also MedicinalProductDefinitionIndication.
  /// </summary>
  [JsonPropertyName("indication")]
  public string? Indication { get; set; }
  [JsonPropertyName("_indication")]
  public Element _Indication { get; set; }
  /// <summary>
  /// The ingredients of this medicinal product - when not specified elsewhere. This is only needed if the ingredients are not specified by the pharmaceuticalProduct or packagedMedicinalProduct references above. In cases where those levels of detail are not used, the ingredients may be specified directly here.
  /// </summary>
  [JsonPropertyName("ingredient")]
  public Reference?[] Ingredient { get; set; }
  [JsonPropertyName("_ingredient")]
  public Element[] _Ingredient { get; set; }
  /// <summary>
  /// The legal status of supply of the medicinal product as classified by the regulator.
  /// </summary>
  [JsonPropertyName("legalStatusOfSupply")]
  public CodeableConcept? LegalStatusOfSupply { get; set; }
  [JsonPropertyName("_legalStatusOfSupply")]
  public Element _LegalStatusOfSupply { get; set; }
  /// <summary>
  /// An operation applied to the product, for manufacturing or adminsitrative purpose.
  /// </summary>
  [JsonPropertyName("manufacturingBusinessOperation")]
  public MedicinalProductDefinitionManufacturingBusinessOperation?[] ManufacturingBusinessOperation { get; set; }
  [JsonPropertyName("_manufacturingBusinessOperation")]
  public Element[] _ManufacturingBusinessOperation { get; set; }
  /// <summary>
  /// Marketing status of the medicinal product, in contrast to marketing authorizaton.
  /// </summary>
  [JsonPropertyName("marketingStatus")]
  public MarketingStatus?[] MarketingStatus { get; set; }
  [JsonPropertyName("_marketingStatus")]
  public Element[] _MarketingStatus { get; set; }
  /// <summary>
  /// A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
  /// </summary>
  [JsonPropertyName("masterFile")]
  public Reference?[] MasterFile { get; set; }
  [JsonPropertyName("_masterFile")]
  public Element[] _MasterFile { get; set; }
  /// <summary>
  /// The product's name, including full name and possibly coded parts.
  /// </summary>
  [JsonPropertyName("name")]
  public MedicinalProductDefinitionName[] Name { get; set; }
  [JsonPropertyName("_name")]
  public Element[] _Name { get; set; }
  /// <summary>
  /// Package representation for the product.
  /// </summary>
  [JsonPropertyName("packagedMedicinalProduct")]
  public Reference?[] PackagedMedicinalProduct { get; set; }
  [JsonPropertyName("_packagedMedicinalProduct")]
  public Element[] _PackagedMedicinalProduct { get; set; }
  /// <summary>
  /// If authorised for use in children.
  /// </summary>
  [JsonPropertyName("paediatricUseIndicator")]
  public CodeableConcept? PaediatricUseIndicator { get; set; }
  [JsonPropertyName("_paediatricUseIndicator")]
  public Element _PaediatricUseIndicator { get; set; }
  /// <summary>
  /// Pharmaceutical aspects of product.
  /// </summary>
  [JsonPropertyName("pharmaceuticalProduct")]
  public Reference?[] PharmaceuticalProduct { get; set; }
  [JsonPropertyName("_pharmaceuticalProduct")]
  public Element[] _PharmaceuticalProduct { get; set; }
  /// <summary>
  /// Allows the product to be classified by various systems.
  /// </summary>
  [JsonPropertyName("productClassification")]
  public CodeableConcept?[] ProductClassification { get; set; }
  [JsonPropertyName("_productClassification")]
  public Element[] _ProductClassification { get; set; }
  /// <summary>
  /// Whether the Medicinal Product is subject to special measures for regulatory reasons.
  /// </summary>
  [JsonPropertyName("specialMeasures")]
  public CodeableConcept?[] SpecialMeasures { get; set; }
  [JsonPropertyName("_specialMeasures")]
  public Element[] _SpecialMeasures { get; set; }
  /// <summary>
  /// The status within the lifecycle of this product. A high level status, this is not intended to duplicate details carried elswhere such as legal status, or authorization status.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The date at which the given status became applicable.
  /// </summary>
  [JsonPropertyName("statusDate")]
  public string? StatusDate { get; set; }
  [JsonPropertyName("_statusDate")]
  public Element _StatusDate { get; set; }
  /// <summary>
  /// Regulatory type, e.g. Investigational or Authorized.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// A business level identifier of the product.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
/// </summary>
public class MessageDefinitionFocus : BackboneElement {
  /// <summary>
  /// Multiple focuses addressing different resources may occasionally occur.  E.g. to link or unlink a resource from a particular account or encounter, etc.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
  /// </summary>
  [JsonPropertyName("max")]
  public string? Max { get; set; }
  [JsonPropertyName("_max")]
  public Element _Max { get; set; }
  /// <summary>
  /// Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
  /// </summary>
  [JsonPropertyName("min")]
  public uint Min { get; set; }
  [JsonPropertyName("_min")]
  public Element _Min { get; set; }
  /// <summary>
  /// This should be present for most message definitions.  However, if the message focus is only a single resource and there is no need to include referenced resources or otherwise enforce the presence of particular elements, it can be omitted.
  /// </summary>
  [JsonPropertyName("profile")]
  public string? Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
}
/// <summary>
/// Code Values for the MessageDefinition.focus.code field
/// </summary>
public sealed class MessageDefinitionFocusCodeCodes {
  public const string TYPE = "Type";
}
/// <summary>
/// This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
/// </summary>
public class MessageDefinitionAllowedResponse : BackboneElement {
  /// <summary>
  /// A reference to the message definition that must be adhered to by this supported response.
  /// </summary>
  [JsonPropertyName("message")]
  public string Message { get; set; }
  [JsonPropertyName("_message")]
  public Element _Message { get; set; }
  /// <summary>
  /// Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
  /// </summary>
  [JsonPropertyName("situation")]
  public string? Situation { get; set; }
  [JsonPropertyName("_situation")]
  public Element _Situation { get; set; }
}
/// <summary>
/// Allows messages to be defined once and re-used across systems.
/// </summary>
public class MessageDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MessageDefinition";
  /// <summary>
  /// This indicates an application level response to "close" a transaction implicit in a particular request message.  To define a complete workflow scenario, look to the [[PlanDefinition]] resource which allows the definition of complex orchestrations, conditionality, etc.
  /// </summary>
  [JsonPropertyName("allowedResponse")]
  public MessageDefinitionAllowedResponse?[] AllowedResponse { get; set; }
  [JsonPropertyName("_allowedResponse")]
  public Element[] _AllowedResponse { get; set; }
  /// <summary>
  /// The MessageDefinition that is the basis for the contents of this resource.
  /// </summary>
  [JsonPropertyName("base")]
  public string? Base { get; set; }
  [JsonPropertyName("_base")]
  public Element _Base { get; set; }
  /// <summary>
  /// The impact of the content of the message.
  /// </summary>
  [JsonPropertyName("category")]
  public string? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the message definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the message definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the message definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the message definition is presumed to be the predominant language in the place the message definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Event code or link to the EventDefinition.
  /// </summary>
  [JsonPropertyName("eventCoding")]
  public Coding EventCoding { get; set; }
  [JsonPropertyName("_eventCoding")]
  public Element _EventCoding { get; set; }
  /// <summary>
  /// Event code or link to the EventDefinition.
  /// </summary>
  [JsonPropertyName("eventUri")]
  public string EventUri { get; set; }
  [JsonPropertyName("_eventUri")]
  public Element _EventUri { get; set; }
  /// <summary>
  /// Allows filtering of message definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
  /// </summary>
  [JsonPropertyName("focus")]
  public MessageDefinitionFocus?[] Focus { get; set; }
  [JsonPropertyName("_focus")]
  public Element[] _Focus { get; set; }
  /// <summary>
  /// Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a [GraphDefinition](graphdefinition.html) that it controls what resources are to be added to the bundle when building the document. The GraphDefinition can also specify profiles that apply to the various resources.
  /// </summary>
  [JsonPropertyName("graph")]
  public string?[] Graph { get; set; }
  [JsonPropertyName("_graph")]
  public Element[] _Graph { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this message definition outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the message definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// It should be possible to use MessageDefinition to describe a message to be used by certain steps in a particular protocol as part of a PlanDefinition or ActivityDefinition.
  /// </summary>
  [JsonPropertyName("parent")]
  public string?[] Parent { get; set; }
  [JsonPropertyName("_parent")]
  public Element[] _Parent { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the message definition is the organization or individual primarily responsible for the maintenance and upkeep of the message definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the message definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the message definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this message definition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// A MessageDefinition that is superseded by this definition.
  /// </summary>
  [JsonPropertyName("replaces")]
  public string?[] Replaces { get; set; }
  [JsonPropertyName("_replaces")]
  public Element[] _Replaces { get; set; }
  /// <summary>
  /// This enables the capability currently available through MSH-16 (Application Level acknowledgement) in HL7 Version 2 to declare at a message instance level whether a response is required or only upon error or success, or never.
  /// </summary>
  [JsonPropertyName("responseRequired")]
  public string? ResponseRequired { get; set; }
  [JsonPropertyName("_responseRequired")]
  public Element _ResponseRequired { get; set; }
  /// <summary>
  /// Allows filtering of message definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different message definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the message definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the MessageDefinition.category field
/// </summary>
public sealed class MessageDefinitionCategoryCodes {
  public const string CONSEQUENCE = "consequence";
  public const string CURRENCY = "currency";
  public const string NOTIFICATION = "notification";
}
/// <summary>
/// Code Values for the MessageDefinition.responseRequired field
/// </summary>
public sealed class MessageDefinitionResponseRequiredCodes {
  public const string ALWAYS = "always";
  public const string ON_ERROR = "on-error";
  public const string NEVER = "never";
  public const string ON_SUCCESS = "on-success";
}
/// <summary>
/// Code Values for the MessageDefinition.status field
/// </summary>
public sealed class MessageDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
/// </summary>
public class MessageHeaderDestination : BackboneElement {
  /// <summary>
  /// The id may be a non-resolvable URI for systems that do not use standard network-based addresses.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public string Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element _Endpoint { get; set; }
  /// <summary>
  /// Human-readable name for the target system.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
  /// </summary>
  [JsonPropertyName("receiver")]
  public Reference? Receiver { get; set; }
  [JsonPropertyName("_receiver")]
  public Element _Receiver { get; set; }
  /// <summary>
  /// Identifies the target end system in situations where the initial message transmission is to an intermediary system.
  /// </summary>
  [JsonPropertyName("target")]
  public Reference? Target { get; set; }
  [JsonPropertyName("_target")]
  public Element _Target { get; set; }
}
/// <summary>
/// The source application from which this message originated.
/// </summary>
public class MessageHeaderSource : BackboneElement {
  /// <summary>
  /// An e-mail, phone, website or other contact point to use to resolve issues with message communications.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactPoint? Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element _Contact { get; set; }
  /// <summary>
  /// The id may be a non-resolvable URI for systems that do not use standard network-based addresses.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public string Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element _Endpoint { get; set; }
  /// <summary>
  /// Human-readable name for the source system.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// May include configuration or other information useful in debugging.
  /// </summary>
  [JsonPropertyName("software")]
  public string? Software { get; set; }
  [JsonPropertyName("_software")]
  public Element _Software { get; set; }
  /// <summary>
  /// Can convey versions of multiple systems in situations where a message passes through multiple hands.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Information about the message that this message is a response to.  Only present if this message is a response.
/// </summary>
public class MessageHeaderResponse : BackboneElement {
  /// <summary>
  /// This is a generic response to the request message. Specific data for the response will be found in MessageHeader.focus.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// This SHALL be contained in the bundle. If any of the issues are errors, the response code SHALL be an error.
  /// </summary>
  [JsonPropertyName("details")]
  public Reference? Details { get; set; }
  [JsonPropertyName("_details")]
  public Element _Details { get; set; }
  /// <summary>
  /// The MessageHeader.id of the message to which this message is a response.
  /// </summary>
  [JsonPropertyName("identifier")]
  public string Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
}
/// <summary>
/// Code Values for the MessageHeader.response.code field
/// </summary>
public sealed class MessageHeaderResponseCodeCodes {
  public const string OK = "ok";
  public const string TRANSIENT_ERROR = "transient-error";
  public const string FATAL_ERROR = "fatal-error";
}
/// <summary>
/// Many implementations are not prepared to use REST and need a messaging based infrastructure.
/// </summary>
public class MessageHeader : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MessageHeader";
  /// <summary>
  /// Usually only for the request but can be used in a response.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// Permanent link to the MessageDefinition for this message.
  /// </summary>
  [JsonPropertyName("definition")]
  public string? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// There SHOULD be at least one destination, but in some circumstances, the source system is unaware of any particular destination system.
  /// </summary>
  [JsonPropertyName("destination")]
  public MessageHeaderDestination?[] Destination { get; set; }
  [JsonPropertyName("_destination")]
  public Element[] _Destination { get; set; }
  /// <summary>
  /// Usually only for the request but can be used in a response.
  /// </summary>
  [JsonPropertyName("enterer")]
  public Reference? Enterer { get; set; }
  [JsonPropertyName("_enterer")]
  public Element _Enterer { get; set; }
  /// <summary>
  /// The time of the event will be found in the focus resource. The time of the message will be found in [Bundle.timestamp](bundle-definitions.html#Bundle.timestamp).
  /// </summary>
  [JsonPropertyName("eventCoding")]
  public Coding EventCoding { get; set; }
  [JsonPropertyName("_eventCoding")]
  public Element _EventCoding { get; set; }
  /// <summary>
  /// The time of the event will be found in the focus resource. The time of the message will be found in [Bundle.timestamp](bundle-definitions.html#Bundle.timestamp).
  /// </summary>
  [JsonPropertyName("eventUri")]
  public string EventUri { get; set; }
  [JsonPropertyName("_eventUri")]
  public Element _EventUri { get; set; }
  /// <summary>
  /// The data is defined where the transaction type is defined. The transaction data is always included in the bundle that is the full message.  Only the root resource is specified.  The resources it references should be contained in the bundle but are not also listed here.  Multiple repetitions are allowed to cater for merges and other situations with multiple focal targets.
  /// </summary>
  [JsonPropertyName("focus")]
  public Reference?[] Focus { get; set; }
  [JsonPropertyName("_focus")]
  public Element[] _Focus { get; set; }
  /// <summary>
  /// Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept? Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element _Reason { get; set; }
  /// <summary>
  /// Information about the message that this message is a response to.  Only present if this message is a response.
  /// </summary>
  [JsonPropertyName("response")]
  public MessageHeaderResponse? Response { get; set; }
  [JsonPropertyName("_response")]
  public Element _Response { get; set; }
  /// <summary>
  /// Usually only for the request but can be used in a response.
  /// </summary>
  [JsonPropertyName("responsible")]
  public Reference? Responsible { get; set; }
  [JsonPropertyName("_responsible")]
  public Element _Responsible { get; set; }
  /// <summary>
  /// Use case is for where a (trusted) sending system is responsible for multiple organizations, and therefore cannot differentiate based on source endpoint / authentication alone.
  /// </summary>
  [JsonPropertyName("sender")]
  public Reference? Sender { get; set; }
  [JsonPropertyName("_sender")]
  public Element _Sender { get; set; }
  /// <summary>
  /// The source application from which this message originated.
  /// </summary>
  [JsonPropertyName("source")]
  public MessageHeaderSource Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
}
public class MetadataResource : DomainResource {
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// The effective period for a {{title}}  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
}
/// <summary>
/// A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
/// </summary>
public class MolecularSequenceReferenceSeq : BackboneElement {
  /// <summary>
  /// Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
  /// </summary>
  [JsonPropertyName("chromosome")]
  public CodeableConcept? Chromosome { get; set; }
  [JsonPropertyName("_chromosome")]
  public Element _Chromosome { get; set; }
  /// <summary>
  /// The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.
  /// </summary>
  [JsonPropertyName("genomeBuild")]
  public string? GenomeBuild { get; set; }
  [JsonPropertyName("_genomeBuild")]
  public Element _GenomeBuild { get; set; }
  /// <summary>
  /// A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
  /// </summary>
  [JsonPropertyName("orientation")]
  public string? Orientation { get; set; }
  [JsonPropertyName("_orientation")]
  public Element _Orientation { get; set; }
  /// <summary>
  /// Reference identifier of reference sequence submitted to NCBI. It must match the type in the MolecularSequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.
  /// </summary>
  [JsonPropertyName("referenceSeqId")]
  public CodeableConcept? ReferenceSeqId { get; set; }
  [JsonPropertyName("_referenceSeqId")]
  public Element _ReferenceSeqId { get; set; }
  /// <summary>
  /// A pointer to another MolecularSequence entity as reference sequence.
  /// </summary>
  [JsonPropertyName("referenceSeqPointer")]
  public Reference? ReferenceSeqPointer { get; set; }
  [JsonPropertyName("_referenceSeqPointer")]
  public Element _ReferenceSeqPointer { get; set; }
  /// <summary>
  /// A string like "ACGT".
  /// </summary>
  [JsonPropertyName("referenceSeqString")]
  public string? ReferenceSeqString { get; set; }
  [JsonPropertyName("_referenceSeqString")]
  public Element _ReferenceSeqString { get; set; }
  /// <summary>
  /// An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
  /// </summary>
  [JsonPropertyName("strand")]
  public string? Strand { get; set; }
  [JsonPropertyName("_strand")]
  public Element _Strand { get; set; }
  /// <summary>
  /// End position of the window on the reference sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
  /// </summary>
  [JsonPropertyName("windowEnd")]
  public int? WindowEnd { get; set; }
  [JsonPropertyName("_windowEnd")]
  public Element _WindowEnd { get; set; }
  /// <summary>
  /// Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
  /// </summary>
  [JsonPropertyName("windowStart")]
  public int? WindowStart { get; set; }
  [JsonPropertyName("_windowStart")]
  public Element _WindowStart { get; set; }
}
/// <summary>
/// Code Values for the MolecularSequence.referenceSeq.orientation field
/// </summary>
public sealed class MolecularSequenceReferenceSeqOrientationCodes {
  public const string SENSE = "sense";
  public const string ANTISENSE = "antisense";
}
/// <summary>
/// Code Values for the MolecularSequence.referenceSeq.strand field
/// </summary>
public sealed class MolecularSequenceReferenceSeqStrandCodes {
  public const string WATSON = "watson";
  public const string CRICK = "crick";
}
/// <summary>
/// The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
/// </summary>
public class MolecularSequenceVariant : BackboneElement {
  /// <summary>
  /// Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
  /// </summary>
  [JsonPropertyName("cigar")]
  public string? Cigar { get; set; }
  [JsonPropertyName("_cigar")]
  public Element _Cigar { get; set; }
  /// <summary>
  /// End position of the variant on the reference sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
  /// </summary>
  [JsonPropertyName("end")]
  public int? End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
  /// </summary>
  [JsonPropertyName("observedAllele")]
  public string? ObservedAllele { get; set; }
  [JsonPropertyName("_observedAllele")]
  public Element _ObservedAllele { get; set; }
  /// <summary>
  /// An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
  /// </summary>
  [JsonPropertyName("referenceAllele")]
  public string? ReferenceAllele { get; set; }
  [JsonPropertyName("_referenceAllele")]
  public Element _ReferenceAllele { get; set; }
  /// <summary>
  /// Start position of the variant on the  reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
  /// </summary>
  [JsonPropertyName("start")]
  public int? Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
  /// <summary>
  /// A pointer to an Observation containing variant information.
  /// </summary>
  [JsonPropertyName("variantPointer")]
  public Reference? VariantPointer { get; set; }
  [JsonPropertyName("_variantPointer")]
  public Element _VariantPointer { get; set; }
}
/// <summary>
/// Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
/// </summary>
public class MolecularSequenceQualityRoc : BackboneElement {
  /// <summary>
  /// Calculated fScore if the GQ score threshold was set to "score" field value.
  /// </summary>
  [JsonPropertyName("fMeasure")]
  public decimal?[] FMeasure { get; set; }
  [JsonPropertyName("_fMeasure")]
  public Element[] _FMeasure { get; set; }
  /// <summary>
  /// The number of false negatives if the GQ score threshold was set to "score" field value.
  /// </summary>
  [JsonPropertyName("numFN")]
  public int?[] NumFN { get; set; }
  [JsonPropertyName("_numFN")]
  public Element[] _NumFN { get; set; }
  /// <summary>
  /// The number of false positives if the GQ score threshold was set to "score" field value.
  /// </summary>
  [JsonPropertyName("numFP")]
  public int?[] NumFP { get; set; }
  [JsonPropertyName("_numFP")]
  public Element[] _NumFP { get; set; }
  /// <summary>
  /// The number of true positives if the GQ score threshold was set to "score" field value.
  /// </summary>
  [JsonPropertyName("numTP")]
  public int?[] NumTP { get; set; }
  [JsonPropertyName("_numTP")]
  public Element[] _NumTP { get; set; }
  /// <summary>
  /// Calculated precision if the GQ score threshold was set to "score" field value.
  /// </summary>
  [JsonPropertyName("precision")]
  public decimal?[] Precision { get; set; }
  [JsonPropertyName("_precision")]
  public Element[] _Precision { get; set; }
  /// <summary>
  /// Invidual data point representing the GQ (genotype quality) score threshold.
  /// </summary>
  [JsonPropertyName("score")]
  public int?[] Score { get; set; }
  [JsonPropertyName("_score")]
  public Element[] _Score { get; set; }
  /// <summary>
  /// Calculated sensitivity if the GQ score threshold was set to "score" field value.
  /// </summary>
  [JsonPropertyName("sensitivity")]
  public decimal?[] Sensitivity { get; set; }
  [JsonPropertyName("_sensitivity")]
  public Element[] _Sensitivity { get; set; }
}
/// <summary>
/// An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
/// </summary>
public class MolecularSequenceQuality : BackboneElement {
  /// <summary>
  /// End position of the sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
  /// </summary>
  [JsonPropertyName("end")]
  public int? End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).
  /// </summary>
  [JsonPropertyName("fScore")]
  public decimal? FScore { get; set; }
  [JsonPropertyName("_fScore")]
  public Element _FScore { get; set; }
  /// <summary>
  /// The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
  /// </summary>
  [JsonPropertyName("gtFP")]
  public decimal? GtFP { get; set; }
  [JsonPropertyName("_gtFP")]
  public Element _GtFP { get; set; }
  /// <summary>
  /// Which method is used to get sequence quality.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// QUERY.TP / (QUERY.TP + QUERY.FP).
  /// </summary>
  [JsonPropertyName("precision")]
  public decimal? Precision { get; set; }
  [JsonPropertyName("_precision")]
  public Element _Precision { get; set; }
  /// <summary>
  /// False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.
  /// </summary>
  [JsonPropertyName("queryFP")]
  public decimal? QueryFP { get; set; }
  [JsonPropertyName("_queryFP")]
  public Element _QueryFP { get; set; }
  /// <summary>
  /// True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
  /// </summary>
  [JsonPropertyName("queryTP")]
  public decimal? QueryTP { get; set; }
  [JsonPropertyName("_queryTP")]
  public Element _QueryTP { get; set; }
  /// <summary>
  /// TRUTH.TP / (TRUTH.TP + TRUTH.FN).
  /// </summary>
  [JsonPropertyName("recall")]
  public decimal? Recall { get; set; }
  [JsonPropertyName("_recall")]
  public Element _Recall { get; set; }
  /// <summary>
  /// Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
  /// </summary>
  [JsonPropertyName("roc")]
  public MolecularSequenceQualityRoc? Roc { get; set; }
  [JsonPropertyName("_roc")]
  public Element _Roc { get; set; }
  /// <summary>
  /// The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
  /// </summary>
  [JsonPropertyName("score")]
  public Quantity? Score { get; set; }
  [JsonPropertyName("_score")]
  public Element _Score { get; set; }
  /// <summary>
  /// Gold standard sequence used for comparing against.
  /// </summary>
  [JsonPropertyName("standardSequence")]
  public CodeableConcept? StandardSequence { get; set; }
  [JsonPropertyName("_standardSequence")]
  public Element _StandardSequence { get; set; }
  /// <summary>
  /// Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
  /// </summary>
  [JsonPropertyName("start")]
  public int? Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
  /// <summary>
  /// False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.
  /// </summary>
  [JsonPropertyName("truthFN")]
  public decimal? TruthFN { get; set; }
  [JsonPropertyName("_truthFN")]
  public Element _TruthFN { get; set; }
  /// <summary>
  /// True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
  /// </summary>
  [JsonPropertyName("truthTP")]
  public decimal? TruthTP { get; set; }
  [JsonPropertyName("_truthTP")]
  public Element _TruthTP { get; set; }
  /// <summary>
  /// INDEL / SNP / Undefined variant.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the MolecularSequence.quality.type field
/// </summary>
public sealed class MolecularSequenceQualityTypeCodes {
  public const string INDEL = "indel";
  public const string SNP = "snp";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
/// </summary>
public class MolecularSequenceRepository : BackboneElement {
  /// <summary>
  /// Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.
  /// </summary>
  [JsonPropertyName("datasetId")]
  public string? DatasetId { get; set; }
  [JsonPropertyName("_datasetId")]
  public Element _DatasetId { get; set; }
  /// <summary>
  /// URI of an external repository which contains further details about the genetics data.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Id of the read in this external repository.
  /// </summary>
  [JsonPropertyName("readsetId")]
  public string? ReadsetId { get; set; }
  [JsonPropertyName("_readsetId")]
  public Element _ReadsetId { get; set; }
  /// <summary>
  /// Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// URI of an external repository which contains further details about the genetics data.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.
  /// </summary>
  [JsonPropertyName("variantsetId")]
  public string? VariantsetId { get; set; }
  [JsonPropertyName("_variantsetId")]
  public Element _VariantsetId { get; set; }
}
/// <summary>
/// Code Values for the MolecularSequence.repository.type field
/// </summary>
public sealed class MolecularSequenceRepositoryTypeCodes {
  public const string DIRECTLINK = "directlink";
  public const string OPENAPI = "openapi";
  public const string LOGIN = "login";
  public const string OAUTH = "oauth";
  public const string OTHER = "other";
}
/// <summary>
/// Structural variant outer.
/// </summary>
public class MolecularSequenceStructureVariantOuter : BackboneElement {
  /// <summary>
  /// Structural variant outer end. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
  /// </summary>
  [JsonPropertyName("end")]
  public int? End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// Structural variant outer start. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
  /// </summary>
  [JsonPropertyName("start")]
  public int? Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
}
/// <summary>
/// Structural variant inner.
/// </summary>
public class MolecularSequenceStructureVariantInner : BackboneElement {
  /// <summary>
  /// Structural variant inner end. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
  /// </summary>
  [JsonPropertyName("end")]
  public int? End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// Structural variant inner start. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
  /// </summary>
  [JsonPropertyName("start")]
  public int? Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
}
/// <summary>
/// Information about chromosome structure variation.
/// </summary>
public class MolecularSequenceStructureVariant : BackboneElement {
  /// <summary>
  /// Used to indicate if the outer and inner start-end values have the same meaning.
  /// </summary>
  [JsonPropertyName("exact")]
  public bool? Exact { get; set; }
  [JsonPropertyName("_exact")]
  public Element _Exact { get; set; }
  /// <summary>
  /// Structural variant inner.
  /// </summary>
  [JsonPropertyName("inner")]
  public MolecularSequenceStructureVariantInner? Inner { get; set; }
  [JsonPropertyName("_inner")]
  public Element _Inner { get; set; }
  /// <summary>
  /// Length of the variant chromosome.
  /// </summary>
  [JsonPropertyName("length")]
  public int? Length { get; set; }
  [JsonPropertyName("_length")]
  public Element _Length { get; set; }
  /// <summary>
  /// Structural variant outer.
  /// </summary>
  [JsonPropertyName("outer")]
  public MolecularSequenceStructureVariantOuter? Outer { get; set; }
  [JsonPropertyName("_outer")]
  public Element _Outer { get; set; }
  /// <summary>
  /// Information about chromosome structure variation DNA change type.
  /// </summary>
  [JsonPropertyName("variantType")]
  public CodeableConcept? VariantType { get; set; }
  [JsonPropertyName("_variantType")]
  public Element _VariantType { get; set; }
}
public class MolecularSequence : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "MolecularSequence";
  /// <summary>
  /// Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end).
  /// </summary>
  [JsonPropertyName("coordinateSystem")]
  public int CoordinateSystem { get; set; }
  [JsonPropertyName("_coordinateSystem")]
  public Element _CoordinateSystem { get; set; }
  /// <summary>
  /// The method for sequencing, for example, chip information.
  /// </summary>
  [JsonPropertyName("device")]
  public Reference? Device { get; set; }
  [JsonPropertyName("_device")]
  public Element _Device { get; set; }
  /// <summary>
  /// A unique identifier for this particular sequence instance. This is a FHIR-defined id.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall start from referenceSeq.windowStart and end by referenceSeq.windowEnd.
  /// </summary>
  [JsonPropertyName("observedSeq")]
  public string? ObservedSeq { get; set; }
  [JsonPropertyName("_observedSeq")]
  public Element _ObservedSeq { get; set; }
  /// <summary>
  /// The patient whose sequencing results are described by this resource.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference? Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// The organization or lab that should be responsible for this result.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference? Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element _Performer { get; set; }
  /// <summary>
  /// Pointer to next atomic sequence which at most contains one variant.
  /// </summary>
  [JsonPropertyName("pointer")]
  public Reference?[] Pointer { get; set; }
  [JsonPropertyName("_pointer")]
  public Element[] _Pointer { get; set; }
  /// <summary>
  /// An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
  /// </summary>
  [JsonPropertyName("quality")]
  public MolecularSequenceQuality?[] Quality { get; set; }
  [JsonPropertyName("_quality")]
  public Element[] _Quality { get; set; }
  /// <summary>
  /// The number of copies of the sequence of interest. (RNASeq).
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
  /// </summary>
  [JsonPropertyName("readCoverage")]
  public int? ReadCoverage { get; set; }
  [JsonPropertyName("_readCoverage")]
  public Element _ReadCoverage { get; set; }
  /// <summary>
  /// A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
  /// </summary>
  [JsonPropertyName("referenceSeq")]
  public MolecularSequenceReferenceSeq? ReferenceSeq { get; set; }
  [JsonPropertyName("_referenceSeq")]
  public Element _ReferenceSeq { get; set; }
  /// <summary>
  /// Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
  /// </summary>
  [JsonPropertyName("repository")]
  public MolecularSequenceRepository?[] Repository { get; set; }
  [JsonPropertyName("_repository")]
  public Element[] _Repository { get; set; }
  /// <summary>
  /// Specimen used for sequencing.
  /// </summary>
  [JsonPropertyName("specimen")]
  public Reference? Specimen { get; set; }
  [JsonPropertyName("_specimen")]
  public Element _Specimen { get; set; }
  /// <summary>
  /// Information about chromosome structure variation.
  /// </summary>
  [JsonPropertyName("structureVariant")]
  public MolecularSequenceStructureVariant?[] StructureVariant { get; set; }
  [JsonPropertyName("_structureVariant")]
  public Element[] _StructureVariant { get; set; }
  /// <summary>
  /// Amino Acid Sequence/ DNA Sequence / RNA Sequence.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
  /// </summary>
  [JsonPropertyName("variant")]
  public MolecularSequenceVariant?[] Variant { get; set; }
  [JsonPropertyName("_variant")]
  public Element[] _Variant { get; set; }
}
/// <summary>
/// Code Values for the MolecularSequence.type field
/// </summary>
public sealed class MolecularSequenceTypeCodes {
  public const string AA = "aa";
  public const string DNA = "dna";
  public const string RNA = "rna";
}
/// <summary>
/// Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
/// </summary>
public class NamingSystemUniqueId : BackboneElement {
  /// <summary>
  /// e.g. "must be used in Germany" or "was initially published in error with this value".
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// Within a registry, a given identifier should only be "active" for a single namespace at a time.  (Ideally, an identifier should only ever be associated with a single namespace across all time).
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Indicates whether this identifier is the "preferred" identifier of this type.
  /// </summary>
  [JsonPropertyName("preferred")]
  public bool? Preferred { get; set; }
  [JsonPropertyName("_preferred")]
  public Element _Preferred { get; set; }
  /// <summary>
  /// Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// If the value is a URI intended for use as FHIR system identifier, the URI should not contain "\" or "?" or "," since this makes escaping very difficult.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the NamingSystem.uniqueId.type field
/// </summary>
public sealed class NamingSystemUniqueIdTypeCodes {
  public const string OID = "oid";
  public const string UUID = "uuid";
  public const string URI = "uri";
  public const string OTHER = "other";
}
public class NamingSystem : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "NamingSystem";
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the naming system. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the naming system was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the naming system as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the naming system is presumed to be the predominant language in the place the naming system was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// It may be possible for the naming system to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// Indicates the purpose for the naming system - what kinds of things does it make unique?
  /// </summary>
  [JsonPropertyName("kind")]
  public string Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.The"symbolic name" for an OID would be captured as an extension.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the naming system is the organization or individual primarily responsible for the maintenance and upkeep of the naming system. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the naming system. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This is the primary organization.  Responsibility for some aspects of a namespace may be delegated.
  /// </summary>
  [JsonPropertyName("responsible")]
  public string? Responsible { get; set; }
  [JsonPropertyName("_responsible")]
  public Element _Responsible { get; set; }
  /// <summary>
  /// Allows filtering of naming systems that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This will most commonly be used for identifier namespaces, but categories could potentially be useful for code systems and authorities as well.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Multiple identifiers may exist, either due to duplicate registration, regional rules, needs of different communication technologies, etc.
  /// </summary>
  [JsonPropertyName("uniqueId")]
  public NamingSystemUniqueId[] UniqueId { get; set; }
  [JsonPropertyName("_uniqueId")]
  public Element[] _UniqueId { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
  /// </summary>
  [JsonPropertyName("usage")]
  public string? Usage { get; set; }
  [JsonPropertyName("_usage")]
  public Element _Usage { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different naming system instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the naming system with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the NamingSystem.kind field
/// </summary>
public sealed class NamingSystemKindCodes {
  public const string CODESYSTEM = "codesystem";
  public const string IDENTIFIER = "identifier";
  public const string ROOT = "root";
}
/// <summary>
/// Code Values for the NamingSystem.status field
/// </summary>
public sealed class NamingSystemStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// What food or fluid product or item was consumed.
/// </summary>
public class NutritionIntakeConsumedItem : BackboneElement {
  /// <summary>
  /// Quantity of the specified food.
  /// </summary>
  [JsonPropertyName("amount")]
  public Quantity? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Indicator when a patient is in a setting where it is helpful to know if food was not consumed, such as it was refused, held (as in tube feedings), or otherwise not provided. If a consumption is being recorded from an app, such as MyFitnessPal, this indicator will likely not be used.
  /// </summary>
  [JsonPropertyName("notConsumed")]
  public bool? NotConsumed { get; set; }
  [JsonPropertyName("_notConsumed")]
  public Element _NotConsumed { get; set; }
  /// <summary>
  /// Document the reason the food or fluid was not consumed, such as refused, held, etc.
  /// </summary>
  [JsonPropertyName("notConsumedReason")]
  public CodeableConcept? NotConsumedReason { get; set; }
  [JsonPropertyName("_notConsumedReason")]
  public Element _NotConsumedReason { get; set; }
  /// <summary>
  /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of a new nutritionProduct resource is recommended.
  /// </summary>
  [JsonPropertyName("nutritionProduct")]
  public CodeableReference NutritionProduct { get; set; }
  [JsonPropertyName("_nutritionProduct")]
  public Element _NutritionProduct { get; set; }
  /// <summary>
  /// Rate at which enteral feeding was administered.
  /// </summary>
  [JsonPropertyName("rate")]
  public Quantity? Rate { get; set; }
  [JsonPropertyName("_rate")]
  public Element _Rate { get; set; }
  /// <summary>
  /// Scheduled frequency of consumption.
  /// </summary>
  [JsonPropertyName("schedule")]
  public Timing? Schedule { get; set; }
  [JsonPropertyName("_schedule")]
  public Element _Schedule { get; set; }
  /// <summary>
  /// Indicates what a category of item that was consumed: eg., food, fluid, enteral, etc.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Individual item nutrients are not currently included in the resource and will likely end up as a reference in nutritionProduct to represent the individual items.
/// </summary>
public class NutritionIntakeIngredientLabel : BackboneElement {
  /// <summary>
  /// Total amount of nutrient consumed.
  /// </summary>
  [JsonPropertyName("amount")]
  public Quantity Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Total nutrient consumed. This could be a macronutrient (protein, fat, carbohydrate), or a vitamin and mineral.
  /// </summary>
  [JsonPropertyName("nutrient")]
  public CodeableReference Nutrient { get; set; }
  [JsonPropertyName("_nutrient")]
  public Element _Nutrient { get; set; }
}
/// <summary>
/// Who performed the intake and how they were involved.
/// </summary>
public class NutritionIntakePerformer : BackboneElement {
  /// <summary>
  /// Who performed the intake.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Type of performer.
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept? Function { get; set; }
  [JsonPropertyName("_function")]
  public Element _Function { get; set; }
}
public class NutritionIntake : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "NutritionIntake";
  /// <summary>
  /// A plan, proposal or order that is fulfilled in whole or in part by this event.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Type of nutrition intake setting/reporting.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// What food or fluid product or item was consumed.
  /// </summary>
  [JsonPropertyName("consumedItem")]
  public NutritionIntakeConsumedItem[] ConsumedItem { get; set; }
  [JsonPropertyName("_consumedItem")]
  public Element[] _ConsumedItem { get; set; }
  /// <summary>
  /// Likely references would be to AllergyIntolerance,  Observation or QuestionnaireAnswers.
  /// </summary>
  [JsonPropertyName("derivedFrom")]
  public Reference?[] DerivedFrom { get; set; }
  [JsonPropertyName("_derivedFrom")]
  public Element[] _DerivedFrom { get; set; }
  /// <summary>
  /// The encounter that establishes the context for this NutritionIntake.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Individual item nutrients are not currently included in the resource and will likely end up as a reference in nutritionProduct to represent the individual items.
  /// </summary>
  [JsonPropertyName("ingredientLabel")]
  public NutritionIntakeIngredientLabel?[] IngredientLabel { get; set; }
  [JsonPropertyName("_ingredientLabel")]
  public Element[] _IngredientLabel { get; set; }
  /// <summary>
  /// Instantiates FHIR protocol or definition.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// Instantiates external protocol or definition.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// Where the intake occurred.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// Provides extra information about the Nutrition Intake that is not conveyed by the other attributes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// This attribute reflects the period over which the patient consumed the food fluid and is expected to be populated on the majority of NutritionIntake. If the food or fluid is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// This attribute reflects the period over which the patient consumed the food fluid and is expected to be populated on the majority of NutritionIntake. If the food or fluid is still being taken and is expected to continue indefinitely at the time the usage is recorded, the "end" date will be omitted.  If the end date is known, then it is included as the "end date".  The date/time attribute supports a variety of dates - year, year/month and exact date.  If something more than this is required, this should be conveyed as text.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// A larger event of which this particular event is a component or step.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Who performed the intake and how they were involved.
  /// </summary>
  [JsonPropertyName("performer")]
  public NutritionIntakePerformer?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// A reason, Condition or observation for why the food or fluid is /was consumed.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The date when the Nutrition Intake was asserted by the information source.
  /// </summary>
  [JsonPropertyName("recorded")]
  public string? Recorded { get; set; }
  [JsonPropertyName("_recorded")]
  public Element _Recorded { get; set; }
  /// <summary>
  /// The person or organization that provided the information about the consumption of this food or fluid. Note: Use derivedFrom when a NutritionIntake is derived from other resources.
  /// </summary>
  [JsonPropertyName("reportedBoolean")]
  public bool? ReportedBoolean { get; set; }
  [JsonPropertyName("_reportedBoolean")]
  public Element _ReportedBoolean { get; set; }
  /// <summary>
  /// The person or organization that provided the information about the consumption of this food or fluid. Note: Use derivedFrom when a NutritionIntake is derived from other resources.
  /// </summary>
  [JsonPropertyName("reportedReference")]
  public Reference? ReportedReference { get; set; }
  [JsonPropertyName("_reportedReference")]
  public Element _ReportedReference { get; set; }
  /// <summary>
  /// NutritionIntake is a statement at a point in time.  The status is only representative at the point when it was asserted.  The value set for NutritionIntake.status contains codes that assert the status of the consumption of the food or fluid by the patient (for example, stopped or on hold) as well as codes that assert the status of the Nutrition Intake itself (for example, entered in error).
  /// 
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This is generally only used for "exception" statuses such as "not-taken", "on-hold", "cancelled" or "entered-in-error". The reason for performing the event at all is captured in reasonCode, not here.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept?[] StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element[] _StatusReason { get; set; }
  /// <summary>
  /// The person, animal or group who is/was consuming the food or fluid.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the NutritionIntake.status field
/// </summary>
public sealed class NutritionIntakeStatusCodes {
  public const string PREPARATION = "preparation";
  public const string IN_PROGRESS = "in-progress";
  public const string NOT_DONE = "not-done";
  public const string ON_HOLD = "on-hold";
  public const string STOPPED = "stopped";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
/// </summary>
public class NutritionOrderOralDietNutrient : BackboneElement {
  /// <summary>
  /// The quantity of the specified nutrient to include in diet.
  /// </summary>
  [JsonPropertyName("amount")]
  public Quantity? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// The nutrient that is being modified such as carbohydrate or sodium.
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept? Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element _Modifier { get; set; }
}
/// <summary>
/// Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
/// </summary>
public class NutritionOrderOralDietTexture : BackboneElement {
  /// <summary>
  /// Coupled with the `texture.modifier`; could be (All Foods).
  /// </summary>
  [JsonPropertyName("foodType")]
  public CodeableConcept? FoodType { get; set; }
  [JsonPropertyName("_foodType")]
  public Element _FoodType { get; set; }
  /// <summary>
  /// Coupled with the foodType (Meat).
  /// </summary>
  [JsonPropertyName("modifier")]
  public CodeableConcept? Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element _Modifier { get; set; }
}
/// <summary>
/// Diet given orally in contrast to enteral (tube) feeding.
/// </summary>
public class NutritionOrderOralDiet : BackboneElement {
  /// <summary>
  /// The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.
  /// </summary>
  [JsonPropertyName("fluidConsistencyType")]
  public CodeableConcept?[] FluidConsistencyType { get; set; }
  [JsonPropertyName("_fluidConsistencyType")]
  public Element[] _FluidConsistencyType { get; set; }
  /// <summary>
  /// Free text dosage instructions can be used for cases where the instructions are too complex to code.
  /// </summary>
  [JsonPropertyName("instruction")]
  public string? Instruction { get; set; }
  [JsonPropertyName("_instruction")]
  public Element _Instruction { get; set; }
  /// <summary>
  /// Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
  /// </summary>
  [JsonPropertyName("nutrient")]
  public NutritionOrderOralDietNutrient?[] Nutrient { get; set; }
  [JsonPropertyName("_nutrient")]
  public Element[] _Nutrient { get; set; }
  /// <summary>
  /// The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.
  /// </summary>
  [JsonPropertyName("schedule")]
  public Timing?[] Schedule { get; set; }
  [JsonPropertyName("_schedule")]
  public Element[] _Schedule { get; set; }
  /// <summary>
  /// Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
  /// </summary>
  [JsonPropertyName("texture")]
  public NutritionOrderOralDietTexture?[] Texture { get; set; }
  [JsonPropertyName("_texture")]
  public Element[] _Texture { get; set; }
  /// <summary>
  /// The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Oral nutritional products given in order to add further nutritional value to the patient's diet.
/// </summary>
public class NutritionOrderSupplement : BackboneElement {
  /// <summary>
  /// Free text dosage instructions can be used for cases where the instructions are too complex to code.
  /// </summary>
  [JsonPropertyName("instruction")]
  public string? Instruction { get; set; }
  [JsonPropertyName("_instruction")]
  public Element _Instruction { get; set; }
  /// <summary>
  /// The product or brand name of the nutritional supplement such as "Acme Protein Shake".
  /// </summary>
  [JsonPropertyName("productName")]
  public string? ProductName { get; set; }
  [JsonPropertyName("_productName")]
  public Element _ProductName { get; set; }
  /// <summary>
  /// The amount of the nutritional supplement to be given.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The time period and frequency at which the supplement(s) should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.
  /// </summary>
  [JsonPropertyName("schedule")]
  public Timing?[] Schedule { get; set; }
  [JsonPropertyName("_schedule")]
  public Element[] _Schedule { get; set; }
  /// <summary>
  /// The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
/// </summary>
public class NutritionOrderEnteralFormulaAdministration : BackboneElement {
  /// <summary>
  /// The volume of formula to provide to the patient per the specified administration schedule.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
  /// </summary>
  [JsonPropertyName("rateQuantity")]
  public Quantity? RateQuantity { get; set; }
  [JsonPropertyName("_rateQuantity")]
  public Element _RateQuantity { get; set; }
  /// <summary>
  /// Ratio is used when the quantity value in the denominator is not "1", otherwise use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus the Quantity datatype for "50 mL/hr".
  /// </summary>
  [JsonPropertyName("rateRatio")]
  public Ratio? RateRatio { get; set; }
  [JsonPropertyName("_rateRatio")]
  public Element _RateRatio { get; set; }
  /// <summary>
  /// The time period and frequency at which the enteral formula should be delivered to the patient.
  /// </summary>
  [JsonPropertyName("schedule")]
  public Timing? Schedule { get; set; }
  [JsonPropertyName("_schedule")]
  public Element _Schedule { get; set; }
}
/// <summary>
/// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
/// </summary>
public class NutritionOrderEnteralFormula : BackboneElement {
  /// <summary>
  /// The product or brand name of the type of modular component to be added to the formula.
  /// </summary>
  [JsonPropertyName("additiveProductName")]
  public string? AdditiveProductName { get; set; }
  [JsonPropertyName("_additiveProductName")]
  public Element _AdditiveProductName { get; set; }
  /// <summary>
  /// Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
  /// </summary>
  [JsonPropertyName("additiveType")]
  public CodeableConcept? AdditiveType { get; set; }
  [JsonPropertyName("_additiveType")]
  public Element _AdditiveType { get; set; }
  /// <summary>
  /// See implementation notes below for further discussion on how to order continuous vs bolus enteral feeding using this resource.
  /// </summary>
  [JsonPropertyName("administration")]
  public NutritionOrderEnteralFormulaAdministration?[] Administration { get; set; }
  [JsonPropertyName("_administration")]
  public Element[] _Administration { get; set; }
  /// <summary>
  /// Free text dosage instructions can be used for cases where the instructions are too complex to code.
  /// </summary>
  [JsonPropertyName("administrationInstruction")]
  public string? AdministrationInstruction { get; set; }
  [JsonPropertyName("_administrationInstruction")]
  public Element _AdministrationInstruction { get; set; }
  /// <summary>
  /// The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
  /// </summary>
  [JsonPropertyName("baseFormulaProductName")]
  public string? BaseFormulaProductName { get; set; }
  [JsonPropertyName("_baseFormulaProductName")]
  public Element _BaseFormulaProductName { get; set; }
  /// <summary>
  /// The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.
  /// </summary>
  [JsonPropertyName("baseFormulaType")]
  public CodeableConcept? BaseFormulaType { get; set; }
  [JsonPropertyName("_baseFormulaType")]
  public Element _BaseFormulaType { get; set; }
  /// <summary>
  /// The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
  /// </summary>
  [JsonPropertyName("caloricDensity")]
  public Quantity? CaloricDensity { get; set; }
  [JsonPropertyName("_caloricDensity")]
  public Element _CaloricDensity { get; set; }
  /// <summary>
  /// The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
  /// </summary>
  [JsonPropertyName("maxVolumeToDeliver")]
  public Quantity? MaxVolumeToDeliver { get; set; }
  [JsonPropertyName("_maxVolumeToDeliver")]
  public Element _MaxVolumeToDeliver { get; set; }
  /// <summary>
  /// The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
  /// </summary>
  [JsonPropertyName("routeofAdministration")]
  public CodeableConcept? RouteofAdministration { get; set; }
  [JsonPropertyName("_routeofAdministration")]
  public Element _RouteofAdministration { get; set; }
}
public class NutritionOrder : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "NutritionOrder";
  /// <summary>
  /// Information on a patient's food allergies and intolerances to inform healthcare personnel about the type of foods that the patient shouldn't receive or consume.
  /// </summary>
  [JsonPropertyName("allergyIntolerance")]
  public Reference?[] AllergyIntolerance { get; set; }
  [JsonPropertyName("_allergyIntolerance")]
  public Element[] _AllergyIntolerance { get; set; }
  /// <summary>
  /// The date and time that this nutrition order was requested.
  /// </summary>
  [JsonPropertyName("dateTime")]
  public string DateTime { get; set; }
  [JsonPropertyName("_dateTime")]
  public Element _DateTime { get; set; }
  /// <summary>
  /// An encounter that provides additional information about the healthcare context in which this request is made.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
  /// </summary>
  [JsonPropertyName("enteralFormula")]
  public NutritionOrderEnteralFormula? EnteralFormula { get; set; }
  [JsonPropertyName("_enteralFormula")]
  public Element _EnteralFormula { get; set; }
  /// <summary>
  /// Information on a patient's food allergies, intolerances and preferences to inform healthcare personnel about the type  of foods that the patient shouldn't receive or consume.
  /// </summary>
  [JsonPropertyName("excludeFoodModifier")]
  public CodeableConcept?[] ExcludeFoodModifier { get; set; }
  [JsonPropertyName("_excludeFoodModifier")]
  public Element[] _ExcludeFoodModifier { get; set; }
  /// <summary>
  /// Information on a patient's food preferences that inform healthcare personnel about the food that the patient should receive or consume.
  /// </summary>
  [JsonPropertyName("foodPreferenceModifier")]
  public CodeableConcept?[] FoodPreferenceModifier { get; set; }
  [JsonPropertyName("_foodPreferenceModifier")]
  public Element[] _FoodPreferenceModifier { get; set; }
  /// <summary>
  /// The Identifier.type element can be to indicate filler vs. placer if needed.  This is explained in further detail [here](servicerequest.html#notes).
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.
  /// </summary>
  [JsonPropertyName("instantiates")]
  public string?[] Instantiates { get; set; }
  [JsonPropertyName("_instantiates")]
  public Element[] _Instantiates { get; set; }
  /// <summary>
  /// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// When resources map to this element, they are free to define as many codes as necessary to cover their space and will map to "proposal, plan or order".  Can have multiple codes that map to one of these.  E.g. "original order", "encoded order", "reflex order" would all map to "order".  Expectation is that the set of codes is mutually exclusive or a strict all-encompassing hierarchy.
  /// </summary>
  [JsonPropertyName("intent")]
  public string Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// This element SHALL NOT be used to supply free text instructions for the diet which are represented in the `.oralDiet.instruction`, `supplement.instruction`, or `enteralFormula.administrationInstruction` elements.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Diet given orally in contrast to enteral (tube) feeding.
  /// </summary>
  [JsonPropertyName("oralDiet")]
  public NutritionOrderOralDiet? OralDiet { get; set; }
  [JsonPropertyName("_oralDiet")]
  public Element _OralDiet { get; set; }
  /// <summary>
  /// The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
  /// </summary>
  [JsonPropertyName("orderer")]
  public Reference? Orderer { get; set; }
  [JsonPropertyName("_orderer")]
  public Element _Orderer { get; set; }
  /// <summary>
  /// The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// Typically the system placing the order sets the status to "requested". Thereafter, the order is maintained by the receiver that updates the status as the request is handled.  This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Oral nutritional products given in order to add further nutritional value to the patient's diet.
  /// </summary>
  [JsonPropertyName("supplement")]
  public NutritionOrderSupplement?[] Supplement { get; set; }
  [JsonPropertyName("_supplement")]
  public Element[] _Supplement { get; set; }
}
/// <summary>
/// Code Values for the NutritionOrder.intent field
/// </summary>
public sealed class NutritionOrderIntentCodes {
  public const string PROPOSAL = "proposal";
  public const string PLAN = "plan";
  public const string DIRECTIVE = "directive";
  public const string ORDER = "order";
  public const string ORIGINAL_ORDER = "original-order";
  public const string REFLEX_ORDER = "reflex-order";
  public const string FILLER_ORDER = "filler-order";
  public const string INSTANCE_ORDER = "instance-order";
  public const string OPTION = "option";
}
/// <summary>
/// Code Values for the NutritionOrder.status field
/// </summary>
public sealed class NutritionOrderStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string ON_HOLD = "on-hold";
  public const string REVOKED = "revoked";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
/// </summary>
public class NutritionProductNutrient : BackboneElement {
  /// <summary>
  /// The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.
  /// </summary>
  [JsonPropertyName("amount")]
  public Ratio?[] Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element[] _Amount { get; set; }
  /// <summary>
  /// The (relevant) nutrients in the product.
  /// </summary>
  [JsonPropertyName("item")]
  public CodeableReference? Item { get; set; }
  [JsonPropertyName("_item")]
  public Element _Item { get; set; }
}
/// <summary>
/// Ingredients contained in this product.
/// </summary>
public class NutritionProductIngredient : BackboneElement {
  /// <summary>
  /// The amount of ingredient that is in the product.
  /// </summary>
  [JsonPropertyName("amount")]
  public Ratio?[] Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element[] _Amount { get; set; }
  /// <summary>
  /// The ingredient contained in the product.
  /// </summary>
  [JsonPropertyName("item")]
  public CodeableReference Item { get; set; }
  [JsonPropertyName("_item")]
  public Element _Item { get; set; }
}
/// <summary>
/// Specifies descriptive properties of the nutrition product.
/// </summary>
public class NutritionProductProductCharacteristic : BackboneElement {
  /// <summary>
  /// A code specifying which characteristic of the product is being described (for example, colour, shape).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueBase64Binary")]
  public string ValueBase64Binary { get; set; }
  [JsonPropertyName("_valueBase64Binary")]
  public Element _ValueBase64Binary { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// The description should be provided as a CodeableConcept, SimpleQuantity or an image.  The description can be a string only when these others are not available.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
}
/// <summary>
/// Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
/// </summary>
public class NutritionProductInstance : BackboneElement {
  /// <summary>
  /// The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
  /// </summary>
  [JsonPropertyName("expiry")]
  public string? Expiry { get; set; }
  [JsonPropertyName("_expiry")]
  public Element _Expiry { get; set; }
  /// <summary>
  /// The identifier for the physical instance, typically a serial number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The identification of the batch or lot of the product.
  /// </summary>
  [JsonPropertyName("lotNumber")]
  public string? LotNumber { get; set; }
  [JsonPropertyName("_lotNumber")]
  public Element _LotNumber { get; set; }
  /// <summary>
  /// The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
  /// </summary>
  [JsonPropertyName("useBy")]
  public string? UseBy { get; set; }
  [JsonPropertyName("_useBy")]
  public Element _UseBy { get; set; }
}
public class NutritionProduct : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "NutritionProduct";
  /// <summary>
  /// Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The code assigned to the product, for example a manufacturer number or other terminology.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Ingredients contained in this product.
  /// </summary>
  [JsonPropertyName("ingredient")]
  public NutritionProductIngredient?[] Ingredient { get; set; }
  [JsonPropertyName("_ingredient")]
  public Element[] _Ingredient { get; set; }
  /// <summary>
  /// Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
  /// </summary>
  [JsonPropertyName("instance")]
  public NutritionProductInstance? Instance { get; set; }
  [JsonPropertyName("_instance")]
  public Element _Instance { get; set; }
  /// <summary>
  /// Allergens that are known to be a part of this nutrition product.
  /// </summary>
  [JsonPropertyName("knownAllergen")]
  public CodeableReference?[] KnownAllergen { get; set; }
  [JsonPropertyName("_knownAllergen")]
  public Element[] _KnownAllergen { get; set; }
  /// <summary>
  /// The organisation (manufacturer, representative or legal authorisation holder) that is responsible for the device.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference?[] Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element[] _Manufacturer { get; set; }
  /// <summary>
  /// Comments made about the product.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("nutrient")]
  public NutritionProductNutrient?[] Nutrient { get; set; }
  [JsonPropertyName("_nutrient")]
  public Element[] _Nutrient { get; set; }
  /// <summary>
  /// Specifies descriptive properties of the nutrition product.
  /// </summary>
  [JsonPropertyName("productCharacteristic")]
  public NutritionProductProductCharacteristic?[] ProductCharacteristic { get; set; }
  [JsonPropertyName("_productCharacteristic")]
  public Element[] _ProductCharacteristic { get; set; }
  /// <summary>
  /// Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the NutritionProduct.status field
/// </summary>
public sealed class NutritionProductStatusCodes {
  public const string ACTIVE = "active";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
/// </summary>
public class ObservationReferenceRange : BackboneElement {
  /// <summary>
  /// The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
  /// </summary>
  [JsonPropertyName("age")]
  public Range? Age { get; set; }
  [JsonPropertyName("_age")]
  public Element _Age { get; set; }
  /// <summary>
  /// This SHOULD be populated if there is more than one range.  If this element is not present then the normal population is assumed.
  /// </summary>
  [JsonPropertyName("appliesTo")]
  public CodeableConcept?[] AppliesTo { get; set; }
  [JsonPropertyName("_appliesTo")]
  public Element[] _AppliesTo { get; set; }
  /// <summary>
  /// The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
  /// </summary>
  [JsonPropertyName("high")]
  public Quantity? High { get; set; }
  [JsonPropertyName("_high")]
  public Element _High { get; set; }
  /// <summary>
  /// The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
  /// </summary>
  [JsonPropertyName("low")]
  public Quantity? Low { get; set; }
  [JsonPropertyName("_low")]
  public Element _Low { get; set; }
  /// <summary>
  /// Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// This SHOULD be populated if there is more than one range.  If this element is not present then the normal range is assumed.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
/// </summary>
public class ObservationComponent : BackboneElement {
  /// <summary>
  /// *All* code-value and  component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// "Null" or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "test not done". 
  /// 
  /// The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed.  Because of these options, use-case agreements are required to interpret general observations for exceptional values.
  /// </summary>
  [JsonPropertyName("dataAbsentReason")]
  public CodeableConcept? DataAbsentReason { get; set; }
  [JsonPropertyName("_dataAbsentReason")]
  public Element _DataAbsentReason { get; set; }
  /// <summary>
  /// Historically used for laboratory results (known as 'abnormal flag' ),  its use extends to other use cases where coded interpretations  are relevant.  Often reported as one or more simple compact codes this element is often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result.
  /// </summary>
  [JsonPropertyName("interpretation")]
  public CodeableConcept?[] Interpretation { get; set; }
  [JsonPropertyName("_interpretation")]
  public Element[] _Interpretation { get; set; }
  /// <summary>
  /// Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
  /// </summary>
  [JsonPropertyName("referenceRange")]
  public ObservationReferenceRange?[] ReferenceRange { get; set; }
  [JsonPropertyName("_referenceRange")]
  public Element[] _ReferenceRange { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int? ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range? ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueRatio")]
  public Ratio? ValueRatio { get; set; }
  [JsonPropertyName("_valueRatio")]
  public Element _ValueRatio { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueSampledData")]
  public SampledData? ValueSampledData { get; set; }
  [JsonPropertyName("_valueSampledData")]
  public Element _ValueSampledData { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string? ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string? ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valuePeriod")]
  public Period? ValuePeriod { get; set; }
  [JsonPropertyName("_valuePeriod")]
  public Element _ValuePeriod { get; set; }
  /// <summary>
  /// Used when observation has a set of component observations:
  /// -  An observation may have both a value (e.g. an  Apgar score) and component observations (the observations from which the Apgar score was derived). 
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
}
/// <summary>
/// Observations are a key aspect of healthcare.  This resource is used to capture those that do not require more sophisticated mechanisms.
/// </summary>
public class Observation : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Observation";
  /// <summary>
  /// A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Only used if not implicit in code found in Observation.code.  In many systems, this may be represented as a related observation instead of an inline component.   
  /// 
  /// If the use case requires BodySite to be handled as a separate resource (e.g. to identify and track separately) then use the standard extension[ bodySite](extension-bodysite.html).
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// In addition to the required category valueset, this element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used at once.  The level of granularity is defined by the category concepts in the value set.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// *All* code-value and, if present, component.code-component.value pairs need to be taken into account to correctly understand the meaning of the observation.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// For a discussion on the ways Observations can be assembled in groups together see [Notes](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("component")]
  public ObservationComponent?[] Component { get; set; }
  [JsonPropertyName("_component")]
  public Element[] _Component { get; set; }
  /// <summary>
  /// Null or exceptional values can be represented two ways in FHIR Observations.  One way is to simply include them in the value set and represent the exceptions in the value.  For example, measurement values for a serology test could be  "detected", "not detected", "inconclusive", or  "specimen unsatisfactory".   
  /// 
  /// The alternate way is to use the value element for actual observations and use the explicit dataAbsentReason element to record exceptional values.  For example, the dataAbsentReason code "error" could be used when the measurement was not completed. Note that an observation may only be reported if there are values to report. For example differential cell counts values may be reported only when > 0.  Because of these options, use-case agreements are required to interpret general observations for null or exceptional values.
  /// </summary>
  [JsonPropertyName("dataAbsentReason")]
  public CodeableConcept? DataAbsentReason { get; set; }
  [JsonPropertyName("_dataAbsentReason")]
  public Element _DataAbsentReason { get; set; }
  /// <summary>
  /// All the reference choices that are listed in this element can represent clinical observations and other measurements that may be the source for a derived value.  The most common reference will be another Observation.  For a discussion on the ways Observations can assembled in groups together, see [Notes](observation.html#obsgrouping) below.
  /// </summary>
  [JsonPropertyName("derivedFrom")]
  public Reference?[] DerivedFrom { get; set; }
  [JsonPropertyName("_derivedFrom")]
  public Element[] _DerivedFrom { get; set; }
  /// <summary>
  /// Note that this is not meant to represent a device involved in the transmission of the result, e.g., a gateway.  Such devices may be documented using the Provenance resource where relevant.
  /// </summary>
  [JsonPropertyName("device")]
  public Reference? Device { get; set; }
  [JsonPropertyName("_device")]
  public Element _Device { get; set; }
  /// <summary>
  /// At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
  /// </summary>
  [JsonPropertyName("effectiveDateTime")]
  public string? EffectiveDateTime { get; set; }
  [JsonPropertyName("_effectiveDateTime")]
  public Element _EffectiveDateTime { get; set; }
  /// <summary>
  /// At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
  /// </summary>
  [JsonPropertyName("effectiveTiming")]
  public Timing? EffectiveTiming { get; set; }
  [JsonPropertyName("_effectiveTiming")]
  public Element _EffectiveTiming { get; set; }
  /// <summary>
  /// At least a date should be present unless this observation is a historical report.  For recording imprecise or "fuzzy" times (For example, a blood glucose measurement taken "after breakfast") use the [Timing](datatypes.html#timing) datatype which allow the measurement to be tied to regular life events.
  /// </summary>
  [JsonPropertyName("effectiveInstant")]
  public string? EffectiveInstant { get; set; }
  [JsonPropertyName("_effectiveInstant")]
  public Element _EffectiveInstant { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission laboratory tests).
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Typically, an observation is made about the subject - a patient, or group of patients, location, or device - and the distinction between the subject and what is directly measured for an observation is specified in the observation code itself ( e.g., "Blood Glucose") and does not need to be represented separately using this element.  Use `specimen` if a reference to a specimen is required.  If a code is required instead of a resource use either  `bodysite` for bodysites or the standard extension [focusCode](extension-observation-focuscode.html).
  /// </summary>
  [JsonPropertyName("focus")]
  public Reference?[] Focus { get; set; }
  [JsonPropertyName("_focus")]
  public Element[] _Focus { get; set; }
  /// <summary>
  /// When using this element, an observation will typically have either a value or a set of related resources, although both may be present in some cases.  For a discussion on the ways Observations can assembled in groups together, see [Notes](observation.html#obsgrouping) below.  Note that a system may calculate results from [QuestionnaireResponse](questionnaireresponse.html)  into a final score and represent the score as an Observation.
  /// </summary>
  [JsonPropertyName("hasMember")]
  public Reference?[] HasMember { get; set; }
  [JsonPropertyName("_hasMember")]
  public Element[] _HasMember { get; set; }
  /// <summary>
  /// A unique identifier assigned to this observation.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Historically used for laboratory results (known as 'abnormal flag' ),  its use extends to other use cases where coded interpretations  are relevant.  Often reported as one or more simple compact codes this element is often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result.
  /// </summary>
  [JsonPropertyName("interpretation")]
  public CodeableConcept?[] Interpretation { get; set; }
  [JsonPropertyName("_interpretation")]
  public Element[] _Interpretation { get; set; }
  /// <summary>
  /// For Observations that don’t require review and verification, it may be the same as the [`lastUpdated` ](resource-definitions.html#Meta.lastUpdated) time of the resource itself.  For Observations that do require review and verification for certain updates, it might not be the same as the `lastUpdated` time of the resource itself due to a non-clinically significant update that doesn’t require the new version to be reviewed and verified again.
  /// </summary>
  [JsonPropertyName("issued")]
  public string? Issued { get; set; }
  [JsonPropertyName("_issued")]
  public Element _Issued { get; set; }
  /// <summary>
  /// Only used if not implicit in code for Observation.code.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// May include general statements about the observation, or statements about significant, unexpected or unreliable results values, or information about its source when relevant to its interpretation.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// To link an Observation to an Encounter use `encounter`.  See the  [Notes](observation.html#obsgrouping) below for guidance on referencing another Observation.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Who was responsible for asserting the observed value as "true".
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// Most observations only have one generic reference range. Systems MAY choose to restrict to only supplying the relevant reference range based on knowledge about the patient (e.g., specific to the patient's age, gender, weight and other factors), but this might not be possible or appropriate. Whenever more than one reference range is supplied, the differences between them SHOULD be provided in the reference range and/or age properties.
  /// </summary>
  [JsonPropertyName("referenceRange")]
  public ObservationReferenceRange?[] ReferenceRange { get; set; }
  [JsonPropertyName("_referenceRange")]
  public Element[] _ReferenceRange { get; set; }
  /// <summary>
  /// Should only be used if not implicit in code found in `Observation.code`.  Observations are not made on specimens themselves; they are made on a subject, but in many cases by the means of a specimen. Note that although specimens are often involved, they are not always tracked and reported explicitly. Also note that observation resources may be used in contexts that track the specimen explicitly (e.g. Diagnostic Report).
  /// </summary>
  [JsonPropertyName("specimen")]
  public Reference? Specimen { get; set; }
  [JsonPropertyName("_specimen")]
  public Element _Specimen { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// One would expect this element to be a cardinality of 1..1. The only circumstance in which the subject can be missing is when the observation is made by a device that does not know the patient. In this case, the observation SHALL be matched to a patient through some context/channel matching technique, and at this point, the observation should be updated.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int? ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range? ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueRatio")]
  public Ratio? ValueRatio { get; set; }
  [JsonPropertyName("_valueRatio")]
  public Element _ValueRatio { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueSampledData")]
  public SampledData? ValueSampledData { get; set; }
  [JsonPropertyName("_valueSampledData")]
  public Element _ValueSampledData { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string? ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string? ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valuePeriod")]
  public Period? ValuePeriod { get; set; }
  [JsonPropertyName("_valuePeriod")]
  public Element _ValuePeriod { get; set; }
  /// <summary>
  /// - An observation may have:
  ///   1.  a single value here
  ///   1.  both a value and a set of related or component values
  ///   1.  only a set of related or component values.
  /// -  If a value is present, the datatype for this element should be determined by the `code`.
  /// -  *CodeableConcept* with just a text would be used instead of a string if the field was usually coded, or if the type associated with the `code` defines a coded value.
  /// -  *Attachment* is used if the observation result value is a binary file such as an image.  If the observation result value is derived from the binary file (for example 'X' detected and here is the the proof in this image), the binary file may be directly represented using *DocumentReference* and referenced by `derivedFrom`.
  /// - For additional guidance, see the [Notes section](observation.html#notes) below.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
}
/// <summary>
/// Code Values for the Observation.status field
/// </summary>
public sealed class ObservationStatusCodes {
  public const string REGISTERED = "registered";
  public const string PRELIMINARY = "preliminary";
  public const string FINAL = "final";
  public const string AMENDED = "amended";
}
/// <summary>
/// Characteristics for quantitative results of this observation.
/// </summary>
public class ObservationDefinitionQuantitativeDetails : BackboneElement {
  /// <summary>
  /// Factor for converting value expressed with SI unit to value expressed with customary unit.
  /// </summary>
  [JsonPropertyName("conversionFactor")]
  public decimal? ConversionFactor { get; set; }
  [JsonPropertyName("_conversionFactor")]
  public Element _ConversionFactor { get; set; }
  /// <summary>
  /// Customary unit used to report quantitative results of observations conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("customaryUnit")]
  public CodeableConcept? CustomaryUnit { get; set; }
  [JsonPropertyName("_customaryUnit")]
  public Element _CustomaryUnit { get; set; }
  /// <summary>
  /// Number of digits after decimal separator when the results of such observations are of type Quantity.
  /// </summary>
  [JsonPropertyName("decimalPrecision")]
  public int? DecimalPrecision { get; set; }
  [JsonPropertyName("_decimalPrecision")]
  public Element _DecimalPrecision { get; set; }
  /// <summary>
  /// SI unit used to report quantitative results of observations conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("unit")]
  public CodeableConcept? Unit { get; set; }
  [JsonPropertyName("_unit")]
  public Element _Unit { get; set; }
}
/// <summary>
/// Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
/// </summary>
public class ObservationDefinitionQualifiedInterval : BackboneElement {
  /// <summary>
  /// Some analytes vary greatly over age.
  /// </summary>
  [JsonPropertyName("age")]
  public Range? Age { get; set; }
  [JsonPropertyName("_age")]
  public Element _Age { get; set; }
  /// <summary>
  /// If this element is not present then the global population is assumed.
  /// </summary>
  [JsonPropertyName("appliesTo")]
  public CodeableConcept?[] AppliesTo { get; set; }
  [JsonPropertyName("_appliesTo")]
  public Element[] _AppliesTo { get; set; }
  /// <summary>
  /// The category of interval of values for continuous or ordinal observations conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("category")]
  public string? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Text based condition for which the reference range is valid.
  /// </summary>
  [JsonPropertyName("condition")]
  public string? Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element _Condition { get; set; }
  /// <summary>
  /// Codes to indicate the health context the range applies to. For example, the normal or therapeutic range.
  /// </summary>
  [JsonPropertyName("context")]
  public CodeableConcept? Context { get; set; }
  [JsonPropertyName("_context")]
  public Element _Context { get; set; }
  /// <summary>
  /// Sex of the population the range applies to.
  /// </summary>
  [JsonPropertyName("gender")]
  public string? Gender { get; set; }
  [JsonPropertyName("_gender")]
  public Element _Gender { get; set; }
  /// <summary>
  /// The gestational age to which this reference range is applicable, in the context of pregnancy.
  /// </summary>
  [JsonPropertyName("gestationalAge")]
  public Range? GestationalAge { get; set; }
  [JsonPropertyName("_gestationalAge")]
  public Element _GestationalAge { get; set; }
  /// <summary>
  /// The low and high values determining the interval. There may be only one of the two.
  /// </summary>
  [JsonPropertyName("range")]
  public Range? Range { get; set; }
  [JsonPropertyName("_range")]
  public Element _Range { get; set; }
}
/// <summary>
/// Code Values for the ObservationDefinition.qualifiedInterval.category field
/// </summary>
public sealed class ObservationDefinitionQualifiedIntervalCategoryCodes {
  public const string REFERENCE = "reference";
  public const string CRITICAL = "critical";
  public const string ABSOLUTE = "absolute";
}
/// <summary>
/// Code Values for the ObservationDefinition.qualifiedInterval.gender field
/// </summary>
public sealed class ObservationDefinitionQualifiedIntervalGenderCodes {
  public const string MALE = "male";
  public const string FEMALE = "female";
  public const string OTHER = "other";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Some observations have multiple component observations, expressed as separate code value pairs.
/// </summary>
public class ObservationDefinitionComponent : BackboneElement {
  /// <summary>
  /// Describes what will be observed.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The data types allowed for the value element of the instance of this component observations.
  /// </summary>
  [JsonPropertyName("permittedDataType")]
  public string?[] PermittedDataType { get; set; }
  [JsonPropertyName("_permittedDataType")]
  public Element[] _PermittedDataType { get; set; }
  /// <summary>
  /// Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("qualifiedInterval")]
  public ObservationDefinitionQualifiedInterval?[] QualifiedInterval { get; set; }
  [JsonPropertyName("_qualifiedInterval")]
  public Element[] _QualifiedInterval { get; set; }
  /// <summary>
  /// Characteristics for quantitative results of this observation.
  /// </summary>
  [JsonPropertyName("quantitativeDetails")]
  public ObservationDefinitionQuantitativeDetails? QuantitativeDetails { get; set; }
  [JsonPropertyName("_quantitativeDetails")]
  public Element _QuantitativeDetails { get; set; }
}
/// <summary>
/// Code Values for the ObservationDefinition.component.permittedDataType field
/// </summary>
public sealed class ObservationDefinitionComponentPermittedDataTypeCodes {
  public const string QUANTITY = "Quantity";
  public const string CODEABLECONCEPT = "CodeableConcept";
  public const string VAL_STRING = "string";
  public const string BOOLEAN = "boolean";
  public const string INTEGER = "integer";
  public const string RANGE = "Range";
  public const string RATIO = "Ratio";
  public const string SAMPLEDDATA = "SampledData";
  public const string TIME = "time";
  public const string DATETIME = "dateTime";
  public const string PERIOD = "Period";
}
/// <summary>
/// In a catalog of health-related services that use or produce observations and measurements, this resource describes the expected characteristics of these observation / measurements.
/// </summary>
public class ObservationDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ObservationDefinition";
  /// <summary>
  /// The set of abnormal coded results for the observation conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("abnormalCodedValueSet")]
  public Reference? AbnormalCodedValueSet { get; set; }
  [JsonPropertyName("_abnormalCodedValueSet")]
  public Element _AbnormalCodedValueSet { get; set; }
  /// <summary>
  /// The date may be more recent than the approval date because of minor changes / editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// Only used if the defined observation is to be made directly on a body part and if this body part is not implied by code found in ObservationDefinition.code. Not used for in vitro diagnostic observations. 
  /// Example: 14975008 |Forearm structure|.
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// This element allows various categorization schemes based on the owner’s definition of the category and effectively multiple categories can be used for one instance of ObservationDefinition. The level of granularity is defined by the category concepts in the value set.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// Describes what will be observed. Sometimes this is called the observation "name".
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Some observations have multiple component observations, expressed as separate code value pairs.
  /// </summary>
  [JsonPropertyName("component")]
  public ObservationDefinitionComponent?[] Component { get; set; }
  [JsonPropertyName("_component")]
  public Element[] _Component { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Copyright statement relating to the ObservationDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the ObservationDefinition.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// The set of critical coded results for the observation conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("criticalCodedValueSet")]
  public Reference? CriticalCodedValueSet { get; set; }
  [JsonPropertyName("_criticalCodedValueSet")]
  public Element _CriticalCodedValueSet { get; set; }
  /// <summary>
  /// For draft definitions, indicates the date of initial creation. For active definitions, represents the date of activation. For withdrawn definitions, indicates the date of withdrawal.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The canonical URL pointing to another FHIR-defined ObservationDefinition that is adhered to in whole or in part by this definition.
  /// </summary>
  [JsonPropertyName("derivedFromCanonical")]
  public string?[] DerivedFromCanonical { get; set; }
  [JsonPropertyName("_derivedFromCanonical")]
  public Element[] _DerivedFromCanonical { get; set; }
  /// <summary>
  /// The URL pointing to an externally-defined observation definition, guideline or other definition that is adhered to in whole or in part by this definition.
  /// </summary>
  [JsonPropertyName("derivedFromUri")]
  public string?[] DerivedFromUri { get; set; }
  [JsonPropertyName("_derivedFromUri")]
  public Element[] _DerivedFromUri { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the ObservationDefinition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The measurement device used to produce observations of this type.
  /// </summary>
  [JsonPropertyName("device")]
  public Reference? Device { get; set; }
  [JsonPropertyName("_device")]
  public Element _Device { get; set; }
  /// <summary>
  /// The effective period for an ObservationDefinition determines when the content is applicable for usage and is independent of publication and review dates. For example, an observation intended to be used for the year 2020 would be published in 2019.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// Allows filtering of ObservationDefinition that are appropriate for use vs. not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// This ObservationDefinition defines a group  observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
  /// </summary>
  [JsonPropertyName("hasMember")]
  public Reference?[] HasMember { get; set; }
  [JsonPropertyName("_hasMember")]
  public Element[] _HasMember { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier. It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// A jurisdiction in which the ObservationDefinition is intended to be used.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this is usually after the approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// Only used if not implicit in observation code
  /// Example: 702659008 |Automated count technique|.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// An example of observation allowing multiple results is "bacteria identified by culture". Conversely, the measurement of a potassium level allows a single result.
  /// </summary>
  [JsonPropertyName("multipleResultsAllowed")]
  public bool? MultipleResultsAllowed { get; set; }
  [JsonPropertyName("_multipleResultsAllowed")]
  public Element _MultipleResultsAllowed { get; set; }
  /// <summary>
  /// The set of normal coded results for the observations conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("normalCodedValueSet")]
  public Reference? NormalCodedValueSet { get; set; }
  [JsonPropertyName("_normalCodedValueSet")]
  public Element _NormalCodedValueSet { get; set; }
  /// <summary>
  /// The type of individual/organization/device that is expected to act upon instances of this definition.
  /// </summary>
  [JsonPropertyName("performerType")]
  public CodeableConcept? PerformerType { get; set; }
  [JsonPropertyName("_performerType")]
  public Element _PerformerType { get; set; }
  /// <summary>
  /// The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("permittedDataType")]
  public string?[] PermittedDataType { get; set; }
  [JsonPropertyName("_permittedDataType")]
  public Element[] _PermittedDataType { get; set; }
  /// <summary>
  /// The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("preferredReportName")]
  public string? PreferredReportName { get; set; }
  [JsonPropertyName("_preferredReportName")]
  public Element _PreferredReportName { get; set; }
  /// <summary>
  /// Helps establish the "authority/credibility" of the ObservationDefinition. May also allow for contact.
  /// </summary>
  [JsonPropertyName("publisher")]
  public Reference? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the ObservationDefinition. Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("qualifiedInterval")]
  public ObservationDefinitionQualifiedInterval?[] QualifiedInterval { get; set; }
  [JsonPropertyName("_qualifiedInterval")]
  public Element[] _QualifiedInterval { get; set; }
  /// <summary>
  /// Characteristics for quantitative results of this observation.
  /// </summary>
  [JsonPropertyName("quantitativeDetails")]
  public ObservationDefinitionQuantitativeDetails? QuantitativeDetails { get; set; }
  [JsonPropertyName("_quantitativeDetails")]
  public Element _QuantitativeDetails { get; set; }
  /// <summary>
  /// Only used for in vitro observations.
  /// </summary>
  [JsonPropertyName("specimen")]
  public Reference? Specimen { get; set; }
  [JsonPropertyName("_specimen")]
  public Element _Specimen { get; set; }
  /// <summary>
  /// A nominal state-transition diagram can be found in the [[definition.html#statemachine | Definition pattern]] documentation
  /// Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Examples: person, animal, device, air, surface ….
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// Examples: person, animal, device, air, surface ….
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// A short, descriptive, user-friendly title for the ObservationDefinition.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred. This is the URI that will be used when making canonical references to this resource.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// The set of valid coded results for the observations  conforming to this ObservationDefinition.
  /// </summary>
  [JsonPropertyName("validCodedValueSet")]
  public Reference? ValidCodedValueSet { get; set; }
  [JsonPropertyName("_validCodedValueSet")]
  public Element _ValidCodedValueSet { get; set; }
  /// <summary>
  /// There may be multiple different instances of a ObservationDefinition that have the same identifier but different versions.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the ObservationDefinition.permittedDataType field
/// </summary>
public sealed class ObservationDefinitionPermittedDataTypeCodes {
  public const string QUANTITY = "Quantity";
  public const string CODEABLECONCEPT = "CodeableConcept";
  public const string VAL_STRING = "string";
  public const string BOOLEAN = "boolean";
  public const string INTEGER = "integer";
  public const string RANGE = "Range";
  public const string RATIO = "Ratio";
  public const string SAMPLEDDATA = "SampledData";
  public const string TIME = "time";
  public const string DATETIME = "dateTime";
  public const string PERIOD = "Period";
}
/// <summary>
/// Code Values for the ObservationDefinition.status field
/// </summary>
public sealed class ObservationDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
/// </summary>
public class OperationDefinitionParameterBinding : BackboneElement {
  /// <summary>
  /// For further discussion, see [Using Terminologies](terminologies.html).
  /// </summary>
  [JsonPropertyName("strength")]
  public string Strength { get; set; }
  [JsonPropertyName("_strength")]
  public Element _Strength { get; set; }
  /// <summary>
  /// For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
  /// </summary>
  [JsonPropertyName("valueSet")]
  public string ValueSet { get; set; }
  [JsonPropertyName("_valueSet")]
  public Element _ValueSet { get; set; }
}
/// <summary>
/// Code Values for the OperationDefinition.parameter.binding.strength field
/// </summary>
public sealed class OperationDefinitionParameterBindingStrengthCodes {
  public const string REQUIRED = "required";
  public const string EXTENSIBLE = "extensible";
  public const string PREFERRED = "preferred";
  public const string EXAMPLE = "example";
}
/// <summary>
/// Resolution applies if the referenced parameter exists.
/// </summary>
public class OperationDefinitionParameterReferencedFrom : BackboneElement {
  /// <summary>
  /// The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.
  /// </summary>
  [JsonPropertyName("source")]
  public string Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// The id of the element in the referencing resource that is expected to resolve to this resource.
  /// </summary>
  [JsonPropertyName("sourceId")]
  public string? SourceId { get; set; }
  [JsonPropertyName("_sourceId")]
  public Element _SourceId { get; set; }
}
/// <summary>
/// Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
/// </summary>
public class OperationDefinitionParameter : BackboneElement {
  /// <summary>
  /// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
  /// </summary>
  [JsonPropertyName("binding")]
  public OperationDefinitionParameterBinding? Binding { get; set; }
  [JsonPropertyName("_binding")]
  public Element _Binding { get; set; }
  /// <summary>
  /// Describes the meaning or use of this parameter.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// The maximum number of times this element is permitted to appear in the request or response.
  /// </summary>
  [JsonPropertyName("max")]
  public string Max { get; set; }
  [JsonPropertyName("_max")]
  public Element _Max { get; set; }
  /// <summary>
  /// The minimum number of times this parameter SHALL appear in the request or response.
  /// </summary>
  [JsonPropertyName("min")]
  public int Min { get; set; }
  [JsonPropertyName("_min")]
  public Element _Min { get; set; }
  /// <summary>
  /// This name must be a token (start with a letter in a..z, and only contain letters, numerals, and underscore. Note that for search parameters (type = string, with a search type), the name may be altered by the search modifiers.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
  /// </summary>
  [JsonPropertyName("part")]
  public OperationDefinitionParameter?[] Part { get; set; }
  [JsonPropertyName("_part")]
  public Element[] _Part { get; set; }
  /// <summary>
  /// Resolution applies if the referenced parameter exists.
  /// </summary>
  [JsonPropertyName("referencedFrom")]
  public OperationDefinitionParameterReferencedFrom?[] ReferencedFrom { get; set; }
  [JsonPropertyName("_referencedFrom")]
  public Element[] _ReferencedFrom { get; set; }
  /// <summary>
  /// How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
  /// </summary>
  [JsonPropertyName("searchType")]
  public string? SearchType { get; set; }
  [JsonPropertyName("_searchType")]
  public Element _SearchType { get; set; }
  /// <summary>
  /// Often, these profiles are the base definitions from the spec (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
  /// </summary>
  [JsonPropertyName("targetProfile")]
  public string?[] TargetProfile { get; set; }
  [JsonPropertyName("_targetProfile")]
  public Element[] _TargetProfile { get; set; }
  /// <summary>
  /// if there is no stated parameter, then the parameter is a multi-part parameter; type and must have at least one part defined.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.
  /// </summary>
  [JsonPropertyName("use")]
  public string Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
}
/// <summary>
/// Code Values for the OperationDefinition.parameter.name field
/// </summary>
public sealed class OperationDefinitionParameterNameCodes {
  public const string NAME = "Name";
}
/// <summary>
/// Code Values for the OperationDefinition.parameter.searchType field
/// </summary>
public sealed class OperationDefinitionParameterSearchTypeCodes {
  public const string NUMBER = "number";
  public const string DATE = "date";
  public const string VAL_STRING = "string";
  public const string TOKEN = "token";
  public const string REFERENCE = "reference";
  public const string COMPOSITE = "composite";
  public const string QUANTITY = "quantity";
  public const string URI = "uri";
  public const string SPECIAL = "special";
}
/// <summary>
/// Code Values for the OperationDefinition.parameter.type field
/// </summary>
public sealed class OperationDefinitionParameterTypeCodes {
  public const string WHAT = "What";
}
/// <summary>
/// Code Values for the OperationDefinition.parameter.use field
/// </summary>
public sealed class OperationDefinitionParameterUseCodes {
  public const string VAL_IN = "in";
  public const string VAL_OUT = "out";
}
/// <summary>
/// The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
/// </summary>
public class OperationDefinitionOverload : BackboneElement {
  /// <summary>
  /// Comments to go on overload.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// Name of parameter to include in overload.
  /// </summary>
  [JsonPropertyName("parameterName")]
  public string?[] ParameterName { get; set; }
  [JsonPropertyName("_parameterName")]
  public Element[] _ParameterName { get; set; }
}
public class OperationDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "OperationDefinition";
  /// <summary>
  /// What http methods can be used for the operation depends on the .affectsState value and whether the input parameters are primitive or complex:
  /// 
  /// 1. Servers SHALL support POST method for all operations.
  /// 
  /// 2. Servers SHALL support GET method if all the parameters for the operation are primitive or there are no parameters and the operation has affectsState = false.
  /// </summary>
  [JsonPropertyName("affectsState")]
  public bool? AffectsState { get; set; }
  [JsonPropertyName("_affectsState")]
  public Element _AffectsState { get; set; }
  /// <summary>
  /// A constrained profile can make optional parameters required or not used and clarify documentation.
  /// </summary>
  [JsonPropertyName("base")]
  public string? Base { get; set; }
  [JsonPropertyName("_base")]
  public Element _Base { get; set; }
  /// <summary>
  /// The name used to invoke the operation.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Additional information about how to use this operation or named query.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the operation definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the operation definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the operation definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the operation definition is presumed to be the predominant language in the place the operation definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of operation definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// If present the profile shall not conflict with what is specified in the parameters in the operation definition (max/min etc.), though it may provide additional constraints. The constraints expressed in the profile apply whether the operation is invoked by a POST wih parameters or not.
  /// </summary>
  [JsonPropertyName("inputProfile")]
  public string? InputProfile { get; set; }
  [JsonPropertyName("_inputProfile")]
  public Element _InputProfile { get; set; }
  /// <summary>
  /// Indicates whether this operation can be invoked on a particular instance of one of the given types.
  /// </summary>
  [JsonPropertyName("instance")]
  public bool Instance { get; set; }
  [JsonPropertyName("_instance")]
  public Element _Instance { get; set; }
  /// <summary>
  /// It may be possible for the operation definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// Named queries are invoked differently, and have different capabilities.
  /// </summary>
  [JsonPropertyName("kind")]
  public string Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// If present the profile shall not conflict with what is specified in the parameters in the operation definition (max/min etc.), though it may provide additional constraints. The constraints expressed in the profile apply whether the operation is invoked by a POST wih parameters or not.
  /// </summary>
  [JsonPropertyName("outputProfile")]
  public string? OutputProfile { get; set; }
  [JsonPropertyName("_outputProfile")]
  public Element _OutputProfile { get; set; }
  /// <summary>
  /// The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
  /// </summary>
  [JsonPropertyName("overload")]
  public OperationDefinitionOverload?[] Overload { get; set; }
  [JsonPropertyName("_overload")]
  public Element[] _Overload { get; set; }
  /// <summary>
  /// Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
  /// </summary>
  [JsonPropertyName("parameter")]
  public OperationDefinitionParameter?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the operation definition is the organization or individual primarily responsible for the maintenance and upkeep of the operation definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the operation definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the operation definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this operation definition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// If the type is an abstract resource ("Resource" or "DomainResource") then the operation can be invoked on any concrete specialization.
  /// </summary>
  [JsonPropertyName("resource")]
  public string?[] Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element[] _Resource { get; set; }
  /// <summary>
  /// Allows filtering of operation definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
  /// </summary>
  [JsonPropertyName("system")]
  public bool System { get; set; }
  [JsonPropertyName("_system")]
  public Element _System { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
  /// </summary>
  [JsonPropertyName("type")]
  public bool Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different operation definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the operation definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the OperationDefinition.code field
/// </summary>
public sealed class OperationDefinitionCodeCodes {
  public const string NAME = "Name";
}
/// <summary>
/// Code Values for the OperationDefinition.kind field
/// </summary>
public sealed class OperationDefinitionKindCodes {
  public const string OPERATION = "operation";
  public const string QUERY = "query";
}
/// <summary>
/// Code Values for the OperationDefinition.resource field
/// </summary>
public sealed class OperationDefinitionResourceCodes {
  public const string TYPES = "Types";
}
/// <summary>
/// Code Values for the OperationDefinition.status field
/// </summary>
public sealed class OperationDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// An error, warning, or information message that results from a system action.
/// </summary>
public class OperationOutcomeIssue : BackboneElement {
  /// <summary>
  /// Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A human readable description of the error issue SHOULD be placed in details.text.
  /// </summary>
  [JsonPropertyName("details")]
  public CodeableConcept? Details { get; set; }
  [JsonPropertyName("_details")]
  public Element _Details { get; set; }
  /// <summary>
  /// This may be a description of how a value is erroneous, a stack dump to help trace the issue or other troubleshooting information.
  /// </summary>
  [JsonPropertyName("diagnostics")]
  public string? Diagnostics { get; set; }
  [JsonPropertyName("_diagnostics")]
  public Element _Diagnostics { get; set; }
  /// <summary>
  /// The root of the FHIRPath is the resource or bundle that generated OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
  /// </summary>
  [JsonPropertyName("expression")]
  public string?[] Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element[] _Expression { get; set; }
  /// <summary>
  /// The root of the XPath is the resource or bundle that generated OperationOutcome.  Each XPath SHALL resolve to a single node.  This element is deprecated, and is being replaced by expression.
  /// </summary>
  [JsonPropertyName("location")]
  public string?[] Location { get; set; }
  [JsonPropertyName("_location")]
  public Element[] _Location { get; set; }
  /// <summary>
  /// This is labeled as "Is Modifier" because applications should not confuse hints and warnings with errors.
  /// </summary>
  [JsonPropertyName("severity")]
  public string Severity { get; set; }
  [JsonPropertyName("_severity")]
  public Element _Severity { get; set; }
}
/// <summary>
/// Code Values for the OperationOutcome.issue.code field
/// </summary>
public sealed class OperationOutcomeIssueCodeCodes {
  public const string ERROR = "Error";
}
/// <summary>
/// Code Values for the OperationOutcome.issue.severity field
/// </summary>
public sealed class OperationOutcomeIssueSeverityCodes {
  public const string FATAL = "fatal";
  public const string ERROR = "error";
  public const string WARNING = "warning";
  public const string INFORMATION = "information";
}
public class OperationOutcome : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "OperationOutcome";
  /// <summary>
  /// An error, warning, or information message that results from a system action.
  /// </summary>
  [JsonPropertyName("issue")]
  public OperationOutcomeIssue[] Issue { get; set; }
  [JsonPropertyName("_issue")]
  public Element[] _Issue { get; set; }
}
/// <summary>
/// Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
/// </summary>
public class OrganizationContact : BackboneElement {
  /// <summary>
  /// Visiting or postal addresses for the contact.
  /// </summary>
  [JsonPropertyName("address")]
  public Address? Address { get; set; }
  [JsonPropertyName("_address")]
  public Element _Address { get; set; }
  /// <summary>
  /// A name associated with the contact.
  /// </summary>
  [JsonPropertyName("name")]
  public HumanName? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Indicates a purpose for which the contact can be reached.
  /// </summary>
  [JsonPropertyName("purpose")]
  public CodeableConcept? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
public class Organization : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Organization";
  /// <summary>
  /// This active flag is not intended to be used to mark an organization as temporarily closed or under construction. Instead the Location(s) within the Organization should have the suspended status. If further details of the reason for the suspension are required, then an extension on this element should be used.
  /// 
  /// This element is labeled as a modifier because it may be used to mark that the resource was created in error.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// Organization may have multiple addresses with different uses or applicable periods. The use code 'home' is not to be used.
  /// </summary>
  [JsonPropertyName("address")]
  public Address?[] Address { get; set; }
  [JsonPropertyName("_address")]
  public Element[] _Address { get; set; }
  /// <summary>
  /// There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the organization.
  /// </summary>
  [JsonPropertyName("alias")]
  public string?[] Alias { get; set; }
  [JsonPropertyName("_alias")]
  public Element[] _Alias { get; set; }
  /// <summary>
  /// Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
  /// </summary>
  [JsonPropertyName("contact")]
  public OrganizationContact?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Technical endpoints providing access to services operated for the organization.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public Reference?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// Identifier for the organization that is used to identify the organization across multiple disparate systems.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// If the name of an organization changes, consider putting the old name in the alias column so that it can still be located through searches.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The organization of which this organization forms a part.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference? PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element _PartOf { get; set; }
  /// <summary>
  /// The use code 'home' is not to be used. Note that these contacts are not the contact details of people who are employed by or represent the organization, but official contacts for the organization itself.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
  /// <summary>
  /// Organizations can be corporations, wards, sections, clinical teams, government departments, etc. Note that code is generally a classifier of the type of organization; in many applications, codes are used to identity a particular organization (say, ward) as opposed to another of the same type - these are identifiers, not codes
  /// 
  /// When considering if multiple types are appropriate, you should evaluate if child organizations would be a more appropriate use of the concept, as different types likely are in different sub-areas of the organization. This is most likely to be used where type values have orthogonal values, such as a religious, academic and medical center.
  /// 
  /// We expect that some jurisdictions will profile this optionality to be a single cardinality.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
}
/// <summary>
/// Need to define relationships between organizations that are not sub-divisions of the same organization (part-of relationships).
/// </summary>
public class OrganizationAffiliation : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "OrganizationAffiliation";
  /// <summary>
  /// If this value is false, you may refer to the period to see when the role was in active use. If there is no period specified, no inference can be made about when it was active.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// Definition of the role the participatingOrganization plays in the association.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// Technical endpoints providing access to services operated for this role.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public Reference?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// Healthcare services provided through the role.
  /// </summary>
  [JsonPropertyName("healthcareService")]
  public Reference?[] HealthcareService { get; set; }
  [JsonPropertyName("_healthcareService")]
  public Element[] _HealthcareService { get; set; }
  /// <summary>
  /// Business identifiers that are specific to this role.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The location(s) at which the role occurs.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference?[] Location { get; set; }
  [JsonPropertyName("_location")]
  public Element[] _Location { get; set; }
  /// <summary>
  /// Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).
  /// </summary>
  [JsonPropertyName("network")]
  public Reference?[] Network { get; set; }
  [JsonPropertyName("_network")]
  public Element[] _Network { get; set; }
  /// <summary>
  /// Organization where the role is available (primary organization/has members).
  /// </summary>
  [JsonPropertyName("organization")]
  public Reference? Organization { get; set; }
  [JsonPropertyName("_organization")]
  public Element _Organization { get; set; }
  /// <summary>
  /// The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of).
  /// </summary>
  [JsonPropertyName("participatingOrganization")]
  public Reference? ParticipatingOrganization { get; set; }
  [JsonPropertyName("_participatingOrganization")]
  public Element _ParticipatingOrganization { get; set; }
  /// <summary>
  /// The period during which the participatingOrganization is affiliated with the primary organization.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Specific specialty of the participatingOrganization in the context of the role.
  /// </summary>
  [JsonPropertyName("specialty")]
  public CodeableConcept?[] Specialty { get; set; }
  [JsonPropertyName("_specialty")]
  public Element[] _Specialty { get; set; }
  /// <summary>
  /// Contact details at the participatingOrganization relevant to this Affiliation.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Batch numbering.
/// </summary>
public class PackagedProductDefinitionBatchIdentifier : BackboneElement {
  /// <summary>
  /// A number appearing on the immediate packaging (and not the outer packaging).
  /// </summary>
  [JsonPropertyName("immediatePackaging")]
  public Identifier? ImmediatePackaging { get; set; }
  [JsonPropertyName("_immediatePackaging")]
  public Element _ImmediatePackaging { get; set; }
  /// <summary>
  /// A number appearing on the outer packaging of a specific batch.
  /// </summary>
  [JsonPropertyName("outerPackaging")]
  public Identifier OuterPackaging { get; set; }
  [JsonPropertyName("_outerPackaging")]
  public Element _OuterPackaging { get; set; }
}
/// <summary>
/// General characteristics of this item.
/// </summary>
public class PackagedProductDefinitionPackageProperty : BackboneElement {
  /// <summary>
  /// A code expressing the type of characteristic.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string? ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// A value for the characteristic.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
}
/// <summary>
/// The item(s) within the packaging.
/// </summary>
public class PackagedProductDefinitionPackageContainedItem : BackboneElement {
  /// <summary>
  /// The number of this type of item within this packaging.
  /// </summary>
  [JsonPropertyName("amountQuantity")]
  public Quantity? AmountQuantity { get; set; }
  [JsonPropertyName("_amountQuantity")]
  public Element _AmountQuantity { get; set; }
  /// <summary>
  /// The number of this type of item within this packaging.
  /// </summary>
  [JsonPropertyName("amountInteger")]
  public int? AmountInteger { get; set; }
  [JsonPropertyName("_amountInteger")]
  public Element _AmountInteger { get; set; }
  /// <summary>
  /// The manufactured item or device as contained in the packaged medicinal product.
  /// </summary>
  [JsonPropertyName("item")]
  public Reference?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
}
/// <summary>
/// A packaging item, as a contained for medicine, possibly with other packaging items within.
/// </summary>
public class PackagedProductDefinitionPackage : BackboneElement {
  /// <summary>
  /// A possible alternate material for the packaging.
  /// </summary>
  [JsonPropertyName("alternateMaterial")]
  public CodeableConcept?[] AlternateMaterial { get; set; }
  [JsonPropertyName("_alternateMaterial")]
  public Element[] _AlternateMaterial { get; set; }
  /// <summary>
  /// The item(s) within the packaging.
  /// </summary>
  [JsonPropertyName("containedItem")]
  public PackagedProductDefinitionPackageContainedItem?[] ContainedItem { get; set; }
  [JsonPropertyName("_containedItem")]
  public Element[] _ContainedItem { get; set; }
  /// <summary>
  /// Including possibly Data Carrier Identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Manufacturer of this Package Item.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference?[] Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element[] _Manufacturer { get; set; }
  /// <summary>
  /// Material type of the package item.
  /// </summary>
  [JsonPropertyName("material")]
  public CodeableConcept?[] Material { get; set; }
  [JsonPropertyName("_material")]
  public Element[] _Material { get; set; }
  /// <summary>
  /// Allows containers within containers.
  /// </summary>
  [JsonPropertyName("package")]
  public PackagedProductDefinitionPackage?[] Package { get; set; }
  [JsonPropertyName("_package")]
  public Element[] _Package { get; set; }
  /// <summary>
  /// General characteristics of this item.
  /// </summary>
  [JsonPropertyName("property")]
  public PackagedProductDefinitionPackageProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// The quantity of this package in the medicinal product, at the current level of packaging. If specified, the outermost level is always 1.
  /// </summary>
  [JsonPropertyName("quantity")]
  public int? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Shelf Life and storage information.
  /// </summary>
  [JsonPropertyName("shelfLifeStorage")]
  public ProductShelfLife?[] ShelfLifeStorage { get; set; }
  [JsonPropertyName("_shelfLifeStorage")]
  public Element[] _ShelfLifeStorage { get; set; }
  /// <summary>
  /// The physical type of the container of the medicine.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class PackagedProductDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "PackagedProductDefinition";
  /// <summary>
  /// Batch numbering.
  /// </summary>
  [JsonPropertyName("batchIdentifier")]
  public PackagedProductDefinitionBatchIdentifier?[] BatchIdentifier { get; set; }
  [JsonPropertyName("_batchIdentifier")]
  public Element[] _BatchIdentifier { get; set; }
  /// <summary>
  /// Allows the key product features to be recorded, such as "hospital pack", "nurse prescribable", "calendar pack".
  /// </summary>
  [JsonPropertyName("characteristic")]
  public CodeableConcept?[] Characteristic { get; set; }
  [JsonPropertyName("_characteristic")]
  public Element[] _Characteristic { get; set; }
  /// <summary>
  /// States whether a drug product is supplied with another item such as a diluent or adjuvant.
  /// </summary>
  [JsonPropertyName("copackagedIndicator")]
  public bool? CopackagedIndicator { get; set; }
  [JsonPropertyName("_copackagedIndicator")]
  public Element _CopackagedIndicator { get; set; }
  /// <summary>
  /// Textual description. Note that this is not the name of the product.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Unique identifier.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The legal status of supply of the medicinal product as classified by the regulator.
  /// </summary>
  [JsonPropertyName("legalStatusOfSupply")]
  public CodeableConcept? LegalStatusOfSupply { get; set; }
  [JsonPropertyName("_legalStatusOfSupply")]
  public Element _LegalStatusOfSupply { get; set; }
  /// <summary>
  /// Manufacturer of this Package Item.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference?[] Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element[] _Manufacturer { get; set; }
  /// <summary>
  /// Manufacturer of this Package Item.
  /// </summary>
  [JsonPropertyName("marketingAuthorization")]
  public Reference? MarketingAuthorization { get; set; }
  [JsonPropertyName("_marketingAuthorization")]
  public Element _MarketingAuthorization { get; set; }
  /// <summary>
  /// Marketing information.
  /// </summary>
  [JsonPropertyName("marketingStatus")]
  public MarketingStatus?[] MarketingStatus { get; set; }
  [JsonPropertyName("_marketingStatus")]
  public Element[] _MarketingStatus { get; set; }
  /// <summary>
  /// A name for this product pack. Typically what it would be listed as in a drug formulary.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// A packaging item, as a contained for medicine, possibly with other packaging items within.
  /// </summary>
  [JsonPropertyName("package")]
  public PackagedProductDefinitionPackage?[] Package { get; set; }
  [JsonPropertyName("_package")]
  public Element[] _Package { get; set; }
  /// <summary>
  /// The status within the lifecycle of this product. A high level status, this is not intended to duplicate details carried elswhere such as legal status, or authorization or marketing status.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The date at which the given status became applicable.
  /// </summary>
  [JsonPropertyName("statusDate")]
  public string? StatusDate { get; set; }
  [JsonPropertyName("_statusDate")]
  public Element _StatusDate { get; set; }
  /// <summary>
  /// The product that this is a pack for.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference?[] Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element[] _Subject { get; set; }
}
/// <summary>
/// A parameter passed to or received from the operation.
/// </summary>
public class ParametersParameter : BackboneElement {
  /// <summary>
  /// The name of the parameter (reference to the operation definition).
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Only one level of nested parameters is allowed.
  /// </summary>
  [JsonPropertyName("part")]
  public ParametersParameter?[] Part { get; set; }
  [JsonPropertyName("_part")]
  public Element[] _Part { get; set; }
  /// <summary>
  /// When resolving references in resources, the operation definition may specify how references may be resolved between parameters. If a reference cannot be resolved between the parameters, the application should fall back to it's general resource resolution methods.
  /// </summary>
  [JsonPropertyName("resource")]
  public Resource? Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element _Resource { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueBase64Binary")]
  public string? ValueBase64Binary { get; set; }
  [JsonPropertyName("_valueBase64Binary")]
  public Element _ValueBase64Binary { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueCanonical")]
  public string? ValueCanonical { get; set; }
  [JsonPropertyName("_valueCanonical")]
  public Element _ValueCanonical { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueCode")]
  public string? ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element _ValueCode { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string? ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string? ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal? ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueId")]
  public string? ValueId { get; set; }
  [JsonPropertyName("_valueId")]
  public Element _ValueId { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueInstant")]
  public string? ValueInstant { get; set; }
  [JsonPropertyName("_valueInstant")]
  public Element _ValueInstant { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int? ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueInteger64")]
  public string? ValueInteger64 { get; set; }
  [JsonPropertyName("_valueInteger64")]
  public Element _ValueInteger64 { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueMarkdown")]
  public string? ValueMarkdown { get; set; }
  [JsonPropertyName("_valueMarkdown")]
  public Element _ValueMarkdown { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueOid")]
  public string? ValueOid { get; set; }
  [JsonPropertyName("_valueOid")]
  public Element _ValueOid { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valuePositiveInt")]
  public uint? ValuePositiveInt { get; set; }
  [JsonPropertyName("_valuePositiveInt")]
  public Element _ValuePositiveInt { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string? ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueUnsignedInt")]
  public uint? ValueUnsignedInt { get; set; }
  [JsonPropertyName("_valueUnsignedInt")]
  public Element _ValueUnsignedInt { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string? ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueUrl")]
  public string? ValueUrl { get; set; }
  [JsonPropertyName("_valueUrl")]
  public Element _ValueUrl { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueUuid")]
  public Guid? ValueUuid { get; set; }
  [JsonPropertyName("_valueUuid")]
  public Element _ValueUuid { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueAddress")]
  public Address? ValueAddress { get; set; }
  [JsonPropertyName("_valueAddress")]
  public Element _ValueAddress { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueAge")]
  public Age? ValueAge { get; set; }
  [JsonPropertyName("_valueAge")]
  public Element _ValueAge { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueAnnotation")]
  public Annotation? ValueAnnotation { get; set; }
  [JsonPropertyName("_valueAnnotation")]
  public Element _ValueAnnotation { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding? ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueContactPoint")]
  public ContactPoint? ValueContactPoint { get; set; }
  [JsonPropertyName("_valueContactPoint")]
  public Element _ValueContactPoint { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueCount")]
  public Count? ValueCount { get; set; }
  [JsonPropertyName("_valueCount")]
  public Element _ValueCount { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueDistance")]
  public Distance? ValueDistance { get; set; }
  [JsonPropertyName("_valueDistance")]
  public Element _ValueDistance { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueDuration")]
  public Duration? ValueDuration { get; set; }
  [JsonPropertyName("_valueDuration")]
  public Element _ValueDuration { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueHumanName")]
  public HumanName? ValueHumanName { get; set; }
  [JsonPropertyName("_valueHumanName")]
  public Element _ValueHumanName { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueIdentifier")]
  public Identifier? ValueIdentifier { get; set; }
  [JsonPropertyName("_valueIdentifier")]
  public Element _ValueIdentifier { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueMoney")]
  public Money? ValueMoney { get; set; }
  [JsonPropertyName("_valueMoney")]
  public Element _ValueMoney { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valuePeriod")]
  public Period? ValuePeriod { get; set; }
  [JsonPropertyName("_valuePeriod")]
  public Element _ValuePeriod { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range? ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueRatio")]
  public Ratio? ValueRatio { get; set; }
  [JsonPropertyName("_valueRatio")]
  public Element _ValueRatio { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference? ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueSampledData")]
  public SampledData? ValueSampledData { get; set; }
  [JsonPropertyName("_valueSampledData")]
  public Element _ValueSampledData { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueSignature")]
  public Signature? ValueSignature { get; set; }
  [JsonPropertyName("_valueSignature")]
  public Element _ValueSignature { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueTiming")]
  public Timing? ValueTiming { get; set; }
  [JsonPropertyName("_valueTiming")]
  public Element _ValueTiming { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueContactDetail")]
  public ContactDetail? ValueContactDetail { get; set; }
  [JsonPropertyName("_valueContactDetail")]
  public Element _ValueContactDetail { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueContributor")]
  public Contributor? ValueContributor { get; set; }
  [JsonPropertyName("_valueContributor")]
  public Element _ValueContributor { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueDataRequirement")]
  public DataRequirement? ValueDataRequirement { get; set; }
  [JsonPropertyName("_valueDataRequirement")]
  public Element _ValueDataRequirement { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueExpression")]
  public Expression? ValueExpression { get; set; }
  [JsonPropertyName("_valueExpression")]
  public Element _ValueExpression { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueParameterDefinition")]
  public ParameterDefinition? ValueParameterDefinition { get; set; }
  [JsonPropertyName("_valueParameterDefinition")]
  public Element _ValueParameterDefinition { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueRelatedArtifact")]
  public RelatedArtifact? ValueRelatedArtifact { get; set; }
  [JsonPropertyName("_valueRelatedArtifact")]
  public Element _ValueRelatedArtifact { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueTriggerDefinition")]
  public TriggerDefinition? ValueTriggerDefinition { get; set; }
  [JsonPropertyName("_valueTriggerDefinition")]
  public Element _ValueTriggerDefinition { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueUsageContext")]
  public UsageContext? ValueUsageContext { get; set; }
  [JsonPropertyName("_valueUsageContext")]
  public Element _ValueUsageContext { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueDosage")]
  public Dosage? ValueDosage { get; set; }
  [JsonPropertyName("_valueDosage")]
  public Element _ValueDosage { get; set; }
  /// <summary>
  /// If the parameter is a data type.
  /// </summary>
  [JsonPropertyName("valueMeta")]
  public Meta? ValueMeta { get; set; }
  [JsonPropertyName("_valueMeta")]
  public Element _ValueMeta { get; set; }
}
/// <summary>
/// Code Values for the Parameters.parameter.value[x] field
/// </summary>
public sealed class ParametersParameterValueCodes {
  public const string IF = "If";
}
public class Parameters : Resource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Parameters";
  /// <summary>
  /// A parameter passed to or received from the operation.
  /// </summary>
  [JsonPropertyName("parameter")]
  public ParametersParameter?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
}
/// <summary>
/// Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
/// </summary>
public class PatientContact : BackboneElement {
  /// <summary>
  /// Address for the contact person.
  /// </summary>
  [JsonPropertyName("address")]
  public Address? Address { get; set; }
  [JsonPropertyName("_address")]
  public Element _Address { get; set; }
  /// <summary>
  /// Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
  /// </summary>
  [JsonPropertyName("gender")]
  public string? Gender { get; set; }
  [JsonPropertyName("_gender")]
  public Element _Gender { get; set; }
  /// <summary>
  /// A name associated with the contact person.
  /// </summary>
  [JsonPropertyName("name")]
  public HumanName? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Organization on behalf of which the contact is acting or for which the contact is working.
  /// </summary>
  [JsonPropertyName("organization")]
  public Reference? Organization { get; set; }
  [JsonPropertyName("_organization")]
  public Element _Organization { get; set; }
  /// <summary>
  /// The period during which this contact person or organization is valid to be contacted relating to this patient.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// The nature of the relationship between the patient and the contact person.
  /// </summary>
  [JsonPropertyName("relationship")]
  public CodeableConcept?[] Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element[] _Relationship { get; set; }
  /// <summary>
  /// Contact may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Code Values for the Patient.contact.gender field
/// </summary>
public sealed class PatientContactGenderCodes {
  public const string MALE = "male";
  public const string FEMALE = "female";
  public const string OTHER = "other";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
/// </summary>
public class PatientCommunication : BackboneElement {
  /// <summary>
  /// The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// This language is specifically identified for communicating healthcare information.
  /// </summary>
  [JsonPropertyName("preferred")]
  public bool? Preferred { get; set; }
  [JsonPropertyName("_preferred")]
  public Element _Preferred { get; set; }
}
/// <summary>
/// There is no assumption that linked patient records have mutual links.
/// </summary>
public class PatientLink : BackboneElement {
  /// <summary>
  /// Referencing a RelatedPerson here removes the need to use a Person record to associate a Patient and RelatedPerson as the same individual.
  /// </summary>
  [JsonPropertyName("other")]
  public Reference Other { get; set; }
  [JsonPropertyName("_other")]
  public Element _Other { get; set; }
  /// <summary>
  /// The type of link between this patient resource and another patient resource.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Patient.link.type field
/// </summary>
public sealed class PatientLinkTypeCodes {
  public const string REPLACED_BY = "replaced-by";
  public const string REPLACES = "replaces";
  public const string REFER = "refer";
  public const string SEEALSO = "seealso";
}
/// <summary>
/// Tracking patient is the center of the healthcare process.
/// </summary>
public class Patient : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Patient";
  /// <summary>
  /// If a record is inactive, and linked to an active record, then future patient/record updates should occur on the other patient.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// Patient may have multiple addresses with different uses or applicable periods.
  /// </summary>
  [JsonPropertyName("address")]
  public Address?[] Address { get; set; }
  [JsonPropertyName("_address")]
  public Element[] _Address { get; set; }
  /// <summary>
  /// At least an estimated year should be provided as a guess if the real DOB is unknown  There is a standard extension "patient-birthTime" available that should be used where Time is required (such as in maternity/infant care systems).
  /// </summary>
  [JsonPropertyName("birthDate")]
  public string? BirthDate { get; set; }
  [JsonPropertyName("_birthDate")]
  public Element _BirthDate { get; set; }
  /// <summary>
  /// If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple Patient.Communication associations.   For animals, language is not a relevant field, and should be absent from the instance. If the Patient does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
  /// </summary>
  [JsonPropertyName("communication")]
  public PatientCommunication?[] Communication { get; set; }
  [JsonPropertyName("_communication")]
  public Element[] _Communication { get; set; }
  /// <summary>
  /// Contact covers all kinds of contact parties: family members, business contacts, guardians, caregivers. Not applicable to register pedigree and family ties beyond use of having contact.
  /// </summary>
  [JsonPropertyName("contact")]
  public PatientContact?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
  /// </summary>
  [JsonPropertyName("deceasedBoolean")]
  public bool? DeceasedBoolean { get; set; }
  [JsonPropertyName("_deceasedBoolean")]
  public Element _DeceasedBoolean { get; set; }
  /// <summary>
  /// If there's no value in the instance, it means there is no statement on whether or not the individual is deceased. Most systems will interpret the absence of a value as a sign of the person being alive.
  /// </summary>
  [JsonPropertyName("deceasedDateTime")]
  public string? DeceasedDateTime { get; set; }
  [JsonPropertyName("_deceasedDateTime")]
  public Element _DeceasedDateTime { get; set; }
  /// <summary>
  /// The gender might not match the biological sex as determined by genetics or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than male and female, though the vast majority of systems and contexts only support male and female.  Systems providing decision support or enforcing business rules should ideally do this on the basis of Observations dealing with the specific sex or gender aspect of interest (anatomical, chromosomal, social, etc.)  However, because these observations are infrequently recorded, defaulting to the administrative gender is common practice.  Where such defaulting occurs, rule enforcement should allow for the variation between administrative and biological, chromosomal and other gender aspects.  For example, an alert about a hysterectomy on a male should be handled as a warning or overridable error, not a "hard" error.  See the Patient Gender and Sex section for additional information about communicating patient gender and sex.
  /// </summary>
  [JsonPropertyName("gender")]
  public string? Gender { get; set; }
  [JsonPropertyName("_gender")]
  public Element _Gender { get; set; }
  /// <summary>
  /// This may be the primary care provider (in a GP context), or it may be a patient nominated care manager in a community/disability setting, or even organization that will provide people to perform the care provider roles.  It is not to be used to record Care Teams, these should be in a CareTeam resource that may be linked to the CarePlan or EpisodeOfCare resources.
  /// Multiple GPs may be recorded against the patient for various reasons, such as a student that has his home GP listed along with the GP at university during the school semesters, or a "fly-in/fly-out" worker that has the onsite GP also included with his home GP to remain aware of medical issues.
  /// 
  /// Jurisdictions may decide that they can profile this down to 1 if desired, or 1 per type.
  /// </summary>
  [JsonPropertyName("generalPractitioner")]
  public Reference?[] GeneralPractitioner { get; set; }
  [JsonPropertyName("_generalPractitioner")]
  public Element[] _GeneralPractitioner { get; set; }
  /// <summary>
  /// An identifier for this patient.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// There is no assumption that linked patient records have mutual links.
  /// </summary>
  [JsonPropertyName("link")]
  public PatientLink?[] Link { get; set; }
  [JsonPropertyName("_link")]
  public Element[] _Link { get; set; }
  /// <summary>
  /// There is only one managing organization for a specific patient record. Other organizations will have their own Patient record, and may use the Link property to join the records together (or a Person resource which can include confidence ratings for the association).
  /// </summary>
  [JsonPropertyName("managingOrganization")]
  public Reference? ManagingOrganization { get; set; }
  [JsonPropertyName("_managingOrganization")]
  public Element _ManagingOrganization { get; set; }
  /// <summary>
  /// This field contains a patient's most recent marital (civil) status.
  /// </summary>
  [JsonPropertyName("maritalStatus")]
  public CodeableConcept? MaritalStatus { get; set; }
  [JsonPropertyName("_maritalStatus")]
  public Element _MaritalStatus { get; set; }
  /// <summary>
  /// Where the valueInteger is provided, the number is the birth number in the sequence. E.g. The middle birth in triplets would be valueInteger=2 and the third born would have valueInteger=3 If a boolean value was provided for this triplets example, then all 3 patient records would have valueBoolean=true (the ordering is not indicated).
  /// </summary>
  [JsonPropertyName("multipleBirthBoolean")]
  public bool? MultipleBirthBoolean { get; set; }
  [JsonPropertyName("_multipleBirthBoolean")]
  public Element _MultipleBirthBoolean { get; set; }
  /// <summary>
  /// Where the valueInteger is provided, the number is the birth number in the sequence. E.g. The middle birth in triplets would be valueInteger=2 and the third born would have valueInteger=3 If a boolean value was provided for this triplets example, then all 3 patient records would have valueBoolean=true (the ordering is not indicated).
  /// </summary>
  [JsonPropertyName("multipleBirthInteger")]
  public int? MultipleBirthInteger { get; set; }
  [JsonPropertyName("_multipleBirthInteger")]
  public Element _MultipleBirthInteger { get; set; }
  /// <summary>
  /// A patient may have multiple names with different uses or applicable periods. For animals, the name is a "HumanName" in the sense that is assigned and used by humans and has the same patterns.
  /// </summary>
  [JsonPropertyName("name")]
  public HumanName?[] Name { get; set; }
  [JsonPropertyName("_name")]
  public Element[] _Name { get; set; }
  /// <summary>
  /// Guidelines:
  /// * Use id photos, not clinical photos.
  /// * Limit dimensions to thumbnail.
  /// * Keep byte count low to ease resource updates.
  /// </summary>
  [JsonPropertyName("photo")]
  public Attachment?[] Photo { get; set; }
  [JsonPropertyName("_photo")]
  public Element[] _Photo { get; set; }
  /// <summary>
  /// A Patient may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification. The address might not go directly to the individual, but may reach another party that is able to proxy for the patient (i.e. home phone, or pet owner's phone).
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Code Values for the Patient.gender field
/// </summary>
public sealed class PatientGenderCodes {
  public const string MALE = "male";
  public const string FEMALE = "female";
  public const string OTHER = "other";
  public const string UNKNOWN = "unknown";
}
public class PaymentNotice : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "PaymentNotice";
  /// <summary>
  /// The amount sent to the payee.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// The date when this resource was created.
  /// </summary>
  [JsonPropertyName("created")]
  public string Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// A unique identifier assigned to this payment notice.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The party who will receive or has received payment that is the subject of this notification.
  /// </summary>
  [JsonPropertyName("payee")]
  public Reference? Payee { get; set; }
  [JsonPropertyName("_payee")]
  public Element _Payee { get; set; }
  /// <summary>
  /// A reference to the payment which is the subject of this notice.
  /// </summary>
  [JsonPropertyName("payment")]
  public Reference Payment { get; set; }
  [JsonPropertyName("_payment")]
  public Element _Payment { get; set; }
  /// <summary>
  /// The date when the above payment action occurred.
  /// </summary>
  [JsonPropertyName("paymentDate")]
  public string? PaymentDate { get; set; }
  [JsonPropertyName("_paymentDate")]
  public Element _PaymentDate { get; set; }
  /// <summary>
  /// Typically paid: payment sent, cleared: payment received.
  /// </summary>
  [JsonPropertyName("paymentStatus")]
  public CodeableConcept? PaymentStatus { get; set; }
  [JsonPropertyName("_paymentStatus")]
  public Element _PaymentStatus { get; set; }
  /// <summary>
  /// The practitioner who is responsible for the services rendered to the patient.
  /// </summary>
  [JsonPropertyName("provider")]
  public Reference? Provider { get; set; }
  [JsonPropertyName("_provider")]
  public Element _Provider { get; set; }
  /// <summary>
  /// The party who is notified of the payment status.
  /// </summary>
  [JsonPropertyName("recipient")]
  public Reference Recipient { get; set; }
  [JsonPropertyName("_recipient")]
  public Element _Recipient { get; set; }
  /// <summary>
  /// Reference of resource for which payment is being made.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference? Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// Reference of response to resource for which payment is being made.
  /// </summary>
  [JsonPropertyName("response")]
  public Reference? Response { get; set; }
  [JsonPropertyName("_response")]
  public Element _Response { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the PaymentNotice.status field
/// </summary>
public sealed class PaymentNoticeStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Distribution of the payment amount for a previously acknowledged payable.
/// </summary>
public class PaymentReconciliationDetail : BackboneElement {
  /// <summary>
  /// The monetary amount allocated from the total payment to the payable.
  /// </summary>
  [JsonPropertyName("amount")]
  public Money? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// The date from the response resource containing a commitment to pay.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// Unique identifier for the current payment item for the referenced payable.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// The party which is receiving the payment.
  /// </summary>
  [JsonPropertyName("payee")]
  public Reference? Payee { get; set; }
  [JsonPropertyName("_payee")]
  public Element _Payee { get; set; }
  /// <summary>
  /// Unique identifier for the prior payment item for the referenced payable.
  /// </summary>
  [JsonPropertyName("predecessor")]
  public Identifier? Predecessor { get; set; }
  [JsonPropertyName("_predecessor")]
  public Element _Predecessor { get; set; }
  /// <summary>
  /// A resource, such as a Claim, the evaluation of which could lead to payment.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference? Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// A resource, such as a ClaimResponse, which contains a commitment to payment.
  /// </summary>
  [JsonPropertyName("response")]
  public Reference? Response { get; set; }
  [JsonPropertyName("_response")]
  public Element _Response { get; set; }
  /// <summary>
  /// A reference to the individual who is responsible for inquiries regarding the response and its payment.
  /// </summary>
  [JsonPropertyName("responsible")]
  public Reference? Responsible { get; set; }
  [JsonPropertyName("_responsible")]
  public Element _Responsible { get; set; }
  /// <summary>
  /// The party which submitted the claim or financial transaction.
  /// </summary>
  [JsonPropertyName("submitter")]
  public Reference? Submitter { get; set; }
  [JsonPropertyName("_submitter")]
  public Element _Submitter { get; set; }
  /// <summary>
  /// For example: payment, adjustment, funds advance, etc.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// A note that describes or explains the processing in a human readable form.
/// </summary>
public class PaymentReconciliationProcessNote : BackboneElement {
  /// <summary>
  /// The explanation or description associated with the processing.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// The business purpose of the note text.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the PaymentReconciliation.processNote.type field
/// </summary>
public sealed class PaymentReconciliationProcessNoteTypeCodes {
  public const string DISPLAY = "display";
  public const string PRINT = "print";
  public const string PRINTOPER = "printoper";
}
public class PaymentReconciliation : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "PaymentReconciliation";
  /// <summary>
  /// The date when the resource was created.
  /// </summary>
  [JsonPropertyName("created")]
  public string Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// Distribution of the payment amount for a previously acknowledged payable.
  /// </summary>
  [JsonPropertyName("detail")]
  public PaymentReconciliationDetail?[] Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element[] _Detail { get; set; }
  /// <summary>
  /// A human readable description of the status of the request for the reconciliation.
  /// </summary>
  [JsonPropertyName("disposition")]
  public string? Disposition { get; set; }
  [JsonPropertyName("_disposition")]
  public Element _Disposition { get; set; }
  /// <summary>
  /// May be needed to identify specific jurisdictional forms.
  /// </summary>
  [JsonPropertyName("formCode")]
  public CodeableConcept? FormCode { get; set; }
  [JsonPropertyName("_formCode")]
  public Element _FormCode { get; set; }
  /// <summary>
  /// A unique identifier assigned to this payment reconciliation.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
  /// </summary>
  [JsonPropertyName("outcome")]
  public string? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// Total payment amount as indicated on the financial instrument.
  /// </summary>
  [JsonPropertyName("paymentAmount")]
  public Money PaymentAmount { get; set; }
  [JsonPropertyName("_paymentAmount")]
  public Element _PaymentAmount { get; set; }
  /// <summary>
  /// The date of payment as indicated on the financial instrument.
  /// </summary>
  [JsonPropertyName("paymentDate")]
  public string PaymentDate { get; set; }
  [JsonPropertyName("_paymentDate")]
  public Element _PaymentDate { get; set; }
  /// <summary>
  /// For example: EFT number or check number.
  /// </summary>
  [JsonPropertyName("paymentIdentifier")]
  public Identifier? PaymentIdentifier { get; set; }
  [JsonPropertyName("_paymentIdentifier")]
  public Element _PaymentIdentifier { get; set; }
  /// <summary>
  /// This party is also responsible for the reconciliation.
  /// </summary>
  [JsonPropertyName("paymentIssuer")]
  public Reference? PaymentIssuer { get; set; }
  [JsonPropertyName("_paymentIssuer")]
  public Element _PaymentIssuer { get; set; }
  /// <summary>
  /// The period of time for which payments have been gathered into this bulk payment for settlement.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// A note that describes or explains the processing in a human readable form.
  /// </summary>
  [JsonPropertyName("processNote")]
  public PaymentReconciliationProcessNote?[] ProcessNote { get; set; }
  [JsonPropertyName("_processNote")]
  public Element[] _ProcessNote { get; set; }
  /// <summary>
  /// Original request resource reference.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference? Request { get; set; }
  [JsonPropertyName("_request")]
  public Element _Request { get; set; }
  /// <summary>
  /// The practitioner who is responsible for the services rendered to the patient.
  /// </summary>
  [JsonPropertyName("requestor")]
  public Reference? Requestor { get; set; }
  [JsonPropertyName("_requestor")]
  public Element _Requestor { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the PaymentReconciliation.outcome field
/// </summary>
public sealed class PaymentReconciliationOutcomeCodes {
  public const string QUEUED = "queued";
  public const string COMPLETE = "complete";
  public const string ERROR = "error";
  public const string PARTIAL = "partial";
}
/// <summary>
/// Code Values for the PaymentReconciliation.status field
/// </summary>
public sealed class PaymentReconciliationStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// A description or definition of which activities are allowed to be done on the data.
/// </summary>
public class PermissionProcessingActivity : BackboneElement {
  /// <summary>
  /// If the processing is a transfer, or involves another party, we must capture where it the data allowed or expected to be shared - with a party or person. This can be a party instance or party type
  /// § Purpose – a specific purpose of the data.
  /// </summary>
  [JsonPropertyName("partyCodeableConcept")]
  public CodeableConcept?[] PartyCodeableConcept { get; set; }
  [JsonPropertyName("_partyCodeableConcept")]
  public Element[] _PartyCodeableConcept { get; set; }
  /// <summary>
  /// If the processing is a transfer, we must capture where it the data allowed or expected to be shared - with a party or person.
  /// </summary>
  [JsonPropertyName("partyReference")]
  public Reference?[] PartyReference { get; set; }
  [JsonPropertyName("_partyReference")]
  public Element[] _PartyReference { get; set; }
  /// <summary>
  /// The purpose for which the permission is given.
  /// </summary>
  [JsonPropertyName("purpose")]
  public CodeableConcept?[] Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element[] _Purpose { get; set; }
}
/// <summary>
/// The asserted justification for using the data.
/// </summary>
public class PermissionJustification : BackboneElement {
  /// <summary>
  /// Evidence – reference to consent, or a contract, or a policy, or a regulation, or an attachment that contains a screenshot.
  /// </summary>
  [JsonPropertyName("evidence")]
  public Reference?[] Evidence { get; set; }
  [JsonPropertyName("_evidence")]
  public Element[] _Evidence { get; set; }
  /// <summary>
  /// This would be a codeableconcept, or a coding, which can be constrained to , for example, the 6 grounds for processing in GDPR.
  /// </summary>
  [JsonPropertyName("grounds")]
  public CodeableConcept?[] Grounds { get; set; }
  [JsonPropertyName("_grounds")]
  public Element[] _Grounds { get; set; }
}
public class Permission : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Permission";
  /// <summary>
  /// The person or entity that asserts the permission.
  /// </summary>
  [JsonPropertyName("asserter")]
  public Reference? Asserter { get; set; }
  [JsonPropertyName("_asserter")]
  public Element _Asserter { get; set; }
  /// <summary>
  /// The date that permission was asserted.
  /// </summary>
  [JsonPropertyName("assertionDate")]
  public string?[] AssertionDate { get; set; }
  [JsonPropertyName("_assertionDate")]
  public Element[] _AssertionDate { get; set; }
  /// <summary>
  /// This can be 1) the definition of data elements, or 2) a category or label) e.g. “sensitive”. It could also be a c) graph-like definition of a set of data elements.
  /// </summary>
  [JsonPropertyName("dataScope")]
  public Expression?[] DataScope { get; set; }
  [JsonPropertyName("_dataScope")]
  public Element[] _DataScope { get; set; }
  /// <summary>
  /// grant|refuse.
  /// </summary>
  [JsonPropertyName("intent")]
  public CodeableConcept? Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// The asserted justification for using the data.
  /// </summary>
  [JsonPropertyName("justification")]
  public PermissionJustification? Justification { get; set; }
  [JsonPropertyName("_justification")]
  public Element _Justification { get; set; }
  /// <summary>
  /// A description or definition of which activities are allowed to be done on the data.
  /// </summary>
  [JsonPropertyName("processingActivity")]
  public PermissionProcessingActivity?[] ProcessingActivity { get; set; }
  [JsonPropertyName("_processingActivity")]
  public Element[] _ProcessingActivity { get; set; }
  /// <summary>
  /// The purpose for which the permission is given.
  /// </summary>
  [JsonPropertyName("purpose")]
  public CodeableConcept?[] Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element[] _Purpose { get; set; }
  /// <summary>
  /// Status.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// What limits apply to the use of the data.
  /// </summary>
  [JsonPropertyName("usageLimitations")]
  public CodeableConcept?[] UsageLimitations { get; set; }
  [JsonPropertyName("_usageLimitations")]
  public Element[] _UsageLimitations { get; set; }
  /// <summary>
  /// The period in which the permission is active.
  /// </summary>
  [JsonPropertyName("validity")]
  public Period? Validity { get; set; }
  [JsonPropertyName("_validity")]
  public Element _Validity { get; set; }
}
/// <summary>
/// Code Values for the Permission.status field
/// </summary>
public sealed class PermissionStatusCodes {
  public const string ACTIVE = "active";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string DRAFT = "draft";
  public const string REJECTED = "rejected";
}
/// <summary>
/// Link to a resource that concerns the same actual person.
/// </summary>
public class PersonLink : BackboneElement {
  /// <summary>
  /// Level of assurance that this link is associated with the target resource.
  /// </summary>
  [JsonPropertyName("assurance")]
  public string? Assurance { get; set; }
  [JsonPropertyName("_assurance")]
  public Element _Assurance { get; set; }
  /// <summary>
  /// The resource to which this actual person is associated.
  /// </summary>
  [JsonPropertyName("target")]
  public Reference Target { get; set; }
  [JsonPropertyName("_target")]
  public Element _Target { get; set; }
}
/// <summary>
/// Code Values for the Person.link.assurance field
/// </summary>
public sealed class PersonLinkAssuranceCodes {
  public const string LEVEL1 = "level1";
  public const string LEVEL2 = "level2";
  public const string LEVEL3 = "level3";
  public const string LEVEL4 = "level4";
}
/// <summary>
/// Need to track persons potentially across multiple roles.
/// </summary>
public class Person : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Person";
  /// <summary>
  /// Whether this person's record is in active use.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// Person may have multiple addresses with different uses or applicable periods.
  /// </summary>
  [JsonPropertyName("address")]
  public Address?[] Address { get; set; }
  [JsonPropertyName("_address")]
  public Element[] _Address { get; set; }
  /// <summary>
  /// At least an estimated year should be provided as a guess if the real DOB is unknown.
  /// </summary>
  [JsonPropertyName("birthDate")]
  public string? BirthDate { get; set; }
  [JsonPropertyName("_birthDate")]
  public Element _BirthDate { get; set; }
  /// <summary>
  /// The gender might not match the biological sex as determined by genetics, or the individual's preferred identification. Note that for both humans and particularly animals, there are other legitimate possibilities than M and F, though a clear majority of systems and contexts only support M and F.
  /// </summary>
  [JsonPropertyName("gender")]
  public string? Gender { get; set; }
  [JsonPropertyName("_gender")]
  public Element _Gender { get; set; }
  /// <summary>
  /// Identifier for a person within a particular scope.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Link to a resource that concerns the same actual person.
  /// </summary>
  [JsonPropertyName("link")]
  public PersonLink?[] Link { get; set; }
  [JsonPropertyName("_link")]
  public Element[] _Link { get; set; }
  /// <summary>
  /// The organization that is the custodian of the person record.
  /// </summary>
  [JsonPropertyName("managingOrganization")]
  public Reference? ManagingOrganization { get; set; }
  [JsonPropertyName("_managingOrganization")]
  public Element _ManagingOrganization { get; set; }
  /// <summary>
  /// Person may have multiple names with different uses or applicable periods.
  /// </summary>
  [JsonPropertyName("name")]
  public HumanName?[] Name { get; set; }
  [JsonPropertyName("_name")]
  public Element[] _Name { get; set; }
  /// <summary>
  /// An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
  /// </summary>
  [JsonPropertyName("photo")]
  public Attachment? Photo { get; set; }
  [JsonPropertyName("_photo")]
  public Element _Photo { get; set; }
  /// <summary>
  /// Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and also to help with identification.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Code Values for the Person.gender field
/// </summary>
public sealed class PersonGenderCodes {
  public const string MALE = "male";
  public const string FEMALE = "female";
  public const string OTHER = "other";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Indicates what should be done and within what timeframe.
/// </summary>
public class PlanDefinitionGoalTarget : BackboneElement {
  /// <summary>
  /// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
  /// </summary>
  [JsonPropertyName("detailQuantity")]
  public Quantity? DetailQuantity { get; set; }
  [JsonPropertyName("_detailQuantity")]
  public Element _DetailQuantity { get; set; }
  /// <summary>
  /// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
  /// </summary>
  [JsonPropertyName("detailRange")]
  public Range? DetailRange { get; set; }
  [JsonPropertyName("_detailRange")]
  public Element _DetailRange { get; set; }
  /// <summary>
  /// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
  /// </summary>
  [JsonPropertyName("detailCodeableConcept")]
  public CodeableConcept? DetailCodeableConcept { get; set; }
  [JsonPropertyName("_detailCodeableConcept")]
  public Element _DetailCodeableConcept { get; set; }
  /// <summary>
  /// Indicates the timeframe after the start of the goal in which the goal should be met.
  /// </summary>
  [JsonPropertyName("due")]
  public Duration? Due { get; set; }
  [JsonPropertyName("_due")]
  public Element _Due { get; set; }
  /// <summary>
  /// The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
  /// </summary>
  [JsonPropertyName("measure")]
  public CodeableConcept? Measure { get; set; }
  [JsonPropertyName("_measure")]
  public Element _Measure { get; set; }
}
/// <summary>
/// Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
/// </summary>
public class PlanDefinitionGoal : BackboneElement {
  /// <summary>
  /// Identifies problems, conditions, issues, or concerns the goal is intended to address.
  /// </summary>
  [JsonPropertyName("addresses")]
  public CodeableConcept?[] Addresses { get; set; }
  [JsonPropertyName("_addresses")]
  public Element[] _Addresses { get; set; }
  /// <summary>
  /// Indicates a category the goal falls within.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// If no code is available, use CodeableConcept.text.
  /// </summary>
  [JsonPropertyName("description")]
  public CodeableConcept Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
  /// </summary>
  [JsonPropertyName("documentation")]
  public RelatedArtifact?[] Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element[] _Documentation { get; set; }
  /// <summary>
  /// Identifies the expected level of importance associated with reaching/sustaining the defined goal.
  /// </summary>
  [JsonPropertyName("priority")]
  public CodeableConcept? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// The event after which the goal should begin being pursued.
  /// </summary>
  [JsonPropertyName("start")]
  public CodeableConcept? Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
  /// <summary>
  /// Indicates what should be done and within what timeframe.
  /// </summary>
  [JsonPropertyName("target")]
  public PlanDefinitionGoalTarget?[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
}
/// <summary>
/// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
/// </summary>
public class PlanDefinitionActionCondition : BackboneElement {
  /// <summary>
  /// The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
  /// </summary>
  [JsonPropertyName("expression")]
  public Expression? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
  /// </summary>
  [JsonPropertyName("kind")]
  public string Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
}
/// <summary>
/// Code Values for the PlanDefinition.action.condition.kind field
/// </summary>
public sealed class PlanDefinitionActionConditionKindCodes {
  public const string APPLICABILITY = "applicability";
  public const string START = "start";
  public const string STOP = "stop";
}
/// <summary>
/// When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
/// </summary>
public class PlanDefinitionActionRelatedAction : BackboneElement {
  /// <summary>
  /// The element id of the related action.
  /// </summary>
  [JsonPropertyName("actionId")]
  public string ActionId { get; set; }
  [JsonPropertyName("_actionId")]
  public Element _ActionId { get; set; }
  /// <summary>
  /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
  /// </summary>
  [JsonPropertyName("offsetDuration")]
  public Duration? OffsetDuration { get; set; }
  [JsonPropertyName("_offsetDuration")]
  public Element _OffsetDuration { get; set; }
  /// <summary>
  /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
  /// </summary>
  [JsonPropertyName("offsetRange")]
  public Range? OffsetRange { get; set; }
  [JsonPropertyName("_offsetRange")]
  public Element _OffsetRange { get; set; }
  /// <summary>
  /// The relationship of this action to the related action.
  /// </summary>
  [JsonPropertyName("relationship")]
  public string Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
}
/// <summary>
/// Code Values for the PlanDefinition.action.relatedAction.relationship field
/// </summary>
public sealed class PlanDefinitionActionRelatedActionRelationshipCodes {
  public const string BEFORE_START = "before-start";
  public const string BEFORE = "before";
  public const string BEFORE_END = "before-end";
  public const string CONCURRENT_WITH_START = "concurrent-with-start";
  public const string CONCURRENT = "concurrent";
  public const string CONCURRENT_WITH_END = "concurrent-with-end";
  public const string AFTER_START = "after-start";
  public const string AFTER = "after";
  public const string AFTER_END = "after-end";
}
/// <summary>
/// Indicates who should participate in performing the action described.
/// </summary>
public class PlanDefinitionActionParticipant : BackboneElement {
  /// <summary>
  /// The role the participant should play in performing the described action.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
  /// <summary>
  /// The type of participant in the action.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the PlanDefinition.action.participant.type field
/// </summary>
public sealed class PlanDefinitionActionParticipantTypeCodes {
  public const string PATIENT = "patient";
  public const string PRACTITIONER = "practitioner";
  public const string RELATED_PERSON = "related-person";
  public const string DEVICE = "device";
}
/// <summary>
/// Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
/// </summary>
public class PlanDefinitionActionDynamicValue : BackboneElement {
  /// <summary>
  /// The expression may be inlined or may be a reference to a named expression within a logic library referenced by the library element.
  /// </summary>
  [JsonPropertyName("expression")]
  public Expression? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// To specify the path to the current action being realized, the %action environment variable is available in this path. For example, to specify the description element of the target action, the path would be %action.description. The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple) that allows path traversal, but not calculation.
  /// </summary>
  [JsonPropertyName("path")]
  public string? Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
}
/// <summary>
/// Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
/// </summary>
public class PlanDefinitionAction : BackboneElement {
  /// <summary>
  /// Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
  /// </summary>
  [JsonPropertyName("action")]
  public PlanDefinitionAction?[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
  /// <summary>
  /// Defines whether the action can be selected multiple times.
  /// </summary>
  [JsonPropertyName("cardinalityBehavior")]
  public string? CardinalityBehavior { get; set; }
  [JsonPropertyName("_cardinalityBehavior")]
  public Element _CardinalityBehavior { get; set; }
  /// <summary>
  /// A code that provides meaning for the action or action group. For example, a section may have a LOINC code for the section of a documentation template.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all the conditions are true.
  /// </summary>
  [JsonPropertyName("condition")]
  public PlanDefinitionActionCondition?[] Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element[] _Condition { get; set; }
  /// <summary>
  /// Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
  /// </summary>
  [JsonPropertyName("definitionCanonical")]
  public string? DefinitionCanonical { get; set; }
  [JsonPropertyName("_definitionCanonical")]
  public Element _DefinitionCanonical { get; set; }
  /// <summary>
  /// Note that the definition is optional, and if no definition is specified, a dynamicValue with a root ($this) path can be used to define the entire resource dynamically.
  /// </summary>
  [JsonPropertyName("definitionUri")]
  public string? DefinitionUri { get; set; }
  [JsonPropertyName("_definitionUri")]
  public Element _DefinitionUri { get; set; }
  /// <summary>
  /// A brief description of the action used to provide a summary to display to the user.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
  /// </summary>
  [JsonPropertyName("documentation")]
  public RelatedArtifact?[] Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element[] _Documentation { get; set; }
  /// <summary>
  /// Dynamic values are applied in the order in which they are defined in the PlanDefinition resource. Note that when dynamic values are also specified by a referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are applied first, followed by the dynamicValues specified here. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
  /// </summary>
  [JsonPropertyName("dynamicValue")]
  public PlanDefinitionActionDynamicValue?[] DynamicValue { get; set; }
  [JsonPropertyName("_dynamicValue")]
  public Element[] _DynamicValue { get; set; }
  /// <summary>
  /// Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition.
  /// </summary>
  [JsonPropertyName("goalId")]
  public string?[] GoalId { get; set; }
  [JsonPropertyName("_goalId")]
  public Element[] _GoalId { get; set; }
  /// <summary>
  /// Defines the grouping behavior for the action and its children.
  /// </summary>
  [JsonPropertyName("groupingBehavior")]
  public string? GroupingBehavior { get; set; }
  [JsonPropertyName("_groupingBehavior")]
  public Element _GroupingBehavior { get; set; }
  /// <summary>
  /// Defines input data requirements for the action.
  /// </summary>
  [JsonPropertyName("input")]
  public DataRequirement?[] Input { get; set; }
  [JsonPropertyName("_input")]
  public Element[] _Input { get; set; }
  /// <summary>
  /// Defines the outputs of the action, if any.
  /// </summary>
  [JsonPropertyName("output")]
  public DataRequirement?[] Output { get; set; }
  [JsonPropertyName("_output")]
  public Element[] _Output { get; set; }
  /// <summary>
  /// Indicates who should participate in performing the action described.
  /// </summary>
  [JsonPropertyName("participant")]
  public PlanDefinitionActionParticipant?[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// Defines whether the action should usually be preselected.
  /// </summary>
  [JsonPropertyName("precheckBehavior")]
  public string? PrecheckBehavior { get; set; }
  [JsonPropertyName("_precheckBehavior")]
  public Element _PrecheckBehavior { get; set; }
  /// <summary>
  /// A user-visible prefix for the action.
  /// </summary>
  [JsonPropertyName("prefix")]
  public string? Prefix { get; set; }
  [JsonPropertyName("_prefix")]
  public Element _Prefix { get; set; }
  /// <summary>
  /// Indicates how quickly the action should be addressed with respect to other actions.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// This is different than the clinical evidence documentation, it's an actual business description of the reason for performing the action.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// When an action depends on multiple actions, the meaning is that all actions are dependencies, rather than that any of the actions are a dependency.
  /// </summary>
  [JsonPropertyName("relatedAction")]
  public PlanDefinitionActionRelatedAction?[] RelatedAction { get; set; }
  [JsonPropertyName("_relatedAction")]
  public Element[] _RelatedAction { get; set; }
  /// <summary>
  /// Defines the required behavior for the action.
  /// </summary>
  [JsonPropertyName("requiredBehavior")]
  public string? RequiredBehavior { get; set; }
  [JsonPropertyName("_requiredBehavior")]
  public Element _RequiredBehavior { get; set; }
  /// <summary>
  /// Defines the selection behavior for the action and its children.
  /// </summary>
  [JsonPropertyName("selectionBehavior")]
  public string? SelectionBehavior { get; set; }
  [JsonPropertyName("_selectionBehavior")]
  public Element _SelectionBehavior { get; set; }
  /// <summary>
  /// The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.
  /// 
  /// In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// The subject of an action overrides the subject at a parent action or on the root of the PlanDefinition if specified.
  /// 
  /// In addition, because the subject needs to be resolved during realization, use of subjects in actions (or in the ActivityDefinition referenced by the action) resolves based on the set of subjects supplied in context and by type (i.e. the patient subject would resolve to a resource of type Patient).
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
  /// </summary>
  [JsonPropertyName("textEquivalent")]
  public string? TextEquivalent { get; set; }
  [JsonPropertyName("_textEquivalent")]
  public Element _TextEquivalent { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingDateTime")]
  public string? TimingDateTime { get; set; }
  [JsonPropertyName("_timingDateTime")]
  public Element _TimingDateTime { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingAge")]
  public Age? TimingAge { get; set; }
  [JsonPropertyName("_timingAge")]
  public Element _TimingAge { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingPeriod")]
  public Period? TimingPeriod { get; set; }
  [JsonPropertyName("_timingPeriod")]
  public Element _TimingPeriod { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingDuration")]
  public Duration? TimingDuration { get; set; }
  [JsonPropertyName("_timingDuration")]
  public Element _TimingDuration { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingRange")]
  public Range? TimingRange { get; set; }
  [JsonPropertyName("_timingRange")]
  public Element _TimingRange { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingTiming")]
  public Timing? TimingTiming { get; set; }
  [JsonPropertyName("_timingTiming")]
  public Element _TimingTiming { get; set; }
  /// <summary>
  /// The title of the action displayed to a user.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Note that when a referenced ActivityDefinition also defines a transform, the transform specified here generally takes precedence. In addition, if both a transform and dynamic values are specific, the dynamic values are applied to the result of the transform.
  /// </summary>
  [JsonPropertyName("transform")]
  public string? Transform { get; set; }
  [JsonPropertyName("_transform")]
  public Element _Transform { get; set; }
  /// <summary>
  /// A description of when the action should be triggered.
  /// </summary>
  [JsonPropertyName("trigger")]
  public TriggerDefinition?[] Trigger { get; set; }
  [JsonPropertyName("_trigger")]
  public Element[] _Trigger { get; set; }
  /// <summary>
  /// The type of action to perform (create, update, remove).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the PlanDefinition.action.cardinalityBehavior field
/// </summary>
public sealed class PlanDefinitionActionCardinalityBehaviorCodes {
  public const string SINGLE = "single";
  public const string MULTIPLE = "multiple";
}
/// <summary>
/// Code Values for the PlanDefinition.action.groupingBehavior field
/// </summary>
public sealed class PlanDefinitionActionGroupingBehaviorCodes {
  public const string VISUAL_GROUP = "visual-group";
  public const string LOGICAL_GROUP = "logical-group";
  public const string SENTENCE_GROUP = "sentence-group";
}
/// <summary>
/// Code Values for the PlanDefinition.action.precheckBehavior field
/// </summary>
public sealed class PlanDefinitionActionPrecheckBehaviorCodes {
  public const string YES = "yes";
  public const string NO = "no";
}
/// <summary>
/// Code Values for the PlanDefinition.action.priority field
/// </summary>
public sealed class PlanDefinitionActionPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the PlanDefinition.action.requiredBehavior field
/// </summary>
public sealed class PlanDefinitionActionRequiredBehaviorCodes {
  public const string MUST = "must";
  public const string COULD = "could";
  public const string MUST_UNLESS_DOCUMENTED = "must-unless-documented";
}
/// <summary>
/// Code Values for the PlanDefinition.action.selectionBehavior field
/// </summary>
public sealed class PlanDefinitionActionSelectionBehaviorCodes {
  public const string ANY = "any";
  public const string ALL = "all";
  public const string ALL_OR_NONE = "all-or-none";
  public const string EXACTLY_ONE = "exactly-one";
  public const string AT_MOST_ONE = "at-most-one";
  public const string ONE_OR_MORE = "one-or-more";
}
public class PlanDefinition : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "PlanDefinition";
  /// <summary>
  /// Note that there is overlap between many of the elements defined here and the ActivityDefinition resource. When an ActivityDefinition is referenced (using the definition element), the overlapping elements in the plan override the content of the referenced ActivityDefinition unless otherwise documented in the specific elements. See the PlanDefinition resource for more detailed information.
  /// </summary>
  [JsonPropertyName("action")]
  public PlanDefinitionAction?[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// An individiual or organization primarily involved in the creation and maintenance of the content.
  /// </summary>
  [JsonPropertyName("author")]
  public ContactDetail?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the plan definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the plan definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the plan definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the plan definition is presumed to be the predominant language in the place the plan definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for internal coherence of the content.
  /// </summary>
  [JsonPropertyName("editor")]
  public ContactDetail?[] Editor { get; set; }
  [JsonPropertyName("_editor")]
  public Element[] _Editor { get; set; }
  /// <summary>
  /// The effective period for a plan definition  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// An individual or organization responsible for officially endorsing the content for use in some setting.
  /// </summary>
  [JsonPropertyName("endorser")]
  public ContactDetail?[] Endorser { get; set; }
  [JsonPropertyName("_endorser")]
  public Element[] _Endorser { get; set; }
  /// <summary>
  /// Allows filtering of plan definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Goals that describe what the activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
  /// </summary>
  [JsonPropertyName("goal")]
  public PlanDefinitionGoal?[] Goal { get; set; }
  [JsonPropertyName("_goal")]
  public Element[] _Goal { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this plan definition outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the plan definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// A reference to a Library resource containing any formal logic used by the plan definition.
  /// </summary>
  [JsonPropertyName("library")]
  public string?[] Library { get; set; }
  [JsonPropertyName("_library")]
  public Element[] _Library { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the plan definition is the organization or individual primarily responsible for the maintenance and upkeep of the plan definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the plan definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the plan definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this plan definition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Each related artifact is either an attachment, or a reference to another resource, but not both.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// An individual or organization primarily responsible for review of some aspect of the content.
  /// </summary>
  [JsonPropertyName("reviewer")]
  public ContactDetail?[] Reviewer { get; set; }
  [JsonPropertyName("_reviewer")]
  public Element[] _Reviewer { get; set; }
  /// <summary>
  /// Allows filtering of plan definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A code or group definition that describes the intended subject of the plan definition.
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// A code or group definition that describes the intended subject of the plan definition.
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// An explanatory or alternate title for the plan definition giving additional information about its content.
  /// </summary>
  [JsonPropertyName("subtitle")]
  public string? Subtitle { get; set; }
  [JsonPropertyName("_subtitle")]
  public Element _Subtitle { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
  /// </summary>
  [JsonPropertyName("topic")]
  public CodeableConcept?[] Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element[] _Topic { get; set; }
  /// <summary>
  /// A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// A detailed description of how the plan definition is used from a clinical perspective.
  /// </summary>
  [JsonPropertyName("usage")]
  public string? Usage { get; set; }
  [JsonPropertyName("_usage")]
  public Element _Usage { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different plan definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the PlanDefinition.status field
/// </summary>
public sealed class PlanDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
/// </summary>
public class PractitionerQualification : BackboneElement {
  /// <summary>
  /// Coded representation of the qualification.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// An identifier that applies to this person's qualification in this role.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Organization that regulates and issues the qualification.
  /// </summary>
  [JsonPropertyName("issuer")]
  public Reference? Issuer { get; set; }
  [JsonPropertyName("_issuer")]
  public Element _Issuer { get; set; }
  /// <summary>
  /// Period during which the qualification is valid.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
}
/// <summary>
/// Need to track doctors, staff, locums etc. for both healthcare practitioners, funders, etc.
/// </summary>
public class Practitioner : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Practitioner";
  /// <summary>
  /// If the practitioner is not in use by one organization, then it should mark the period on the PractitonerRole with an end date (even if they are active) as they may be active in another role.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// The PractitionerRole does not have an address value on it, as it is expected that the location property be used for this purpose (which has an address).
  /// </summary>
  [JsonPropertyName("address")]
  public Address?[] Address { get; set; }
  [JsonPropertyName("_address")]
  public Element[] _Address { get; set; }
  /// <summary>
  /// The date of birth for the practitioner.
  /// </summary>
  [JsonPropertyName("birthDate")]
  public string? BirthDate { get; set; }
  [JsonPropertyName("_birthDate")]
  public Element _BirthDate { get; set; }
  /// <summary>
  /// The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
  /// </summary>
  [JsonPropertyName("communication")]
  public CodeableConcept?[] Communication { get; set; }
  [JsonPropertyName("_communication")]
  public Element[] _Communication { get; set; }
  /// <summary>
  /// Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
  /// </summary>
  [JsonPropertyName("gender")]
  public string? Gender { get; set; }
  [JsonPropertyName("_gender")]
  public Element _Gender { get; set; }
  /// <summary>
  /// An identifier that applies to this person in this role.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The selection of the use property should ensure that there is a single usual name specified, and others use the nickname (alias), old, or other values as appropriate.  In general, select the value to be used in the ResourceReference.display based on this:1. There is more than 1 name2. Use = usual3. Period is current to the date of the usage4. Use = official5. Other order as decided by internal business rules.
  /// </summary>
  [JsonPropertyName("name")]
  public HumanName?[] Name { get; set; }
  [JsonPropertyName("_name")]
  public Element[] _Name { get; set; }
  /// <summary>
  /// Image of the person.
  /// </summary>
  [JsonPropertyName("photo")]
  public Attachment?[] Photo { get; set; }
  [JsonPropertyName("_photo")]
  public Element[] _Photo { get; set; }
  /// <summary>
  /// The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
  /// </summary>
  [JsonPropertyName("qualification")]
  public PractitionerQualification?[] Qualification { get; set; }
  [JsonPropertyName("_qualification")]
  public Element[] _Qualification { get; set; }
  /// <summary>
  /// Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently and to help with identification.  These typically will have home numbers, or mobile numbers that are not role specific.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Code Values for the Practitioner.gender field
/// </summary>
public sealed class PractitionerGenderCodes {
  public const string MALE = "male";
  public const string FEMALE = "female";
  public const string OTHER = "other";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// More detailed availability information may be provided in associated Schedule/Slot resources.
/// </summary>
public class PractitionerRoleAvailableTime : BackboneElement {
  /// <summary>
  /// Is this always available? (hence times are irrelevant) e.g. 24 hour service.
  /// </summary>
  [JsonPropertyName("allDay")]
  public bool? AllDay { get; set; }
  [JsonPropertyName("_allDay")]
  public Element _AllDay { get; set; }
  /// <summary>
  /// The timezone is expected to be for where this HealthcareService is provided at.
  /// </summary>
  [JsonPropertyName("availableEndTime")]
  public string? AvailableEndTime { get; set; }
  [JsonPropertyName("_availableEndTime")]
  public Element _AvailableEndTime { get; set; }
  /// <summary>
  /// The timezone is expected to be for where this HealthcareService is provided at.
  /// </summary>
  [JsonPropertyName("availableStartTime")]
  public string? AvailableStartTime { get; set; }
  [JsonPropertyName("_availableStartTime")]
  public Element _AvailableStartTime { get; set; }
  /// <summary>
  /// Indicates which days of the week are available between the start and end Times.
  /// </summary>
  [JsonPropertyName("daysOfWeek")]
  public string?[] DaysOfWeek { get; set; }
  [JsonPropertyName("_daysOfWeek")]
  public Element[] _DaysOfWeek { get; set; }
}
/// <summary>
/// Code Values for the PractitionerRole.availableTime.daysOfWeek field
/// </summary>
public sealed class PractitionerRoleAvailableTimeDaysOfWeekCodes {
  public const string MON = "mon";
  public const string TUE = "tue";
  public const string WED = "wed";
  public const string THU = "thu";
  public const string FRI = "fri";
  public const string SAT = "sat";
  public const string SUN = "sun";
}
/// <summary>
/// The practitioner is not available or performing this role during this period of time due to the provided reason.
/// </summary>
public class PractitionerRoleNotAvailable : BackboneElement {
  /// <summary>
  /// The reason that can be presented to the user as to why this time is not available.
  /// </summary>
  [JsonPropertyName("description")]
  public string Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Service is not available (seasonally or for a public holiday) from this date.
  /// </summary>
  [JsonPropertyName("during")]
  public Period? During { get; set; }
  [JsonPropertyName("_during")]
  public Element _During { get; set; }
}
/// <summary>
/// Need to track services that a healthcare provider is able to provide at an organization's location, and the services that they can perform there.
/// </summary>
public class PractitionerRole : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "PractitionerRole";
  /// <summary>
  /// If this value is false, you may refer to the period to see when the role was in active use. If there is no period specified, no inference can be made about when it was active.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
  /// </summary>
  [JsonPropertyName("availabilityExceptions")]
  public string? AvailabilityExceptions { get; set; }
  [JsonPropertyName("_availabilityExceptions")]
  public Element _AvailabilityExceptions { get; set; }
  /// <summary>
  /// More detailed availability information may be provided in associated Schedule/Slot resources.
  /// </summary>
  [JsonPropertyName("availableTime")]
  public PractitionerRoleAvailableTime?[] AvailableTime { get; set; }
  [JsonPropertyName("_availableTime")]
  public Element[] _AvailableTime { get; set; }
  /// <summary>
  /// A person may have more than one role.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// Technical endpoints providing access to services operated for the practitioner with this role.
  /// </summary>
  [JsonPropertyName("endpoint")]
  public Reference?[] Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element[] _Endpoint { get; set; }
  /// <summary>
  /// The list of healthcare services that this worker provides for this role's Organization/Location(s).
  /// </summary>
  [JsonPropertyName("healthcareService")]
  public Reference?[] HealthcareService { get; set; }
  [JsonPropertyName("_healthcareService")]
  public Element[] _HealthcareService { get; set; }
  /// <summary>
  /// Business Identifiers that are specific to a role/location.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The location(s) at which this practitioner provides care.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference?[] Location { get; set; }
  [JsonPropertyName("_location")]
  public Element[] _Location { get; set; }
  /// <summary>
  /// The practitioner is not available or performing this role during this period of time due to the provided reason.
  /// </summary>
  [JsonPropertyName("notAvailable")]
  public PractitionerRoleNotAvailable?[] NotAvailable { get; set; }
  [JsonPropertyName("_notAvailable")]
  public Element[] _NotAvailable { get; set; }
  /// <summary>
  /// The organization where the Practitioner performs the roles associated.
  /// </summary>
  [JsonPropertyName("organization")]
  public Reference? Organization { get; set; }
  [JsonPropertyName("_organization")]
  public Element _Organization { get; set; }
  /// <summary>
  /// The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Practitioner that is able to provide the defined services for the organization.
  /// </summary>
  [JsonPropertyName("practitioner")]
  public Reference? Practitioner { get; set; }
  [JsonPropertyName("_practitioner")]
  public Element _Practitioner { get; set; }
  /// <summary>
  /// Specific specialty of the practitioner.
  /// </summary>
  [JsonPropertyName("specialty")]
  public CodeableConcept?[] Specialty { get; set; }
  [JsonPropertyName("_specialty")]
  public Element[] _Specialty { get; set; }
  /// <summary>
  /// Contact details that are specific to the role/location/service.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Limited to "real" people rather than equipment.
/// </summary>
public class ProcedurePerformer : BackboneElement {
  /// <summary>
  /// Indicates who or what performed the procedure.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element _Actor { get; set; }
  /// <summary>
  /// Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist.
  /// </summary>
  [JsonPropertyName("function")]
  public CodeableConcept? Function { get; set; }
  [JsonPropertyName("_function")]
  public Element _Function { get; set; }
  /// <summary>
  /// The organization the device or practitioner was acting on behalf of.
  /// </summary>
  [JsonPropertyName("onBehalfOf")]
  public Reference? OnBehalfOf { get; set; }
  [JsonPropertyName("_onBehalfOf")]
  public Element _OnBehalfOf { get; set; }
}
/// <summary>
/// A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
/// </summary>
public class ProcedureFocalDevice : BackboneElement {
  /// <summary>
  /// The kind of change that happened to the device during the procedure.
  /// </summary>
  [JsonPropertyName("action")]
  public CodeableConcept? Action { get; set; }
  [JsonPropertyName("_action")]
  public Element _Action { get; set; }
  /// <summary>
  /// The device that was manipulated (changed) during the procedure.
  /// </summary>
  [JsonPropertyName("manipulated")]
  public Reference Manipulated { get; set; }
  [JsonPropertyName("_manipulated")]
  public Element _Manipulated { get; set; }
}
public class Procedure : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Procedure";
  /// <summary>
  /// A reference to a resource that contains details of the request for this procedure.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// If the use case requires attributes from the BodySite resource (e.g. to identify and track separately) then use the standard extension [procedure-targetbodystructure](extension-procedure-targetbodystructure.html).
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept?[] BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element[] _BodySite { get; set; }
  /// <summary>
  /// A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// If complications are only expressed by the narrative text, they can be captured using the CodeableConcept.text.
  /// </summary>
  [JsonPropertyName("complication")]
  public CodeableConcept?[] Complication { get; set; }
  [JsonPropertyName("_complication")]
  public Element[] _Complication { get; set; }
  /// <summary>
  /// Any complications that occurred during the procedure, or in the immediate post-performance period.
  /// </summary>
  [JsonPropertyName("complicationDetail")]
  public Reference?[] ComplicationDetail { get; set; }
  [JsonPropertyName("_complicationDetail")]
  public Element[] _ComplicationDetail { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
  /// </summary>
  [JsonPropertyName("focalDevice")]
  public ProcedureFocalDevice?[] FocalDevice { get; set; }
  [JsonPropertyName("_focalDevice")]
  public Element[] _FocalDevice { get; set; }
  /// <summary>
  /// If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.
  /// </summary>
  [JsonPropertyName("followUp")]
  public CodeableConcept?[] FollowUp { get; set; }
  [JsonPropertyName("_followUp")]
  public Element[] _FollowUp { get; set; }
  /// <summary>
  /// This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and Person resource instances might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// Any other notes and comments about the procedure.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
  /// 
  /// Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
  /// 
  /// Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
  /// 
  /// Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
  /// </summary>
  [JsonPropertyName("occurrenceString")]
  public string? OccurrenceString { get; set; }
  [JsonPropertyName("_occurrenceString")]
  public Element _OccurrenceString { get; set; }
  /// <summary>
  /// This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
  /// 
  /// Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
  /// </summary>
  [JsonPropertyName("occurrenceAge")]
  public Age? OccurrenceAge { get; set; }
  [JsonPropertyName("_occurrenceAge")]
  public Element _OccurrenceAge { get; set; }
  /// <summary>
  /// This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
  /// 
  /// Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
  /// </summary>
  [JsonPropertyName("occurrenceRange")]
  public Range? OccurrenceRange { get; set; }
  [JsonPropertyName("_occurrenceRange")]
  public Element _OccurrenceRange { get; set; }
  /// <summary>
  /// This indicates when the procedure actually occurred or is occurring, not when it was asked/requested/ordered to occur. For the latter, look at the occurence element of the Request this Procedure is "basedOn". The status code allows differentiation of whether the timing reflects a historic event or an ongoing event. Ongoing events should not include an upper bound in the Period or Timing.bounds.
  /// 
  /// Age is generally used when the patient reports an age at which the procedure was performed. Range is generally used when the patient reports an age range when the procedure was performed, such as sometime between 20-25 years old.  dateTime supports a range of precision due to some procedures being reported as past procedures that might not have millisecond precision while other procedures performed and documented during the encounter might have more precise UTC timestamps with timezone.
  /// </summary>
  [JsonPropertyName("occurrenceTiming")]
  public Timing? OccurrenceTiming { get; set; }
  [JsonPropertyName("_occurrenceTiming")]
  public Element _OccurrenceTiming { get; set; }
  /// <summary>
  /// If outcome contains narrative text only, it can be captured using the CodeableConcept.text.
  /// </summary>
  [JsonPropertyName("outcome")]
  public CodeableConcept? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// The MedicationAdministration resource has a partOf reference to Procedure, but this is not a circular reference.   For example, the anesthesia MedicationAdministration is part of the surgical Procedure (MedicationAdministration.partOf = Procedure).  For example, the procedure to insert the IV port for an IV medication administration is part of the medication administration (Procedure.partOf = MedicationAdministration).
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Limited to "real" people rather than equipment.
  /// </summary>
  [JsonPropertyName("performer")]
  public ProcedurePerformer?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// Use Procedure.reason.concept when a code sufficiently describes the reason.  Use Procedure.reason.reference when referencing a resource, which allows more information to be conveyed, such as onset date. Procedure.reason.concept and Procedure.reason.reference are not meant to be duplicative.  For a single reason, either Procedure.reason.concept or Procedure.reason.reference can be used.  Procedure.reason.concept may be a summary code, or Procedure.reason.reference may be used to reference a very precise definition of the reason using Condition | Observation | Procedure | DiagnosticReport | DocumentReference.  Both Procedure.reason.concept and Procedure.reason.reference can be used if they are describing different reasons for the procedure.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The date the occurrence of the procedure was first captured in the record regardless of Procedure.status (potentially after the occurrence of the event).
  /// </summary>
  [JsonPropertyName("recorded")]
  public string? Recorded { get; set; }
  [JsonPropertyName("_recorded")]
  public Element _Recorded { get; set; }
  /// <summary>
  /// Individual who recorded the record and takes responsibility for its content.
  /// </summary>
  [JsonPropertyName("recorder")]
  public Reference? Recorder { get; set; }
  [JsonPropertyName("_recorder")]
  public Element _Recorder { get; set; }
  /// <summary>
  /// There could potentially be multiple reports - e.g. if this was a procedure which took multiple biopsies resulting in a number of anatomical pathology reports.
  /// </summary>
  [JsonPropertyName("report")]
  public Reference?[] Report { get; set; }
  [JsonPropertyName("_report")]
  public Element[] _Report { get; set; }
  /// <summary>
  /// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  /// </summary>
  [JsonPropertyName("reportedBoolean")]
  public bool? ReportedBoolean { get; set; }
  [JsonPropertyName("_reportedBoolean")]
  public Element _ReportedBoolean { get; set; }
  /// <summary>
  /// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  /// </summary>
  [JsonPropertyName("reportedReference")]
  public Reference? ReportedReference { get; set; }
  [JsonPropertyName("_reportedReference")]
  public Element _ReportedReference { get; set; }
  /// <summary>
  /// The "unknown" code is not to be used to convey other statuses.  The "unknown" code should be used when one of the statuses applies, but the authoring system doesn't know the current state of the procedure.
  /// 
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This is generally only used for "exception" statuses such as "not-done", "suspended" or "aborted". The reason for performing the event at all is captured in reasonCode, not here.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
  /// <summary>
  /// The person, animal or group on which the procedure was performed.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// For devices actually implanted or removed, use Procedure.device.
  /// </summary>
  [JsonPropertyName("used")]
  public CodeableReference?[] Used { get; set; }
  [JsonPropertyName("_used")]
  public Element[] _Used { get; set; }
}
/// <summary>
/// Code Values for the Procedure.status field
/// </summary>
public sealed class ProcedureStatusCodes {
  public const string PREPARATION = "preparation";
  public const string IN_PROGRESS = "in-progress";
  public const string NOT_DONE = "not-done";
  public const string ON_HOLD = "on-hold";
  public const string STOPPED = "stopped";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
/// </summary>
public class ProvenanceAgent : BackboneElement {
  /// <summary>
  /// onBehalfOfIdentity should be used when the agent is not a Resource type.
  /// </summary>
  [JsonPropertyName("onBehalfOf")]
  public Reference? OnBehalfOf { get; set; }
  [JsonPropertyName("_onBehalfOf")]
  public Element _OnBehalfOf { get; set; }
  /// <summary>
  /// For example: PRIMAUTH, REVIEWER, VERF, etc.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept?[] Role { get; set; }
  [JsonPropertyName("_role")]
  public Element[] _Role { get; set; }
  /// <summary>
  /// For example: assembler, author, doctor, nurse, clerk, etc.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// whoIdentity should be used when the agent is not a Resource type.
  /// </summary>
  [JsonPropertyName("who")]
  public Reference Who { get; set; }
  [JsonPropertyName("_who")]
  public Element _Who { get; set; }
}
/// <summary>
/// An entity used in this activity.
/// </summary>
public class ProvenanceEntity : BackboneElement {
  /// <summary>
  /// A usecase where one Provenance.entity.agent is used where the Entity that was used in the creation/updating of the Target, is not in the context of the same custodianship as the Target, and thus the meaning of Provenance.entity.agent is to say that the entity referenced is managed elsewhere and that this Agent provided access to it.  This would be similar to where the Entity being referenced is managed outside FHIR, such as through HL7 v2, v3, or XDS. This might be where the Entity being referenced is managed in another FHIR resource server. Thus it explains the Provenance of that Entity's use in the context of this Provenance activity.
  /// </summary>
  [JsonPropertyName("agent")]
  public ProvenanceAgent?[] Agent { get; set; }
  [JsonPropertyName("_agent")]
  public Element[] _Agent { get; set; }
  /// <summary>
  /// How the entity was used during the activity.
  /// </summary>
  [JsonPropertyName("role")]
  public string Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
  /// <summary>
  /// whatIdentity should be used for entities that are not a Resource type.
  /// </summary>
  [JsonPropertyName("what")]
  public Reference What { get; set; }
  [JsonPropertyName("_what")]
  public Element _What { get; set; }
}
/// <summary>
/// Code Values for the Provenance.entity.role field
/// </summary>
public sealed class ProvenanceEntityRoleCodes {
  public const string DERIVATION = "derivation";
  public const string REVISION = "revision";
  public const string QUOTATION = "quotation";
  public const string SOURCE = "source";
  public const string REMOVAL = "removal";
}
public class Provenance : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Provenance";
  /// <summary>
  /// An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
  /// </summary>
  [JsonPropertyName("activity")]
  public CodeableConcept? Activity { get; set; }
  [JsonPropertyName("_activity")]
  public Element _Activity { get; set; }
  /// <summary>
  /// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
  /// </summary>
  [JsonPropertyName("agent")]
  public ProvenanceAgent[] Agent { get; set; }
  [JsonPropertyName("_agent")]
  public Element[] _Agent { get; set; }
  /// <summary>
  /// An entity used in this activity.
  /// </summary>
  [JsonPropertyName("entity")]
  public ProvenanceEntity?[] Entity { get; set; }
  [JsonPropertyName("_entity")]
  public Element[] _Entity { get; set; }
  /// <summary>
  /// Where the activity occurred, if relevant.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
  /// </summary>
  [JsonPropertyName("occurredPeriod")]
  public Period? OccurredPeriod { get; set; }
  [JsonPropertyName("_occurredPeriod")]
  public Element _OccurredPeriod { get; set; }
  /// <summary>
  /// The period can be a little arbitrary; where possible, the time should correspond to human assessment of the activity time.
  /// </summary>
  [JsonPropertyName("occurredDateTime")]
  public string? OccurredDateTime { get; set; }
  [JsonPropertyName("_occurredDateTime")]
  public Element _OccurredDateTime { get; set; }
  /// <summary>
  /// For example: Where an OAuth token authorizes, the unique identifier from the OAuth token is placed into the policy element Where a policy engine (e.g. XACML) holds policy logic, the unique policy identifier is placed into the policy element.
  /// </summary>
  [JsonPropertyName("policy")]
  public string?[] Policy { get; set; }
  [JsonPropertyName("_policy")]
  public Element[] _Policy { get; set; }
  /// <summary>
  /// The reason that the activity was taking place.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// This can be a little different from the time stamp on the resource if there is a delay between recording the event and updating the provenance and target resource.
  /// </summary>
  [JsonPropertyName("recorded")]
  public string Recorded { get; set; }
  [JsonPropertyName("_recorded")]
  public Element _Recorded { get; set; }
  /// <summary>
  /// A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
  /// </summary>
  [JsonPropertyName("signature")]
  public Signature?[] Signature { get; set; }
  [JsonPropertyName("_signature")]
  public Element[] _Signature { get; set; }
  /// <summary>
  /// Target references are usually version specific, but might not be, if a version has not been assigned or if the provenance information is part of the set of resources being maintained (i.e. a document). When using the RESTful API, the identity of the resource might not be known (especially not the version specific one); the client may either submit the resource first, and then the provenance, or it may submit both using a single transaction. See the notes on transaction for further discussion.
  /// </summary>
  [JsonPropertyName("target")]
  public Reference[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
}
/// <summary>
/// If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.
/// </summary>
public class QuestionnaireItemEnableWhen : BackboneElement {
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerBoolean")]
  public bool AnswerBoolean { get; set; }
  [JsonPropertyName("_answerBoolean")]
  public Element _AnswerBoolean { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerDecimal")]
  public decimal AnswerDecimal { get; set; }
  [JsonPropertyName("_answerDecimal")]
  public Element _AnswerDecimal { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerInteger")]
  public int AnswerInteger { get; set; }
  [JsonPropertyName("_answerInteger")]
  public Element _AnswerInteger { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerDate")]
  public string AnswerDate { get; set; }
  [JsonPropertyName("_answerDate")]
  public Element _AnswerDate { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerDateTime")]
  public string AnswerDateTime { get; set; }
  [JsonPropertyName("_answerDateTime")]
  public Element _AnswerDateTime { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerTime")]
  public string AnswerTime { get; set; }
  [JsonPropertyName("_answerTime")]
  public Element _AnswerTime { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerString")]
  public string AnswerString { get; set; }
  [JsonPropertyName("_answerString")]
  public Element _AnswerString { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerCoding")]
  public Coding AnswerCoding { get; set; }
  [JsonPropertyName("_answerCoding")]
  public Element _AnswerCoding { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerQuantity")]
  public Quantity AnswerQuantity { get; set; }
  [JsonPropertyName("_answerQuantity")]
  public Element _AnswerQuantity { get; set; }
  /// <summary>
  /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  /// </summary>
  [JsonPropertyName("answerReference")]
  public Reference AnswerReference { get; set; }
  [JsonPropertyName("_answerReference")]
  public Element _AnswerReference { get; set; }
  /// <summary>
  /// Specifies the criteria by which the question is enabled.
  /// </summary>
  [JsonPropertyName("operator")]
  public string Operator { get; set; }
  [JsonPropertyName("_operator")]
  public Element _Operator { get; set; }
  /// <summary>
  /// If multiple question occurrences are present for the same question (same linkId), then this refers to the nearest question occurrence reachable by tracing first the "ancestor" axis and then the "preceding" axis and then the "following" axis.
  /// </summary>
  [JsonPropertyName("question")]
  public string Question { get; set; }
  [JsonPropertyName("_question")]
  public Element _Question { get; set; }
}
/// <summary>
/// Code Values for the Questionnaire.item.enableWhen.operator field
/// </summary>
public sealed class QuestionnaireItemEnableWhenOperatorCodes {
  public const string EXISTS = "exists";
  public const string EQUALS = "=";
  public const string NOT_EQUALS = "!=";
  public const string GREATER_THAN = ">";
  public const string LESS_THAN = "<";
  public const string GREATER_THAN_OR_EQUALS = ">=";
  public const string LESS_THAN_OR_EQUALS = "<=";
}
/// <summary>
/// This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
/// </summary>
public class QuestionnaireItemAnswerOption : BackboneElement {
  /// <summary>
  /// Use this instead of initial[v] if answerValueSet is present.
  /// </summary>
  [JsonPropertyName("initialSelected")]
  public bool? InitialSelected { get; set; }
  [JsonPropertyName("_initialSelected")]
  public Element _InitialSelected { get; set; }
  /// <summary>
  /// The data type of the value must agree with the item.type.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// The data type of the value must agree with the item.type.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// The data type of the value must agree with the item.type.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// The data type of the value must agree with the item.type.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The data type of the value must agree with the item.type.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// The data type of the value must agree with the item.type.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
}
/// <summary>
/// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.
/// </summary>
public class QuestionnaireItemInitial : BackboneElement {
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// The type of the initial value must be consistent with the type of the item.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
}
/// <summary>
/// The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
/// </summary>
public class QuestionnaireItem : BackboneElement {
  /// <summary>
  /// This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
  /// </summary>
  [JsonPropertyName("answerOption")]
  public QuestionnaireItemAnswerOption?[] AnswerOption { get; set; }
  [JsonPropertyName("_answerOption")]
  public Element[] _AnswerOption { get; set; }
  /// <summary>
  /// LOINC defines many useful value sets for questionnaire responses. See [LOINC Answer Lists](loinc.html#alist). The value may come from the ElementDefinition referred to by .definition.
  /// </summary>
  [JsonPropertyName("answerValueSet")]
  public string? AnswerValueSet { get; set; }
  [JsonPropertyName("_answerValueSet")]
  public Element _AnswerValueSet { get; set; }
  /// <summary>
  /// The value may come from the ElementDefinition referred to by .definition.
  /// </summary>
  [JsonPropertyName("code")]
  public Coding?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// The uri refers to an ElementDefinition in a [StructureDefinition](structuredefinition.html#) and always starts with the [canonical URL](references.html#canonical) for the target resource. When referring to a StructureDefinition, a fragment identifier is used to specify the element definition by its id [Element.id](types-definitions.html#Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x]. In the absence of a fragment identifier, the first/root element definition in the target is the matching element definition.
  /// </summary>
  [JsonPropertyName("definition")]
  public string? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// This element must be specified if more than one enableWhen value is provided.
  /// </summary>
  [JsonPropertyName("enableBehavior")]
  public string? EnableBehavior { get; set; }
  [JsonPropertyName("_enableBehavior")]
  public Element _EnableBehavior { get; set; }
  /// <summary>
  /// If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.
  /// </summary>
  [JsonPropertyName("enableWhen")]
  public QuestionnaireItemEnableWhen?[] EnableWhen { get; set; }
  [JsonPropertyName("_enableWhen")]
  public Element[] _EnableWhen { get; set; }
  /// <summary>
  /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.
  /// </summary>
  [JsonPropertyName("initial")]
  public QuestionnaireItemInitial?[] Initial { get; set; }
  [JsonPropertyName("_initial")]
  public Element[] _Initial { get; set; }
  /// <summary>
  /// There is no specified limit to the depth of nesting.  However, Questionnaire authors are encouraged to consider the impact on the user and user interface of overly deep nesting.
  /// </summary>
  [JsonPropertyName("item")]
  public QuestionnaireItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
  /// </summary>
  [JsonPropertyName("linkId")]
  public string LinkId { get; set; }
  [JsonPropertyName("_linkId")]
  public Element _LinkId { get; set; }
  /// <summary>
  /// For base64binary, reflects the number of characters representing the encoded data, not the number of bytes of the binary data. The value may come from the ElementDefinition referred to by .definition.
  /// </summary>
  [JsonPropertyName("maxLength")]
  public int? MaxLength { get; set; }
  [JsonPropertyName("_maxLength")]
  public Element _MaxLength { get; set; }
  /// <summary>
  /// These are generally unique within a questionnaire, though this is not guaranteed. Some questionnaires may have multiple questions with the same label with logic to control which gets exposed.  Typically, these won't be used for "display" items, though such use is not prohibited.  Systems SHOULD NOT generate their own prefixes if prefixes are defined for any items within a Questionnaire.
  /// </summary>
  [JsonPropertyName("prefix")]
  public string? Prefix { get; set; }
  [JsonPropertyName("_prefix")]
  public Element _Prefix { get; set; }
  /// <summary>
  /// The value of readOnly elements can be established by asserting  extensions for defaultValues, linkages that support pre-population and/or extensions that support calculation based on other answers.
  /// </summary>
  [JsonPropertyName("readOnly")]
  public bool? ReadOnly { get; set; }
  [JsonPropertyName("_readOnly")]
  public Element _ReadOnly { get; set; }
  /// <summary>
  /// If a question is marked as repeats=true, then multiple answers can be provided for the question in the corresponding QuestionnaireResponse.  When rendering the questionnaire, it is up to the rendering software whether to render the question text for each answer repetition (i.e. "repeat the question") or to simply allow entry/selection of multiple answers for the question (repeat the answers).  Which is most appropriate visually may depend on the type of answer as well as whether there are nested items.
  /// 
  /// The resulting QuestionnaireResponse will be populated the same way regardless of rendering - one 'question' item with multiple answer values.
  /// 
  ///  The value may come from the ElementDefinition referred to by .definition.
  /// </summary>
  [JsonPropertyName("repeats")]
  public bool? Repeats { get; set; }
  [JsonPropertyName("_repeats")]
  public Element _Repeats { get; set; }
  /// <summary>
  /// Questionnaire.item.required only has meaning for elements that are conditionally enabled with enableWhen if the condition evaluates to true.  If an item that contains other items is marked as required, that does not automatically make the contained elements required (though required groups must contain at least one child element). The value may come from the ElementDefinition referred to by .definition.
  /// </summary>
  [JsonPropertyName("required")]
  public bool? Required { get; set; }
  [JsonPropertyName("_required")]
  public Element _Required { get; set; }
  /// <summary>
  /// When using this element to represent the name of a section, use group type item and also make sure to limit the text element to a short string suitable for display as a section heading.  Group item instructions should be included as a display type item within the group.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
  /// <summary>
  /// Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Questionnaire.item.enableBehavior field
/// </summary>
public sealed class QuestionnaireItemEnableBehaviorCodes {
  public const string ALL = "all";
  public const string ANY = "any";
}
/// <summary>
/// Code Values for the Questionnaire.item.type field
/// </summary>
public sealed class QuestionnaireItemTypeCodes {
  public const string GROUP = "group";
  public const string DISPLAY = "display";
  public const string BOOLEAN = "boolean";
  public const string VAL_DECIMAL = "decimal";
  public const string INTEGER = "integer";
  public const string DATE = "date";
  public const string DATETIME = "dateTime";
}
/// <summary>
/// To support structured, hierarchical registration of data gathered using digital forms and other questionnaires.  Questionnaires provide greater control over presentation and allow capture of data in a domain-independent way (i.e. capturing information that would otherwise require multiple distinct types of resources).
/// </summary>
public class Questionnaire : MetadataResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Questionnaire";
  /// <summary>
  /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// An identifier for this question or group of questions in a particular terminology such as LOINC.
  /// </summary>
  [JsonPropertyName("code")]
  public Coding?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the questionnaire. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The URL of a Questionnaire that this Questionnaire is based on.
  /// </summary>
  [JsonPropertyName("derivedFrom")]
  public string?[] DerivedFrom { get; set; }
  [JsonPropertyName("_derivedFrom")]
  public Element[] _DerivedFrom { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the questionnaire was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the questionnaire as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the questionnaire is presumed to be the predominant language in the place the questionnaire was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The effective period for a questionnaire  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// Allows filtering of questionnaires that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this questionnaire outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
  /// </summary>
  [JsonPropertyName("item")]
  public QuestionnaireItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// It may be possible for the questionnaire to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this date follows the original approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the questionnaire is the organization or individual primarily responsible for the maintenance and upkeep of the questionnaire. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the questionnaire. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the questionnaire. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this questionnaire.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Allows filtering of questionnaires that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// If none are specified, then the subject is unlimited.
  /// </summary>
  [JsonPropertyName("subjectType")]
  public string?[] SubjectType { get; set; }
  [JsonPropertyName("_subjectType")]
  public Element[] _SubjectType { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// The name of the referenced questionnaire can be conveyed using the http://hl7.org/fhir/StructureDefinition/display extension.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different questionnaire instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the questionnaire with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the Questionnaire.status field
/// </summary>
public sealed class QuestionnaireStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Code Values for the Questionnaire.subjectType field
/// </summary>
public sealed class QuestionnaireSubjectTypeCodes {
  public const string RESOURCE = "Resource";
}
/// <summary>
/// The value is nested because we cannot have a repeating structure that has variable type.
/// </summary>
public class QuestionnaireResponseItemAnswer : BackboneElement {
  /// <summary>
  /// Nested groups and/or questions found within this particular answer.
  /// </summary>
  [JsonPropertyName("item")]
  public QuestionnaireResponseItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal? ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int? ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string? ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string? ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string? ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string? ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment? ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding? ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// More complex structures (Attachment, Resource and Quantity) will typically be limited to electronic forms that can expose an appropriate user interface to capture the components and enforce the constraints of a complex data type.  Additional complex types can be introduced through extensions. Must match the datatype specified by Questionnaire.item.type in the corresponding Questionnaire.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference? ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
}
/// <summary>
/// Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
/// </summary>
public class QuestionnaireResponseItem : BackboneElement {
  /// <summary>
  /// The value is nested because we cannot have a repeating structure that has variable type.
  /// </summary>
  [JsonPropertyName("answer")]
  public QuestionnaireResponseItemAnswer?[] Answer { get; set; }
  [JsonPropertyName("_answer")]
  public Element[] _Answer { get; set; }
  /// <summary>
  /// The ElementDefinition must be in a [StructureDefinition](structuredefinition.html#), and must have a fragment identifier that identifies the specific data element by its id (Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x].
  /// 
  /// There is no need for this element if the item pointed to by the linkId has a definition listed.
  /// </summary>
  [JsonPropertyName("definition")]
  public string? Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// Questions or sub-groups nested beneath a question or group.
  /// </summary>
  [JsonPropertyName("item")]
  public QuestionnaireResponseItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.
  /// </summary>
  [JsonPropertyName("linkId")]
  public string LinkId { get; set; }
  [JsonPropertyName("_linkId")]
  public Element _LinkId { get; set; }
  /// <summary>
  /// Text that is displayed above the contents of the group or as the text of the question being answered.
  /// </summary>
  [JsonPropertyName("text")]
  public string? Text { get; set; }
  [JsonPropertyName("_text")]
  public Element _Text { get; set; }
}
/// <summary>
/// To support structured, hierarchical reporting of data gathered using digital forms and other questionnaires.
/// </summary>
public class QuestionnaireResponse : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "QuestionnaireResponse";
  /// <summary>
  /// Mapping a subject's answers to multiple choice options and determining what to put in the textual answer is a matter of interpretation.  Authoring by device would indicate that some portion of the questionnaire had been auto-populated.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// May be different from the lastUpdateTime of the resource itself, because that reflects when the data was known to the server, not when the data was captured.
  /// 
  /// This element is optional to allow for systems that might not know the value, however it SHOULD be populated if possible.
  /// </summary>
  [JsonPropertyName("authored")]
  public string? Authored { get; set; }
  [JsonPropertyName("_authored")]
  public Element _Authored { get; set; }
  /// <summary>
  /// The order, proposal or plan that is fulfilled in whole or in part by this QuestionnaireResponse.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter. A questionnaire that was initiated during an encounter but not fully completed during the encounter would still generally be associated with the encounter.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// A business identifier assigned to a particular completed (or partially completed) questionnaire.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Groups cannot have answers and therefore must nest directly within item. When dealing with questions, nesting must occur within each answer because some questions may have multiple answers (and the nesting occurs for each answer).
  /// </summary>
  [JsonPropertyName("item")]
  public QuestionnaireResponseItem?[] Item { get; set; }
  [JsonPropertyName("_item")]
  public Element[] _Item { get; set; }
  /// <summary>
  /// Composition of questionnaire responses will be handled by the parent questionnaire having answers that reference the child questionnaire.  For relationships to referrals, and other types of requests, use basedOn.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// If a QuestionnaireResponse references a Questionnaire, then the QuestionnaireResponse structure must be consistent with the Questionnaire (i.e. questions must be organized into the same groups, nested questions must still be nested, etc.).
  /// </summary>
  [JsonPropertyName("questionnaire")]
  public string? Questionnaire { get; set; }
  [JsonPropertyName("_questionnaire")]
  public Element _Questionnaire { get; set; }
  /// <summary>
  /// If not specified, no inference can be made about who provided the data.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference? Source { get; set; }
  [JsonPropertyName("_source")]
  public Element _Source { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// If the Questionnaire declared a subjectType, the resource pointed to by this element must be an instance of one of the listed types.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the QuestionnaireResponse.status field
/// </summary>
public sealed class QuestionnaireResponseStatusCodes {
  public const string IN_PROGRESS = "in-progress";
  public const string COMPLETED = "completed";
  public const string AMENDED = "amended";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string STOPPED = "stopped";
}
/// <summary>
/// Other dates associated with the authorization. It is common for an authorization to have renewal dates, initial time limited phases and so on.
/// </summary>
public class RegulatedAuthorizationRelatedDate : BackboneElement {
  /// <summary>
  /// Another date associated with the authorization.
  /// </summary>
  [JsonPropertyName("datePeriod")]
  public Period DatePeriod { get; set; }
  [JsonPropertyName("_datePeriod")]
  public Element _DatePeriod { get; set; }
  /// <summary>
  /// Another date associated with the authorization.
  /// </summary>
  [JsonPropertyName("dateDateTime")]
  public string DateDateTime { get; set; }
  [JsonPropertyName("_dateDateTime")]
  public Element _DateDateTime { get; set; }
  /// <summary>
  /// Type of this date, for example the data exclusitity period for a medicinal product.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// The case or regulatory procedure for granting or amending a marketing authorization.
/// </summary>
public class RegulatedAuthorizationCase : BackboneElement {
  /// <summary>
  /// Applcations submitted to obtain a marketing authorization. Steps within the longer running case or procedure.
  /// </summary>
  [JsonPropertyName("application")]
  public RegulatedAuthorizationCase?[] Application { get; set; }
  [JsonPropertyName("_application")]
  public Element[] _Application { get; set; }
  /// <summary>
  /// Relevant date for this of case.
  /// </summary>
  [JsonPropertyName("datePeriod")]
  public Period? DatePeriod { get; set; }
  [JsonPropertyName("_datePeriod")]
  public Element _DatePeriod { get; set; }
  /// <summary>
  /// Relevant date for this of case.
  /// </summary>
  [JsonPropertyName("dateDateTime")]
  public string? DateDateTime { get; set; }
  [JsonPropertyName("_dateDateTime")]
  public Element _DateDateTime { get; set; }
  /// <summary>
  /// Identifier by which this case can be referenced.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// The status associated with the case.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The defining type of case.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class RegulatedAuthorization : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "RegulatedAuthorization";
  /// <summary>
  /// The legal or regulatory framework against which this authorization is granted, or other reasons for it.
  /// </summary>
  [JsonPropertyName("basis")]
  public CodeableConcept?[] Basis { get; set; }
  [JsonPropertyName("_basis")]
  public Element[] _Basis { get; set; }
  /// <summary>
  /// The case or regulatory procedure for granting or amending a marketing authorization.
  /// </summary>
  [JsonPropertyName("case")]
  public RegulatedAuthorizationCase? Case { get; set; }
  [JsonPropertyName("_case")]
  public Element _Case { get; set; }
  /// <summary>
  /// General textual supporting information.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Marketing Authorization Holder.
  /// </summary>
  [JsonPropertyName("holder")]
  public Reference? Holder { get; set; }
  [JsonPropertyName("_holder")]
  public Element _Holder { get; set; }
  /// <summary>
  /// Business identifier for the authorization, typically assigned by the authorizing body.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Condition for which the medicinal use applies.
  /// </summary>
  [JsonPropertyName("indicationCodeableConcept")]
  public CodeableConcept? IndicationCodeableConcept { get; set; }
  [JsonPropertyName("_indicationCodeableConcept")]
  public Element _IndicationCodeableConcept { get; set; }
  /// <summary>
  /// Condition for which the medicinal use applies.
  /// </summary>
  [JsonPropertyName("indicationReference")]
  public Reference? IndicationReference { get; set; }
  [JsonPropertyName("_indicationReference")]
  public Element _IndicationReference { get; set; }
  /// <summary>
  /// The intended use of the product, e.g. prevention, treatment.
  /// </summary>
  [JsonPropertyName("intendedUse")]
  public CodeableConcept? IntendedUse { get; set; }
  [JsonPropertyName("_intendedUse")]
  public Element _IntendedUse { get; set; }
  /// <summary>
  /// Authorization in areas within a country.
  /// </summary>
  [JsonPropertyName("jurisdictionalAuthorization")]
  public Reference?[] JurisdictionalAuthorization { get; set; }
  [JsonPropertyName("_jurisdictionalAuthorization")]
  public Element[] _JurisdictionalAuthorization { get; set; }
  /// <summary>
  /// The region (country, jurisdiction etc.) in which the marketing authorization has been granted.
  /// </summary>
  [JsonPropertyName("region")]
  public CodeableConcept?[] Region { get; set; }
  [JsonPropertyName("_region")]
  public Element[] _Region { get; set; }
  /// <summary>
  /// Medicines Regulatory Agency.
  /// </summary>
  [JsonPropertyName("regulator")]
  public Reference? Regulator { get; set; }
  [JsonPropertyName("_regulator")]
  public Element _Regulator { get; set; }
  /// <summary>
  /// Other dates associated with the authorization. It is common for an authorization to have renewal dates, initial time limited phases and so on.
  /// </summary>
  [JsonPropertyName("relatedDate")]
  public RegulatedAuthorizationRelatedDate?[] RelatedDate { get; set; }
  [JsonPropertyName("_relatedDate")]
  public Element[] _RelatedDate { get; set; }
  /// <summary>
  /// The status that is authorised e.g. approved. Intermediate states can be tracked with cases and applications.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The date at which the given status became applicable.
  /// </summary>
  [JsonPropertyName("statusDate")]
  public string? StatusDate { get; set; }
  [JsonPropertyName("_statusDate")]
  public Element _StatusDate { get; set; }
  /// <summary>
  /// The type of product or service that is being authorized.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// Overall type of this authorization, for example drug marketing approval, orphan drug designation.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The beginning of the time period in which the marketing authorization is in the specific status shall be specified A complete date consisting of day, month and year shall be specified using the ISO 8601 date format.
  /// </summary>
  [JsonPropertyName("validityPeriod")]
  public Period? ValidityPeriod { get; set; }
  [JsonPropertyName("_validityPeriod")]
  public Element _ValidityPeriod { get; set; }
}
/// <summary>
/// If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
/// </summary>
public class RelatedPersonCommunication : BackboneElement {
  /// <summary>
  /// The structure aa-BB with this exact casing is one the most widely used notations for locale. However not all systems actually code this but instead have it as free text. Hence CodeableConcept instead of code as the data type.
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// This language is specifically identified for communicating healthcare information.
  /// </summary>
  [JsonPropertyName("preferred")]
  public bool? Preferred { get; set; }
  [JsonPropertyName("_preferred")]
  public Element _Preferred { get; set; }
}
/// <summary>
/// Need to track persons related to the patient or the healthcare process.
/// </summary>
public class RelatedPerson : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "RelatedPerson";
  /// <summary>
  /// This element is labeled as a modifier because it may be used to mark that the resource was created in error.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// Address where the related person can be contacted or visited.
  /// </summary>
  [JsonPropertyName("address")]
  public Address?[] Address { get; set; }
  [JsonPropertyName("_address")]
  public Element[] _Address { get; set; }
  /// <summary>
  /// The date on which the related person was born.
  /// </summary>
  [JsonPropertyName("birthDate")]
  public string? BirthDate { get; set; }
  [JsonPropertyName("_birthDate")]
  public Element _BirthDate { get; set; }
  /// <summary>
  /// If no language is specified, this *implies* that the default local language is spoken.  If you need to convey proficiency for multiple modes, then you need multiple RelatedPerson.Communication associations.   If the RelatedPerson does not speak the default local language, then the Interpreter Required Standard can be used to explicitly declare that an interpreter is required.
  /// </summary>
  [JsonPropertyName("communication")]
  public RelatedPersonCommunication?[] Communication { get; set; }
  [JsonPropertyName("_communication")]
  public Element[] _Communication { get; set; }
  /// <summary>
  /// Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.
  /// </summary>
  [JsonPropertyName("gender")]
  public string? Gender { get; set; }
  [JsonPropertyName("_gender")]
  public Element _Gender { get; set; }
  /// <summary>
  /// Identifier for a person within a particular scope.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// A name associated with the person.
  /// </summary>
  [JsonPropertyName("name")]
  public HumanName?[] Name { get; set; }
  [JsonPropertyName("_name")]
  public Element[] _Name { get; set; }
  /// <summary>
  /// The patient this person is related to.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// Image of the person.
  /// </summary>
  [JsonPropertyName("photo")]
  public Attachment?[] Photo { get; set; }
  [JsonPropertyName("_photo")]
  public Element[] _Photo { get; set; }
  /// <summary>
  /// The nature of the relationship between a patient and the related person.
  /// </summary>
  [JsonPropertyName("relationship")]
  public CodeableConcept?[] Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element[] _Relationship { get; set; }
  /// <summary>
  /// Person may have multiple ways to be contacted with different uses or applicable periods.  May need to have options for contacting the person urgently, and also to help with identification.
  /// </summary>
  [JsonPropertyName("telecom")]
  public ContactPoint?[] Telecom { get; set; }
  [JsonPropertyName("_telecom")]
  public Element[] _Telecom { get; set; }
}
/// <summary>
/// Code Values for the RelatedPerson.gender field
/// </summary>
public sealed class RelatedPersonGenderCodes {
  public const string MALE = "male";
  public const string FEMALE = "female";
  public const string OTHER = "other";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
/// </summary>
public class RequestGroupActionCondition : BackboneElement {
  /// <summary>
  /// The expression may be inlined, or may be a reference to a named expression within a logic library referenced by the library element.
  /// </summary>
  [JsonPropertyName("expression")]
  public Expression? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// Applicability criteria are used to determine immediate applicability when a plan definition is applied to a given context. Start and stop criteria are carried through application and used to describe enter/exit criteria for an action.
  /// </summary>
  [JsonPropertyName("kind")]
  public string Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
}
/// <summary>
/// Code Values for the RequestGroup.action.condition.kind field
/// </summary>
public sealed class RequestGroupActionConditionKindCodes {
  public const string APPLICABILITY = "applicability";
  public const string START = "start";
  public const string STOP = "stop";
}
/// <summary>
/// A relationship to another action such as "before" or "30-60 minutes after start of".
/// </summary>
public class RequestGroupActionRelatedAction : BackboneElement {
  /// <summary>
  /// The element id of the action this is related to.
  /// </summary>
  [JsonPropertyName("actionId")]
  public string ActionId { get; set; }
  [JsonPropertyName("_actionId")]
  public Element _ActionId { get; set; }
  /// <summary>
  /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
  /// </summary>
  [JsonPropertyName("offsetDuration")]
  public Duration? OffsetDuration { get; set; }
  [JsonPropertyName("_offsetDuration")]
  public Element _OffsetDuration { get; set; }
  /// <summary>
  /// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
  /// </summary>
  [JsonPropertyName("offsetRange")]
  public Range? OffsetRange { get; set; }
  [JsonPropertyName("_offsetRange")]
  public Element _OffsetRange { get; set; }
  /// <summary>
  /// The relationship of this action to the related action.
  /// </summary>
  [JsonPropertyName("relationship")]
  public string Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element _Relationship { get; set; }
}
/// <summary>
/// Code Values for the RequestGroup.action.relatedAction.relationship field
/// </summary>
public sealed class RequestGroupActionRelatedActionRelationshipCodes {
  public const string BEFORE_START = "before-start";
  public const string BEFORE = "before";
  public const string BEFORE_END = "before-end";
  public const string CONCURRENT_WITH_START = "concurrent-with-start";
  public const string CONCURRENT = "concurrent";
  public const string CONCURRENT_WITH_END = "concurrent-with-end";
  public const string AFTER_START = "after-start";
  public const string AFTER = "after";
  public const string AFTER_END = "after-end";
}
/// <summary>
/// The actions, if any, produced by the evaluation of the artifact.
/// </summary>
public class RequestGroupAction : BackboneElement {
  /// <summary>
  /// Sub actions.
  /// </summary>
  [JsonPropertyName("action")]
  public RequestGroupAction?[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
  /// <summary>
  /// Defines whether the action can be selected multiple times.
  /// </summary>
  [JsonPropertyName("cardinalityBehavior")]
  public string? CardinalityBehavior { get; set; }
  [JsonPropertyName("_cardinalityBehavior")]
  public Element _CardinalityBehavior { get; set; }
  /// <summary>
  /// A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// When multiple conditions of the same kind are present, the effects are combined using AND semantics, so the overall condition is true only if all of the conditions are true.
  /// </summary>
  [JsonPropertyName("condition")]
  public RequestGroupActionCondition?[] Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element[] _Condition { get; set; }
  /// <summary>
  /// A short description of the action used to provide a summary to display to the user.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
  /// </summary>
  [JsonPropertyName("documentation")]
  public RelatedArtifact?[] Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element[] _Documentation { get; set; }
  /// <summary>
  /// Defines the grouping behavior for the action and its children.
  /// </summary>
  [JsonPropertyName("groupingBehavior")]
  public string? GroupingBehavior { get; set; }
  [JsonPropertyName("_groupingBehavior")]
  public Element _GroupingBehavior { get; set; }
  /// <summary>
  /// The participant that should perform or be responsible for this action.
  /// </summary>
  [JsonPropertyName("participant")]
  public Reference?[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// Defines whether the action should usually be preselected.
  /// </summary>
  [JsonPropertyName("precheckBehavior")]
  public string? PrecheckBehavior { get; set; }
  [JsonPropertyName("_precheckBehavior")]
  public Element _PrecheckBehavior { get; set; }
  /// <summary>
  /// A user-visible prefix for the action.
  /// </summary>
  [JsonPropertyName("prefix")]
  public string? Prefix { get; set; }
  [JsonPropertyName("_prefix")]
  public Element _Prefix { get; set; }
  /// <summary>
  /// Indicates how quickly the action should be addressed with respect to other actions.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// A relationship to another action such as "before" or "30-60 minutes after start of".
  /// </summary>
  [JsonPropertyName("relatedAction")]
  public RequestGroupActionRelatedAction?[] RelatedAction { get; set; }
  [JsonPropertyName("_relatedAction")]
  public Element[] _RelatedAction { get; set; }
  /// <summary>
  /// Defines expectations around whether an action is required.
  /// </summary>
  [JsonPropertyName("requiredBehavior")]
  public string? RequiredBehavior { get; set; }
  [JsonPropertyName("_requiredBehavior")]
  public Element _RequiredBehavior { get; set; }
  /// <summary>
  /// The target resource SHALL be a [Request](request.html) resource with a Request.intent set to "option".
  /// </summary>
  [JsonPropertyName("resource")]
  public Reference? Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element _Resource { get; set; }
  /// <summary>
  /// Defines the selection behavior for the action and its children.
  /// </summary>
  [JsonPropertyName("selectionBehavior")]
  public string? SelectionBehavior { get; set; }
  [JsonPropertyName("_selectionBehavior")]
  public Element _SelectionBehavior { get; set; }
  /// <summary>
  /// A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
  /// </summary>
  [JsonPropertyName("textEquivalent")]
  public string? TextEquivalent { get; set; }
  [JsonPropertyName("_textEquivalent")]
  public Element _TextEquivalent { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingDateTime")]
  public string? TimingDateTime { get; set; }
  [JsonPropertyName("_timingDateTime")]
  public Element _TimingDateTime { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingAge")]
  public Age? TimingAge { get; set; }
  [JsonPropertyName("_timingAge")]
  public Element _TimingAge { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingPeriod")]
  public Period? TimingPeriod { get; set; }
  [JsonPropertyName("_timingPeriod")]
  public Element _TimingPeriod { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingDuration")]
  public Duration? TimingDuration { get; set; }
  [JsonPropertyName("_timingDuration")]
  public Element _TimingDuration { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingRange")]
  public Range? TimingRange { get; set; }
  [JsonPropertyName("_timingRange")]
  public Element _TimingRange { get; set; }
  /// <summary>
  /// An optional value describing when the action should be performed.
  /// </summary>
  [JsonPropertyName("timingTiming")]
  public Timing? TimingTiming { get; set; }
  [JsonPropertyName("_timingTiming")]
  public Element _TimingTiming { get; set; }
  /// <summary>
  /// The title of the action displayed to a user.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// The type of action to perform (create, update, remove).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the RequestGroup.action.cardinalityBehavior field
/// </summary>
public sealed class RequestGroupActionCardinalityBehaviorCodes {
  public const string SINGLE = "single";
  public const string MULTIPLE = "multiple";
}
/// <summary>
/// Code Values for the RequestGroup.action.groupingBehavior field
/// </summary>
public sealed class RequestGroupActionGroupingBehaviorCodes {
  public const string VISUAL_GROUP = "visual-group";
  public const string LOGICAL_GROUP = "logical-group";
  public const string SENTENCE_GROUP = "sentence-group";
}
/// <summary>
/// Code Values for the RequestGroup.action.precheckBehavior field
/// </summary>
public sealed class RequestGroupActionPrecheckBehaviorCodes {
  public const string YES = "yes";
  public const string NO = "no";
}
/// <summary>
/// Code Values for the RequestGroup.action.priority field
/// </summary>
public sealed class RequestGroupActionPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the RequestGroup.action.requiredBehavior field
/// </summary>
public sealed class RequestGroupActionRequiredBehaviorCodes {
  public const string MUST = "must";
  public const string COULD = "could";
  public const string MUST_UNLESS_DOCUMENTED = "must-unless-documented";
}
/// <summary>
/// Code Values for the RequestGroup.action.selectionBehavior field
/// </summary>
public sealed class RequestGroupActionSelectionBehaviorCodes {
  public const string ANY = "any";
  public const string ALL = "all";
  public const string ALL_OR_NONE = "all-or-none";
  public const string EXACTLY_ONE = "exactly-one";
  public const string AT_MOST_ONE = "at-most-one";
  public const string ONE_OR_MORE = "one-or-more";
}
public class RequestGroup : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "RequestGroup";
  /// <summary>
  /// The actions, if any, produced by the evaluation of the artifact.
  /// </summary>
  [JsonPropertyName("action")]
  public RequestGroupAction?[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
  /// <summary>
  /// Provides a reference to the author of the request group.
  /// </summary>
  [JsonPropertyName("author")]
  public Reference? Author { get; set; }
  [JsonPropertyName("_author")]
  public Element _Author { get; set; }
  /// <summary>
  /// Indicates when the request group was created.
  /// </summary>
  [JsonPropertyName("authoredOn")]
  public string? AuthoredOn { get; set; }
  [JsonPropertyName("_authoredOn")]
  public Element _AuthoredOn { get; set; }
  /// <summary>
  /// A plan, proposal or order that is fulfilled in whole or in part by this request.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// This element can be used to provide a code that captures the meaning of the request group as a whole, as opposed to the code of the action element, which captures the meaning of the individual actions within the request group.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Describes the context of the request group, if any.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition.  Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
  /// </summary>
  [JsonPropertyName("groupIdentifier")]
  public Identifier? GroupIdentifier { get; set; }
  [JsonPropertyName("_groupIdentifier")]
  public Element _GroupIdentifier { get; set; }
  /// <summary>
  /// Allows a service to provide a unique, business identifier for the request.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
  /// </summary>
  [JsonPropertyName("intent")]
  public string Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// Provides a mechanism to communicate additional information about the response.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Indicates how quickly the request should be addressed with respect to other requests.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// Describes the reason for the request group in coded or textual form.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The replacement could be because the initial request was immediately rejected (due to an issue) or because the previous request was completed, but the need for the action described by the request remains ongoing.
  /// </summary>
  [JsonPropertyName("replaces")]
  public Reference?[] Replaces { get; set; }
  [JsonPropertyName("_replaces")]
  public Element[] _Replaces { get; set; }
  /// <summary>
  /// The current state of the request. For request groups, the status reflects the status of all the requests in the group.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The subject for which the request group was created.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the RequestGroup.intent field
/// </summary>
public sealed class RequestGroupIntentCodes {
  public const string PROPOSAL = "proposal";
  public const string PLAN = "plan";
  public const string DIRECTIVE = "directive";
  public const string ORDER = "order";
  public const string ORIGINAL_ORDER = "original-order";
  public const string REFLEX_ORDER = "reflex-order";
  public const string FILLER_ORDER = "filler-order";
  public const string INSTANCE_ORDER = "instance-order";
  public const string OPTION = "option";
}
/// <summary>
/// Code Values for the RequestGroup.priority field
/// </summary>
public sealed class RequestGroupPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the RequestGroup.status field
/// </summary>
public sealed class RequestGroupStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string ON_HOLD = "on-hold";
  public const string REVOKED = "revoked";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
/// </summary>
public class ResearchStudyArm : BackboneElement {
  /// <summary>
  /// A succinct description of the path through the study that would be followed by a subject adhering to this arm.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Unique, human-readable label for this arm of the study.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Categorization of study arm, e.g. experimental, active comparator, placebo comparater.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
/// </summary>
public class ResearchStudyObjective : BackboneElement {
  /// <summary>
  /// Unique, human-readable label for this objective of the study.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The kind of study objective.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class ResearchStudy : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ResearchStudy";
  /// <summary>
  /// Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
  /// </summary>
  [JsonPropertyName("arm")]
  public ResearchStudyArm?[] Arm { get; set; }
  [JsonPropertyName("_arm")]
  public Element[] _Arm { get; set; }
  /// <summary>
  /// Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion "healthy volunteer", but the target condition code would be a Lupus SNOMED code.
  /// </summary>
  [JsonPropertyName("condition")]
  public CodeableConcept?[] Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element[] _Condition { get; set; }
  /// <summary>
  /// Contact details to assist a user in learning more about or engaging with the study.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A full description of how the study is being conducted.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The Group referenced should not generally enumerate specific subjects.  Subjects will be linked to the study using the ResearchSubject resource.
  /// </summary>
  [JsonPropertyName("enrollment")]
  public Reference?[] Enrollment { get; set; }
  [JsonPropertyName("_enrollment")]
  public Element[] _Enrollment { get; set; }
  /// <summary>
  /// The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.
  /// </summary>
  [JsonPropertyName("focus")]
  public CodeableConcept?[] Focus { get; set; }
  [JsonPropertyName("_focus")]
  public Element[] _Focus { get; set; }
  /// <summary>
  /// Identifiers assigned to this research study by the sponsor or other systems.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Key terms to aid in searching for or filtering the study.
  /// </summary>
  [JsonPropertyName("keyword")]
  public CodeableConcept?[] Keyword { get; set; }
  [JsonPropertyName("_keyword")]
  public Element[] _Keyword { get; set; }
  /// <summary>
  /// Indicates a country, state or other region where the study is taking place.
  /// </summary>
  [JsonPropertyName("location")]
  public CodeableConcept?[] Location { get; set; }
  [JsonPropertyName("_location")]
  public Element[] _Location { get; set; }
  /// <summary>
  /// Comments made about the study by the performer, subject or other participants.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
  /// </summary>
  [JsonPropertyName("objective")]
  public ResearchStudyObjective?[] Objective { get; set; }
  [JsonPropertyName("_objective")]
  public Element[] _Objective { get; set; }
  /// <summary>
  /// A larger research study of which this particular study is a component or step.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// Identifies the start date and the expected (or actual, depending on status) end date for the study.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.
  /// </summary>
  [JsonPropertyName("phase")]
  public CodeableConcept? Phase { get; set; }
  [JsonPropertyName("_phase")]
  public Element _Phase { get; set; }
  /// <summary>
  /// The type of study based upon the intent of the study's activities. A classification of the intent of the study.
  /// </summary>
  [JsonPropertyName("primaryPurposeType")]
  public CodeableConcept? PrimaryPurposeType { get; set; }
  [JsonPropertyName("_primaryPurposeType")]
  public Element _PrimaryPurposeType { get; set; }
  /// <summary>
  /// A researcher in a study who oversees multiple aspects of the study, such as concept development, protocol writing, protocol submission for IRB approval, participant recruitment, informed consent, data collection, analysis, interpretation and presentation.
  /// </summary>
  [JsonPropertyName("principalInvestigator")]
  public Reference? PrincipalInvestigator { get; set; }
  [JsonPropertyName("_principalInvestigator")]
  public Element _PrincipalInvestigator { get; set; }
  /// <summary>
  /// The set of steps expected to be performed as part of the execution of the study.
  /// </summary>
  [JsonPropertyName("protocol")]
  public Reference?[] Protocol { get; set; }
  [JsonPropertyName("_protocol")]
  public Element[] _Protocol { get; set; }
  /// <summary>
  /// A description and/or code explaining the premature termination of the study.
  /// </summary>
  [JsonPropertyName("reasonStopped")]
  public CodeableConcept? ReasonStopped { get; set; }
  [JsonPropertyName("_reasonStopped")]
  public Element _ReasonStopped { get; set; }
  /// <summary>
  /// Citations, references and other related documents.
  /// </summary>
  [JsonPropertyName("relatedArtifact")]
  public RelatedArtifact?[] RelatedArtifact { get; set; }
  [JsonPropertyName("_relatedArtifact")]
  public Element[] _RelatedArtifact { get; set; }
  /// <summary>
  /// A facility in which study activities are conducted.
  /// </summary>
  [JsonPropertyName("site")]
  public Reference?[] Site { get; set; }
  [JsonPropertyName("_site")]
  public Element[] _Site { get; set; }
  /// <summary>
  /// An organization that initiates the investigation and is legally responsible for the study.
  /// </summary>
  [JsonPropertyName("sponsor")]
  public Reference? Sponsor { get; set; }
  [JsonPropertyName("_sponsor")]
  public Element _Sponsor { get; set; }
  /// <summary>
  /// The current state of the study.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A short, descriptive user-friendly label for the study.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
}
/// <summary>
/// Code Values for the ResearchStudy.status field
/// </summary>
public sealed class ResearchStudyStatusCodes {
  public const string ACTIVE = "active";
  public const string ADMINISTRATIVELY_COMPLETED = "administratively-completed";
  public const string APPROVED = "approved";
  public const string CLOSED_TO_ACCRUAL = "closed-to-accrual";
  public const string CLOSED_TO_ACCRUAL_AND_INTERVENTION = "closed-to-accrual-and-intervention";
  public const string COMPLETED = "completed";
  public const string DISAPPROVED = "disapproved";
  public const string IN_REVIEW = "in-review";
  public const string TEMPORARILY_CLOSED_TO_ACCRUAL = "temporarily-closed-to-accrual";
  public const string TEMPORARILY_CLOSED_TO_ACCRUAL_AND_INTERVENTION = "temporarily-closed-to-accrual-and-intervention";
  public const string WITHDRAWN = "withdrawn";
}
/// <summary>
/// This is intended to deal with the confusion routinely created by haing two conflated concepts of being in a particular state and having achieved a particular milestone.  In strict terms a milestone is a point of time event that results in a change from one state to another.  The state before the milestone is achieved is often given the same name as the milestone, and sometimes the state may have the same description.  For instance "Randomised" and "Visit 1" may be different milestones but the state remains at "on study" after each of them. 
/// 
/// It is likely that more than one "state" pattern will be recorded for a subject and a type has been introduced to allow this simultaneous recording.
/// </summary>
public class ResearchSubjectProgress : BackboneElement {
  /// <summary>
  /// There can be multiple entries but it is also valid to just have the most recent.  This should npt be rlied upon as the full path the subject has taken.
  /// </summary>
  [JsonPropertyName("milestone")]
  public CodeableConcept? Milestone { get; set; }
  [JsonPropertyName("_milestone")]
  public Element _Milestone { get; set; }
  /// <summary>
  /// The reason for the state change.  If coded it should follow the formal subject state model.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableConcept? Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element _Reason { get; set; }
  /// <summary>
  /// This is NOT the date the change in state was recorded.
  /// </summary>
  [JsonPropertyName("startDate")]
  public string StartDate { get; set; }
  [JsonPropertyName("_startDate")]
  public Element _StartDate { get; set; }
  /// <summary>
  /// The current state of the subject.
  /// </summary>
  [JsonPropertyName("state")]
  public CodeableConcept? State { get; set; }
  [JsonPropertyName("_state")]
  public Element _State { get; set; }
  /// <summary>
  /// Identifies the aspect of the subject's journey that the state refers to.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class ResearchSubject : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ResearchSubject";
  /// <summary>
  /// The name of the arm in the study the subject actually followed as part of this study.
  /// </summary>
  [JsonPropertyName("actualArm")]
  public string? ActualArm { get; set; }
  [JsonPropertyName("_actualArm")]
  public Element _ActualArm { get; set; }
  /// <summary>
  /// Maybe this is really PlanDefinition.
  /// </summary>
  [JsonPropertyName("assignedArm")]
  public string? AssignedArm { get; set; }
  [JsonPropertyName("_assignedArm")]
  public Element _AssignedArm { get; set; }
  /// <summary>
  /// A record of the patient's informed agreement to participate in the study.
  /// </summary>
  [JsonPropertyName("consent")]
  public Reference? Consent { get; set; }
  [JsonPropertyName("_consent")]
  public Element _Consent { get; set; }
  /// <summary>
  /// Identifiers assigned to this research subject for a study.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The record of the person or animal who is involved in the study.
  /// </summary>
  [JsonPropertyName("individual")]
  public Reference Individual { get; set; }
  [JsonPropertyName("_individual")]
  public Element _Individual { get; set; }
  /// <summary>
  /// The dates the subject began and ended their participation in the study.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// This is intended to deal with the confusion routinely created by haing two conflated concepts of being in a particular state and having achieved a particular milestone.  In strict terms a milestone is a point of time event that results in a change from one state to another.  The state before the milestone is achieved is often given the same name as the milestone, and sometimes the state may have the same description.  For instance "Randomised" and "Visit 1" may be different milestones but the state remains at "on study" after each of them. 
  /// 
  /// It is likely that more than one "state" pattern will be recorded for a subject and a type has been introduced to allow this simultaneous recording.
  /// </summary>
  [JsonPropertyName("progress")]
  public ResearchSubjectProgress?[] Progress { get; set; }
  [JsonPropertyName("_progress")]
  public Element[] _Progress { get; set; }
  /// <summary>
  /// The current state of the subject.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Reference to the study the subject is participating in.
  /// </summary>
  [JsonPropertyName("study")]
  public Reference Study { get; set; }
  [JsonPropertyName("_study")]
  public Element _Study { get; set; }
}
/// <summary>
/// Code Values for the ResearchSubject.status field
/// </summary>
public sealed class ResearchSubjectStatusCodes {
  public const string CANDIDATE = "candidate";
  public const string ELIGIBLE = "eligible";
  public const string FOLLOW_UP = "follow-up";
  public const string INELIGIBLE = "ineligible";
  public const string NOT_REGISTERED = "not-registered";
  public const string OFF_STUDY = "off-study";
  public const string ON_STUDY = "on-study";
  public const string ON_STUDY_INTERVENTION = "on-study-intervention";
  public const string ON_STUDY_OBSERVATION = "on-study-observation";
  public const string PENDING_ON_STUDY = "pending-on-study";
  public const string POTENTIAL_CANDIDATE = "potential-candidate";
  public const string SCREENING = "screening";
  public const string WITHDRAWN = "withdrawn";
}
public class Resource : Base {
  /// <summary>
  /// The only time that a resource does not have an id is when it is being submitted to the server using a create operation.
  /// </summary>
  [JsonPropertyName("id")]
  public string? Id { get; set; }
  [JsonPropertyName("_id")]
  public Element _Id { get; set; }
  /// <summary>
  /// Asserting this rule set restricts the content to be only understood by a limited set of trading partners. This inherently limits the usefulness of the data in the long term. However, the existing health eco-system is highly fractured, and not yet ready to define, collect, and exchange data in a generally computable sense. Wherever possible, implementers and/or specification writers should avoid using this element. Often, when used, the URL is a reference to an implementation guide that defines these special rules as part of it's narrative along with other profiles, value sets, etc.
  /// </summary>
  [JsonPropertyName("implicitRules")]
  public string? ImplicitRules { get; set; }
  [JsonPropertyName("_implicitRules")]
  public Element _ImplicitRules { get; set; }
  /// <summary>
  /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
  /// </summary>
  [JsonPropertyName("language")]
  public string? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  /// </summary>
  [JsonPropertyName("meta")]
  public Meta? Meta { get; set; }
  [JsonPropertyName("_meta")]
  public Element _Meta { get; set; }
}
/// <summary>
/// Code Values for the Resource.language field
/// </summary>
public sealed class ResourceLanguageCodes {
  public const string LANGUAGE = "Language";
}
/// <summary>
/// Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
/// </summary>
public class RiskAssessmentPrediction : BackboneElement {
  /// <summary>
  /// One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
  /// </summary>
  [JsonPropertyName("outcome")]
  public CodeableConcept? Outcome { get; set; }
  [JsonPropertyName("_outcome")]
  public Element _Outcome { get; set; }
  /// <summary>
  /// If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
  /// </summary>
  [JsonPropertyName("probabilityDecimal")]
  public decimal? ProbabilityDecimal { get; set; }
  [JsonPropertyName("_probabilityDecimal")]
  public Element _ProbabilityDecimal { get; set; }
  /// <summary>
  /// If range is used, it represents the lower and upper bounds of certainty; e.g. 40-60%  Decimal values are expressed as percentages as well (max = 100).
  /// </summary>
  [JsonPropertyName("probabilityRange")]
  public Range? ProbabilityRange { get; set; }
  [JsonPropertyName("_probabilityRange")]
  public Element _ProbabilityRange { get; set; }
  /// <summary>
  /// Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high).
  /// </summary>
  [JsonPropertyName("qualitativeRisk")]
  public CodeableConcept? QualitativeRisk { get; set; }
  [JsonPropertyName("_qualitativeRisk")]
  public Element _QualitativeRisk { get; set; }
  /// <summary>
  /// Additional information explaining the basis for the prediction.
  /// </summary>
  [JsonPropertyName("rationale")]
  public string? Rationale { get; set; }
  [JsonPropertyName("_rationale")]
  public Element _Rationale { get; set; }
  /// <summary>
  /// Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
  /// </summary>
  [JsonPropertyName("relativeRisk")]
  public decimal? RelativeRisk { get; set; }
  [JsonPropertyName("_relativeRisk")]
  public Element _RelativeRisk { get; set; }
  /// <summary>
  /// If not specified, the risk applies "over the subject's lifespan".
  /// </summary>
  [JsonPropertyName("whenPeriod")]
  public Period? WhenPeriod { get; set; }
  [JsonPropertyName("_whenPeriod")]
  public Element _WhenPeriod { get; set; }
  /// <summary>
  /// If not specified, the risk applies "over the subject's lifespan".
  /// </summary>
  [JsonPropertyName("whenRange")]
  public Range? WhenRange { get; set; }
  [JsonPropertyName("_whenRange")]
  public Element _WhenRange { get; set; }
}
public class RiskAssessment : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "RiskAssessment";
  /// <summary>
  /// A reference to the request that is fulfilled by this risk assessment.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference? BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element _BasedOn { get; set; }
  /// <summary>
  /// Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).
  /// </summary>
  [JsonPropertyName("basis")]
  public Reference?[] Basis { get; set; }
  [JsonPropertyName("_basis")]
  public Element[] _Basis { get; set; }
  /// <summary>
  /// The type of the risk assessment performed.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
  /// </summary>
  [JsonPropertyName("condition")]
  public Reference? Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element _Condition { get; set; }
  /// <summary>
  /// The encounter where the assessment was performed.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Business identifier assigned to the risk assessment.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The algorithm, process or mechanism used to evaluate the risk.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// A description of the steps that might be taken to reduce the identified risk(s).
  /// </summary>
  [JsonPropertyName("mitigation")]
  public string? Mitigation { get; set; }
  [JsonPropertyName("_mitigation")]
  public Element _Mitigation { get; set; }
  /// <summary>
  /// Additional comments about the risk assessment.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The date (and possibly time) the risk assessment was performed.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// The date (and possibly time) the risk assessment was performed.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// A reference to a resource that this risk assessment is part of, such as a Procedure.
  /// </summary>
  [JsonPropertyName("parent")]
  public Reference? Parent { get; set; }
  [JsonPropertyName("_parent")]
  public Element _Parent { get; set; }
  /// <summary>
  /// The provider or software application that performed the assessment.
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference? Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element _Performer { get; set; }
  /// <summary>
  /// Multiple repetitions can be used to identify the same type of outcome in different timeframes as well as different types of outcomes.
  /// </summary>
  [JsonPropertyName("prediction")]
  public RiskAssessmentPrediction?[] Prediction { get; set; }
  [JsonPropertyName("_prediction")]
  public Element[] _Prediction { get; set; }
  /// <summary>
  /// The reason the risk assessment was performed.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The status of the RiskAssessment, using the same statuses as an Observation.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The patient or group the risk assessment applies to.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
}
/// <summary>
/// Code Values for the RiskAssessment.status field
/// </summary>
public sealed class RiskAssessmentStatusCodes {
  public const string REGISTERED = "registered";
  public const string PRELIMINARY = "preliminary";
  public const string FINAL = "final";
  public const string AMENDED = "amended";
}
public class Schedule : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Schedule";
  /// <summary>
  /// This element is labeled as a modifier because it may be used to mark that the resource was created in error.
  /// </summary>
  [JsonPropertyName("active")]
  public bool? Active { get; set; }
  [JsonPropertyName("_active")]
  public Element _Active { get; set; }
  /// <summary>
  /// The capacity to support multiple referenced resource types should be used in cases where the specific resources themselves cannot be scheduled without the other, and thus only make sense to the system exposing them as a group. Common examples of this are where the combination of a practitioner and a room (Location) are always required by a system.
  /// </summary>
  [JsonPropertyName("actor")]
  public Reference[] Actor { get; set; }
  [JsonPropertyName("_actor")]
  public Element[] _Actor { get; set; }
  /// <summary>
  /// Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// External Ids for this item.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
  /// </summary>
  [JsonPropertyName("planningHorizon")]
  public Period? PlanningHorizon { get; set; }
  [JsonPropertyName("_planningHorizon")]
  public Element _PlanningHorizon { get; set; }
  /// <summary>
  /// A broad categorization of the service that is to be performed during this appointment.
  /// </summary>
  [JsonPropertyName("serviceCategory")]
  public CodeableConcept?[] ServiceCategory { get; set; }
  [JsonPropertyName("_serviceCategory")]
  public Element[] _ServiceCategory { get; set; }
  /// <summary>
  /// The specific service that is to be performed during this appointment.
  /// </summary>
  [JsonPropertyName("serviceType")]
  public CodeableConcept?[] ServiceType { get; set; }
  [JsonPropertyName("_serviceType")]
  public Element[] _ServiceType { get; set; }
  /// <summary>
  /// The specialty of a practitioner that would be required to perform the service requested in this appointment.
  /// </summary>
  [JsonPropertyName("specialty")]
  public CodeableConcept?[] Specialty { get; set; }
  [JsonPropertyName("_specialty")]
  public Element[] _Specialty { get; set; }
}
/// <summary>
/// Used to define the parts of a composite search parameter.
/// </summary>
public class SearchParameterComponent : BackboneElement {
  /// <summary>
  /// The definition of the search parameter that describes this part.
  /// </summary>
  [JsonPropertyName("definition")]
  public string Definition { get; set; }
  [JsonPropertyName("_definition")]
  public Element _Definition { get; set; }
  /// <summary>
  /// This expression overrides the expression in the definition and extracts the index values from the outcome of the composite expression.
  /// </summary>
  [JsonPropertyName("expression")]
  public string Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
}
public class SearchParameter : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SearchParameter";
  /// <summary>
  /// A search parameter must always apply to at least one resource type. When search parameters apply to more than one resource type, they can be used against any of the listed resource types, or in a cross-type search (see [Cross Resource Search](http.html#xres-search)).
  /// </summary>
  [JsonPropertyName("base")]
  public string[] Base { get; set; }
  [JsonPropertyName("_base")]
  public Element[] _Base { get; set; }
  /// <summary>
  /// Systems are not required to list all the chain names they support, but if they don't list them, clients might not know to use them.
  /// </summary>
  [JsonPropertyName("chain")]
  public string?[] Chain { get; set; }
  [JsonPropertyName("_chain")]
  public Element[] _Chain { get; set; }
  /// <summary>
  /// For maximum compatibility, use only lowercase ASCII characters.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// If no comparators are listed, clients should not expect servers to support any comparators.
  /// </summary>
  [JsonPropertyName("comparator")]
  public string?[] Comparator { get; set; }
  [JsonPropertyName("_comparator")]
  public Element[] _Comparator { get; set; }
  /// <summary>
  /// Used to define the parts of a composite search parameter.
  /// </summary>
  [JsonPropertyName("component")]
  public SearchParameterComponent?[] Component { get; set; }
  [JsonPropertyName("_component")]
  public Element[] _Component { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the search parameter. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The intent of this is that a server can designate that it provides support for a search parameter defined in the specification itself (e.g.  [`value-quantity`](http://hl7.org/fhir/SearchParameter/Observation-value-quantity), but detail how it is supported by the server.
  /// </summary>
  [JsonPropertyName("derivedFrom")]
  public string? DerivedFrom { get; set; }
  [JsonPropertyName("_derivedFrom")]
  public Element _DerivedFrom { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the search parameter was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the search parameter as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the search parameter is presumed to be the predominant language in the place the search parameter was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of search parameters that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Note that the elements returned by the expression are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system. For composite search parameters, the outcome of the expression must a collection of base elements from which the composites are derived.
  /// </summary>
  [JsonPropertyName("expression")]
  public string? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// It may be possible for the search parameter to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// A modifier supported for the search parameter.
  /// </summary>
  [JsonPropertyName("modifier")]
  public string?[] Modifier { get; set; }
  [JsonPropertyName("_modifier")]
  public Element[] _Modifier { get; set; }
  /// <summary>
  /// Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.
  /// </summary>
  [JsonPropertyName("multipleAnd")]
  public bool? MultipleAnd { get; set; }
  [JsonPropertyName("_multipleAnd")]
  public Element _MultipleAnd { get; set; }
  /// <summary>
  /// Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.
  /// </summary>
  [JsonPropertyName("multipleOr")]
  public bool? MultipleOr { get; set; }
  [JsonPropertyName("_multipleOr")]
  public Element _MultipleOr { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the search parameter is the organization or individual primarily responsible for the maintenance and upkeep of the search parameter. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the search parameter. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the search parameter. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this search parameter.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Allows filtering of search parameters that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Types of resource (if a resource is referenced).
  /// </summary>
  [JsonPropertyName("target")]
  public string?[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
  /// <summary>
  /// The type of value that a search parameter may contain, and how the content is interpreted.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different search parameter instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the search parameter with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
  /// <summary>
  /// Note that the elements returned by the XPath are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system.
  /// </summary>
  [JsonPropertyName("xpath")]
  public string? Xpath { get; set; }
  [JsonPropertyName("_xpath")]
  public Element _Xpath { get; set; }
  /// <summary>
  /// How the search parameter relates to the set of elements returned by evaluating the xpath query.
  /// </summary>
  [JsonPropertyName("xpathUsage")]
  public string? XpathUsage { get; set; }
  [JsonPropertyName("_xpathUsage")]
  public Element _XpathUsage { get; set; }
}
/// <summary>
/// Code Values for the SearchParameter.base field
/// </summary>
public sealed class SearchParameterBaseCodes {
  public const string THE = "The";
}
/// <summary>
/// Code Values for the SearchParameter.code field
/// </summary>
public sealed class SearchParameterCodeCodes {
  public const string CODE = "Code";
}
/// <summary>
/// Code Values for the SearchParameter.comparator field
/// </summary>
public sealed class SearchParameterComparatorCodes {
  public const string EQ = "eq";
  public const string NE = "ne";
  public const string GT = "gt";
  public const string LT = "lt";
  public const string GE = "ge";
  public const string LE = "le";
  public const string SA = "sa";
  public const string EB = "eb";
  public const string AP = "ap";
}
/// <summary>
/// Code Values for the SearchParameter.modifier field
/// </summary>
public sealed class SearchParameterModifierCodes {
  public const string MISSING = "missing";
  public const string EXACT = "exact";
  public const string CONTAINS = "contains";
  public const string NOT = "not";
  public const string TEXT = "text";
  public const string VAL_IN = "in";
  public const string NOT_IN = "not-in";
  public const string BELOW = "below";
  public const string ABOVE = "above";
  public const string TYPE = "type";
  public const string IDENTIFIER = "identifier";
  public const string OFTYPE = "ofType";
}
/// <summary>
/// Code Values for the SearchParameter.status field
/// </summary>
public sealed class SearchParameterStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Code Values for the SearchParameter.target field
/// </summary>
public sealed class SearchParameterTargetCodes {
  public const string TYPES = "Types";
}
/// <summary>
/// Code Values for the SearchParameter.type field
/// </summary>
public sealed class SearchParameterTypeCodes {
  public const string NUMBER = "number";
  public const string DATE = "date";
  public const string VAL_STRING = "string";
  public const string TOKEN = "token";
  public const string REFERENCE = "reference";
  public const string COMPOSITE = "composite";
  public const string QUANTITY = "quantity";
  public const string URI = "uri";
  public const string SPECIAL = "special";
}
/// <summary>
/// Code Values for the SearchParameter.xpathUsage field
/// </summary>
public sealed class SearchParameterXpathUsageCodes {
  public const string NORMAL = "normal";
  public const string PHONETIC = "phonetic";
  public const string NEARBY = "nearby";
  public const string DISTANCE = "distance";
  public const string OTHER = "other";
}
public class ServiceRequest : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ServiceRequest";
  /// <summary>
  /// If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
  /// </summary>
  [JsonPropertyName("asNeededBoolean")]
  public bool? AsNeededBoolean { get; set; }
  [JsonPropertyName("_asNeededBoolean")]
  public Element _AsNeededBoolean { get; set; }
  /// <summary>
  /// If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
  /// </summary>
  [JsonPropertyName("asNeededCodeableConcept")]
  public CodeableConcept? AsNeededCodeableConcept { get; set; }
  [JsonPropertyName("_asNeededCodeableConcept")]
  public Element _AsNeededCodeableConcept { get; set; }
  /// <summary>
  /// When the request transitioned to being actionable.
  /// </summary>
  [JsonPropertyName("authoredOn")]
  public string? AuthoredOn { get; set; }
  [JsonPropertyName("_authoredOn")]
  public Element _AuthoredOn { get; set; }
  /// <summary>
  /// Plan/proposal/order fulfilled by this request.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Only used if not implicit in the code found in ServiceRequest.code.  If the use case requires BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [procedure-targetBodyStructure](extension-procedure-targetbodystructure.html).
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept?[] BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element[] _BodySite { get; set; }
  /// <summary>
  /// There may be multiple axis of categorization depending on the context or use case for retrieving or displaying the resource.  The level of granularity is defined by the category concepts in the value set.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// Many laboratory and radiology procedure codes embed the specimen/organ system in the test order name, for example,  serum or serum/plasma glucose, or a chest x-ray. The specimen might not be recorded separately from the test code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// In general, only the code and timeframe will be present, though occasional additional qualifiers such as body site or even performer could be included to narrow the scope of the prohibition.  If the ServiceRequest.code and ServiceRequest.doNotPerform both contain negation, that will reinforce prohibition and should not have a double negative interpretation.
  /// </summary>
  [JsonPropertyName("doNotPerform")]
  public bool? DoNotPerform { get; set; }
  [JsonPropertyName("_doNotPerform")]
  public Element _DoNotPerform { get; set; }
  /// <summary>
  /// An encounter that provides additional information about the healthcare context in which this request is made.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// The identifier.type element is used to distinguish between the identifiers assigned by the orderer (known as the 'Placer' in HL7 v2) and the producer of the observations in response to the order (known as the 'Filler' in HL7 v2).  For further discussion and examples see the resource notes section below.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string?[] InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element[] _InstantiatesCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string?[] InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element[] _InstantiatesUri { get; set; }
  /// <summary>
  /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
  /// </summary>
  [JsonPropertyName("insurance")]
  public Reference?[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
  /// </summary>
  [JsonPropertyName("intent")]
  public string Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
  /// </summary>
  [JsonPropertyName("location")]
  public CodeableReference?[] Location { get; set; }
  [JsonPropertyName("_location")]
  public Element[] _Location { get; set; }
  /// <summary>
  /// Any other notes and comments made about the service request. For example, internal billing notes.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The date/time at which the requested service should occur.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// The date/time at which the requested service should occur.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// The date/time at which the requested service should occur.
  /// </summary>
  [JsonPropertyName("occurrenceTiming")]
  public Timing? OccurrenceTiming { get; set; }
  [JsonPropertyName("_occurrenceTiming")]
  public Element _OccurrenceTiming { get; set; }
  /// <summary>
  /// For information from the medical record intended to support the delivery of the requested services, use the `supportingInformation` element.
  /// </summary>
  [JsonPropertyName("orderDetail")]
  public CodeableConcept?[] OrderDetail { get; set; }
  [JsonPropertyName("_orderDetail")]
  public Element[] _OrderDetail { get; set; }
  /// <summary>
  /// Instructions in terms that are understood by the patient or consumer.
  /// </summary>
  [JsonPropertyName("patientInstruction")]
  public string? PatientInstruction { get; set; }
  [JsonPropertyName("_patientInstruction")]
  public Element _PatientInstruction { get; set; }
  /// <summary>
  /// If multiple performers are present, it is interpreted as a list of *alternative* performers without any preference regardless of order.  If order of preference is needed use the [request-performerOrder extension](extension-request-performerorder.html).  Use CareTeam to represent a group of performers (for example, Practitioner A *and* Practitioner B).
  /// </summary>
  [JsonPropertyName("performer")]
  public Reference?[] Performer { get; set; }
  [JsonPropertyName("_performer")]
  public Element[] _Performer { get; set; }
  /// <summary>
  /// This is a  role, not  a participation type.  In other words, does not describe the task but describes the capacity.  For example, “compounding pharmacy”, “psychiatrist” or “internal referral”.
  /// </summary>
  [JsonPropertyName("performerType")]
  public CodeableConcept? PerformerType { get; set; }
  [JsonPropertyName("_performerType")]
  public Element _PerformerType { get; set; }
  /// <summary>
  /// Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  /// </summary>
  [JsonPropertyName("quantityQuantity")]
  public Quantity? QuantityQuantity { get; set; }
  [JsonPropertyName("_quantityQuantity")]
  public Element _QuantityQuantity { get; set; }
  /// <summary>
  /// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  /// </summary>
  [JsonPropertyName("quantityRatio")]
  public Ratio? QuantityRatio { get; set; }
  [JsonPropertyName("_quantityRatio")]
  public Element _QuantityRatio { get; set; }
  /// <summary>
  /// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  /// </summary>
  [JsonPropertyName("quantityRange")]
  public Range? QuantityRange { get; set; }
  [JsonPropertyName("_quantityRange")]
  public Element _QuantityRange { get; set; }
  /// <summary>
  /// This element represents why the referral is being made and may be used to decide how the service will be performed, or even if it will be performed at all. To be as specific as possible,  a reference to  *Observation* or *Condition* should be used if available.  Otherwise, use `concept.text` element if the data is free (uncoded) text as shown in the [CT Scan example](servicerequest-example-di.html).
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// This might not include provenances for all versions of the request – only those deemed “relevant” or important.This SHALL NOT include the Provenance associated with this current version of the resource.  (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update.  Until then, it can be queried directly as the Provenance that points to this version using _revincludeAll Provenances should have some historical version of this Request as their subject.
  /// </summary>
  [JsonPropertyName("relevantHistory")]
  public Reference?[] RelevantHistory { get; set; }
  [JsonPropertyName("_relevantHistory")]
  public Element[] _RelevantHistory { get; set; }
  /// <summary>
  /// The request takes the place of the referenced completed or terminated request(s).
  /// </summary>
  [JsonPropertyName("replaces")]
  public Reference?[] Replaces { get; set; }
  [JsonPropertyName("_replaces")]
  public Element[] _Replaces { get; set; }
  /// <summary>
  /// This not the dispatcher, but rather who is the authorizer.  This element is not intended to handle delegation which would generally be managed through the Provenance resource.
  /// </summary>
  [JsonPropertyName("requester")]
  public Reference? Requester { get; set; }
  [JsonPropertyName("_requester")]
  public Element _Requester { get; set; }
  /// <summary>
  /// Requests are linked either by a "basedOn" relationship (i.e. one request is fulfilling another) or by having a common requisition. Requests that are part of the same requisition are generally treated independently from the perspective of changing their state or maintaining them after initial creation.
  /// </summary>
  [JsonPropertyName("requisition")]
  public Identifier? Requisition { get; set; }
  [JsonPropertyName("_requisition")]
  public Element _Requisition { get; set; }
  /// <summary>
  /// Many diagnostic procedures need a specimen, but the request itself is not actually about the specimen. This element is for when the diagnostic is requested on already existing specimens and the request points to the specimen it applies to.    Conversely, if the request is entered first with an unknown specimen, then the [Specimen](specimen.html) resource points to the ServiceRequest.
  /// </summary>
  [JsonPropertyName("specimen")]
  public Reference?[] Specimen { get; set; }
  [JsonPropertyName("_specimen")]
  public Element[] _Specimen { get; set; }
  /// <summary>
  /// The status is generally fully in the control of the requester - they determine whether the order is draft or active and, after it has been activated, competed, cancelled or suspended. States relating to the activities of the performer are reflected on either the corresponding event (see [Event Pattern](event.html) for general discussion) or using the [Task](task.html) resource.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// To represent information about how the services are to be delivered use the `instructions` element.
  /// </summary>
  [JsonPropertyName("supportingInfo")]
  public Reference?[] SupportingInfo { get; set; }
  [JsonPropertyName("_supportingInfo")]
  public Element[] _SupportingInfo { get; set; }
}
/// <summary>
/// Code Values for the ServiceRequest.intent field
/// </summary>
public sealed class ServiceRequestIntentCodes {
  public const string PROPOSAL = "proposal";
  public const string PLAN = "plan";
  public const string DIRECTIVE = "directive";
  public const string ORDER = "order";
}
/// <summary>
/// Code Values for the ServiceRequest.priority field
/// </summary>
public sealed class ServiceRequestPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the ServiceRequest.status field
/// </summary>
public sealed class ServiceRequestStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string ON_HOLD = "on-hold";
  public const string REVOKED = "revoked";
  public const string COMPLETED = "completed";
  public const string ENTERED_IN_ERROR = "entered-in-error";
  public const string UNKNOWN = "unknown";
}
public class Slot : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Slot";
  /// <summary>
  /// The style of appointment or patient that may be booked in the slot (not service type).
  /// </summary>
  [JsonPropertyName("appointmentType")]
  public CodeableConcept? AppointmentType { get; set; }
  [JsonPropertyName("_appointmentType")]
  public Element _AppointmentType { get; set; }
  /// <summary>
  /// Comments on the slot to describe any extended information. Such as custom constraints on the slot.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// Date/Time that the slot is to conclude.
  /// </summary>
  [JsonPropertyName("end")]
  public string End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// External Ids for this item.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// This slot has already been overbooked, appointments are unlikely to be accepted for this time.
  /// </summary>
  [JsonPropertyName("overbooked")]
  public bool? Overbooked { get; set; }
  [JsonPropertyName("_overbooked")]
  public Element _Overbooked { get; set; }
  /// <summary>
  /// The schedule resource that this slot defines an interval of status information.
  /// </summary>
  [JsonPropertyName("schedule")]
  public Reference Schedule { get; set; }
  [JsonPropertyName("_schedule")]
  public Element _Schedule { get; set; }
  /// <summary>
  /// A broad categorization of the service that is to be performed during this appointment.
  /// </summary>
  [JsonPropertyName("serviceCategory")]
  public CodeableConcept?[] ServiceCategory { get; set; }
  [JsonPropertyName("_serviceCategory")]
  public Element[] _ServiceCategory { get; set; }
  /// <summary>
  /// The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
  /// </summary>
  [JsonPropertyName("serviceType")]
  public CodeableConcept?[] ServiceType { get; set; }
  [JsonPropertyName("_serviceType")]
  public Element[] _ServiceType { get; set; }
  /// <summary>
  /// The specialty of a practitioner that would be required to perform the service requested in this appointment.
  /// </summary>
  [JsonPropertyName("specialty")]
  public CodeableConcept?[] Specialty { get; set; }
  [JsonPropertyName("_specialty")]
  public Element[] _Specialty { get; set; }
  /// <summary>
  /// Date/Time that the slot is to begin.
  /// </summary>
  [JsonPropertyName("start")]
  public string Start { get; set; }
  [JsonPropertyName("_start")]
  public Element _Start { get; set; }
  /// <summary>
  /// busy | free | busy-unavailable | busy-tentative | entered-in-error.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the Slot.status field
/// </summary>
public sealed class SlotStatusCodes {
  public const string BUSY = "busy";
  public const string FREE = "free";
  public const string BUSY_UNAVAILABLE = "busy-unavailable";
  public const string BUSY_TENTATIVE = "busy-tentative";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Details concerning the specimen collection.
/// </summary>
public class SpecimenCollection : BackboneElement {
  /// <summary>
  /// If the use case requires  BodySite to be handled as a separate resource instead of an inline coded element (e.g. to identify and track separately)  then use the standard extension [bodySite](extension-bodysite.html).
  /// </summary>
  [JsonPropertyName("bodySite")]
  public CodeableConcept? BodySite { get; set; }
  [JsonPropertyName("_bodySite")]
  public Element _BodySite { get; set; }
  /// <summary>
  /// Time when specimen was collected from subject - the physiologically relevant time.
  /// </summary>
  [JsonPropertyName("collectedDateTime")]
  public string? CollectedDateTime { get; set; }
  [JsonPropertyName("_collectedDateTime")]
  public Element _CollectedDateTime { get; set; }
  /// <summary>
  /// Time when specimen was collected from subject - the physiologically relevant time.
  /// </summary>
  [JsonPropertyName("collectedPeriod")]
  public Period? CollectedPeriod { get; set; }
  [JsonPropertyName("_collectedPeriod")]
  public Element _CollectedPeriod { get; set; }
  /// <summary>
  /// Person who collected the specimen.
  /// </summary>
  [JsonPropertyName("collector")]
  public Reference? Collector { get; set; }
  [JsonPropertyName("_collector")]
  public Element _Collector { get; set; }
  /// <summary>
  /// The span of time over which the collection of a specimen occurred.
  /// </summary>
  [JsonPropertyName("duration")]
  public Duration? Duration { get; set; }
  [JsonPropertyName("_duration")]
  public Element _Duration { get; set; }
  /// <summary>
  /// Representing fasting status using this element is preferred to representing it with an observation using a 'pre-coordinated code'  such as  LOINC 2005-7 (Calcium [Moles/​time] in 2 hour Urine --12 hours fasting), or  using  a component observation ` such as `Observation.component code`  = LOINC 49541-6 (Fasting status - Reported).
  /// </summary>
  [JsonPropertyName("fastingStatusCodeableConcept")]
  public CodeableConcept? FastingStatusCodeableConcept { get; set; }
  [JsonPropertyName("_fastingStatusCodeableConcept")]
  public Element _FastingStatusCodeableConcept { get; set; }
  /// <summary>
  /// Representing fasting status using this element is preferred to representing it with an observation using a 'pre-coordinated code'  such as  LOINC 2005-7 (Calcium [Moles/​time] in 2 hour Urine --12 hours fasting), or  using  a component observation ` such as `Observation.component code`  = LOINC 49541-6 (Fasting status - Reported).
  /// </summary>
  [JsonPropertyName("fastingStatusDuration")]
  public Duration? FastingStatusDuration { get; set; }
  [JsonPropertyName("_fastingStatusDuration")]
  public Element _FastingStatusDuration { get; set; }
  /// <summary>
  /// A coded value specifying the technique that is used to perform the procedure.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
}
/// <summary>
/// Details concerning processing and processing steps for the specimen.
/// </summary>
public class SpecimenProcessing : BackboneElement {
  /// <summary>
  /// Material used in the processing step.
  /// </summary>
  [JsonPropertyName("additive")]
  public Reference?[] Additive { get; set; }
  [JsonPropertyName("_additive")]
  public Element[] _Additive { get; set; }
  /// <summary>
  /// Textual description of procedure.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// A coded value specifying the procedure used to process the specimen.
  /// </summary>
  [JsonPropertyName("procedure")]
  public CodeableConcept? Procedure { get; set; }
  [JsonPropertyName("_procedure")]
  public Element _Procedure { get; set; }
  /// <summary>
  /// A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
  /// </summary>
  [JsonPropertyName("timeDateTime")]
  public string? TimeDateTime { get; set; }
  [JsonPropertyName("_timeDateTime")]
  public Element _TimeDateTime { get; set; }
  /// <summary>
  /// A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
  /// </summary>
  [JsonPropertyName("timePeriod")]
  public Period? TimePeriod { get; set; }
  [JsonPropertyName("_timePeriod")]
  public Element _TimePeriod { get; set; }
}
/// <summary>
/// The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
/// </summary>
public class SpecimenContainer : BackboneElement {
  /// <summary>
  /// Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
  /// </summary>
  [JsonPropertyName("additiveCodeableConcept")]
  public CodeableConcept? AdditiveCodeableConcept { get; set; }
  [JsonPropertyName("_additiveCodeableConcept")]
  public Element _AdditiveCodeableConcept { get; set; }
  /// <summary>
  /// Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
  /// </summary>
  [JsonPropertyName("additiveReference")]
  public Reference? AdditiveReference { get; set; }
  [JsonPropertyName("_additiveReference")]
  public Element _AdditiveReference { get; set; }
  /// <summary>
  /// The capacity (volume or other measure) the container may contain.
  /// </summary>
  [JsonPropertyName("capacity")]
  public Quantity? Capacity { get; set; }
  [JsonPropertyName("_capacity")]
  public Element _Capacity { get; set; }
  /// <summary>
  /// Textual description of the container.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Id for container. There may be multiple; a manufacturer's bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
  /// </summary>
  [JsonPropertyName("specimenQuantity")]
  public Quantity? SpecimenQuantity { get; set; }
  [JsonPropertyName("_specimenQuantity")]
  public Element _SpecimenQuantity { get; set; }
  /// <summary>
  /// The type of container associated with the specimen (e.g. slide, aliquot, etc.).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class Specimen : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Specimen";
  /// <summary>
  /// The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
  /// </summary>
  [JsonPropertyName("accessionIdentifier")]
  public Identifier? AccessionIdentifier { get; set; }
  [JsonPropertyName("_accessionIdentifier")]
  public Element _AccessionIdentifier { get; set; }
  /// <summary>
  /// Details concerning the specimen collection.
  /// </summary>
  [JsonPropertyName("collection")]
  public SpecimenCollection? Collection { get; set; }
  [JsonPropertyName("_collection")]
  public Element _Collection { get; set; }
  /// <summary>
  /// Specimen condition is an observation made about the specimen.  It's a point-in-time assessment.  It can be used to assess its quality or appropriateness for a specific test.
  /// </summary>
  [JsonPropertyName("condition")]
  public CodeableConcept?[] Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element[] _Condition { get; set; }
  /// <summary>
  /// The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
  /// </summary>
  [JsonPropertyName("container")]
  public SpecimenContainer?[] Container { get; set; }
  [JsonPropertyName("_container")]
  public Element[] _Container { get; set; }
  /// <summary>
  /// Id for specimen.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// The parent specimen could be the source from which the current specimen is derived by some processing step (e.g. an aliquot or isolate or extracted nucleic acids from clinical samples) or one of many specimens that were combined to create a pooled sample.
  /// </summary>
  [JsonPropertyName("parent")]
  public Reference?[] Parent { get; set; }
  [JsonPropertyName("_parent")]
  public Element[] _Parent { get; set; }
  /// <summary>
  /// Details concerning processing and processing steps for the specimen.
  /// </summary>
  [JsonPropertyName("processing")]
  public SpecimenProcessing?[] Processing { get; set; }
  [JsonPropertyName("_processing")]
  public Element[] _Processing { get; set; }
  /// <summary>
  /// Time when specimen was received for processing or testing.
  /// </summary>
  [JsonPropertyName("receivedTime")]
  public string? ReceivedTime { get; set; }
  [JsonPropertyName("_receivedTime")]
  public Element _ReceivedTime { get; set; }
  /// <summary>
  /// The request may be explicit or implied such with a ServiceRequest that requires a blood draw.
  /// </summary>
  [JsonPropertyName("request")]
  public Reference?[] Request { get; set; }
  [JsonPropertyName("_request")]
  public Element[] _Request { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance or a device.
  /// </summary>
  [JsonPropertyName("subject")]
  public Reference? Subject { get; set; }
  [JsonPropertyName("_subject")]
  public Element _Subject { get; set; }
  /// <summary>
  /// The type can change the way that a specimen is handled and drives what kind of analyses can properly be performed on the specimen. It is frequently used in diagnostic work flow decision making systems.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the Specimen.status field
/// </summary>
public sealed class SpecimenStatusCodes {
  public const string AVAILABLE = "available";
  public const string UNAVAILABLE = "unavailable";
  public const string UNSATISFACTORY = "unsatisfactory";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
/// </summary>
public class SpecimenDefinitionTypeTestedContainerAdditive : BackboneElement {
  /// <summary>
  /// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
  /// </summary>
  [JsonPropertyName("additiveCodeableConcept")]
  public CodeableConcept AdditiveCodeableConcept { get; set; }
  [JsonPropertyName("_additiveCodeableConcept")]
  public Element _AdditiveCodeableConcept { get; set; }
  /// <summary>
  /// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
  /// </summary>
  [JsonPropertyName("additiveReference")]
  public Reference AdditiveReference { get; set; }
  [JsonPropertyName("_additiveReference")]
  public Element _AdditiveReference { get; set; }
}
/// <summary>
/// The specimen's container.
/// </summary>
public class SpecimenDefinitionTypeTestedContainer : BackboneElement {
  /// <summary>
  /// Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
  /// </summary>
  [JsonPropertyName("additive")]
  public SpecimenDefinitionTypeTestedContainerAdditive?[] Additive { get; set; }
  [JsonPropertyName("_additive")]
  public Element[] _Additive { get; set; }
  /// <summary>
  /// Color of container cap.
  /// </summary>
  [JsonPropertyName("cap")]
  public CodeableConcept? Cap { get; set; }
  [JsonPropertyName("_cap")]
  public Element _Cap { get; set; }
  /// <summary>
  /// The capacity (volume or other measure) of this kind of container.
  /// </summary>
  [JsonPropertyName("capacity")]
  public Quantity? Capacity { get; set; }
  [JsonPropertyName("_capacity")]
  public Element _Capacity { get; set; }
  /// <summary>
  /// The textual description of the kind of container.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Examples: glass, plastic, metal.
  /// </summary>
  [JsonPropertyName("material")]
  public CodeableConcept? Material { get; set; }
  [JsonPropertyName("_material")]
  public Element _Material { get; set; }
  /// <summary>
  /// The minimum volume to be conditioned in the container.
  /// </summary>
  [JsonPropertyName("minimumVolumeQuantity")]
  public Quantity? MinimumVolumeQuantity { get; set; }
  [JsonPropertyName("_minimumVolumeQuantity")]
  public Element _MinimumVolumeQuantity { get; set; }
  /// <summary>
  /// The minimum volume to be conditioned in the container.
  /// </summary>
  [JsonPropertyName("minimumVolumeString")]
  public string? MinimumVolumeString { get; set; }
  [JsonPropertyName("_minimumVolumeString")]
  public Element _MinimumVolumeString { get; set; }
  /// <summary>
  /// Special processing that should be applied to the container for this kind of specimen.
  /// </summary>
  [JsonPropertyName("preparation")]
  public string? Preparation { get; set; }
  [JsonPropertyName("_preparation")]
  public Element _Preparation { get; set; }
  /// <summary>
  /// The type of container used to contain this kind of specimen.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
/// </summary>
public class SpecimenDefinitionTypeTestedHandling : BackboneElement {
  /// <summary>
  /// Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
  /// </summary>
  [JsonPropertyName("instruction")]
  public string? Instruction { get; set; }
  [JsonPropertyName("_instruction")]
  public Element _Instruction { get; set; }
  /// <summary>
  /// The maximum time interval of preservation of the specimen with these conditions.
  /// </summary>
  [JsonPropertyName("maxDuration")]
  public Duration? MaxDuration { get; set; }
  [JsonPropertyName("_maxDuration")]
  public Element _MaxDuration { get; set; }
  /// <summary>
  /// It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
  /// </summary>
  [JsonPropertyName("temperatureQualifier")]
  public CodeableConcept? TemperatureQualifier { get; set; }
  [JsonPropertyName("_temperatureQualifier")]
  public Element _TemperatureQualifier { get; set; }
  /// <summary>
  /// The temperature interval for this set of handling instructions.
  /// </summary>
  [JsonPropertyName("temperatureRange")]
  public Range? TemperatureRange { get; set; }
  [JsonPropertyName("_temperatureRange")]
  public Element _TemperatureRange { get; set; }
}
/// <summary>
/// Specimen conditioned in a container as expected by the testing laboratory.
/// </summary>
public class SpecimenDefinitionTypeTested : BackboneElement {
  /// <summary>
  /// The specimen's container.
  /// </summary>
  [JsonPropertyName("container")]
  public SpecimenDefinitionTypeTestedContainer? Container { get; set; }
  [JsonPropertyName("_container")]
  public Element _Container { get; set; }
  /// <summary>
  /// Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.
  /// </summary>
  [JsonPropertyName("handling")]
  public SpecimenDefinitionTypeTestedHandling?[] Handling { get; set; }
  [JsonPropertyName("_handling")]
  public Element[] _Handling { get; set; }
  /// <summary>
  /// Primary of secondary specimen.
  /// </summary>
  [JsonPropertyName("isDerived")]
  public bool? IsDerived { get; set; }
  [JsonPropertyName("_isDerived")]
  public Element _IsDerived { get; set; }
  /// <summary>
  /// The preference for this type of conditioned specimen.
  /// </summary>
  [JsonPropertyName("preference")]
  public string Preference { get; set; }
  [JsonPropertyName("_preference")]
  public Element _Preference { get; set; }
  /// <summary>
  /// Criterion for rejection of the specimen in its container by the laboratory.
  /// </summary>
  [JsonPropertyName("rejectionCriterion")]
  public CodeableConcept?[] RejectionCriterion { get; set; }
  [JsonPropertyName("_rejectionCriterion")]
  public Element[] _RejectionCriterion { get; set; }
  /// <summary>
  /// Requirements for delivery and special handling of this kind of conditioned specimen.
  /// </summary>
  [JsonPropertyName("requirement")]
  public string? Requirement { get; set; }
  [JsonPropertyName("_requirement")]
  public Element _Requirement { get; set; }
  /// <summary>
  /// The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
  /// </summary>
  [JsonPropertyName("retentionTime")]
  public Duration? RetentionTime { get; set; }
  [JsonPropertyName("_retentionTime")]
  public Element _RetentionTime { get; set; }
  /// <summary>
  /// Specimen can be used by only one test or panel if the value is "true".
  /// </summary>
  [JsonPropertyName("singleUse")]
  public bool? SingleUse { get; set; }
  [JsonPropertyName("_singleUse")]
  public Element _SingleUse { get; set; }
  /// <summary>
  /// Where the specimen will be tested: e.g., lab, sector, device or any combination of these.
  /// </summary>
  [JsonPropertyName("testingDestination")]
  public CodeableConcept?[] TestingDestination { get; set; }
  [JsonPropertyName("_testingDestination")]
  public Element[] _TestingDestination { get; set; }
  /// <summary>
  /// The kind of specimen conditioned for testing expected by lab.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the SpecimenDefinition.typeTested.preference field
/// </summary>
public sealed class SpecimenDefinitionTypeTestedPreferenceCodes {
  public const string PREFERRED = "preferred";
  public const string ALTERNATE = "alternate";
}
public class SpecimenDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SpecimenDefinition";
  /// <summary>
  /// The date may be more recent than the approval date because of minor changes / editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// The action to be performed for collecting the specimen.
  /// </summary>
  [JsonPropertyName("collection")]
  public CodeableConcept?[] Collection { get; set; }
  [JsonPropertyName("_collection")]
  public Element[] _Collection { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Copyright statement relating to the SpecimenDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SpecimenDefinition.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// For draft definitions, indicates the date of initial creation. For active definitions, represents the date of activation. For withdrawn definitions, indicates the date of withdrawal.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The canonical URL pointing to another FHIR-defined SpecimenDefinition that is adhered to in whole or in part by this definition.
  /// </summary>
  [JsonPropertyName("derivedFromCanonical")]
  public string?[] DerivedFromCanonical { get; set; }
  [JsonPropertyName("_derivedFromCanonical")]
  public Element[] _DerivedFromCanonical { get; set; }
  /// <summary>
  /// The URL pointing to an externally-defined type of specimen, guideline or other definition that is adhered to in whole or in part by this definition.
  /// </summary>
  [JsonPropertyName("derivedFromUri")]
  public string?[] DerivedFromUri { get; set; }
  [JsonPropertyName("_derivedFromUri")]
  public Element[] _DerivedFromUri { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the SpecimenDefinition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The effective period for a SpecimenDefinition determines when the content is applicable for usage and is independent of publication and review dates.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// Allows filtering of SpecimenDefinition that are appropriate for use vs. not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// A business identifier assigned to this SpecimenDefinition.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// A jurisdiction in which the SpecimenDefinition is intended to be used.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this is usually after the approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// Preparation of the patient for specimen collection.
  /// </summary>
  [JsonPropertyName("patientPreparation")]
  public CodeableConcept?[] PatientPreparation { get; set; }
  [JsonPropertyName("_patientPreparation")]
  public Element[] _PatientPreparation { get; set; }
  /// <summary>
  /// Helps establish the "authority/credibility" of the SpecimenDefinition. May also allow for contact.
  /// </summary>
  [JsonPropertyName("publisher")]
  public Reference? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the SpecimenDefinition. Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is. This may be used to point to source materials or specifications that drove the structure of this SpecimenDefinition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// A nominal state-transition diagram can be found in the [[definition.html#statemachine | Definition pattern]] documentation
  /// Unknown does not represent "other" - one of the defined statuses must apply. Unknown is used when the authoring system is not sure what the current status is.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Examples: person, animal, device, water ….
  /// </summary>
  [JsonPropertyName("subjectCodeableConcept")]
  public CodeableConcept? SubjectCodeableConcept { get; set; }
  [JsonPropertyName("_subjectCodeableConcept")]
  public Element _SubjectCodeableConcept { get; set; }
  /// <summary>
  /// Examples: person, animal, device, water ….
  /// </summary>
  [JsonPropertyName("subjectReference")]
  public Reference? SubjectReference { get; set; }
  [JsonPropertyName("_subjectReference")]
  public Element _SubjectReference { get; set; }
  /// <summary>
  /// Time aspect of specimen collection (duration or offset).
  /// </summary>
  [JsonPropertyName("timeAspect")]
  public string? TimeAspect { get; set; }
  [JsonPropertyName("_timeAspect")]
  public Element _TimeAspect { get; set; }
  /// <summary>
  /// A short, descriptive, user-friendly title for the SpecimenDefinition.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// The kind of material to be collected.
  /// </summary>
  [JsonPropertyName("typeCollected")]
  public CodeableConcept? TypeCollected { get; set; }
  [JsonPropertyName("_typeCollected")]
  public Element _TypeCollected { get; set; }
  /// <summary>
  /// Specimen conditioned in a container as expected by the testing laboratory.
  /// </summary>
  [JsonPropertyName("typeTested")]
  public SpecimenDefinitionTypeTested?[] TypeTested { get; set; }
  [JsonPropertyName("_typeTested")]
  public Element[] _TypeTested { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred. This is the URI that will be used when making canonical references to this resource.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be multiple different instances of a SpecimenDefinition that have the same identifier but different versions.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the SpecimenDefinition.status field
/// </summary>
public sealed class SpecimenDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// An external specification that the content is mapped to.
/// </summary>
public class StructureDefinitionMapping : BackboneElement {
  /// <summary>
  /// Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// The specification is described once, with general comments, and then specific mappings are made that reference this declaration.
  /// </summary>
  [JsonPropertyName("identity")]
  public string Identity { get; set; }
  [JsonPropertyName("_identity")]
  public Element _Identity { get; set; }
  /// <summary>
  /// A name for the specification that is being mapped to.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// A formal identity for the specification being mapped to helps with identifying maps consistently.
  /// </summary>
  [JsonPropertyName("uri")]
  public string? Uri { get; set; }
  [JsonPropertyName("_uri")]
  public Element _Uri { get; set; }
}
/// <summary>
/// Identifies the types of resource or data type elements to which the extension can be applied.
/// </summary>
public class StructureDefinitionContext : BackboneElement {
  /// <summary>
  /// An expression that defines where an extension can be used in resources.
  /// </summary>
  [JsonPropertyName("expression")]
  public string Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// Defines how to interpret the expression that defines what the context of the extension is.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the StructureDefinition.context.type field
/// </summary>
public sealed class StructureDefinitionContextTypeCodes {
  public const string FHIRPATH = "fhirpath";
  public const string ELEMENT = "element";
  public const string EXTENSION = "extension";
}
/// <summary>
/// A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
/// </summary>
public class StructureDefinitionSnapshot : BackboneElement {
  /// <summary>
  /// Captures constraints on each element within the resource.
  /// </summary>
  [JsonPropertyName("element")]
  public ElementDefinition[] Element { get; set; }
  [JsonPropertyName("_element")]
  public Element[] _Element { get; set; }
}
/// <summary>
/// A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
/// </summary>
public class StructureDefinitionDifferential : BackboneElement {
  /// <summary>
  /// Captures constraints on each element within the resource.
  /// </summary>
  [JsonPropertyName("element")]
  public ElementDefinition[] Element { get; set; }
  [JsonPropertyName("_element")]
  public Element[] _Element { get; set; }
}
public class StructureDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "StructureDefinition";
  /// <summary>
  /// Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. For logical models, the exact implication of "abstract" will rest with the author, depending how the logical model is used. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type "Element" in the StructureDefinition, but have children described, are anonymous concrete types that specialize Element.
  /// </summary>
  [JsonPropertyName("abstract")]
  public bool Abstract { get; set; }
  [JsonPropertyName("_abstract")]
  public Element _Abstract { get; set; }
  /// <summary>
  /// If differential constraints are specified in this structure, they are applied to the base in a "differential" fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snapshots from differential constraints. Logical Models have a base of "Element" or another logical model.
  /// </summary>
  [JsonPropertyName("baseDefinition")]
  public string? BaseDefinition { get; set; }
  [JsonPropertyName("_baseDefinition")]
  public Element _BaseDefinition { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Identifies the types of resource or data type elements to which the extension can be applied.
  /// </summary>
  [JsonPropertyName("context")]
  public StructureDefinitionContext?[] Context { get; set; }
  [JsonPropertyName("_context")]
  public Element[] _Context { get; set; }
  /// <summary>
  /// The rules are only evaluated when the extension is present. When evaluating the invariant, the FHIRPath focus is the element that holds the extension, and %extension refers to the extension itself.
  /// </summary>
  [JsonPropertyName("contextInvariant")]
  public string?[] ContextInvariant { get; set; }
  [JsonPropertyName("_contextInvariant")]
  public Element[] _ContextInvariant { get; set; }
  /// <summary>
  /// A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// If the definition is a specialization, then it adds new elements in the differential, and the snapshot includes the inherited elements.  If the definition is a constraint, then it cannot define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).
  /// </summary>
  [JsonPropertyName("derivation")]
  public string? Derivation { get; set; }
  [JsonPropertyName("_derivation")]
  public Element _Derivation { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the structure definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure definition is presumed to be the predominant language in the place the structure definition was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
  /// </summary>
  [JsonPropertyName("differential")]
  public StructureDefinitionDifferential? Differential { get; set; }
  [JsonPropertyName("_differential")]
  public Element _Differential { get; set; }
  /// <summary>
  /// Allows filtering of structure definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// A StructureDefinition does not need to specify the target it applies to as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired.
  /// </summary>
  [JsonPropertyName("fhirVersion")]
  public string? FhirVersion { get; set; }
  [JsonPropertyName("_fhirVersion")]
  public Element _FhirVersion { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure definition outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the structure definition to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.
  /// </summary>
  [JsonPropertyName("keyword")]
  public Coding?[] Keyword { get; set; }
  [JsonPropertyName("_keyword")]
  public Element[] _Keyword { get; set; }
  /// <summary>
  /// Defines the kind of structure that this definition is describing.
  /// </summary>
  [JsonPropertyName("kind")]
  public string Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
  /// <summary>
  /// An external specification that the content is mapped to.
  /// </summary>
  [JsonPropertyName("mapping")]
  public StructureDefinitionMapping?[] Mapping { get; set; }
  [JsonPropertyName("_mapping")]
  public Element[] _Mapping { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.Some Examples: 
  /// 
  /// * O2SatObservation
  /// * PresentationReport
  /// * Immunization2
  /// * AcmeAdmissionRecordOld.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the structure definition is the organization or individual primarily responsible for the maintenance and upkeep of the structure definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure definition. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the structure definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure definition.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
  /// </summary>
  [JsonPropertyName("snapshot")]
  public StructureDefinitionSnapshot? Snapshot { get; set; }
  [JsonPropertyName("_snapshot")]
  public Element _Snapshot { get; set; }
  /// <summary>
  /// Allows filtering of structure definitions that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.Applications don't have to use this name but can always fall back to it. The title also corresponds to the label for the root element.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Note that in the case of constraints, the type could be determined by chasing through the baseDefinition references until a concrete structure (derivation = specialization) is reached, or by looking at the path of the first element in the snapshot - if present - but providing the type directly makes for simpler tooling and indexing. 
  /// 
  /// The type must match the elements defined in the differential and the snapshot. For all FHIR defined types, the path name of the element will start with the type name. For logical models, where the type is a URL, the type name SHOULD start with the tail of the type URL where required.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different structure definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure definition with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the StructureDefinition.derivation field
/// </summary>
public sealed class StructureDefinitionDerivationCodes {
  public const string SPECIALIZATION = "specialization";
  public const string CONSTRAINT = "constraint";
}
/// <summary>
/// Code Values for the StructureDefinition.fhirVersion field
/// </summary>
public sealed class StructureDefinitionFhirVersionCodes {
  public const string FHIR = "FHIR";
}
/// <summary>
/// Code Values for the StructureDefinition.kind field
/// </summary>
public sealed class StructureDefinitionKindCodes {
  public const string PRIMITIVE_TYPE = "primitive-type";
  public const string COMPLEX_TYPE = "complex-type";
  public const string RESOURCE = "resource";
  public const string LOGICAL = "logical";
}
/// <summary>
/// Code Values for the StructureDefinition.status field
/// </summary>
public sealed class StructureDefinitionStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
/// </summary>
public class StructureMapStructure : BackboneElement {
  /// <summary>
  /// This is needed if both types have the same name (e.g. version conversion).
  /// </summary>
  [JsonPropertyName("alias")]
  public string? Alias { get; set; }
  [JsonPropertyName("_alias")]
  public Element _Alias { get; set; }
  /// <summary>
  /// Documentation that describes how the structure is used in the mapping.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// How the referenced structure is used in this mapping.
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// The canonical reference to the structure.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Code Values for the StructureMap.structure.mode field
/// </summary>
public sealed class StructureMapStructureModeCodes {
  public const string SOURCE = "source";
  public const string QUERIED = "queried";
  public const string TARGET = "target";
  public const string PRODUCED = "produced";
}
/// <summary>
/// If no inputs are named, then the entry mappings are type based.
/// </summary>
public class StructureMapGroupInput : BackboneElement {
  /// <summary>
  /// Documentation for this instance of data.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// Mode for this instance of data.
  /// </summary>
  [JsonPropertyName("mode")]
  public string Mode { get; set; }
  [JsonPropertyName("_mode")]
  public Element _Mode { get; set; }
  /// <summary>
  /// Name for this instance of data.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Type for this instance of data.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the StructureMap.group.input.mode field
/// </summary>
public sealed class StructureMapGroupInputModeCodes {
  public const string SOURCE = "source";
  public const string TARGET = "target";
}
/// <summary>
/// Source inputs to the mapping.
/// </summary>
public class StructureMapGroupRuleSource : BackboneElement {
  /// <summary>
  /// FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
  /// </summary>
  [JsonPropertyName("check")]
  public string? Check { get; set; }
  [JsonPropertyName("_check")]
  public Element _Check { get; set; }
  /// <summary>
  /// FHIRPath expression  - must be true or the rule does not apply.
  /// </summary>
  [JsonPropertyName("condition")]
  public string? Condition { get; set; }
  [JsonPropertyName("_condition")]
  public Element _Condition { get; set; }
  /// <summary>
  /// Type or variable this rule applies to.
  /// </summary>
  [JsonPropertyName("context")]
  public string Context { get; set; }
  [JsonPropertyName("_context")]
  public Element _Context { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueBase64Binary")]
  public string? DefaultValueBase64Binary { get; set; }
  [JsonPropertyName("_defaultValueBase64Binary")]
  public Element _DefaultValueBase64Binary { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueBoolean")]
  public bool? DefaultValueBoolean { get; set; }
  [JsonPropertyName("_defaultValueBoolean")]
  public Element _DefaultValueBoolean { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueCanonical")]
  public string? DefaultValueCanonical { get; set; }
  [JsonPropertyName("_defaultValueCanonical")]
  public Element _DefaultValueCanonical { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueCode")]
  public string? DefaultValueCode { get; set; }
  [JsonPropertyName("_defaultValueCode")]
  public Element _DefaultValueCode { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueDate")]
  public string? DefaultValueDate { get; set; }
  [JsonPropertyName("_defaultValueDate")]
  public Element _DefaultValueDate { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueDateTime")]
  public string? DefaultValueDateTime { get; set; }
  [JsonPropertyName("_defaultValueDateTime")]
  public Element _DefaultValueDateTime { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueDecimal")]
  public decimal? DefaultValueDecimal { get; set; }
  [JsonPropertyName("_defaultValueDecimal")]
  public Element _DefaultValueDecimal { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueId")]
  public string? DefaultValueId { get; set; }
  [JsonPropertyName("_defaultValueId")]
  public Element _DefaultValueId { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueInstant")]
  public string? DefaultValueInstant { get; set; }
  [JsonPropertyName("_defaultValueInstant")]
  public Element _DefaultValueInstant { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueInteger")]
  public int? DefaultValueInteger { get; set; }
  [JsonPropertyName("_defaultValueInteger")]
  public Element _DefaultValueInteger { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueInteger64")]
  public string? DefaultValueInteger64 { get; set; }
  [JsonPropertyName("_defaultValueInteger64")]
  public Element _DefaultValueInteger64 { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueMarkdown")]
  public string? DefaultValueMarkdown { get; set; }
  [JsonPropertyName("_defaultValueMarkdown")]
  public Element _DefaultValueMarkdown { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueOid")]
  public string? DefaultValueOid { get; set; }
  [JsonPropertyName("_defaultValueOid")]
  public Element _DefaultValueOid { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValuePositiveInt")]
  public uint? DefaultValuePositiveInt { get; set; }
  [JsonPropertyName("_defaultValuePositiveInt")]
  public Element _DefaultValuePositiveInt { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueString")]
  public string? DefaultValueString { get; set; }
  [JsonPropertyName("_defaultValueString")]
  public Element _DefaultValueString { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueTime")]
  public string? DefaultValueTime { get; set; }
  [JsonPropertyName("_defaultValueTime")]
  public Element _DefaultValueTime { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueUnsignedInt")]
  public uint? DefaultValueUnsignedInt { get; set; }
  [JsonPropertyName("_defaultValueUnsignedInt")]
  public Element _DefaultValueUnsignedInt { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueUri")]
  public string? DefaultValueUri { get; set; }
  [JsonPropertyName("_defaultValueUri")]
  public Element _DefaultValueUri { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueUrl")]
  public string? DefaultValueUrl { get; set; }
  [JsonPropertyName("_defaultValueUrl")]
  public Element _DefaultValueUrl { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueUuid")]
  public Guid? DefaultValueUuid { get; set; }
  [JsonPropertyName("_defaultValueUuid")]
  public Element _DefaultValueUuid { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueAddress")]
  public Address? DefaultValueAddress { get; set; }
  [JsonPropertyName("_defaultValueAddress")]
  public Element _DefaultValueAddress { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueAge")]
  public Age? DefaultValueAge { get; set; }
  [JsonPropertyName("_defaultValueAge")]
  public Element _DefaultValueAge { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueAnnotation")]
  public Annotation? DefaultValueAnnotation { get; set; }
  [JsonPropertyName("_defaultValueAnnotation")]
  public Element _DefaultValueAnnotation { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueAttachment")]
  public Attachment? DefaultValueAttachment { get; set; }
  [JsonPropertyName("_defaultValueAttachment")]
  public Element _DefaultValueAttachment { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueCodeableConcept")]
  public CodeableConcept? DefaultValueCodeableConcept { get; set; }
  [JsonPropertyName("_defaultValueCodeableConcept")]
  public Element _DefaultValueCodeableConcept { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueCoding")]
  public Coding? DefaultValueCoding { get; set; }
  [JsonPropertyName("_defaultValueCoding")]
  public Element _DefaultValueCoding { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueContactPoint")]
  public ContactPoint? DefaultValueContactPoint { get; set; }
  [JsonPropertyName("_defaultValueContactPoint")]
  public Element _DefaultValueContactPoint { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueCount")]
  public Count? DefaultValueCount { get; set; }
  [JsonPropertyName("_defaultValueCount")]
  public Element _DefaultValueCount { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueDistance")]
  public Distance? DefaultValueDistance { get; set; }
  [JsonPropertyName("_defaultValueDistance")]
  public Element _DefaultValueDistance { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueDuration")]
  public Duration? DefaultValueDuration { get; set; }
  [JsonPropertyName("_defaultValueDuration")]
  public Element _DefaultValueDuration { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueHumanName")]
  public HumanName? DefaultValueHumanName { get; set; }
  [JsonPropertyName("_defaultValueHumanName")]
  public Element _DefaultValueHumanName { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueIdentifier")]
  public Identifier? DefaultValueIdentifier { get; set; }
  [JsonPropertyName("_defaultValueIdentifier")]
  public Element _DefaultValueIdentifier { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueMoney")]
  public Money? DefaultValueMoney { get; set; }
  [JsonPropertyName("_defaultValueMoney")]
  public Element _DefaultValueMoney { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValuePeriod")]
  public Period? DefaultValuePeriod { get; set; }
  [JsonPropertyName("_defaultValuePeriod")]
  public Element _DefaultValuePeriod { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueQuantity")]
  public Quantity? DefaultValueQuantity { get; set; }
  [JsonPropertyName("_defaultValueQuantity")]
  public Element _DefaultValueQuantity { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueRange")]
  public Range? DefaultValueRange { get; set; }
  [JsonPropertyName("_defaultValueRange")]
  public Element _DefaultValueRange { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueRatio")]
  public Ratio? DefaultValueRatio { get; set; }
  [JsonPropertyName("_defaultValueRatio")]
  public Element _DefaultValueRatio { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueReference")]
  public Reference? DefaultValueReference { get; set; }
  [JsonPropertyName("_defaultValueReference")]
  public Element _DefaultValueReference { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueSampledData")]
  public SampledData? DefaultValueSampledData { get; set; }
  [JsonPropertyName("_defaultValueSampledData")]
  public Element _DefaultValueSampledData { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueSignature")]
  public Signature? DefaultValueSignature { get; set; }
  [JsonPropertyName("_defaultValueSignature")]
  public Element _DefaultValueSignature { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueTiming")]
  public Timing? DefaultValueTiming { get; set; }
  [JsonPropertyName("_defaultValueTiming")]
  public Element _DefaultValueTiming { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueContactDetail")]
  public ContactDetail? DefaultValueContactDetail { get; set; }
  [JsonPropertyName("_defaultValueContactDetail")]
  public Element _DefaultValueContactDetail { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueContributor")]
  public Contributor? DefaultValueContributor { get; set; }
  [JsonPropertyName("_defaultValueContributor")]
  public Element _DefaultValueContributor { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueDataRequirement")]
  public DataRequirement? DefaultValueDataRequirement { get; set; }
  [JsonPropertyName("_defaultValueDataRequirement")]
  public Element _DefaultValueDataRequirement { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueExpression")]
  public Expression? DefaultValueExpression { get; set; }
  [JsonPropertyName("_defaultValueExpression")]
  public Element _DefaultValueExpression { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueParameterDefinition")]
  public ParameterDefinition? DefaultValueParameterDefinition { get; set; }
  [JsonPropertyName("_defaultValueParameterDefinition")]
  public Element _DefaultValueParameterDefinition { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueRelatedArtifact")]
  public RelatedArtifact? DefaultValueRelatedArtifact { get; set; }
  [JsonPropertyName("_defaultValueRelatedArtifact")]
  public Element _DefaultValueRelatedArtifact { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueTriggerDefinition")]
  public TriggerDefinition? DefaultValueTriggerDefinition { get; set; }
  [JsonPropertyName("_defaultValueTriggerDefinition")]
  public Element _DefaultValueTriggerDefinition { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueUsageContext")]
  public UsageContext? DefaultValueUsageContext { get; set; }
  [JsonPropertyName("_defaultValueUsageContext")]
  public Element _DefaultValueUsageContext { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueDosage")]
  public Dosage? DefaultValueDosage { get; set; }
  [JsonPropertyName("_defaultValueDosage")]
  public Element _DefaultValueDosage { get; set; }
  /// <summary>
  /// If there's a default value on an item that can repeat, it will only be used once.
  /// </summary>
  [JsonPropertyName("defaultValueMeta")]
  public Meta? DefaultValueMeta { get; set; }
  [JsonPropertyName("_defaultValueMeta")]
  public Element _DefaultValueMeta { get; set; }
  /// <summary>
  /// Optional field for this source.
  /// </summary>
  [JsonPropertyName("element")]
  public string? Element { get; set; }
  [JsonPropertyName("_element")]
  public Element _Element { get; set; }
  /// <summary>
  /// How to handle the list mode for this element.
  /// </summary>
  [JsonPropertyName("listMode")]
  public string? ListMode { get; set; }
  [JsonPropertyName("_listMode")]
  public Element _ListMode { get; set; }
  /// <summary>
  /// This is typically used for recording that something Is not transformed to the target for some reason.
  /// </summary>
  [JsonPropertyName("logMessage")]
  public string? LogMessage { get; set; }
  [JsonPropertyName("_logMessage")]
  public Element _LogMessage { get; set; }
  /// <summary>
  /// Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
  /// </summary>
  [JsonPropertyName("max")]
  public string? Max { get; set; }
  [JsonPropertyName("_max")]
  public Element _Max { get; set; }
  /// <summary>
  /// Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
  /// </summary>
  [JsonPropertyName("min")]
  public int? Min { get; set; }
  [JsonPropertyName("_min")]
  public Element _Min { get; set; }
  /// <summary>
  /// Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
  /// </summary>
  [JsonPropertyName("type")]
  public string? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Named context for field, if a field is specified.
  /// </summary>
  [JsonPropertyName("variable")]
  public string? Variable { get; set; }
  [JsonPropertyName("_variable")]
  public Element _Variable { get; set; }
}
/// <summary>
/// Code Values for the StructureMap.group.rule.source.defaultValue[x] field
/// </summary>
public sealed class StructureMapGroupRuleSourceDefaultValueCodes {
  public const string DEFAULT = "Default";
}
/// <summary>
/// Code Values for the StructureMap.group.rule.source.listMode field
/// </summary>
public sealed class StructureMapGroupRuleSourceListModeCodes {
  public const string FIRST = "first";
  public const string NOT_FIRST = "not_first";
  public const string LAST = "last";
  public const string NOT_LAST = "not_last";
  public const string ONLY_ONE = "only_one";
}
/// <summary>
/// Parameters to the transform.
/// </summary>
public class StructureMapGroupRuleTargetParameter : BackboneElement {
  /// <summary>
  /// Parameter value - variable or literal.
  /// </summary>
  [JsonPropertyName("valueId")]
  public string ValueId { get; set; }
  [JsonPropertyName("_valueId")]
  public Element _ValueId { get; set; }
  /// <summary>
  /// Parameter value - variable or literal.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// Parameter value - variable or literal.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// Parameter value - variable or literal.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// Parameter value - variable or literal.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
}
/// <summary>
/// Content to create because of this mapping rule.
/// </summary>
public class StructureMapGroupRuleTarget : BackboneElement {
  /// <summary>
  /// Type or variable this rule applies to.
  /// </summary>
  [JsonPropertyName("context")]
  public string? Context { get; set; }
  [JsonPropertyName("_context")]
  public Element _Context { get; set; }
  /// <summary>
  /// How to interpret the context.
  /// </summary>
  [JsonPropertyName("contextType")]
  public string? ContextType { get; set; }
  [JsonPropertyName("_contextType")]
  public Element _ContextType { get; set; }
  /// <summary>
  /// Field to create in the context.
  /// </summary>
  [JsonPropertyName("element")]
  public string? Element { get; set; }
  [JsonPropertyName("_element")]
  public Element _Element { get; set; }
  /// <summary>
  /// If field is a list, how to manage the list.
  /// </summary>
  [JsonPropertyName("listMode")]
  public string?[] ListMode { get; set; }
  [JsonPropertyName("_listMode")]
  public Element[] _ListMode { get; set; }
  /// <summary>
  /// Internal rule reference for shared list items.
  /// </summary>
  [JsonPropertyName("listRuleId")]
  public string? ListRuleId { get; set; }
  [JsonPropertyName("_listRuleId")]
  public Element _ListRuleId { get; set; }
  /// <summary>
  /// Parameters to the transform.
  /// </summary>
  [JsonPropertyName("parameter")]
  public StructureMapGroupRuleTargetParameter?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
  /// <summary>
  /// How the data is copied / created.
  /// </summary>
  [JsonPropertyName("transform")]
  public string? Transform { get; set; }
  [JsonPropertyName("_transform")]
  public Element _Transform { get; set; }
  /// <summary>
  /// Named context for field, if desired, and a field is specified.
  /// </summary>
  [JsonPropertyName("variable")]
  public string? Variable { get; set; }
  [JsonPropertyName("_variable")]
  public Element _Variable { get; set; }
}
/// <summary>
/// Code Values for the StructureMap.group.rule.target.contextType field
/// </summary>
public sealed class StructureMapGroupRuleTargetContextTypeCodes {
  public const string TYPE = "type";
  public const string VARIABLE = "variable";
}
/// <summary>
/// Code Values for the StructureMap.group.rule.target.listMode field
/// </summary>
public sealed class StructureMapGroupRuleTargetListModeCodes {
  public const string FIRST = "first";
  public const string SHARE = "share";
  public const string LAST = "last";
  public const string COLLATE = "collate";
}
/// <summary>
/// Code Values for the StructureMap.group.rule.target.transform field
/// </summary>
public sealed class StructureMapGroupRuleTargetTransformCodes {
  public const string CREATE = "create";
  public const string COPY = "copy";
}
/// <summary>
/// Which other rules to apply in the context of this rule.
/// </summary>
public class StructureMapGroupRuleDependent : BackboneElement {
  /// <summary>
  /// Name of a rule or group to apply.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Variable to pass to the rule or group.
  /// </summary>
  [JsonPropertyName("variable")]
  public string[] Variable { get; set; }
  [JsonPropertyName("_variable")]
  public Element[] _Variable { get; set; }
}
/// <summary>
/// Transform Rule from source to target.
/// </summary>
public class StructureMapGroupRule : BackboneElement {
  /// <summary>
  /// Which other rules to apply in the context of this rule.
  /// </summary>
  [JsonPropertyName("dependent")]
  public StructureMapGroupRuleDependent?[] Dependent { get; set; }
  [JsonPropertyName("_dependent")]
  public Element[] _Dependent { get; set; }
  /// <summary>
  /// Documentation for this instance of data.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// Name of the rule for internal references.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Rules contained in this rule.
  /// </summary>
  [JsonPropertyName("rule")]
  public StructureMapGroupRule?[] Rule { get; set; }
  [JsonPropertyName("_rule")]
  public Element[] _Rule { get; set; }
  /// <summary>
  /// Source inputs to the mapping.
  /// </summary>
  [JsonPropertyName("source")]
  public StructureMapGroupRuleSource[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
  /// <summary>
  /// Content to create because of this mapping rule.
  /// </summary>
  [JsonPropertyName("target")]
  public StructureMapGroupRuleTarget?[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
}
/// <summary>
/// Organizes the mapping into manageable chunks for human review/ease of maintenance.
/// </summary>
public class StructureMapGroup : BackboneElement {
  /// <summary>
  /// Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// Another group that this group adds rules to.
  /// </summary>
  [JsonPropertyName("extends")]
  public string? Extends { get; set; }
  [JsonPropertyName("_extends")]
  public Element _Extends { get; set; }
  /// <summary>
  /// If no inputs are named, then the entry mappings are type based.
  /// </summary>
  [JsonPropertyName("input")]
  public StructureMapGroupInput[] Input { get; set; }
  [JsonPropertyName("_input")]
  public Element[] _Input { get; set; }
  /// <summary>
  /// A unique name for the group for the convenience of human readers.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Transform Rule from source to target.
  /// </summary>
  [JsonPropertyName("rule")]
  public StructureMapGroupRule[] Rule { get; set; }
  [JsonPropertyName("_rule")]
  public Element[] _Rule { get; set; }
  /// <summary>
  /// Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.
  /// </summary>
  [JsonPropertyName("typeMode")]
  public string TypeMode { get; set; }
  [JsonPropertyName("_typeMode")]
  public Element _TypeMode { get; set; }
}
/// <summary>
/// Code Values for the StructureMap.group.typeMode field
/// </summary>
public sealed class StructureMapGroupTypeModeCodes {
  public const string NONE = "none";
  public const string TYPES = "types";
  public const string TYPE_AND_TYPES = "type-and-types";
}
public class StructureMap : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "StructureMap";
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the structure map. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the structure map was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the structure map as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the structure map is presumed to be the predominant language in the place the structure map was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Allows filtering of structure maps that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Organizes the mapping into manageable chunks for human review/ease of maintenance.
  /// </summary>
  [JsonPropertyName("group")]
  public StructureMapGroup[] Group { get; set; }
  [JsonPropertyName("_group")]
  public Element[] _Group { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this structure map outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Other maps used by this map (canonical URLs).
  /// </summary>
  [JsonPropertyName("import")]
  public string?[] Import { get; set; }
  [JsonPropertyName("_import")]
  public Element[] _Import { get; set; }
  /// <summary>
  /// It may be possible for the structure map to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the structure map is the organization or individual primarily responsible for the maintenance and upkeep of the structure map. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the structure map. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the structure map. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this structure map.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Allows filtering of structure maps that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// It is not necessary for a structure map to identify any dependent structures, though not listing them may restrict its usefulness.
  /// </summary>
  [JsonPropertyName("structure")]
  public StructureMapStructure?[] Structure { get; set; }
  [JsonPropertyName("_structure")]
  public Element[] _Structure { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different structure map instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the structure map with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the StructureMap.status field
/// </summary>
public sealed class StructureMapStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// The filter properties to be applied to narrow the subscription topic stream.  When multiple filters are applied, evaluates to true if all the conditions are met; otherwise it returns false.   (i.e., logical AND).
/// </summary>
public class SubscriptionFilterBy : BackboneElement {
  /// <summary>
  /// The operator to apply to the filter value when determining matches (Search modifiers).
  /// </summary>
  [JsonPropertyName("searchModifier")]
  public string? SearchModifier { get; set; }
  [JsonPropertyName("_searchModifier")]
  public Element _SearchModifier { get; set; }
  /// <summary>
  /// The filter label (=key) as defined in the `SubscriptionTopic.canfilterBy.searchParamName`  element.
  /// </summary>
  [JsonPropertyName("searchParamName")]
  public string SearchParamName { get; set; }
  [JsonPropertyName("_searchParamName")]
  public Element _SearchParamName { get; set; }
  /// <summary>
  /// The literal value or resource path as is legal in search - for example, "Patient/123" or "le1950".
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the Subscription.filterBy.searchModifier field
/// </summary>
public sealed class SubscriptionFilterBySearchModifierCodes {
  public const string EQUALS = "=";
  public const string EQ = "eq";
  public const string NE = "ne";
  public const string GT = "gt";
  public const string LT = "lt";
  public const string GE = "ge";
  public const string LE = "le";
  public const string SA = "sa";
  public const string EB = "eb";
  public const string AP = "ap";
  public const string ABOVE = "above";
  public const string BELOW = "below";
  public const string VAL_IN = "in";
  public const string NOT_IN = "not-in";
  public const string OF_TYPE = "of-type";
}
public class Subscription : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Subscription";
  /// <summary>
  /// The type of channel to send notifications on.
  /// </summary>
  [JsonPropertyName("channelType")]
  public Coding ChannelType { get; set; }
  [JsonPropertyName("_channelType")]
  public Element _ChannelType { get; set; }
  /// <summary>
  /// Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactPoint?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// Sending the payload has obvious security implications. The server is responsible for ensuring that the content is appropriately secured.
  /// </summary>
  [JsonPropertyName("content")]
  public string? Content { get; set; }
  [JsonPropertyName("_content")]
  public Element _Content { get; set; }
  /// <summary>
  /// The mime type to send the payload in - either application/fhir+xml, or application/fhir+json. The MIME types "text/plain" and "text/html" may also be used for Email subscriptions.
  /// </summary>
  [JsonPropertyName("contentType")]
  public string? ContentType { get; set; }
  [JsonPropertyName("_contentType")]
  public Element _ContentType { get; set; }
  /// <summary>
  /// The server is permitted to deviate from this time but should observe it.
  /// </summary>
  [JsonPropertyName("end")]
  public string? End { get; set; }
  [JsonPropertyName("_end")]
  public Element _End { get; set; }
  /// <summary>
  /// For rest-hook the end-point must be an http: or https: URL; for websocket ws: or wss:; for email, a mailto: url; and for message the endpoint can be in any form of url the server understands (usually, http/s: or mllp:). The URI is allowed to be relative; in which case, it is relative to the server end-point (since there may be more than one, clients should avoid using relative URIs).
  /// </summary>
  [JsonPropertyName("endpoint")]
  public string? Endpoint { get; set; }
  [JsonPropertyName("_endpoint")]
  public Element _Endpoint { get; set; }
  /// <summary>
  /// Recommended practice: If available, convey the HTTP error in an adjacent Coding or in text.
  /// </summary>
  [JsonPropertyName("error")]
  public CodeableConcept?[] Error { get; set; }
  [JsonPropertyName("_error")]
  public Element[] _Error { get; set; }
  /// <summary>
  /// The filter properties to be applied to narrow the subscription topic stream.  When multiple filters are applied, evaluates to true if all the conditions are met; otherwise it returns false.   (i.e., logical AND).
  /// </summary>
  [JsonPropertyName("filterBy")]
  public SubscriptionFilterBy?[] FilterBy { get; set; }
  [JsonPropertyName("_filterBy")]
  public Element[] _FilterBy { get; set; }
  /// <summary>
  /// Exactly what these mean depend on the channel type. They can convey additional information to the recipient and/or meet security requirements; for example, support of multiple headers in the outgoing notifications for rest-hook type subscriptions.
  /// </summary>
  [JsonPropertyName("header")]
  public string?[] Header { get; set; }
  [JsonPropertyName("_header")]
  public Element[] _Header { get; set; }
  /// <summary>
  /// If present,  a 'hearbeat" notification (keepalive) is sent via this channel with an the interval period equal to this elements integer value in seconds.    If not present, a heartbeat notification is not sent.
  /// </summary>
  [JsonPropertyName("heartbeatPeriod")]
  public uint? HeartbeatPeriod { get; set; }
  [JsonPropertyName("_heartbeatPeriod")]
  public Element _HeartbeatPeriod { get; set; }
  /// <summary>
  /// A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// A natural language name identifying the subscription.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// A description of why this subscription is defined.
  /// </summary>
  [JsonPropertyName("reason")]
  public string? Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element _Reason { get; set; }
  /// <summary>
  /// A client can only submit subscription resources in the requested or off state. Only the server can  move a subscription from requested to active, and then to error. Either the server or the client can turn a subscription off.
  /// 
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// If present, the maximum amount of time a server will allow before failing a notification attempt.
  /// </summary>
  [JsonPropertyName("timeout")]
  public uint? Timeout { get; set; }
  [JsonPropertyName("_timeout")]
  public Element _Timeout { get; set; }
  /// <summary>
  /// The reference to the subscription topic to be notified about.
  /// </summary>
  [JsonPropertyName("topic")]
  public Reference Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element _Topic { get; set; }
}
/// <summary>
/// Code Values for the Subscription.content field
/// </summary>
public sealed class SubscriptionContentCodes {
  public const string EMPTY = "empty";
  public const string ID_ONLY = "id-only";
  public const string FULL_RESOURCE = "full-resource";
}
/// <summary>
/// Code Values for the Subscription.contentType field
/// </summary>
public sealed class SubscriptionContentTypeCodes {
  public const string MIME = "MIME";
}
/// <summary>
/// Code Values for the Subscription.status field
/// </summary>
public sealed class SubscriptionStatusCodes {
  public const string REQUESTED = "requested";
  public const string ACTIVE = "active";
  public const string ERROR = "error";
  public const string OFF = "off";
}
public class SubscriptionStatus : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SubscriptionStatus";
  /// <summary>
  /// The total number of actual events represented within this notification.  For handshake and heartbeat notifications, this will be zero or not present.  For event-notifications, this number may be one or more, depending on server batching.
  /// </summary>
  [JsonPropertyName("eventsInNotification")]
  public int? EventsInNotification { get; set; }
  [JsonPropertyName("_eventsInNotification")]
  public Element _EventsInNotification { get; set; }
  /// <summary>
  /// The total number of actual events which have been generated since the Subscription was created (inclusive of this notification) - regardless of how many have been successfully communicated.  This number is NOT incremented for handshake and heartbeat notifications.
  /// </summary>
  [JsonPropertyName("eventsSinceSubscriptionStart")]
  public string? EventsSinceSubscriptionStart { get; set; }
  [JsonPropertyName("_eventsSinceSubscriptionStart")]
  public Element _EventsSinceSubscriptionStart { get; set; }
  /// <summary>
  /// The type of event being conveyed with this notificaiton.
  /// </summary>
  [JsonPropertyName("notificationType")]
  public string NotificationType { get; set; }
  [JsonPropertyName("_notificationType")]
  public Element _NotificationType { get; set; }
  /// <summary>
  /// The status of the subscription, which marks the server state for managing the subscription.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The reference to the Subscription which generated this notification.
  /// </summary>
  [JsonPropertyName("subscription")]
  public Reference Subscription { get; set; }
  [JsonPropertyName("_subscription")]
  public Element _Subscription { get; set; }
  /// <summary>
  /// The reference to the SubscriptionTopic for the Subscription which generated this notification.
  /// </summary>
  [JsonPropertyName("topic")]
  public Reference Topic { get; set; }
  [JsonPropertyName("_topic")]
  public Element _Topic { get; set; }
}
/// <summary>
/// Code Values for the SubscriptionStatus.notificationType field
/// </summary>
public sealed class SubscriptionStatusNotificationTypeCodes {
  public const string HANDSHAKE = "handshake";
  public const string HEARTBEAT = "heartbeat";
  public const string EVENT_NOTIFICATION = "event-notification";
}
/// <summary>
/// Code Values for the SubscriptionStatus.status field
/// </summary>
public sealed class SubscriptionStatusStatusCodes {
  public const string REQUESTED = "requested";
  public const string ACTIVE = "active";
  public const string ERROR = "error";
  public const string OFF = "off";
}
/// <summary>
/// The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
/// </summary>
public class SubscriptionTopicResourceTriggerQueryCriteria : BackboneElement {
  /// <summary>
  /// The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading "/".
  /// </summary>
  [JsonPropertyName("current")]
  public string? Current { get; set; }
  [JsonPropertyName("_current")]
  public Element _Current { get; set; }
  /// <summary>
  /// The rules are search criteria (without the [base] part). Like Bundle.entry.request.url, it has no leading "/".
  /// </summary>
  [JsonPropertyName("previous")]
  public string? Previous { get; set; }
  [JsonPropertyName("_previous")]
  public Element _Previous { get; set; }
  /// <summary>
  /// If set to true, both current and previous criteria must evaluate true to  trigger a notification for this topic.  Otherwise a notification for this topic will be triggered if either one evaluates to true.
  /// </summary>
  [JsonPropertyName("requireBoth")]
  public bool? RequireBoth { get; set; }
  [JsonPropertyName("_requireBoth")]
  public Element _RequireBoth { get; set; }
}
/// <summary>
/// The criteria for including updates to a nominated resource in the subscription topic.  Thie criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression.
/// </summary>
public class SubscriptionTopicResourceTrigger : BackboneElement {
  /// <summary>
  /// Implementation of particular subscription topics might not use a computable definition and instead base their design on the definition.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// FHIRPath expression with %previous and %current vars.
  /// </summary>
  [JsonPropertyName("fhirPathCriteria")]
  public string?[] FhirPathCriteria { get; set; }
  [JsonPropertyName("_fhirPathCriteria")]
  public Element[] _FhirPathCriteria { get; set; }
  /// <summary>
  /// The REST interaction based rules that the server should use to determine when to trigger a notification for this topic.
  /// </summary>
  [JsonPropertyName("methodCriteria")]
  public string?[] MethodCriteria { get; set; }
  [JsonPropertyName("_methodCriteria")]
  public Element[] _MethodCriteria { get; set; }
  /// <summary>
  /// The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
  /// </summary>
  [JsonPropertyName("queryCriteria")]
  public SubscriptionTopicResourceTriggerQueryCriteria? QueryCriteria { get; set; }
  [JsonPropertyName("_queryCriteria")]
  public Element _QueryCriteria { get; set; }
  /// <summary>
  /// The list of resource types that are candidates for this subscription topic.  For example, the Encounter resource is updated in an 'admission' subscription topic.
  /// </summary>
  [JsonPropertyName("resourceType")]
  public string?[] ResourceType { get; set; }
  [JsonPropertyName("_resourceType")]
  public Element[] _ResourceType { get; set; }
}
/// <summary>
/// Code Values for the SubscriptionTopic.resourceTrigger.methodCriteria field
/// </summary>
public sealed class SubscriptionTopicResourceTriggerMethodCriteriaCodes {
  public const string CREATE = "create";
  public const string UPDATE = "update";
  public const string DELETE = "delete";
}
/// <summary>
/// Code Values for the SubscriptionTopic.resourceTrigger.resourceType field
/// </summary>
public sealed class SubscriptionTopicResourceTriggerResourceTypeCodes {
  public const string CANDIDATE = "Candidate";
}
/// <summary>
/// List of properties by which Subscriptions on the subscription topic can be filtered.
/// </summary>
public class SubscriptionTopicCanFilterBy : BackboneElement {
  /// <summary>
  /// Description of how this filter parameter is intended to be used.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// Allowable operators to apply when determining matches (Search Modifiers).
  /// </summary>
  [JsonPropertyName("searchModifier")]
  public string?[] SearchModifier { get; set; }
  [JsonPropertyName("_searchModifier")]
  public Element[] _SearchModifier { get; set; }
  /// <summary>
  /// Chained parameters are allowed (like "patient.gender") - but can not use colons or modifiers.
  /// </summary>
  [JsonPropertyName("searchParamName")]
  public string? SearchParamName { get; set; }
  [JsonPropertyName("_searchParamName")]
  public Element _SearchParamName { get; set; }
}
/// <summary>
/// Code Values for the SubscriptionTopic.canFilterBy.searchModifier field
/// </summary>
public sealed class SubscriptionTopicCanFilterBySearchModifierCodes {
  public const string EQUALS = "=";
  public const string EQ = "eq";
  public const string NE = "ne";
  public const string GT = "gt";
  public const string LT = "lt";
  public const string GE = "ge";
  public const string LE = "le";
  public const string SA = "sa";
  public const string EB = "eb";
  public const string AP = "ap";
  public const string ABOVE = "above";
  public const string BELOW = "below";
  public const string VAL_IN = "in";
  public const string NOT_IN = "not-in";
  public const string OF_TYPE = "of-type";
}
public class SubscriptionTopic : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SubscriptionTopic";
  /// <summary>
  /// The date may be more recent than the approval date because of minor changes / editorial corrections.
  /// </summary>
  [JsonPropertyName("approvalDate")]
  public string? ApprovalDate { get; set; }
  [JsonPropertyName("_approvalDate")]
  public Element _ApprovalDate { get; set; }
  /// <summary>
  /// List of properties by which Subscriptions on the subscription topic can be filtered.
  /// </summary>
  [JsonPropertyName("canFilterBy")]
  public SubscriptionTopicCanFilterBy?[] CanFilterBy { get; set; }
  [JsonPropertyName("_canFilterBy")]
  public Element[] _CanFilterBy { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SubscriptionTopic.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// For draft definitions, indicates the date of initial creation.  For active definitions, represents the date of activation.  For withdrawn definitions, indicates the date of withdrawal.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The canonical URL pointing to another FHIR-defined SubscriptionTopic that is adhered to in whole or in part by this SubscriptionTopic.
  /// </summary>
  [JsonPropertyName("derivedFromCanonical")]
  public string?[] DerivedFromCanonical { get; set; }
  [JsonPropertyName("_derivedFromCanonical")]
  public Element[] _DerivedFromCanonical { get; set; }
  /// <summary>
  /// This might be an HTML page, PDF, etc. or could just be a non-resolvable URI identifier.
  /// </summary>
  [JsonPropertyName("derivedFromUri")]
  public string?[] DerivedFromUri { get; set; }
  [JsonPropertyName("_derivedFromUri")]
  public Element[] _DerivedFromUri { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the Topic was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the module as conveyed in the text field of the resource itself. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The effective period for a SubscriptionTopic  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 would be published in 2015.
  /// </summary>
  [JsonPropertyName("effectivePeriod")]
  public Period? EffectivePeriod { get; set; }
  [JsonPropertyName("_effectivePeriod")]
  public Element _EffectivePeriod { get; set; }
  /// <summary>
  /// Allows filtering of SubscriptionTopic that are appropriate for use vs. not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Note: This is a business identifier, not a resource identifier (see [discussion](resource.html#identifiers)).  It is best practice for the identifier to only appear on a single resource instance, however business practices may occasionally dictate that multiple resource instances with the same identifier can exist - possibly even with different resource types.  For example, multiple Patient and a Person resource instance might share the same social insurance number.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// A jurisdiction in which the Topic is intended to be used.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// If specified, this is usually after the approval date.
  /// </summary>
  [JsonPropertyName("lastReviewDate")]
  public string? LastReviewDate { get; set; }
  [JsonPropertyName("_lastReviewDate")]
  public Element _LastReviewDate { get; set; }
  /// <summary>
  /// Helps establish the "authority/credibility" of the SubscriptionTopic.  May also allow for contact.
  /// </summary>
  [JsonPropertyName("publisher")]
  public Reference? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the Topic.  Rather it is for traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this Topic.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// The criteria for including updates to a nominated resource in the subscription topic.  Thie criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression.
  /// </summary>
  [JsonPropertyName("resourceTrigger")]
  public SubscriptionTopicResourceTrigger? ResourceTrigger { get; set; }
  [JsonPropertyName("_resourceTrigger")]
  public Element _ResourceTrigger { get; set; }
  /// <summary>
  /// A nominal state-transition diagram can be found in the [[definition.html#statemachine | Definition pattern]] documentation
  /// 
  /// Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A short, descriptive, user-friendly title for the SubscriptionTopic, for example, "admission".
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  This is the URI that will be used when making canonical references to this resource.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple usageContexts are specified, there is no expectation for whether all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be multiple different instances of a SubscriptionTopic that have the same identifier but different versions.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the SubscriptionTopic.status field
/// </summary>
public sealed class SubscriptionTopicStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
/// </summary>
public class SubstanceInstance : BackboneElement {
  /// <summary>
  /// When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
  /// </summary>
  [JsonPropertyName("expiry")]
  public string? Expiry { get; set; }
  [JsonPropertyName("_expiry")]
  public Element _Expiry { get; set; }
  /// <summary>
  /// Identifier associated with the package/container (usually a label affixed directly).
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// The amount of the substance.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
}
/// <summary>
/// A substance can be composed of other substances.
/// </summary>
public class SubstanceIngredient : BackboneElement {
  /// <summary>
  /// The amount of the ingredient in the substance - a concentration ratio.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Ratio? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// Another substance that is a component of this substance.
  /// </summary>
  [JsonPropertyName("substanceCodeableConcept")]
  public CodeableConcept SubstanceCodeableConcept { get; set; }
  [JsonPropertyName("_substanceCodeableConcept")]
  public Element _SubstanceCodeableConcept { get; set; }
  /// <summary>
  /// Another substance that is a component of this substance.
  /// </summary>
  [JsonPropertyName("substanceReference")]
  public Reference SubstanceReference { get; set; }
  [JsonPropertyName("_substanceReference")]
  public Element _SubstanceReference { get; set; }
}
public class Substance : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Substance";
  /// <summary>
  /// The level of granularity is defined by the category concepts in the value set.   More fine-grained filtering can be performed using the metadata and/or terminology hierarchy in Substance.code.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept?[] Category { get; set; }
  [JsonPropertyName("_category")]
  public Element[] _Category { get; set; }
  /// <summary>
  /// This could be a reference to an externally defined code.  It could also be a locally assigned code (e.g. a formulary),  optionally with translations to the standard drug codes.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A description of the substance - its appearance, handling requirements, and other usage notes.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// This identifier is associated with the kind of substance in contrast to the  Substance.instance.identifier which is associated with the package/container.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// A substance can be composed of other substances.
  /// </summary>
  [JsonPropertyName("ingredient")]
  public SubstanceIngredient?[] Ingredient { get; set; }
  [JsonPropertyName("_ingredient")]
  public Element[] _Ingredient { get; set; }
  /// <summary>
  /// Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.
  /// </summary>
  [JsonPropertyName("instance")]
  public SubstanceInstance?[] Instance { get; set; }
  [JsonPropertyName("_instance")]
  public Element[] _Instance { get; set; }
  /// <summary>
  /// A code to indicate if the substance is actively used.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the Substance.status field
/// </summary>
public sealed class SubstanceStatusCodes {
  public const string ACTIVE = "active";
  public const string INACTIVE = "inactive";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Moiety, for structural modifications.
/// </summary>
public class SubstanceDefinitionMoiety : BackboneElement {
  /// <summary>
  /// Quantitative value for this moiety.
  /// </summary>
  [JsonPropertyName("amountQuantity")]
  public Quantity? AmountQuantity { get; set; }
  [JsonPropertyName("_amountQuantity")]
  public Element _AmountQuantity { get; set; }
  /// <summary>
  /// Quantitative value for this moiety.
  /// </summary>
  [JsonPropertyName("amountString")]
  public string? AmountString { get; set; }
  [JsonPropertyName("_amountString")]
  public Element _AmountString { get; set; }
  /// <summary>
  /// The measurement type of the quantitative value.
  /// </summary>
  [JsonPropertyName("amountType")]
  public CodeableConcept? AmountType { get; set; }
  [JsonPropertyName("_amountType")]
  public Element _AmountType { get; set; }
  /// <summary>
  /// Identifier by which this moiety substance is known.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Molecular formula for this moiety of this substance, typically using the Hill system.
  /// </summary>
  [JsonPropertyName("molecularFormula")]
  public string? MolecularFormula { get; set; }
  [JsonPropertyName("_molecularFormula")]
  public Element _MolecularFormula { get; set; }
  /// <summary>
  /// Textual name for this moiety substance.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Optical activity type.
  /// </summary>
  [JsonPropertyName("opticalActivity")]
  public CodeableConcept? OpticalActivity { get; set; }
  [JsonPropertyName("_opticalActivity")]
  public Element _OpticalActivity { get; set; }
  /// <summary>
  /// Role that the moiety is playing.
  /// </summary>
  [JsonPropertyName("role")]
  public CodeableConcept? Role { get; set; }
  [JsonPropertyName("_role")]
  public Element _Role { get; set; }
  /// <summary>
  /// Stereochemistry type.
  /// </summary>
  [JsonPropertyName("stereochemistry")]
  public CodeableConcept? Stereochemistry { get; set; }
  [JsonPropertyName("_stereochemistry")]
  public Element _Stereochemistry { get; set; }
}
/// <summary>
/// General specifications for this substance, including how it is related to other substances.
/// </summary>
public class SubstanceDefinitionProperty : BackboneElement {
  /// <summary>
  /// Quantitative value for this property.
  /// </summary>
  [JsonPropertyName("amountQuantity")]
  public Quantity? AmountQuantity { get; set; }
  [JsonPropertyName("_amountQuantity")]
  public Element _AmountQuantity { get; set; }
  /// <summary>
  /// Quantitative value for this property.
  /// </summary>
  [JsonPropertyName("amountString")]
  public string? AmountString { get; set; }
  [JsonPropertyName("_amountString")]
  public Element _AmountString { get; set; }
  /// <summary>
  /// A category for this property, e.g. Physical, Chemical, Enzymatic.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Property type e.g. viscosity, pH, isoelectric point.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
  /// </summary>
  [JsonPropertyName("definingSubstanceReference")]
  public Reference? DefiningSubstanceReference { get; set; }
  [JsonPropertyName("_definingSubstanceReference")]
  public Element _DefiningSubstanceReference { get; set; }
  /// <summary>
  /// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
  /// </summary>
  [JsonPropertyName("definingSubstanceCodeableConcept")]
  public CodeableConcept? DefiningSubstanceCodeableConcept { get; set; }
  [JsonPropertyName("_definingSubstanceCodeableConcept")]
  public Element _DefiningSubstanceCodeableConcept { get; set; }
  /// <summary>
  /// Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
  /// </summary>
  [JsonPropertyName("parameters")]
  public string? Parameters { get; set; }
  [JsonPropertyName("_parameters")]
  public Element _Parameters { get; set; }
  /// <summary>
  /// Range of typical values.
  /// </summary>
  [JsonPropertyName("referenceRange")]
  public Range? ReferenceRange { get; set; }
  [JsonPropertyName("_referenceRange")]
  public Element _ReferenceRange { get; set; }
  /// <summary>
  /// Supporting literature.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
}
/// <summary>
/// The molecular weight or weight range (for proteins, polymers or nucleic acids).
/// </summary>
public class SubstanceDefinitionStructureIsotopeMolecularWeight : BackboneElement {
  /// <summary>
  /// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
  /// </summary>
  [JsonPropertyName("amount")]
  public Quantity? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// The method by which the molecular weight was determined.
  /// </summary>
  [JsonPropertyName("method")]
  public CodeableConcept? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// Type of molecular weight such as exact, average (also known as. number average), weight average.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
/// </summary>
public class SubstanceDefinitionStructureIsotope : BackboneElement {
  /// <summary>
  /// Half life - for a non-natural nuclide.
  /// </summary>
  [JsonPropertyName("halfLife")]
  public Quantity? HalfLife { get; set; }
  [JsonPropertyName("_halfLife")]
  public Element _HalfLife { get; set; }
  /// <summary>
  /// Substance identifier for each non-natural or radioisotope.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
  /// </summary>
  [JsonPropertyName("molecularWeight")]
  public SubstanceDefinitionStructureIsotopeMolecularWeight? MolecularWeight { get; set; }
  [JsonPropertyName("_molecularWeight")]
  public Element _MolecularWeight { get; set; }
  /// <summary>
  /// Substance name for each non-natural or radioisotope.
  /// </summary>
  [JsonPropertyName("name")]
  public CodeableConcept? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The type of isotopic substitution present in a single substance.
  /// </summary>
  [JsonPropertyName("substitution")]
  public CodeableConcept? Substitution { get; set; }
  [JsonPropertyName("_substitution")]
  public Element _Substitution { get; set; }
}
/// <summary>
/// Molecular structural representation.
/// </summary>
public class SubstanceDefinitionStructureRepresentation : BackboneElement {
  /// <summary>
  /// An attached file with the structural representation.
  /// </summary>
  [JsonPropertyName("attachment")]
  public Attachment? Attachment { get; set; }
  [JsonPropertyName("_attachment")]
  public Element _Attachment { get; set; }
  /// <summary>
  /// The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
  /// </summary>
  [JsonPropertyName("format")]
  public CodeableConcept? Format { get; set; }
  [JsonPropertyName("_format")]
  public Element _Format { get; set; }
  /// <summary>
  /// The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
  /// </summary>
  [JsonPropertyName("representation")]
  public string? Representation { get; set; }
  [JsonPropertyName("_representation")]
  public Element _Representation { get; set; }
  /// <summary>
  /// The type of structure (e.g. Full, Partial, Representative).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Structural information.
/// </summary>
public class SubstanceDefinitionStructure : BackboneElement {
  /// <summary>
  /// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
  /// </summary>
  [JsonPropertyName("isotope")]
  public SubstanceDefinitionStructureIsotope?[] Isotope { get; set; }
  [JsonPropertyName("_isotope")]
  public Element[] _Isotope { get; set; }
  /// <summary>
  /// Molecular formula of this substance, typically using the Hill system.
  /// </summary>
  [JsonPropertyName("molecularFormula")]
  public string? MolecularFormula { get; set; }
  [JsonPropertyName("_molecularFormula")]
  public Element _MolecularFormula { get; set; }
  /// <summary>
  /// Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
  /// </summary>
  [JsonPropertyName("molecularFormulaByMoiety")]
  public string? MolecularFormulaByMoiety { get; set; }
  [JsonPropertyName("_molecularFormulaByMoiety")]
  public Element _MolecularFormulaByMoiety { get; set; }
  /// <summary>
  /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
  /// </summary>
  [JsonPropertyName("molecularWeight")]
  public SubstanceDefinitionStructureIsotopeMolecularWeight? MolecularWeight { get; set; }
  [JsonPropertyName("_molecularWeight")]
  public Element _MolecularWeight { get; set; }
  /// <summary>
  /// Optical activity type.
  /// </summary>
  [JsonPropertyName("opticalActivity")]
  public CodeableConcept? OpticalActivity { get; set; }
  [JsonPropertyName("_opticalActivity")]
  public Element _OpticalActivity { get; set; }
  /// <summary>
  /// Molecular structural representation.
  /// </summary>
  [JsonPropertyName("representation")]
  public SubstanceDefinitionStructureRepresentation?[] Representation { get; set; }
  [JsonPropertyName("_representation")]
  public Element[] _Representation { get; set; }
  /// <summary>
  /// Supporting literature about the source of information.
  /// </summary>
  [JsonPropertyName("sourceDocument")]
  public Reference?[] SourceDocument { get; set; }
  [JsonPropertyName("_sourceDocument")]
  public Element[] _SourceDocument { get; set; }
  /// <summary>
  /// Stereochemistry type.
  /// </summary>
  [JsonPropertyName("stereochemistry")]
  public CodeableConcept? Stereochemistry { get; set; }
  [JsonPropertyName("_stereochemistry")]
  public Element _Stereochemistry { get; set; }
  /// <summary>
  /// The method used to elucidate the structure or characterization of the drug substance. Examples: X-ray, HPLC, NMR, Peptide mapping, Ligand binding assay.
  /// </summary>
  [JsonPropertyName("technique")]
  public CodeableConcept?[] Technique { get; set; }
  [JsonPropertyName("_technique")]
  public Element[] _Technique { get; set; }
}
/// <summary>
/// Codes associated with the substance.
/// </summary>
public class SubstanceDefinitionCode : BackboneElement {
  /// <summary>
  /// The specific code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Any comment can be provided in this field, if necessary.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Supporting literature.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
  /// <summary>
  /// Status of the code assignment, for example 'provisional', 'approved'.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The date at which the code status is changed as part of the terminology maintenance.
  /// </summary>
  [JsonPropertyName("statusDate")]
  public string? StatusDate { get; set; }
  [JsonPropertyName("_statusDate")]
  public Element _StatusDate { get; set; }
}
/// <summary>
/// Details of the official nature of this name.
/// </summary>
public class SubstanceDefinitionNameOfficial : BackboneElement {
  /// <summary>
  /// Which authority uses this official name.
  /// </summary>
  [JsonPropertyName("authority")]
  public CodeableConcept? Authority { get; set; }
  [JsonPropertyName("_authority")]
  public Element _Authority { get; set; }
  /// <summary>
  /// Date of official name change.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// The status of the official name, for example 'provisional', 'approved'.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Names applicable to this substance.
/// </summary>
public class SubstanceDefinitionName : BackboneElement {
  /// <summary>
  /// The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
  /// </summary>
  [JsonPropertyName("domain")]
  public CodeableConcept?[] Domain { get; set; }
  [JsonPropertyName("_domain")]
  public Element[] _Domain { get; set; }
  /// <summary>
  /// The jurisdiction where this name applies.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// Human language that the name is written in.
  /// </summary>
  [JsonPropertyName("language")]
  public CodeableConcept?[] Language { get; set; }
  [JsonPropertyName("_language")]
  public Element[] _Language { get; set; }
  /// <summary>
  /// The actual name.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Details of the official nature of this name.
  /// </summary>
  [JsonPropertyName("official")]
  public SubstanceDefinitionNameOfficial?[] Official { get; set; }
  [JsonPropertyName("_official")]
  public Element[] _Official { get; set; }
  /// <summary>
  /// If this is the preferred name for this substance.
  /// </summary>
  [JsonPropertyName("preferred")]
  public bool? Preferred { get; set; }
  [JsonPropertyName("_preferred")]
  public Element _Preferred { get; set; }
  /// <summary>
  /// Supporting literature.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
  /// <summary>
  /// The status of the name, for example 'current', 'proposed'.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A synonym of this particular name, by which the substance is also known.
  /// </summary>
  [JsonPropertyName("synonym")]
  public SubstanceDefinitionName?[] Synonym { get; set; }
  [JsonPropertyName("_synonym")]
  public Element[] _Synonym { get; set; }
  /// <summary>
  /// A translation for this name into another human language.
  /// </summary>
  [JsonPropertyName("translation")]
  public SubstanceDefinitionName?[] Translation { get; set; }
  [JsonPropertyName("_translation")]
  public Element[] _Translation { get; set; }
  /// <summary>
  /// Name type, for example 'systematic',  'scientific, 'brand'.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// A link between this substance and another, with details of the relationship.
/// </summary>
public class SubstanceDefinitionRelationship : BackboneElement {
  /// <summary>
  /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
  /// </summary>
  [JsonPropertyName("amountQuantity")]
  public Quantity? AmountQuantity { get; set; }
  [JsonPropertyName("_amountQuantity")]
  public Element _AmountQuantity { get; set; }
  /// <summary>
  /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
  /// </summary>
  [JsonPropertyName("amountRange")]
  public Range? AmountRange { get; set; }
  [JsonPropertyName("_amountRange")]
  public Element _AmountRange { get; set; }
  /// <summary>
  /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
  /// </summary>
  [JsonPropertyName("amountRatio")]
  public Ratio? AmountRatio { get; set; }
  [JsonPropertyName("_amountRatio")]
  public Element _AmountRatio { get; set; }
  /// <summary>
  /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
  /// </summary>
  [JsonPropertyName("amountString")]
  public string? AmountString { get; set; }
  [JsonPropertyName("_amountString")]
  public Element _AmountString { get; set; }
  /// <summary>
  /// For use when the numeric has an uncertain range.
  /// </summary>
  [JsonPropertyName("amountRatioHighLimit")]
  public Ratio? AmountRatioHighLimit { get; set; }
  [JsonPropertyName("_amountRatioHighLimit")]
  public Element _AmountRatioHighLimit { get; set; }
  /// <summary>
  /// An operator for the amount, for example "average", "approximately", "less than".
  /// </summary>
  [JsonPropertyName("amountType")]
  public CodeableConcept? AmountType { get; set; }
  [JsonPropertyName("_amountType")]
  public Element _AmountType { get; set; }
  /// <summary>
  /// For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
  /// </summary>
  [JsonPropertyName("isDefining")]
  public bool? IsDefining { get; set; }
  [JsonPropertyName("_isDefining")]
  public Element _IsDefining { get; set; }
  /// <summary>
  /// Supporting literature.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
  /// <summary>
  /// A pointer to another substance, as a resource or just a representational code.
  /// </summary>
  [JsonPropertyName("substanceDefinitionReference")]
  public Reference? SubstanceDefinitionReference { get; set; }
  [JsonPropertyName("_substanceDefinitionReference")]
  public Element _SubstanceDefinitionReference { get; set; }
  /// <summary>
  /// A pointer to another substance, as a resource or just a representational code.
  /// </summary>
  [JsonPropertyName("substanceDefinitionCodeableConcept")]
  public CodeableConcept? SubstanceDefinitionCodeableConcept { get; set; }
  [JsonPropertyName("_substanceDefinitionCodeableConcept")]
  public Element _SubstanceDefinitionCodeableConcept { get; set; }
  /// <summary>
  /// For example "salt to parent", "active moiety", "starting material", "polymorph".
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class SubstanceDefinition : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SubstanceDefinition";
  /// <summary>
  /// High level categorization, e.g. polymer or nucleic acid, or food, chemical, biological.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Codes associated with the substance.
  /// </summary>
  [JsonPropertyName("code")]
  public SubstanceDefinitionCode?[] Code { get; set; }
  [JsonPropertyName("_code")]
  public Element[] _Code { get; set; }
  /// <summary>
  /// Textual description of the substance.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// If the substance applies to only human or veterinary use.
  /// </summary>
  [JsonPropertyName("domain")]
  public CodeableConcept? Domain { get; set; }
  [JsonPropertyName("_domain")]
  public Element _Domain { get; set; }
  /// <summary>
  /// Identifier by which this substance is known.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// A company that makes this substance.
  /// </summary>
  [JsonPropertyName("manufacturer")]
  public Reference?[] Manufacturer { get; set; }
  [JsonPropertyName("_manufacturer")]
  public Element[] _Manufacturer { get; set; }
  /// <summary>
  /// Moiety, for structural modifications.
  /// </summary>
  [JsonPropertyName("moiety")]
  public SubstanceDefinitionMoiety?[] Moiety { get; set; }
  [JsonPropertyName("_moiety")]
  public Element[] _Moiety { get; set; }
  /// <summary>
  /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
  /// </summary>
  [JsonPropertyName("molecularWeight")]
  public SubstanceDefinitionStructureIsotopeMolecularWeight?[] MolecularWeight { get; set; }
  [JsonPropertyName("_molecularWeight")]
  public Element[] _MolecularWeight { get; set; }
  /// <summary>
  /// Names applicable to this substance.
  /// </summary>
  [JsonPropertyName("name")]
  public SubstanceDefinitionName?[] Name { get; set; }
  [JsonPropertyName("_name")]
  public Element[] _Name { get; set; }
  /// <summary>
  /// Textual comment about this record of a substance.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Data items specific to nucleic acids.
  /// </summary>
  [JsonPropertyName("nucleicAcid")]
  public Reference? NucleicAcid { get; set; }
  [JsonPropertyName("_nucleicAcid")]
  public Element _NucleicAcid { get; set; }
  /// <summary>
  /// Data items specific to polymers.
  /// </summary>
  [JsonPropertyName("polymer")]
  public Reference? Polymer { get; set; }
  [JsonPropertyName("_polymer")]
  public Element _Polymer { get; set; }
  /// <summary>
  /// General specifications for this substance, including how it is related to other substances.
  /// </summary>
  [JsonPropertyName("property")]
  public SubstanceDefinitionProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// Data items specific to proteins.
  /// </summary>
  [JsonPropertyName("protein")]
  public Reference? Protein { get; set; }
  [JsonPropertyName("_protein")]
  public Element _Protein { get; set; }
  /// <summary>
  /// General information detailing this substance.
  /// </summary>
  [JsonPropertyName("referenceInformation")]
  public Reference? ReferenceInformation { get; set; }
  [JsonPropertyName("_referenceInformation")]
  public Element _ReferenceInformation { get; set; }
  /// <summary>
  /// A link between this substance and another, with details of the relationship.
  /// </summary>
  [JsonPropertyName("relationship")]
  public SubstanceDefinitionRelationship?[] Relationship { get; set; }
  [JsonPropertyName("_relationship")]
  public Element[] _Relationship { get; set; }
  /// <summary>
  /// Supporting literature.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
  /// <summary>
  /// Material or taxonomic/anatomical source for the substance.
  /// </summary>
  [JsonPropertyName("sourceMaterial")]
  public Reference? SourceMaterial { get; set; }
  [JsonPropertyName("_sourceMaterial")]
  public Element _SourceMaterial { get; set; }
  /// <summary>
  /// Status of substance within the catalogue e.g. approved.
  /// </summary>
  [JsonPropertyName("status")]
  public CodeableConcept? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Structural information.
  /// </summary>
  [JsonPropertyName("structure")]
  public SubstanceDefinitionStructure? Structure { get; set; }
  [JsonPropertyName("_structure")]
  public Element _Structure { get; set; }
  /// <summary>
  /// A company that supplies this substance.
  /// </summary>
  [JsonPropertyName("supplier")]
  public Reference?[] Supplier { get; set; }
  [JsonPropertyName("_supplier")]
  public Element[] _Supplier { get; set; }
  /// <summary>
  /// A business level identifier of the substance.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// The linkages between sugar residues will also be captured.
/// </summary>
public class SubstanceNucleicAcidSubunitLinkage : BackboneElement {
  /// <summary>
  /// The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.
  /// </summary>
  [JsonPropertyName("connectivity")]
  public string? Connectivity { get; set; }
  [JsonPropertyName("_connectivity")]
  public Element _Connectivity { get; set; }
  /// <summary>
  /// Each linkage will be registered as a fragment and have an ID.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Residues shall be captured as described in 5.3.6.8.3.
  /// </summary>
  [JsonPropertyName("residueSite")]
  public string? ResidueSite { get; set; }
  [JsonPropertyName("_residueSite")]
  public Element _ResidueSite { get; set; }
}
/// <summary>
/// 5.3.6.8.1 Sugar ID (Mandatory).
/// </summary>
public class SubstanceNucleicAcidSubunitSugar : BackboneElement {
  /// <summary>
  /// The Substance ID of the sugar or sugar-like component that make up the nucleotide.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// The name of the sugar or sugar-like component that make up the nucleotide.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.
  /// </summary>
  [JsonPropertyName("residueSite")]
  public string? ResidueSite { get; set; }
  [JsonPropertyName("_residueSite")]
  public Element _ResidueSite { get; set; }
}
/// <summary>
/// Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
/// </summary>
public class SubstanceNucleicAcidSubunit : BackboneElement {
  /// <summary>
  /// The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.
  /// </summary>
  [JsonPropertyName("fivePrime")]
  public CodeableConcept? FivePrime { get; set; }
  [JsonPropertyName("_fivePrime")]
  public Element _FivePrime { get; set; }
  /// <summary>
  /// The length of the sequence shall be captured.
  /// </summary>
  [JsonPropertyName("length")]
  public int? Length { get; set; }
  [JsonPropertyName("_length")]
  public Element _Length { get; set; }
  /// <summary>
  /// The linkages between sugar residues will also be captured.
  /// </summary>
  [JsonPropertyName("linkage")]
  public SubstanceNucleicAcidSubunitLinkage?[] Linkage { get; set; }
  [JsonPropertyName("_linkage")]
  public Element[] _Linkage { get; set; }
  /// <summary>
  /// Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.
  /// </summary>
  [JsonPropertyName("sequence")]
  public string? Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// (TBC).
  /// </summary>
  [JsonPropertyName("sequenceAttachment")]
  public Attachment? SequenceAttachment { get; set; }
  [JsonPropertyName("_sequenceAttachment")]
  public Element _SequenceAttachment { get; set; }
  /// <summary>
  /// Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
  /// </summary>
  [JsonPropertyName("subunit")]
  public int? Subunit { get; set; }
  [JsonPropertyName("_subunit")]
  public Element _Subunit { get; set; }
  /// <summary>
  /// 5.3.6.8.1 Sugar ID (Mandatory).
  /// </summary>
  [JsonPropertyName("sugar")]
  public SubstanceNucleicAcidSubunitSugar?[] Sugar { get; set; }
  [JsonPropertyName("_sugar")]
  public Element[] _Sugar { get; set; }
  /// <summary>
  /// The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.
  /// </summary>
  [JsonPropertyName("threePrime")]
  public CodeableConcept? ThreePrime { get; set; }
  [JsonPropertyName("_threePrime")]
  public Element _ThreePrime { get; set; }
}
public class SubstanceNucleicAcid : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SubstanceNucleicAcid";
  /// <summary>
  /// The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.
  /// </summary>
  [JsonPropertyName("areaOfHybridisation")]
  public string? AreaOfHybridisation { get; set; }
  [JsonPropertyName("_areaOfHybridisation")]
  public Element _AreaOfHybridisation { get; set; }
  /// <summary>
  /// The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.
  /// </summary>
  [JsonPropertyName("numberOfSubunits")]
  public int? NumberOfSubunits { get; set; }
  [JsonPropertyName("_numberOfSubunits")]
  public Element _NumberOfSubunits { get; set; }
  /// <summary>
  /// (TBC).
  /// </summary>
  [JsonPropertyName("oligoNucleotideType")]
  public CodeableConcept? OligoNucleotideType { get; set; }
  [JsonPropertyName("_oligoNucleotideType")]
  public Element _OligoNucleotideType { get; set; }
  /// <summary>
  /// The type of the sequence shall be specified based on a controlled vocabulary.
  /// </summary>
  [JsonPropertyName("sequenceType")]
  public CodeableConcept? SequenceType { get; set; }
  [JsonPropertyName("_sequenceType")]
  public Element _SequenceType { get; set; }
  /// <summary>
  /// Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
  /// </summary>
  [JsonPropertyName("subunit")]
  public SubstanceNucleicAcidSubunit?[] Subunit { get; set; }
  [JsonPropertyName("_subunit")]
  public Element[] _Subunit { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstancePolymerMonomerSetStartingMaterial : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("amount")]
  public SubstanceAmount? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("isDefining")]
  public bool? IsDefining { get; set; }
  [JsonPropertyName("_isDefining")]
  public Element _IsDefining { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstancePolymerMonomerSet : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("ratioType")]
  public CodeableConcept? RatioType { get; set; }
  [JsonPropertyName("_ratioType")]
  public Element _RatioType { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("startingMaterial")]
  public SubstancePolymerMonomerSetStartingMaterial?[] StartingMaterial { get; set; }
  [JsonPropertyName("_startingMaterial")]
  public Element[] _StartingMaterial { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("amount")]
  public SubstanceAmount? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("degree")]
  public CodeableConcept? Degree { get; set; }
  [JsonPropertyName("_degree")]
  public Element _Degree { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstancePolymerRepeatRepeatUnitStructuralRepresentation : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("attachment")]
  public Attachment? Attachment { get; set; }
  [JsonPropertyName("_attachment")]
  public Element _Attachment { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("format")]
  public CodeableConcept? Format { get; set; }
  [JsonPropertyName("_format")]
  public Element _Format { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("representation")]
  public string? Representation { get; set; }
  [JsonPropertyName("_representation")]
  public Element _Representation { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstancePolymerRepeatRepeatUnit : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("amount")]
  public SubstanceAmount? Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("degreeOfPolymerisation")]
  public SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation?[] DegreeOfPolymerisation { get; set; }
  [JsonPropertyName("_degreeOfPolymerisation")]
  public Element[] _DegreeOfPolymerisation { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("orientation")]
  public CodeableConcept? Orientation { get; set; }
  [JsonPropertyName("_orientation")]
  public Element _Orientation { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("structuralRepresentation")]
  public SubstancePolymerRepeatRepeatUnitStructuralRepresentation?[] StructuralRepresentation { get; set; }
  [JsonPropertyName("_structuralRepresentation")]
  public Element[] _StructuralRepresentation { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("unit")]
  public string? Unit { get; set; }
  [JsonPropertyName("_unit")]
  public Element _Unit { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstancePolymerRepeat : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("averageMolecularFormula")]
  public string? AverageMolecularFormula { get; set; }
  [JsonPropertyName("_averageMolecularFormula")]
  public Element _AverageMolecularFormula { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("numberOfUnits")]
  public int? NumberOfUnits { get; set; }
  [JsonPropertyName("_numberOfUnits")]
  public Element _NumberOfUnits { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("repeatUnit")]
  public SubstancePolymerRepeatRepeatUnit?[] RepeatUnit { get; set; }
  [JsonPropertyName("_repeatUnit")]
  public Element[] _RepeatUnit { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("repeatUnitAmountType")]
  public CodeableConcept? RepeatUnitAmountType { get; set; }
  [JsonPropertyName("_repeatUnitAmountType")]
  public Element _RepeatUnitAmountType { get; set; }
}
public class SubstancePolymer : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SubstancePolymer";
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("class")]
  public CodeableConcept? Class { get; set; }
  [JsonPropertyName("_class")]
  public Element _Class { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("copolymerConnectivity")]
  public CodeableConcept?[] CopolymerConnectivity { get; set; }
  [JsonPropertyName("_copolymerConnectivity")]
  public Element[] _CopolymerConnectivity { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("geometry")]
  public CodeableConcept? Geometry { get; set; }
  [JsonPropertyName("_geometry")]
  public Element _Geometry { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Todo. This is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder.
  /// </summary>
  [JsonPropertyName("modification")]
  public string? Modification { get; set; }
  [JsonPropertyName("_modification")]
  public Element _Modification { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("monomerSet")]
  public SubstancePolymerMonomerSet?[] MonomerSet { get; set; }
  [JsonPropertyName("_monomerSet")]
  public Element[] _MonomerSet { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("repeat")]
  public SubstancePolymerRepeat?[] Repeat { get; set; }
  [JsonPropertyName("_repeat")]
  public Element[] _Repeat { get; set; }
}
/// <summary>
/// This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
/// </summary>
public class SubstanceProteinSubunit : BackboneElement {
  /// <summary>
  /// The modification at the C-terminal shall be specified.
  /// </summary>
  [JsonPropertyName("cTerminalModification")]
  public string? CTerminalModification { get; set; }
  [JsonPropertyName("_cTerminalModification")]
  public Element _CTerminalModification { get; set; }
  /// <summary>
  /// Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
  /// </summary>
  [JsonPropertyName("cTerminalModificationId")]
  public Identifier? CTerminalModificationId { get; set; }
  [JsonPropertyName("_cTerminalModificationId")]
  public Element _CTerminalModificationId { get; set; }
  /// <summary>
  /// Length of linear sequences of amino acids contained in the subunit.
  /// </summary>
  [JsonPropertyName("length")]
  public int? Length { get; set; }
  [JsonPropertyName("_length")]
  public Element _Length { get; set; }
  /// <summary>
  /// The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified.
  /// </summary>
  [JsonPropertyName("nTerminalModification")]
  public string? NTerminalModification { get; set; }
  [JsonPropertyName("_nTerminalModification")]
  public Element _NTerminalModification { get; set; }
  /// <summary>
  /// Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
  /// </summary>
  [JsonPropertyName("nTerminalModificationId")]
  public Identifier? NTerminalModificationId { get; set; }
  [JsonPropertyName("_nTerminalModificationId")]
  public Element _NTerminalModificationId { get; set; }
  /// <summary>
  /// The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
  /// </summary>
  [JsonPropertyName("sequence")]
  public string? Sequence { get; set; }
  [JsonPropertyName("_sequence")]
  public Element _Sequence { get; set; }
  /// <summary>
  /// The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
  /// </summary>
  [JsonPropertyName("sequenceAttachment")]
  public Attachment? SequenceAttachment { get; set; }
  [JsonPropertyName("_sequenceAttachment")]
  public Element _SequenceAttachment { get; set; }
  /// <summary>
  /// Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
  /// </summary>
  [JsonPropertyName("subunit")]
  public int? Subunit { get; set; }
  [JsonPropertyName("_subunit")]
  public Element _Subunit { get; set; }
}
public class SubstanceProtein : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SubstanceProtein";
  /// <summary>
  /// The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.
  /// </summary>
  [JsonPropertyName("disulfideLinkage")]
  public string?[] DisulfideLinkage { get; set; }
  [JsonPropertyName("_disulfideLinkage")]
  public Element[] _DisulfideLinkage { get; set; }
  /// <summary>
  /// Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable.
  /// </summary>
  [JsonPropertyName("numberOfSubunits")]
  public int? NumberOfSubunits { get; set; }
  [JsonPropertyName("_numberOfSubunits")]
  public Element _NumberOfSubunits { get; set; }
  /// <summary>
  /// The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence.
  /// </summary>
  [JsonPropertyName("sequenceType")]
  public CodeableConcept? SequenceType { get; set; }
  [JsonPropertyName("_sequenceType")]
  public Element _SequenceType { get; set; }
  /// <summary>
  /// This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
  /// </summary>
  [JsonPropertyName("subunit")]
  public SubstanceProteinSubunit?[] Subunit { get; set; }
  [JsonPropertyName("_subunit")]
  public Element[] _Subunit { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstanceReferenceInformationGene : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("gene")]
  public CodeableConcept? Gene { get; set; }
  [JsonPropertyName("_gene")]
  public Element _Gene { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("geneSequenceOrigin")]
  public CodeableConcept? GeneSequenceOrigin { get; set; }
  [JsonPropertyName("_geneSequenceOrigin")]
  public Element _GeneSequenceOrigin { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstanceReferenceInformationGeneElement : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("element")]
  public Identifier? Element { get; set; }
  [JsonPropertyName("_element")]
  public Element _Element { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstanceReferenceInformationClassification : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("classification")]
  public CodeableConcept? Classification { get; set; }
  [JsonPropertyName("_classification")]
  public Element _Classification { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("domain")]
  public CodeableConcept? Domain { get; set; }
  [JsonPropertyName("_domain")]
  public Element _Domain { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("subtype")]
  public CodeableConcept?[] Subtype { get; set; }
  [JsonPropertyName("_subtype")]
  public Element[] _Subtype { get; set; }
}
/// <summary>
/// Todo.
/// </summary>
public class SubstanceReferenceInformationTarget : BackboneElement {
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("amountQuantity")]
  public Quantity? AmountQuantity { get; set; }
  [JsonPropertyName("_amountQuantity")]
  public Element _AmountQuantity { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("amountRange")]
  public Range? AmountRange { get; set; }
  [JsonPropertyName("_amountRange")]
  public Element _AmountRange { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("amountString")]
  public string? AmountString { get; set; }
  [JsonPropertyName("_amountString")]
  public Element _AmountString { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("amountType")]
  public CodeableConcept? AmountType { get; set; }
  [JsonPropertyName("_amountType")]
  public Element _AmountType { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("interaction")]
  public CodeableConcept? Interaction { get; set; }
  [JsonPropertyName("_interaction")]
  public Element _Interaction { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("organism")]
  public CodeableConcept? Organism { get; set; }
  [JsonPropertyName("_organism")]
  public Element _Organism { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("organismType")]
  public CodeableConcept? OrganismType { get; set; }
  [JsonPropertyName("_organismType")]
  public Element _OrganismType { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("source")]
  public Reference?[] Source { get; set; }
  [JsonPropertyName("_source")]
  public Element[] _Source { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("target")]
  public Identifier? Target { get; set; }
  [JsonPropertyName("_target")]
  public Element _Target { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
public class SubstanceReferenceInformation : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SubstanceReferenceInformation";
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("classification")]
  public SubstanceReferenceInformationClassification?[] Classification { get; set; }
  [JsonPropertyName("_classification")]
  public Element[] _Classification { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("comment")]
  public string? Comment { get; set; }
  [JsonPropertyName("_comment")]
  public Element _Comment { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("gene")]
  public SubstanceReferenceInformationGene?[] Gene { get; set; }
  [JsonPropertyName("_gene")]
  public Element[] _Gene { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("geneElement")]
  public SubstanceReferenceInformationGeneElement?[] GeneElement { get; set; }
  [JsonPropertyName("_geneElement")]
  public Element[] _GeneElement { get; set; }
  /// <summary>
  /// Todo.
  /// </summary>
  [JsonPropertyName("target")]
  public SubstanceReferenceInformationTarget?[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
}
/// <summary>
/// Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
/// </summary>
public class SubstanceSourceMaterialFractionDescription : BackboneElement {
  /// <summary>
  /// This element is capturing information about the fraction of a plant part, or human plasma for fractionation.
  /// </summary>
  [JsonPropertyName("fraction")]
  public string? Fraction { get; set; }
  [JsonPropertyName("_fraction")]
  public Element _Fraction { get; set; }
  /// <summary>
  /// The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
  /// </summary>
  [JsonPropertyName("materialType")]
  public CodeableConcept? MaterialType { get; set; }
  [JsonPropertyName("_materialType")]
  public Element _MaterialType { get; set; }
}
/// <summary>
/// 4.9.13.6.1 Author type (Conditional).
/// </summary>
public class SubstanceSourceMaterialOrganismAuthor : BackboneElement {
  /// <summary>
  /// The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).
  /// </summary>
  [JsonPropertyName("authorDescription")]
  public string? AuthorDescription { get; set; }
  [JsonPropertyName("_authorDescription")]
  public Element _AuthorDescription { get; set; }
  /// <summary>
  /// The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.
  /// </summary>
  [JsonPropertyName("authorType")]
  public CodeableConcept? AuthorType { get; set; }
  [JsonPropertyName("_authorType")]
  public Element _AuthorType { get; set; }
}
/// <summary>
/// 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
/// </summary>
public class SubstanceSourceMaterialOrganismHybrid : BackboneElement {
  /// <summary>
  /// The hybrid type of an organism shall be specified.
  /// </summary>
  [JsonPropertyName("hybridType")]
  public CodeableConcept? HybridType { get; set; }
  [JsonPropertyName("_hybridType")]
  public Element _HybridType { get; set; }
  /// <summary>
  /// The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
  /// </summary>
  [JsonPropertyName("maternalOrganismId")]
  public string? MaternalOrganismId { get; set; }
  [JsonPropertyName("_maternalOrganismId")]
  public Element _MaternalOrganismId { get; set; }
  /// <summary>
  /// The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
  /// </summary>
  [JsonPropertyName("maternalOrganismName")]
  public string? MaternalOrganismName { get; set; }
  [JsonPropertyName("_maternalOrganismName")]
  public Element _MaternalOrganismName { get; set; }
  /// <summary>
  /// The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
  /// </summary>
  [JsonPropertyName("paternalOrganismId")]
  public string? PaternalOrganismId { get; set; }
  [JsonPropertyName("_paternalOrganismId")]
  public Element _PaternalOrganismId { get; set; }
  /// <summary>
  /// The name of the paternal species constituting the hybrid organism shall be specified.
  /// </summary>
  [JsonPropertyName("paternalOrganismName")]
  public string? PaternalOrganismName { get; set; }
  [JsonPropertyName("_paternalOrganismName")]
  public Element _PaternalOrganismName { get; set; }
}
/// <summary>
/// 4.9.13.7.1 Kingdom (Conditional).
/// </summary>
public class SubstanceSourceMaterialOrganismOrganismGeneral : BackboneElement {
  /// <summary>
  /// The class of an organism shall be specified.
  /// </summary>
  [JsonPropertyName("class")]
  public CodeableConcept? Class { get; set; }
  [JsonPropertyName("_class")]
  public Element _Class { get; set; }
  /// <summary>
  /// The kingdom of an organism shall be specified.
  /// </summary>
  [JsonPropertyName("kingdom")]
  public CodeableConcept? Kingdom { get; set; }
  [JsonPropertyName("_kingdom")]
  public Element _Kingdom { get; set; }
  /// <summary>
  /// The order of an organism shall be specified,.
  /// </summary>
  [JsonPropertyName("order")]
  public CodeableConcept? Order { get; set; }
  [JsonPropertyName("_order")]
  public Element _Order { get; set; }
  /// <summary>
  /// The phylum of an organism shall be specified.
  /// </summary>
  [JsonPropertyName("phylum")]
  public CodeableConcept? Phylum { get; set; }
  [JsonPropertyName("_phylum")]
  public Element _Phylum { get; set; }
}
/// <summary>
/// This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
/// </summary>
public class SubstanceSourceMaterialOrganism : BackboneElement {
  /// <summary>
  /// 4.9.13.6.1 Author type (Conditional).
  /// </summary>
  [JsonPropertyName("author")]
  public SubstanceSourceMaterialOrganismAuthor?[] Author { get; set; }
  [JsonPropertyName("_author")]
  public Element[] _Author { get; set; }
  /// <summary>
  /// The family of an organism shall be specified.
  /// </summary>
  [JsonPropertyName("family")]
  public CodeableConcept? Family { get; set; }
  [JsonPropertyName("_family")]
  public Element _Family { get; set; }
  /// <summary>
  /// The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
  /// </summary>
  [JsonPropertyName("genus")]
  public CodeableConcept? Genus { get; set; }
  [JsonPropertyName("_genus")]
  public Element _Genus { get; set; }
  /// <summary>
  /// 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
  /// </summary>
  [JsonPropertyName("hybrid")]
  public SubstanceSourceMaterialOrganismHybrid? Hybrid { get; set; }
  [JsonPropertyName("_hybrid")]
  public Element _Hybrid { get; set; }
  /// <summary>
  /// The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.
  /// </summary>
  [JsonPropertyName("intraspecificDescription")]
  public string? IntraspecificDescription { get; set; }
  [JsonPropertyName("_intraspecificDescription")]
  public Element _IntraspecificDescription { get; set; }
  /// <summary>
  /// The Intraspecific type of an organism shall be specified.
  /// </summary>
  [JsonPropertyName("intraspecificType")]
  public CodeableConcept? IntraspecificType { get; set; }
  [JsonPropertyName("_intraspecificType")]
  public Element _IntraspecificType { get; set; }
  /// <summary>
  /// 4.9.13.7.1 Kingdom (Conditional).
  /// </summary>
  [JsonPropertyName("organismGeneral")]
  public SubstanceSourceMaterialOrganismOrganismGeneral? OrganismGeneral { get; set; }
  [JsonPropertyName("_organismGeneral")]
  public Element _OrganismGeneral { get; set; }
  /// <summary>
  /// The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
  /// </summary>
  [JsonPropertyName("species")]
  public CodeableConcept? Species { get; set; }
  [JsonPropertyName("_species")]
  public Element _Species { get; set; }
}
/// <summary>
/// To do.
/// </summary>
public class SubstanceSourceMaterialPartDescription : BackboneElement {
  /// <summary>
  /// Entity of anatomical origin of source material within an organism.
  /// </summary>
  [JsonPropertyName("part")]
  public CodeableConcept? Part { get; set; }
  [JsonPropertyName("_part")]
  public Element _Part { get; set; }
  /// <summary>
  /// The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.
  /// </summary>
  [JsonPropertyName("partLocation")]
  public CodeableConcept? PartLocation { get; set; }
  [JsonPropertyName("_partLocation")]
  public Element _PartLocation { get; set; }
}
public class SubstanceSourceMaterial : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SubstanceSourceMaterial";
  /// <summary>
  /// The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
  /// </summary>
  [JsonPropertyName("countryOfOrigin")]
  public CodeableConcept?[] CountryOfOrigin { get; set; }
  [JsonPropertyName("_countryOfOrigin")]
  public Element[] _CountryOfOrigin { get; set; }
  /// <summary>
  /// Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
  /// </summary>
  [JsonPropertyName("developmentStage")]
  public CodeableConcept? DevelopmentStage { get; set; }
  [JsonPropertyName("_developmentStage")]
  public Element _DevelopmentStage { get; set; }
  /// <summary>
  /// Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
  /// </summary>
  [JsonPropertyName("fractionDescription")]
  public SubstanceSourceMaterialFractionDescription?[] FractionDescription { get; set; }
  [JsonPropertyName("_fractionDescription")]
  public Element[] _FractionDescription { get; set; }
  /// <summary>
  /// The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
  /// </summary>
  [JsonPropertyName("geographicalLocation")]
  public string?[] GeographicalLocation { get; set; }
  [JsonPropertyName("_geographicalLocation")]
  public Element[] _GeographicalLocation { get; set; }
  /// <summary>
  /// This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
  /// </summary>
  [JsonPropertyName("organism")]
  public SubstanceSourceMaterialOrganism? Organism { get; set; }
  [JsonPropertyName("_organism")]
  public Element _Organism { get; set; }
  /// <summary>
  /// The unique identifier associated with the source material parent organism shall be specified.
  /// </summary>
  [JsonPropertyName("organismId")]
  public Identifier? OrganismId { get; set; }
  [JsonPropertyName("_organismId")]
  public Element _OrganismId { get; set; }
  /// <summary>
  /// The organism accepted Scientific name shall be provided based on the organism taxonomy.
  /// </summary>
  [JsonPropertyName("organismName")]
  public string? OrganismName { get; set; }
  [JsonPropertyName("_organismName")]
  public Element _OrganismName { get; set; }
  /// <summary>
  /// The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
  /// </summary>
  [JsonPropertyName("parentSubstanceId")]
  public Identifier?[] ParentSubstanceId { get; set; }
  [JsonPropertyName("_parentSubstanceId")]
  public Element[] _ParentSubstanceId { get; set; }
  /// <summary>
  /// The parent substance of the Herbal Drug, or Herbal preparation.
  /// </summary>
  [JsonPropertyName("parentSubstanceName")]
  public string?[] ParentSubstanceName { get; set; }
  [JsonPropertyName("_parentSubstanceName")]
  public Element[] _ParentSubstanceName { get; set; }
  /// <summary>
  /// To do.
  /// </summary>
  [JsonPropertyName("partDescription")]
  public SubstanceSourceMaterialPartDescription?[] PartDescription { get; set; }
  [JsonPropertyName("_partDescription")]
  public Element[] _PartDescription { get; set; }
  /// <summary>
  /// General high level classification of the source material specific to the origin of the material.
  /// </summary>
  [JsonPropertyName("sourceMaterialClass")]
  public CodeableConcept? SourceMaterialClass { get; set; }
  [JsonPropertyName("_sourceMaterialClass")]
  public Element _SourceMaterialClass { get; set; }
  /// <summary>
  /// The state of the source material when extracted.
  /// </summary>
  [JsonPropertyName("sourceMaterialState")]
  public CodeableConcept? SourceMaterialState { get; set; }
  [JsonPropertyName("_sourceMaterialState")]
  public Element _SourceMaterialState { get; set; }
  /// <summary>
  /// The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
  /// </summary>
  [JsonPropertyName("sourceMaterialType")]
  public CodeableConcept? SourceMaterialType { get; set; }
  [JsonPropertyName("_sourceMaterialType")]
  public Element _SourceMaterialType { get; set; }
}
/// <summary>
/// The item that is being delivered or has been supplied.
/// </summary>
public class SupplyDeliverySuppliedItem : BackboneElement {
  /// <summary>
  /// Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
  /// </summary>
  [JsonPropertyName("itemCodeableConcept")]
  public CodeableConcept? ItemCodeableConcept { get; set; }
  [JsonPropertyName("_itemCodeableConcept")]
  public Element _ItemCodeableConcept { get; set; }
  /// <summary>
  /// Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
  /// </summary>
  [JsonPropertyName("itemReference")]
  public Reference? ItemReference { get; set; }
  [JsonPropertyName("_itemReference")]
  public Element _ItemReference { get; set; }
  /// <summary>
  /// The amount of supply that has been dispensed. Includes unit of measure.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity? Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
}
public class SupplyDelivery : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SupplyDelivery";
  /// <summary>
  /// A plan, proposal or order that is fulfilled in whole or in part by this event.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
  /// </summary>
  [JsonPropertyName("destination")]
  public Reference? Destination { get; set; }
  [JsonPropertyName("_destination")]
  public Element _Destination { get; set; }
  /// <summary>
  /// This identifier is typically assigned by the dispenser, and may be used to reference the delivery when exchanging information about it with other systems.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// [The list of types may be constrained as appropriate for the type of event].
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// [The list of types may be constrained as appropriate for the type of event].
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// [The list of types may be constrained as appropriate for the type of event].
  /// </summary>
  [JsonPropertyName("occurrenceTiming")]
  public Timing? OccurrenceTiming { get; set; }
  [JsonPropertyName("_occurrenceTiming")]
  public Element _OccurrenceTiming { get; set; }
  /// <summary>
  /// Not to be used to link an event to an Encounter - use Event.context for that.[The allowed reference resources may be adjusted as appropriate for the event resource].
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// A link to a resource representing the person whom the delivered item is for.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference? Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// Identifies the person who picked up the Supply.
  /// </summary>
  [JsonPropertyName("receiver")]
  public Reference?[] Receiver { get; set; }
  [JsonPropertyName("_receiver")]
  public Element[] _Receiver { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The item that is being delivered or has been supplied.
  /// </summary>
  [JsonPropertyName("suppliedItem")]
  public SupplyDeliverySuppliedItem? SuppliedItem { get; set; }
  [JsonPropertyName("_suppliedItem")]
  public Element _SuppliedItem { get; set; }
  /// <summary>
  /// The individual responsible for dispensing the medication, supplier or device.
  /// </summary>
  [JsonPropertyName("supplier")]
  public Reference? Supplier { get; set; }
  [JsonPropertyName("_supplier")]
  public Element _Supplier { get; set; }
  /// <summary>
  /// Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
}
/// <summary>
/// Code Values for the SupplyDelivery.status field
/// </summary>
public sealed class SupplyDeliveryStatusCodes {
  public const string IN_PROGRESS = "in-progress";
  public const string COMPLETED = "completed";
  public const string ABANDONED = "abandoned";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// Specific parameters for the ordered item.  For example, the size of the indicated item.
/// </summary>
public class SupplyRequestParameter : BackboneElement {
  /// <summary>
  /// A code or string that identifies the device detail being asserted.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Range means device should have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept? ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// Range means device should have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity? ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// Range means device should have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range? ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// Range means device should have a value that falls somewhere within the specified range.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
}
public class SupplyRequest : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "SupplyRequest";
  /// <summary>
  /// When the request was made.
  /// </summary>
  [JsonPropertyName("authoredOn")]
  public string? AuthoredOn { get; set; }
  [JsonPropertyName("_authoredOn")]
  public Element _AuthoredOn { get; set; }
  /// <summary>
  /// Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.
  /// </summary>
  [JsonPropertyName("category")]
  public CodeableConcept? Category { get; set; }
  [JsonPropertyName("_category")]
  public Element _Category { get; set; }
  /// <summary>
  /// Where the supply is expected to come from.
  /// </summary>
  [JsonPropertyName("deliverFrom")]
  public Reference? DeliverFrom { get; set; }
  [JsonPropertyName("_deliverFrom")]
  public Element _DeliverFrom { get; set; }
  /// <summary>
  /// Where the supply is destined to go.
  /// </summary>
  [JsonPropertyName("deliverTo")]
  public Reference? DeliverTo { get; set; }
  [JsonPropertyName("_deliverTo")]
  public Element _DeliverTo { get; set; }
  /// <summary>
  /// The identifier.type element is used to distinguish between the identifiers assigned by the requester/placer and the performer/filler.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Note that there's a difference between a prescription - an instruction to take a medication, along with a (sometimes) implicit supply, and an explicit request to supply, with no explicit instructions.
  /// </summary>
  [JsonPropertyName("item")]
  public CodeableReference Item { get; set; }
  [JsonPropertyName("_item")]
  public Element _Item { get; set; }
  /// <summary>
  /// When the request should be fulfilled.
  /// </summary>
  [JsonPropertyName("occurrenceDateTime")]
  public string? OccurrenceDateTime { get; set; }
  [JsonPropertyName("_occurrenceDateTime")]
  public Element _OccurrenceDateTime { get; set; }
  /// <summary>
  /// When the request should be fulfilled.
  /// </summary>
  [JsonPropertyName("occurrencePeriod")]
  public Period? OccurrencePeriod { get; set; }
  [JsonPropertyName("_occurrencePeriod")]
  public Element _OccurrencePeriod { get; set; }
  /// <summary>
  /// When the request should be fulfilled.
  /// </summary>
  [JsonPropertyName("occurrenceTiming")]
  public Timing? OccurrenceTiming { get; set; }
  [JsonPropertyName("_occurrenceTiming")]
  public Element _OccurrenceTiming { get; set; }
  /// <summary>
  /// Specific parameters for the ordered item.  For example, the size of the indicated item.
  /// </summary>
  [JsonPropertyName("parameter")]
  public SupplyRequestParameter?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
  /// <summary>
  /// Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// The amount that is being ordered of the indicated item.
  /// </summary>
  [JsonPropertyName("quantity")]
  public Quantity Quantity { get; set; }
  [JsonPropertyName("_quantity")]
  public Element _Quantity { get; set; }
  /// <summary>
  /// The reason why the supply item was requested.
  /// </summary>
  [JsonPropertyName("reason")]
  public CodeableReference?[] Reason { get; set; }
  [JsonPropertyName("_reason")]
  public Element[] _Reason { get; set; }
  /// <summary>
  /// The device, practitioner, etc. who initiated the request.
  /// </summary>
  [JsonPropertyName("requester")]
  public Reference? Requester { get; set; }
  [JsonPropertyName("_requester")]
  public Element _Requester { get; set; }
  /// <summary>
  /// Status of the supply request.
  /// </summary>
  [JsonPropertyName("status")]
  public string? Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// Who is intended to fulfill the request.
  /// </summary>
  [JsonPropertyName("supplier")]
  public Reference?[] Supplier { get; set; }
  [JsonPropertyName("_supplier")]
  public Element[] _Supplier { get; set; }
}
/// <summary>
/// Code Values for the SupplyRequest.priority field
/// </summary>
public sealed class SupplyRequestPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the SupplyRequest.status field
/// </summary>
public sealed class SupplyRequestStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string SUSPENDED = "suspended";
}
/// <summary>
/// If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
/// </summary>
public class TaskRestriction : BackboneElement {
  /// <summary>
  /// Note that period.high is the due date representing the time by which the task should be completed.
  /// </summary>
  [JsonPropertyName("period")]
  public Period? Period { get; set; }
  [JsonPropertyName("_period")]
  public Element _Period { get; set; }
  /// <summary>
  /// For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
  /// </summary>
  [JsonPropertyName("recipient")]
  public Reference?[] Recipient { get; set; }
  [JsonPropertyName("_recipient")]
  public Element[] _Recipient { get; set; }
  /// <summary>
  /// Indicates the number of times the requested action should occur.
  /// </summary>
  [JsonPropertyName("repetitions")]
  public uint? Repetitions { get; set; }
  [JsonPropertyName("_repetitions")]
  public Element _Repetitions { get; set; }
}
/// <summary>
/// Additional information that may be needed in the execution of the task.
/// </summary>
public class TaskInput : BackboneElement {
  /// <summary>
  /// If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueBase64Binary")]
  public string ValueBase64Binary { get; set; }
  [JsonPropertyName("_valueBase64Binary")]
  public Element _ValueBase64Binary { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCanonical")]
  public string ValueCanonical { get; set; }
  [JsonPropertyName("_valueCanonical")]
  public Element _ValueCanonical { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCode")]
  public string ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element _ValueCode { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueId")]
  public string ValueId { get; set; }
  [JsonPropertyName("_valueId")]
  public Element _ValueId { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueInstant")]
  public string ValueInstant { get; set; }
  [JsonPropertyName("_valueInstant")]
  public Element _ValueInstant { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueInteger64")]
  public string ValueInteger64 { get; set; }
  [JsonPropertyName("_valueInteger64")]
  public Element _ValueInteger64 { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueMarkdown")]
  public string ValueMarkdown { get; set; }
  [JsonPropertyName("_valueMarkdown")]
  public Element _ValueMarkdown { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueOid")]
  public string ValueOid { get; set; }
  [JsonPropertyName("_valueOid")]
  public Element _ValueOid { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valuePositiveInt")]
  public uint ValuePositiveInt { get; set; }
  [JsonPropertyName("_valuePositiveInt")]
  public Element _ValuePositiveInt { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUnsignedInt")]
  public uint ValueUnsignedInt { get; set; }
  [JsonPropertyName("_valueUnsignedInt")]
  public Element _ValueUnsignedInt { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUrl")]
  public string ValueUrl { get; set; }
  [JsonPropertyName("_valueUrl")]
  public Element _ValueUrl { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUuid")]
  public Guid ValueUuid { get; set; }
  [JsonPropertyName("_valueUuid")]
  public Element _ValueUuid { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueAddress")]
  public Address ValueAddress { get; set; }
  [JsonPropertyName("_valueAddress")]
  public Element _ValueAddress { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueAge")]
  public Age ValueAge { get; set; }
  [JsonPropertyName("_valueAge")]
  public Element _ValueAge { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueAnnotation")]
  public Annotation ValueAnnotation { get; set; }
  [JsonPropertyName("_valueAnnotation")]
  public Element _ValueAnnotation { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueContactPoint")]
  public ContactPoint ValueContactPoint { get; set; }
  [JsonPropertyName("_valueContactPoint")]
  public Element _ValueContactPoint { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCount")]
  public Count ValueCount { get; set; }
  [JsonPropertyName("_valueCount")]
  public Element _ValueCount { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDistance")]
  public Distance ValueDistance { get; set; }
  [JsonPropertyName("_valueDistance")]
  public Element _ValueDistance { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDuration")]
  public Duration ValueDuration { get; set; }
  [JsonPropertyName("_valueDuration")]
  public Element _ValueDuration { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueHumanName")]
  public HumanName ValueHumanName { get; set; }
  [JsonPropertyName("_valueHumanName")]
  public Element _ValueHumanName { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueIdentifier")]
  public Identifier ValueIdentifier { get; set; }
  [JsonPropertyName("_valueIdentifier")]
  public Element _ValueIdentifier { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueMoney")]
  public Money ValueMoney { get; set; }
  [JsonPropertyName("_valueMoney")]
  public Element _ValueMoney { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valuePeriod")]
  public Period ValuePeriod { get; set; }
  [JsonPropertyName("_valuePeriod")]
  public Element _ValuePeriod { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueRatio")]
  public Ratio ValueRatio { get; set; }
  [JsonPropertyName("_valueRatio")]
  public Element _ValueRatio { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueSampledData")]
  public SampledData ValueSampledData { get; set; }
  [JsonPropertyName("_valueSampledData")]
  public Element _ValueSampledData { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueSignature")]
  public Signature ValueSignature { get; set; }
  [JsonPropertyName("_valueSignature")]
  public Element _ValueSignature { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueTiming")]
  public Timing ValueTiming { get; set; }
  [JsonPropertyName("_valueTiming")]
  public Element _ValueTiming { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueContactDetail")]
  public ContactDetail ValueContactDetail { get; set; }
  [JsonPropertyName("_valueContactDetail")]
  public Element _ValueContactDetail { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueContributor")]
  public Contributor ValueContributor { get; set; }
  [JsonPropertyName("_valueContributor")]
  public Element _ValueContributor { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDataRequirement")]
  public DataRequirement ValueDataRequirement { get; set; }
  [JsonPropertyName("_valueDataRequirement")]
  public Element _ValueDataRequirement { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueExpression")]
  public Expression ValueExpression { get; set; }
  [JsonPropertyName("_valueExpression")]
  public Element _ValueExpression { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueParameterDefinition")]
  public ParameterDefinition ValueParameterDefinition { get; set; }
  [JsonPropertyName("_valueParameterDefinition")]
  public Element _ValueParameterDefinition { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueRelatedArtifact")]
  public RelatedArtifact ValueRelatedArtifact { get; set; }
  [JsonPropertyName("_valueRelatedArtifact")]
  public Element _ValueRelatedArtifact { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueTriggerDefinition")]
  public TriggerDefinition ValueTriggerDefinition { get; set; }
  [JsonPropertyName("_valueTriggerDefinition")]
  public Element _ValueTriggerDefinition { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUsageContext")]
  public UsageContext ValueUsageContext { get; set; }
  [JsonPropertyName("_valueUsageContext")]
  public Element _ValueUsageContext { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDosage")]
  public Dosage ValueDosage { get; set; }
  [JsonPropertyName("_valueDosage")]
  public Element _ValueDosage { get; set; }
  /// <summary>
  /// The value of the input parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueMeta")]
  public Meta ValueMeta { get; set; }
  [JsonPropertyName("_valueMeta")]
  public Element _ValueMeta { get; set; }
}
/// <summary>
/// Code Values for the Task.input.value[x] field
/// </summary>
public sealed class TaskInputValueCodes {
  public const string CONTENT = "Content";
}
/// <summary>
/// Outputs produced by the Task.
/// </summary>
public class TaskOutput : BackboneElement {
  /// <summary>
  /// The name of the Output parameter.
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueBase64Binary")]
  public string ValueBase64Binary { get; set; }
  [JsonPropertyName("_valueBase64Binary")]
  public Element _ValueBase64Binary { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCanonical")]
  public string ValueCanonical { get; set; }
  [JsonPropertyName("_valueCanonical")]
  public Element _ValueCanonical { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCode")]
  public string ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element _ValueCode { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDate")]
  public string ValueDate { get; set; }
  [JsonPropertyName("_valueDate")]
  public Element _ValueDate { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueId")]
  public string ValueId { get; set; }
  [JsonPropertyName("_valueId")]
  public Element _ValueId { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueInstant")]
  public string ValueInstant { get; set; }
  [JsonPropertyName("_valueInstant")]
  public Element _ValueInstant { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueInteger64")]
  public string ValueInteger64 { get; set; }
  [JsonPropertyName("_valueInteger64")]
  public Element _ValueInteger64 { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueMarkdown")]
  public string ValueMarkdown { get; set; }
  [JsonPropertyName("_valueMarkdown")]
  public Element _ValueMarkdown { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueOid")]
  public string ValueOid { get; set; }
  [JsonPropertyName("_valueOid")]
  public Element _ValueOid { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valuePositiveInt")]
  public uint ValuePositiveInt { get; set; }
  [JsonPropertyName("_valuePositiveInt")]
  public Element _ValuePositiveInt { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueTime")]
  public string ValueTime { get; set; }
  [JsonPropertyName("_valueTime")]
  public Element _ValueTime { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUnsignedInt")]
  public uint ValueUnsignedInt { get; set; }
  [JsonPropertyName("_valueUnsignedInt")]
  public Element _ValueUnsignedInt { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUrl")]
  public string ValueUrl { get; set; }
  [JsonPropertyName("_valueUrl")]
  public Element _ValueUrl { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUuid")]
  public Guid ValueUuid { get; set; }
  [JsonPropertyName("_valueUuid")]
  public Element _ValueUuid { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueAddress")]
  public Address ValueAddress { get; set; }
  [JsonPropertyName("_valueAddress")]
  public Element _ValueAddress { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueAge")]
  public Age ValueAge { get; set; }
  [JsonPropertyName("_valueAge")]
  public Element _ValueAge { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueAnnotation")]
  public Annotation ValueAnnotation { get; set; }
  [JsonPropertyName("_valueAnnotation")]
  public Element _ValueAnnotation { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueAttachment")]
  public Attachment ValueAttachment { get; set; }
  [JsonPropertyName("_valueAttachment")]
  public Element _ValueAttachment { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCodeableConcept")]
  public CodeableConcept ValueCodeableConcept { get; set; }
  [JsonPropertyName("_valueCodeableConcept")]
  public Element _ValueCodeableConcept { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueContactPoint")]
  public ContactPoint ValueContactPoint { get; set; }
  [JsonPropertyName("_valueContactPoint")]
  public Element _ValueContactPoint { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueCount")]
  public Count ValueCount { get; set; }
  [JsonPropertyName("_valueCount")]
  public Element _ValueCount { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDistance")]
  public Distance ValueDistance { get; set; }
  [JsonPropertyName("_valueDistance")]
  public Element _ValueDistance { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDuration")]
  public Duration ValueDuration { get; set; }
  [JsonPropertyName("_valueDuration")]
  public Element _ValueDuration { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueHumanName")]
  public HumanName ValueHumanName { get; set; }
  [JsonPropertyName("_valueHumanName")]
  public Element _ValueHumanName { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueIdentifier")]
  public Identifier ValueIdentifier { get; set; }
  [JsonPropertyName("_valueIdentifier")]
  public Element _ValueIdentifier { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueMoney")]
  public Money ValueMoney { get; set; }
  [JsonPropertyName("_valueMoney")]
  public Element _ValueMoney { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valuePeriod")]
  public Period ValuePeriod { get; set; }
  [JsonPropertyName("_valuePeriod")]
  public Element _ValuePeriod { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueQuantity")]
  public Quantity ValueQuantity { get; set; }
  [JsonPropertyName("_valueQuantity")]
  public Element _ValueQuantity { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueRange")]
  public Range ValueRange { get; set; }
  [JsonPropertyName("_valueRange")]
  public Element _ValueRange { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueRatio")]
  public Ratio ValueRatio { get; set; }
  [JsonPropertyName("_valueRatio")]
  public Element _ValueRatio { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueReference")]
  public Reference ValueReference { get; set; }
  [JsonPropertyName("_valueReference")]
  public Element _ValueReference { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueSampledData")]
  public SampledData ValueSampledData { get; set; }
  [JsonPropertyName("_valueSampledData")]
  public Element _ValueSampledData { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueSignature")]
  public Signature ValueSignature { get; set; }
  [JsonPropertyName("_valueSignature")]
  public Element _ValueSignature { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueTiming")]
  public Timing ValueTiming { get; set; }
  [JsonPropertyName("_valueTiming")]
  public Element _ValueTiming { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueContactDetail")]
  public ContactDetail ValueContactDetail { get; set; }
  [JsonPropertyName("_valueContactDetail")]
  public Element _ValueContactDetail { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueContributor")]
  public Contributor ValueContributor { get; set; }
  [JsonPropertyName("_valueContributor")]
  public Element _ValueContributor { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDataRequirement")]
  public DataRequirement ValueDataRequirement { get; set; }
  [JsonPropertyName("_valueDataRequirement")]
  public Element _ValueDataRequirement { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueExpression")]
  public Expression ValueExpression { get; set; }
  [JsonPropertyName("_valueExpression")]
  public Element _ValueExpression { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueParameterDefinition")]
  public ParameterDefinition ValueParameterDefinition { get; set; }
  [JsonPropertyName("_valueParameterDefinition")]
  public Element _ValueParameterDefinition { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueRelatedArtifact")]
  public RelatedArtifact ValueRelatedArtifact { get; set; }
  [JsonPropertyName("_valueRelatedArtifact")]
  public Element _ValueRelatedArtifact { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueTriggerDefinition")]
  public TriggerDefinition ValueTriggerDefinition { get; set; }
  [JsonPropertyName("_valueTriggerDefinition")]
  public Element _ValueTriggerDefinition { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueUsageContext")]
  public UsageContext ValueUsageContext { get; set; }
  [JsonPropertyName("_valueUsageContext")]
  public Element _ValueUsageContext { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueDosage")]
  public Dosage ValueDosage { get; set; }
  [JsonPropertyName("_valueDosage")]
  public Element _ValueDosage { get; set; }
  /// <summary>
  /// The value of the Output parameter as a basic type.
  /// </summary>
  [JsonPropertyName("valueMeta")]
  public Meta ValueMeta { get; set; }
  [JsonPropertyName("_valueMeta")]
  public Element _ValueMeta { get; set; }
}
/// <summary>
/// Code Values for the Task.output.value[x] field
/// </summary>
public sealed class TaskOutputValueCodes {
  public const string RESULT = "Result";
}
public class Task : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "Task";
  /// <summary>
  /// The date and time this task was created.
  /// </summary>
  [JsonPropertyName("authoredOn")]
  public string? AuthoredOn { get; set; }
  [JsonPropertyName("_authoredOn")]
  public Element _AuthoredOn { get; set; }
  /// <summary>
  /// BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
  /// </summary>
  [JsonPropertyName("basedOn")]
  public Reference?[] BasedOn { get; set; }
  [JsonPropertyName("_basedOn")]
  public Element[] _BasedOn { get; set; }
  /// <summary>
  /// Contains business-specific nuances of the business state.
  /// </summary>
  [JsonPropertyName("businessStatus")]
  public CodeableConcept? BusinessStatus { get; set; }
  [JsonPropertyName("_businessStatus")]
  public Element _BusinessStatus { get; set; }
  /// <summary>
  /// The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
  /// </summary>
  [JsonPropertyName("code")]
  public CodeableConcept? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// A free-text description of what is to be performed.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
  /// </summary>
  [JsonPropertyName("executionPeriod")]
  public Period? ExecutionPeriod { get; set; }
  [JsonPropertyName("_executionPeriod")]
  public Element _ExecutionPeriod { get; set; }
  /// <summary>
  /// If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
  /// </summary>
  [JsonPropertyName("focus")]
  public Reference? Focus { get; set; }
  [JsonPropertyName("_focus")]
  public Element _Focus { get; set; }
  /// <summary>
  /// The entity who benefits from the performance of the service specified in the task (e.g., the patient).
  /// </summary>
  [JsonPropertyName("for")]
  public Reference? For { get; set; }
  [JsonPropertyName("_for")]
  public Element _For { get; set; }
  /// <summary>
  /// An identifier that links together multiple tasks and other requests that were created in the same context.
  /// </summary>
  [JsonPropertyName("groupIdentifier")]
  public Identifier? GroupIdentifier { get; set; }
  [JsonPropertyName("_groupIdentifier")]
  public Element _GroupIdentifier { get; set; }
  /// <summary>
  /// The business identifier for this task.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Additional information that may be needed in the execution of the task.
  /// </summary>
  [JsonPropertyName("input")]
  public TaskInput?[] Input { get; set; }
  [JsonPropertyName("_input")]
  public Element[] _Input { get; set; }
  /// <summary>
  /// The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
  /// </summary>
  [JsonPropertyName("instantiatesCanonical")]
  public string? InstantiatesCanonical { get; set; }
  [JsonPropertyName("_instantiatesCanonical")]
  public Element _InstantiatesCanonical { get; set; }
  /// <summary>
  /// The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
  /// </summary>
  [JsonPropertyName("instantiatesUri")]
  public string? InstantiatesUri { get; set; }
  [JsonPropertyName("_instantiatesUri")]
  public Element _InstantiatesUri { get; set; }
  /// <summary>
  /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
  /// </summary>
  [JsonPropertyName("insurance")]
  public Reference?[] Insurance { get; set; }
  [JsonPropertyName("_insurance")]
  public Element[] _Insurance { get; set; }
  /// <summary>
  /// This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.
  /// 
  /// In most cases, Tasks will have an intent of "order".
  /// </summary>
  [JsonPropertyName("intent")]
  public string Intent { get; set; }
  [JsonPropertyName("_intent")]
  public Element _Intent { get; set; }
  /// <summary>
  /// The date and time of last modification to this task.
  /// </summary>
  [JsonPropertyName("lastModified")]
  public string? LastModified { get; set; }
  [JsonPropertyName("_lastModified")]
  public Element _LastModified { get; set; }
  /// <summary>
  /// Principal physical location where the this task is performed.
  /// </summary>
  [JsonPropertyName("location")]
  public Reference? Location { get; set; }
  [JsonPropertyName("_location")]
  public Element _Location { get; set; }
  /// <summary>
  /// Free-text information captured about the task as it progresses.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Outputs produced by the Task.
  /// </summary>
  [JsonPropertyName("output")]
  public TaskOutput?[] Output { get; set; }
  [JsonPropertyName("_output")]
  public Element[] _Output { get; set; }
  /// <summary>
  /// Tasks may be created with an owner not yet identified.
  /// </summary>
  [JsonPropertyName("owner")]
  public Reference? Owner { get; set; }
  [JsonPropertyName("_owner")]
  public Element _Owner { get; set; }
  /// <summary>
  /// This should usually be 0..1.
  /// </summary>
  [JsonPropertyName("partOf")]
  public Reference?[] PartOf { get; set; }
  [JsonPropertyName("_partOf")]
  public Element[] _PartOf { get; set; }
  /// <summary>
  /// The kind of participant that should perform the task.
  /// </summary>
  [JsonPropertyName("performerType")]
  public CodeableConcept?[] PerformerType { get; set; }
  [JsonPropertyName("_performerType")]
  public Element[] _PerformerType { get; set; }
  /// <summary>
  /// Indicates how quickly the Task should be addressed with respect to other requests.
  /// </summary>
  [JsonPropertyName("priority")]
  public string? Priority { get; set; }
  [JsonPropertyName("_priority")]
  public Element _Priority { get; set; }
  /// <summary>
  /// This should only be included if there is no focus or if it differs from the reason indicated on the focus.
  /// </summary>
  [JsonPropertyName("reasonCode")]
  public CodeableConcept? ReasonCode { get; set; }
  [JsonPropertyName("_reasonCode")]
  public Element _ReasonCode { get; set; }
  /// <summary>
  /// Tasks might be justified based on an Observation, a Condition, a past or planned procedure, etc.   This should only be included if there is no focus or if it differs from the reason indicated on the focus.    Use the CodeableConcept text element in `Task.reasonCode` if the data is free (uncoded) text.
  /// </summary>
  [JsonPropertyName("reasonReference")]
  public Reference? ReasonReference { get; set; }
  [JsonPropertyName("_reasonReference")]
  public Element _ReasonReference { get; set; }
  /// <summary>
  /// This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
  /// </summary>
  [JsonPropertyName("relevantHistory")]
  public Reference?[] RelevantHistory { get; set; }
  [JsonPropertyName("_relevantHistory")]
  public Element[] _RelevantHistory { get; set; }
  /// <summary>
  /// The creator of the task.
  /// </summary>
  [JsonPropertyName("requester")]
  public Reference? Requester { get; set; }
  [JsonPropertyName("_requester")]
  public Element _Requester { get; set; }
  /// <summary>
  /// If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
  /// </summary>
  [JsonPropertyName("restriction")]
  public TaskRestriction? Restriction { get; set; }
  [JsonPropertyName("_restriction")]
  public Element _Restriction { get; set; }
  /// <summary>
  /// The current status of the task.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This applies to the current status.  Look at the history of the task to see reasons for past statuses.
  /// </summary>
  [JsonPropertyName("statusReason")]
  public CodeableConcept? StatusReason { get; set; }
  [JsonPropertyName("_statusReason")]
  public Element _StatusReason { get; set; }
}
/// <summary>
/// Code Values for the Task.intent field
/// </summary>
public sealed class TaskIntentCodes {
  public const string UNKNOWN = "unknown";
  public const string PROPOSAL = "proposal";
  public const string PLAN = "plan";
  public const string ORDER = "order";
  public const string ORIGINAL_ORDER = "original-order";
  public const string REFLEX_ORDER = "reflex-order";
  public const string FILLER_ORDER = "filler-order";
  public const string INSTANCE_ORDER = "instance-order";
  public const string OPTION = "option";
}
/// <summary>
/// Code Values for the Task.priority field
/// </summary>
public sealed class TaskPriorityCodes {
  public const string ROUTINE = "routine";
  public const string URGENT = "urgent";
  public const string ASAP = "asap";
  public const string STAT = "stat";
}
/// <summary>
/// Code Values for the Task.status field
/// </summary>
public sealed class TaskStatusCodes {
  public const string DRAFT = "draft";
  public const string REQUESTED = "requested";
  public const string RECEIVED = "received";
  public const string ACCEPTED = "accepted";
  public const string PLUS = "+";
}
/// <summary>
/// Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
/// </summary>
public class TerminologyCapabilitiesSoftware : BackboneElement {
  /// <summary>
  /// Name the software is known by.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// If possible, a version should be specified, as statements are likely to be different for different versions of software.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
/// </summary>
public class TerminologyCapabilitiesImplementation : BackboneElement {
  /// <summary>
  /// Information about the specific installation that this terminology capability statement relates to.
  /// </summary>
  [JsonPropertyName("description")]
  public string Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// An absolute base URL for the implementation.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Filter Properties supported.
/// </summary>
public class TerminologyCapabilitiesCodeSystemVersionFilter : BackboneElement {
  /// <summary>
  /// Code of the property supported.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Operations supported for the property.
  /// </summary>
  [JsonPropertyName("op")]
  public string[] Op { get; set; }
  [JsonPropertyName("_op")]
  public Element[] _Op { get; set; }
}
/// <summary>
/// Code Values for the TerminologyCapabilities.codeSystem.version.filter.code field
/// </summary>
public sealed class TerminologyCapabilitiesCodeSystemVersionFilterCodeCodes {
  public const string CODE = "Code";
}
/// <summary>
/// Code Values for the TerminologyCapabilities.codeSystem.version.filter.op field
/// </summary>
public sealed class TerminologyCapabilitiesCodeSystemVersionFilterOpCodes {
  public const string OPERATIONS = "Operations";
}
/// <summary>
/// Language translations might not be available for all codes.
/// </summary>
public class TerminologyCapabilitiesCodeSystemVersion : BackboneElement {
  /// <summary>
  /// For version-less code systems, there should be a single version with no identifier.
  /// </summary>
  [JsonPropertyName("code")]
  public string? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// If the compositional grammar defined by the code system is supported.
  /// </summary>
  [JsonPropertyName("compositional")]
  public bool? Compositional { get; set; }
  [JsonPropertyName("_compositional")]
  public Element _Compositional { get; set; }
  /// <summary>
  /// Filter Properties supported.
  /// </summary>
  [JsonPropertyName("filter")]
  public TerminologyCapabilitiesCodeSystemVersionFilter?[] Filter { get; set; }
  [JsonPropertyName("_filter")]
  public Element[] _Filter { get; set; }
  /// <summary>
  /// If this is the default version for this code system.
  /// </summary>
  [JsonPropertyName("isDefault")]
  public bool? IsDefault { get; set; }
  [JsonPropertyName("_isDefault")]
  public Element _IsDefault { get; set; }
  /// <summary>
  /// Language Displays supported.
  /// </summary>
  [JsonPropertyName("language")]
  public string?[] Language { get; set; }
  [JsonPropertyName("_language")]
  public Element[] _Language { get; set; }
  /// <summary>
  /// Properties supported for $lookup.
  /// </summary>
  [JsonPropertyName("property")]
  public string?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
}
/// <summary>
/// Code Values for the TerminologyCapabilities.codeSystem.version.language field
/// </summary>
public sealed class TerminologyCapabilitiesCodeSystemVersionLanguageCodes {
  public const string LANGUAGE = "Language";
}
/// <summary>
/// Code Values for the TerminologyCapabilities.codeSystem.version.property field
/// </summary>
public sealed class TerminologyCapabilitiesCodeSystemVersionPropertyCodes {
  public const string PROPERTIES = "Properties";
}
/// <summary>
/// The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
/// </summary>
public class TerminologyCapabilitiesCodeSystem : BackboneElement {
  /// <summary>
  /// True if subsumption is supported for this version of the code system.
  /// </summary>
  [JsonPropertyName("subsumption")]
  public bool? Subsumption { get; set; }
  [JsonPropertyName("_subsumption")]
  public Element _Subsumption { get; set; }
  /// <summary>
  /// URI for the Code System.
  /// </summary>
  [JsonPropertyName("uri")]
  public string? Uri { get; set; }
  [JsonPropertyName("_uri")]
  public Element _Uri { get; set; }
  /// <summary>
  /// Language translations might not be available for all codes.
  /// </summary>
  [JsonPropertyName("version")]
  public TerminologyCapabilitiesCodeSystemVersion?[] Version { get; set; }
  [JsonPropertyName("_version")]
  public Element[] _Version { get; set; }
}
/// <summary>
/// Supported expansion parameter.
/// </summary>
public class TerminologyCapabilitiesExpansionParameter : BackboneElement {
  /// <summary>
  /// Description of support for parameter.
  /// </summary>
  [JsonPropertyName("documentation")]
  public string? Documentation { get; set; }
  [JsonPropertyName("_documentation")]
  public Element _Documentation { get; set; }
  /// <summary>
  /// Expansion Parameter name.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
}
/// <summary>
/// Code Values for the TerminologyCapabilities.expansion.parameter.name field
/// </summary>
public sealed class TerminologyCapabilitiesExpansionParameterNameCodes {
  public const string EXPANSION = "Expansion";
}
/// <summary>
/// Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
/// </summary>
public class TerminologyCapabilitiesExpansion : BackboneElement {
  /// <summary>
  /// Whether the server can return nested value sets.
  /// </summary>
  [JsonPropertyName("hierarchical")]
  public bool? Hierarchical { get; set; }
  [JsonPropertyName("_hierarchical")]
  public Element _Hierarchical { get; set; }
  /// <summary>
  /// Allow request for incomplete expansions?
  /// </summary>
  [JsonPropertyName("incomplete")]
  public bool? Incomplete { get; set; }
  [JsonPropertyName("_incomplete")]
  public Element _Incomplete { get; set; }
  /// <summary>
  /// Whether the server supports paging on expansion.
  /// </summary>
  [JsonPropertyName("paging")]
  public bool? Paging { get; set; }
  [JsonPropertyName("_paging")]
  public Element _Paging { get; set; }
  /// <summary>
  /// Supported expansion parameter.
  /// </summary>
  [JsonPropertyName("parameter")]
  public TerminologyCapabilitiesExpansionParameter?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
  /// <summary>
  /// This documentation should cover things like case sensitivity,  use of punctuation if not ignored, what wild cards are supported (if any), whether text is starts with or contains, and whether word order matters.
  /// </summary>
  [JsonPropertyName("textFilter")]
  public string? TextFilter { get; set; }
  [JsonPropertyName("_textFilter")]
  public Element _TextFilter { get; set; }
}
/// <summary>
/// Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
/// </summary>
public class TerminologyCapabilitiesValidateCode : BackboneElement {
  /// <summary>
  /// Whether translations are validated.
  /// </summary>
  [JsonPropertyName("translations")]
  public bool Translations { get; set; }
  [JsonPropertyName("_translations")]
  public Element _Translations { get; set; }
}
/// <summary>
/// Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
/// </summary>
public class TerminologyCapabilitiesTranslation : BackboneElement {
  /// <summary>
  /// Whether the client must identify the map.
  /// </summary>
  [JsonPropertyName("needsMap")]
  public bool NeedsMap { get; set; }
  [JsonPropertyName("_needsMap")]
  public Element _NeedsMap { get; set; }
}
/// <summary>
/// Whether the $closure operation is supported.
/// </summary>
public class TerminologyCapabilitiesClosure : BackboneElement {
  /// <summary>
  /// If cross-system closure is supported.
  /// </summary>
  [JsonPropertyName("translation")]
  public bool? Translation { get; set; }
  [JsonPropertyName("_translation")]
  public Element _Translation { get; set; }
}
public class TerminologyCapabilities : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "TerminologyCapabilities";
  /// <summary>
  /// Whether the $closure operation is supported.
  /// </summary>
  [JsonPropertyName("closure")]
  public TerminologyCapabilitiesClosure? Closure { get; set; }
  [JsonPropertyName("_closure")]
  public Element _Closure { get; set; }
  /// <summary>
  /// See notes on the [ValueSet](valueset.html#) resource.
  /// </summary>
  [JsonPropertyName("codeSearch")]
  public string? CodeSearch { get; set; }
  [JsonPropertyName("_codeSearch")]
  public Element _CodeSearch { get; set; }
  /// <summary>
  /// The code system - identified by its system URL - may also be declared explicitly as a Code System Resource at /CodeSystem, but it might not be.
  /// </summary>
  [JsonPropertyName("codeSystem")]
  public TerminologyCapabilitiesCodeSystem?[] CodeSystem { get; set; }
  [JsonPropertyName("_codeSystem")]
  public Element[] _CodeSystem { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the terminology capabilities. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the terminology capabilities was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the terminology capabilities as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the terminology capabilities is presumed to be the predominant language in the place the terminology capabilities was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
  /// </summary>
  [JsonPropertyName("expansion")]
  public TerminologyCapabilitiesExpansion? Expansion { get; set; }
  [JsonPropertyName("_expansion")]
  public Element _Expansion { get; set; }
  /// <summary>
  /// Allows filtering of terminology capabilitiess that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this terminology capabilities outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
  /// </summary>
  [JsonPropertyName("implementation")]
  public TerminologyCapabilitiesImplementation? Implementation { get; set; }
  [JsonPropertyName("_implementation")]
  public Element _Implementation { get; set; }
  /// <summary>
  /// It may be possible for the terminology capabilities to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
  /// </summary>
  [JsonPropertyName("kind")]
  public string Kind { get; set; }
  [JsonPropertyName("_kind")]
  public Element _Kind { get; set; }
  /// <summary>
  /// Whether the server supports lockedDate.
  /// </summary>
  [JsonPropertyName("lockedDate")]
  public bool? LockedDate { get; set; }
  [JsonPropertyName("_lockedDate")]
  public Element _LockedDate { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the terminology capabilities is the organization or individual primarily responsible for the maintenance and upkeep of the terminology capabilities. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the terminology capabilities. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the terminology capabilities. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this terminology capabilities.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
  /// </summary>
  [JsonPropertyName("software")]
  public TerminologyCapabilitiesSoftware? Software { get; set; }
  [JsonPropertyName("_software")]
  public Element _Software { get; set; }
  /// <summary>
  /// Allows filtering of terminology capabilitiess that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
  /// </summary>
  [JsonPropertyName("translation")]
  public TerminologyCapabilitiesTranslation? Translation { get; set; }
  [JsonPropertyName("_translation")]
  public Element _Translation { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
  /// </summary>
  [JsonPropertyName("validateCode")]
  public TerminologyCapabilitiesValidateCode? ValidateCode { get; set; }
  [JsonPropertyName("_validateCode")]
  public Element _ValidateCode { get; set; }
  /// <summary>
  /// There may be different terminology capabilities instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the terminology capabilities with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the TerminologyCapabilities.codeSearch field
/// </summary>
public sealed class TerminologyCapabilitiesCodeSearchCodes {
  public const string VAL_EXPLICIT = "explicit";
  public const string ALL = "all";
}
/// <summary>
/// Code Values for the TerminologyCapabilities.kind field
/// </summary>
public sealed class TerminologyCapabilitiesKindCodes {
  public const string INSTANCE = "instance";
  public const string CAPABILITY = "capability";
  public const string REQUIREMENTS = "requirements";
}
/// <summary>
/// Code Values for the TerminologyCapabilities.status field
/// </summary>
public sealed class TerminologyCapabilitiesStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// A participant in the test execution, either the execution engine, a client, or a server.
/// </summary>
public class TestReportParticipant : BackboneElement {
  /// <summary>
  /// The display name of the participant.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// The type of participant.
  /// </summary>
  [JsonPropertyName("type")]
  public string Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// The uri of the participant. An absolute URL is preferred.
  /// </summary>
  [JsonPropertyName("uri")]
  public string Uri { get; set; }
  [JsonPropertyName("_uri")]
  public Element _Uri { get; set; }
}
/// <summary>
/// Code Values for the TestReport.participant.type field
/// </summary>
public sealed class TestReportParticipantTypeCodes {
  public const string TEST_ENGINE = "test-engine";
  public const string CLIENT = "client";
  public const string SERVER = "server";
}
/// <summary>
/// The operation performed.
/// </summary>
public class TestReportSetupActionOperation : BackboneElement {
  /// <summary>
  /// A link to further details on the result.
  /// </summary>
  [JsonPropertyName("detail")]
  public string? Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element _Detail { get; set; }
  /// <summary>
  /// An explanatory message associated with the result.
  /// </summary>
  [JsonPropertyName("message")]
  public string? Message { get; set; }
  [JsonPropertyName("_message")]
  public Element _Message { get; set; }
  /// <summary>
  /// The result of this operation.
  /// </summary>
  [JsonPropertyName("result")]
  public string Result { get; set; }
  [JsonPropertyName("_result")]
  public Element _Result { get; set; }
}
/// <summary>
/// Code Values for the TestReport.setup.action.operation.result field
/// </summary>
public sealed class TestReportSetupActionOperationResultCodes {
  public const string PASS = "pass";
  public const string SKIP = "skip";
  public const string FAIL = "fail";
  public const string WARNING = "warning";
  public const string ERROR = "error";
}
/// <summary>
/// The results of the assertion performed on the previous operations.
/// </summary>
public class TestReportSetupActionAssert : BackboneElement {
  /// <summary>
  /// A link to further details on the result.
  /// </summary>
  [JsonPropertyName("detail")]
  public string? Detail { get; set; }
  [JsonPropertyName("_detail")]
  public Element _Detail { get; set; }
  /// <summary>
  /// An explanatory message associated with the result.
  /// </summary>
  [JsonPropertyName("message")]
  public string? Message { get; set; }
  [JsonPropertyName("_message")]
  public Element _Message { get; set; }
  /// <summary>
  /// The result of this assertion.
  /// </summary>
  [JsonPropertyName("result")]
  public string Result { get; set; }
  [JsonPropertyName("_result")]
  public Element _Result { get; set; }
}
/// <summary>
/// Code Values for the TestReport.setup.action.assert.result field
/// </summary>
public sealed class TestReportSetupActionAssertResultCodes {
  public const string PASS = "pass";
  public const string SKIP = "skip";
  public const string FAIL = "fail";
  public const string WARNING = "warning";
  public const string ERROR = "error";
}
/// <summary>
/// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
/// </summary>
public class TestReportSetupAction : BackboneElement {
  /// <summary>
  /// The results of the assertion performed on the previous operations.
  /// </summary>
  [JsonPropertyName("assert")]
  public TestReportSetupActionAssert? Assert { get; set; }
  [JsonPropertyName("_assert")]
  public Element _Assert { get; set; }
  /// <summary>
  /// The operation performed.
  /// </summary>
  [JsonPropertyName("operation")]
  public TestReportSetupActionOperation? Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element _Operation { get; set; }
}
/// <summary>
/// The results of the series of required setup operations before the tests were executed.
/// </summary>
public class TestReportSetup : BackboneElement {
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonPropertyName("action")]
  public TestReportSetupAction[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
}
/// <summary>
/// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
/// </summary>
public class TestReportTestAction : BackboneElement {
  /// <summary>
  /// The results of the assertion performed on the previous operations.
  /// </summary>
  [JsonPropertyName("assert")]
  public TestReportSetupActionAssert? Assert { get; set; }
  [JsonPropertyName("_assert")]
  public Element _Assert { get; set; }
  /// <summary>
  /// An operation would involve a REST request to a server.
  /// </summary>
  [JsonPropertyName("operation")]
  public TestReportSetupActionOperation? Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element _Operation { get; set; }
}
/// <summary>
/// A test executed from the test script.
/// </summary>
public class TestReportTest : BackboneElement {
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonPropertyName("action")]
  public TestReportTestAction[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
  /// <summary>
  /// A short description of the test used by test engines for tracking and reporting purposes.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The name of this test used for tracking/logging purposes by test engines.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
}
/// <summary>
/// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
/// </summary>
public class TestReportTeardownAction : BackboneElement {
  /// <summary>
  /// An operation would involve a REST request to a server.
  /// </summary>
  [JsonPropertyName("operation")]
  public TestReportSetupActionOperation Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element _Operation { get; set; }
}
/// <summary>
/// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
/// </summary>
public class TestReportTeardown : BackboneElement {
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonPropertyName("action")]
  public TestReportTeardownAction[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
}
public class TestReport : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "TestReport";
  /// <summary>
  /// Identifier for the TestScript assigned for external purposes outside the context of FHIR.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Additional specific dates may be added as extensions.
  /// </summary>
  [JsonPropertyName("issued")]
  public string? Issued { get; set; }
  [JsonPropertyName("_issued")]
  public Element _Issued { get; set; }
  /// <summary>
  /// Not expected to be globally unique.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// A participant in the test execution, either the execution engine, a client, or a server.
  /// </summary>
  [JsonPropertyName("participant")]
  public TestReportParticipant?[] Participant { get; set; }
  [JsonPropertyName("_participant")]
  public Element[] _Participant { get; set; }
  /// <summary>
  /// The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
  /// </summary>
  [JsonPropertyName("result")]
  public string Result { get; set; }
  [JsonPropertyName("_result")]
  public Element _Result { get; set; }
  /// <summary>
  /// The final score (percentage of tests passed) resulting from the execution of the TestScript.
  /// </summary>
  [JsonPropertyName("score")]
  public decimal? Score { get; set; }
  [JsonPropertyName("_score")]
  public Element _Score { get; set; }
  /// <summary>
  /// The results of the series of required setup operations before the tests were executed.
  /// </summary>
  [JsonPropertyName("setup")]
  public TestReportSetup? Setup { get; set; }
  [JsonPropertyName("_setup")]
  public Element _Setup { get; set; }
  /// <summary>
  /// The status represents where the execution is currently within the test script execution life cycle.
  /// 
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
  /// </summary>
  [JsonPropertyName("teardown")]
  public TestReportTeardown? Teardown { get; set; }
  [JsonPropertyName("_teardown")]
  public Element _Teardown { get; set; }
  /// <summary>
  /// A test executed from the test script.
  /// </summary>
  [JsonPropertyName("test")]
  public TestReportTest?[] Test { get; set; }
  [JsonPropertyName("_test")]
  public Element[] _Test { get; set; }
  /// <summary>
  /// Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("tester")]
  public string? Tester { get; set; }
  [JsonPropertyName("_tester")]
  public Element _Tester { get; set; }
  /// <summary>
  /// Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
  /// </summary>
  [JsonPropertyName("testScript")]
  public Reference TestScript { get; set; }
  [JsonPropertyName("_testScript")]
  public Element _TestScript { get; set; }
}
/// <summary>
/// Code Values for the TestReport.result field
/// </summary>
public sealed class TestReportResultCodes {
  public const string PASS = "pass";
  public const string FAIL = "fail";
  public const string PENDING = "pending";
}
/// <summary>
/// Code Values for the TestReport.status field
/// </summary>
public sealed class TestReportStatusCodes {
  public const string COMPLETED = "completed";
  public const string IN_PROGRESS = "in-progress";
  public const string WAITING = "waiting";
  public const string STOPPED = "stopped";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
/// <summary>
/// The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
/// </summary>
public class TestScriptOrigin : BackboneElement {
  /// <summary>
  /// A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1 cannot be specified twice ... once as FormFiller and again as FormProcessor within the same script as that could get confusing during test configuration). 
  /// 
  /// Different origin indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Filler).
  /// 
  /// The origin indices provided elsewhere in the test script must be one of these origin indices.
  /// </summary>
  [JsonPropertyName("index")]
  public int Index { get; set; }
  [JsonPropertyName("_index")]
  public Element _Index { get; set; }
  /// <summary>
  /// Must be a "sender"/"client" profile.
  /// </summary>
  [JsonPropertyName("profile")]
  public Coding Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
}
/// <summary>
/// The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
/// </summary>
public class TestScriptDestination : BackboneElement {
  /// <summary>
  /// A given destination index (e.g. 1) can appear only once in the list (e.g. Destination 1 cannot be specified twice ... once as Form-Manager and again as Form-Processor within the same script as that could get confusing during test configuration). 
  /// 
  /// Different destination indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Manager).
  /// 
  /// The destination indices provided elsewhere in the test script must be one of these destination indices.
  /// </summary>
  [JsonPropertyName("index")]
  public int Index { get; set; }
  [JsonPropertyName("_index")]
  public Element _Index { get; set; }
  /// <summary>
  /// Must be a "receiver"/"server" profile.
  /// </summary>
  [JsonPropertyName("profile")]
  public Coding Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element _Profile { get; set; }
}
/// <summary>
/// A link to the FHIR specification that this test is covering.
/// </summary>
public class TestScriptMetadataLink : BackboneElement {
  /// <summary>
  /// Short description of the link.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// URL to a particular requirement or feature within the FHIR specification.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
/// </summary>
public class TestScriptMetadataCapability : BackboneElement {
  /// <summary>
  /// The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.
  /// </summary>
  [JsonPropertyName("capabilities")]
  public string Capabilities { get; set; }
  [JsonPropertyName("_capabilities")]
  public Element _Capabilities { get; set; }
  /// <summary>
  /// Description of the capabilities that this test script is requiring the server to support.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Which server these requirements apply to.
  /// </summary>
  [JsonPropertyName("destination")]
  public int? Destination { get; set; }
  [JsonPropertyName("_destination")]
  public Element _Destination { get; set; }
  /// <summary>
  /// Links to the FHIR specification that describes this interaction and the resources involved in more detail.
  /// </summary>
  [JsonPropertyName("link")]
  public string?[] Link { get; set; }
  [JsonPropertyName("_link")]
  public Element[] _Link { get; set; }
  /// <summary>
  /// Which origin server these requirements apply to.
  /// </summary>
  [JsonPropertyName("origin")]
  public int?[] Origin { get; set; }
  [JsonPropertyName("_origin")]
  public Element[] _Origin { get; set; }
  /// <summary>
  /// Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
  /// </summary>
  [JsonPropertyName("required")]
  public bool Required { get; set; }
  [JsonPropertyName("_required")]
  public Element _Required { get; set; }
  /// <summary>
  /// Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
  /// </summary>
  [JsonPropertyName("validated")]
  public bool Validated { get; set; }
  [JsonPropertyName("_validated")]
  public Element _Validated { get; set; }
}
/// <summary>
/// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
/// </summary>
public class TestScriptMetadata : BackboneElement {
  /// <summary>
  /// When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
  /// </summary>
  [JsonPropertyName("capability")]
  public TestScriptMetadataCapability[] Capability { get; set; }
  [JsonPropertyName("_capability")]
  public Element[] _Capability { get; set; }
  /// <summary>
  /// A link to the FHIR specification that this test is covering.
  /// </summary>
  [JsonPropertyName("link")]
  public TestScriptMetadataLink?[] Link { get; set; }
  [JsonPropertyName("_link")]
  public Element[] _Link { get; set; }
}
/// <summary>
/// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
/// </summary>
public class TestScriptFixture : BackboneElement {
  /// <summary>
  /// Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
  /// </summary>
  [JsonPropertyName("autocreate")]
  public bool Autocreate { get; set; }
  [JsonPropertyName("_autocreate")]
  public Element _Autocreate { get; set; }
  /// <summary>
  /// Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
  /// </summary>
  [JsonPropertyName("autodelete")]
  public bool Autodelete { get; set; }
  [JsonPropertyName("_autodelete")]
  public Element _Autodelete { get; set; }
  /// <summary>
  /// See http://build.fhir.org/resourcelist.html for complete list of resource types.
  /// </summary>
  [JsonPropertyName("resource")]
  public Reference? Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element _Resource { get; set; }
}
/// <summary>
/// Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
/// </summary>
public class TestScriptVariable : BackboneElement {
  /// <summary>
  /// The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.
  /// </summary>
  [JsonPropertyName("defaultValue")]
  public string? DefaultValue { get; set; }
  [JsonPropertyName("_defaultValue")]
  public Element _DefaultValue { get; set; }
  /// <summary>
  /// A free text natural language description of the variable and its purpose.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
  /// </summary>
  [JsonPropertyName("expression")]
  public string? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.
  /// </summary>
  [JsonPropertyName("headerField")]
  public string? HeaderField { get; set; }
  [JsonPropertyName("_headerField")]
  public Element _HeaderField { get; set; }
  /// <summary>
  /// Displayable text string with hint help information to the user when entering a default value.
  /// </summary>
  [JsonPropertyName("hint")]
  public string? Hint { get; set; }
  [JsonPropertyName("_hint")]
  public Element _Hint { get; set; }
  /// <summary>
  /// Placeholders would contain the variable name wrapped in ${} in "operation.params", "operation.requestHeader.value", and "operation.url" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
  /// </summary>
  [JsonPropertyName("path")]
  public string? Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
  /// <summary>
  /// This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.
  /// </summary>
  [JsonPropertyName("sourceId")]
  public string? SourceId { get; set; }
  [JsonPropertyName("_sourceId")]
  public Element _SourceId { get; set; }
}
/// <summary>
/// This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
/// </summary>
public class TestScriptSetupActionOperationRequestHeader : BackboneElement {
  /// <summary>
  /// If header element is specified, then field is required.
  /// </summary>
  [JsonPropertyName("field")]
  public string Field { get; set; }
  [JsonPropertyName("_field")]
  public Element _Field { get; set; }
  /// <summary>
  /// If header element is specified, then value is required.  No conversions will be done by the test engine e.g. "xml" to "application/fhir+xml".  The values will be set in HTTP headers "as-is".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// The operation to perform.
/// </summary>
public class TestScriptSetupActionOperation : BackboneElement {
  /// <summary>
  /// If this is specified, then test engine shall set the 'Accept' header to the corresponding value.  If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.
  /// </summary>
  [JsonPropertyName("accept")]
  public string? Accept { get; set; }
  [JsonPropertyName("_accept")]
  public Element _Accept { get; set; }
  /// <summary>
  /// If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.  If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.
  /// </summary>
  [JsonPropertyName("contentType")]
  public string? ContentType { get; set; }
  [JsonPropertyName("_contentType")]
  public Element _ContentType { get; set; }
  /// <summary>
  /// This has no impact on the verification itself.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// If multiple TestScript.destination elements are defined and operation.destination is undefined, test engine will report an error as it cannot determine what destination to use for the exchange.
  /// </summary>
  [JsonPropertyName("destination")]
  public int? Destination { get; set; }
  [JsonPropertyName("_destination")]
  public Element _Destination { get; set; }
  /// <summary>
  /// Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
  /// </summary>
  [JsonPropertyName("encodeRequestUrl")]
  public bool EncodeRequestUrl { get; set; }
  [JsonPropertyName("_encodeRequestUrl")]
  public Element _EncodeRequestUrl { get; set; }
  /// <summary>
  /// This has no impact on the verification itself.
  /// </summary>
  [JsonPropertyName("label")]
  public string? Label { get; set; }
  [JsonPropertyName("_label")]
  public Element _Label { get; set; }
  /// <summary>
  /// The primary purpose of the explicit HTTP method is support of  HTTP POST method invocation of the FHIR search. Other uses will include support of negative testing.
  /// </summary>
  [JsonPropertyName("method")]
  public string? Method { get; set; }
  [JsonPropertyName("_method")]
  public Element _Method { get; set; }
  /// <summary>
  /// If absent, test engine will send the message.  When present, test engine will not send the request message but will wait for the request message to be sent from this origin server.
  /// </summary>
  [JsonPropertyName("origin")]
  public int? Origin { get; set; }
  [JsonPropertyName("_origin")]
  public Element _Origin { get; set; }
  /// <summary>
  /// If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.   Test engines would append whatever is specified for "params" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The "params" element does not correspond exactly to "search parameters".  Nor is it the "path".  It corresponds to the part of the URL that comes after the [type] (when "resource" element is specified); e.g. It corresponds to "/[id]/_history/[vid] {?_format=[mime-type]}" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
  /// </summary>
  [JsonPropertyName("params")]
  public string? Params { get; set; }
  [JsonPropertyName("_params")]
  public Element _Params { get; set; }
  /// <summary>
  /// This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
  /// </summary>
  [JsonPropertyName("requestHeader")]
  public TestScriptSetupActionOperationRequestHeader?[] RequestHeader { get; set; }
  [JsonPropertyName("_requestHeader")]
  public Element[] _RequestHeader { get; set; }
  /// <summary>
  /// If a requestId is supplied, then the resulting request (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "requestId".  If requestId is not specified, it is the test engine's responsibility to store the request and use it as the requestId in subsequent assertions when assertion path and/or headerField is specified, direction is equal to request, and the requestId in not specified.
  /// </summary>
  [JsonPropertyName("requestId")]
  public string? RequestId { get; set; }
  [JsonPropertyName("_requestId")]
  public Element _RequestId { get; set; }
  /// <summary>
  /// If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored. For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present. For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url. For "vread" and "history" operations, the versionId value will also be used.
  /// </summary>
  [JsonPropertyName("resource")]
  public string? Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element _Resource { get; set; }
  /// <summary>
  /// If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "responseId".  If responseId is not specified, it is the test engine's responsibility to store the response and use it as the responseId in subsequent assertions when assertion path and/or headerField is specified and the responseId is not specified.
  /// </summary>
  [JsonPropertyName("responseId")]
  public string? ResponseId { get; set; }
  [JsonPropertyName("_responseId")]
  public Element _ResponseId { get; set; }
  /// <summary>
  /// The id of the fixture used as the body of a PUT or POST request.
  /// </summary>
  [JsonPropertyName("sourceId")]
  public string? SourceId { get; set; }
  [JsonPropertyName("_sourceId")]
  public Element _SourceId { get; set; }
  /// <summary>
  /// If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.
  /// </summary>
  [JsonPropertyName("targetId")]
  public string? TargetId { get; set; }
  [JsonPropertyName("_targetId")]
  public Element _TargetId { get; set; }
  /// <summary>
  /// See http://build.fhir.org/http.html for list of server interactions.
  /// </summary>
  [JsonPropertyName("type")]
  public Coding? Type { get; set; }
  [JsonPropertyName("_type")]
  public Element _Type { get; set; }
  /// <summary>
  /// Used to set the request URL explicitly.  If "url" element is defined, then "targetId", "resource", and "params" elements will be ignored.  Test engines would use whatever is specified in "url" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
}
/// <summary>
/// Code Values for the TestScript.setup.action.operation.accept field
/// </summary>
public sealed class TestScriptSetupActionOperationAcceptCodes {
  public const string MIME = "Mime";
}
/// <summary>
/// Code Values for the TestScript.setup.action.operation.contentType field
/// </summary>
public sealed class TestScriptSetupActionOperationContentTypeCodes {
  public const string MIME = "Mime";
}
/// <summary>
/// Code Values for the TestScript.setup.action.operation.method field
/// </summary>
public sealed class TestScriptSetupActionOperationMethodCodes {
  public const string DELETE = "delete";
  public const string GET = "get";
  public const string OPTIONS = "options";
  public const string PATCH = "patch";
  public const string POST = "post";
  public const string PUT = "put";
  public const string HEAD = "head";
}
/// <summary>
/// Code Values for the TestScript.setup.action.operation.resource field
/// </summary>
public sealed class TestScriptSetupActionOperationResourceCodes {
  public const string RESOURCE = "Resource";
}
/// <summary>
/// In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
/// </summary>
public class TestScriptSetupActionAssert : BackboneElement {
  /// <summary>
  /// Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
  /// </summary>
  [JsonPropertyName("compareToSourceExpression")]
  public string? CompareToSourceExpression { get; set; }
  [JsonPropertyName("_compareToSourceExpression")]
  public Element _CompareToSourceExpression { get; set; }
  /// <summary>
  /// Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
  /// </summary>
  [JsonPropertyName("compareToSourceId")]
  public string? CompareToSourceId { get; set; }
  [JsonPropertyName("_compareToSourceId")]
  public Element _CompareToSourceId { get; set; }
  /// <summary>
  /// The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
  /// </summary>
  [JsonPropertyName("compareToSourcePath")]
  public string? CompareToSourcePath { get; set; }
  [JsonPropertyName("_compareToSourcePath")]
  public Element _CompareToSourcePath { get; set; }
  /// <summary>
  /// If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If "assert.sourceId" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).  If you'd like to have more control over the string, then use 'assert.headerField' instead.
  /// </summary>
  [JsonPropertyName("contentType")]
  public string? ContentType { get; set; }
  [JsonPropertyName("_contentType")]
  public Element _ContentType { get; set; }
  /// <summary>
  /// This has no impact on the verification itself.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.
  /// </summary>
  [JsonPropertyName("direction")]
  public string? Direction { get; set; }
  [JsonPropertyName("_direction")]
  public Element _Direction { get; set; }
  /// <summary>
  /// If both "expression" and a "fixtureId" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId.  If "expression" is specified and a "fixtureId" is not, then the expression will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
  /// </summary>
  [JsonPropertyName("expression")]
  public string? Expression { get; set; }
  [JsonPropertyName("_expression")]
  public Element _Expression { get; set; }
  /// <summary>
  /// If "headerField" is specified then "value" must be specified.  If "sourceId" is not specified, then "headerField" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.
  /// </summary>
  [JsonPropertyName("headerField")]
  public string? HeaderField { get; set; }
  [JsonPropertyName("_headerField")]
  public Element _HeaderField { get; set; }
  /// <summary>
  /// This has no impact on the verification itself.
  /// </summary>
  [JsonPropertyName("label")]
  public string? Label { get; set; }
  [JsonPropertyName("_label")]
  public Element _Label { get; set; }
  /// <summary>
  /// Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.
  /// </summary>
  [JsonPropertyName("minimumId")]
  public string? MinimumId { get; set; }
  [JsonPropertyName("_minimumId")]
  public Element _MinimumId { get; set; }
  /// <summary>
  /// Asserts that the Bundle contains first, last, and next links.
  /// </summary>
  [JsonPropertyName("navigationLinks")]
  public bool? NavigationLinks { get; set; }
  [JsonPropertyName("_navigationLinks")]
  public Element _NavigationLinks { get; set; }
  /// <summary>
  /// Operators are useful especially for negative testing.  If operator is not specified, then the "equals" operator is assumed; e.g. ```<code>   <assert>  <operator value="in" />  <responseCode value="200,201,204" />    </assert>    <assert>  <operator value="notEquals" />  <response value="okay"/>   </assert>    <assert>  <operator value="greaterThan" />    <responseHeader>     <field value="Content-Length" />     <value value="0" />    </responseHeader/>   </assert> </code> ```.
  /// </summary>
  [JsonPropertyName("operator")]
  public string? Operator { get; set; }
  [JsonPropertyName("_operator")]
  public Element _Operator { get; set; }
  /// <summary>
  /// If both "path" and a "fixtureId" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If "path" is specified and a "fixtureId" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
  /// </summary>
  [JsonPropertyName("path")]
  public string? Path { get; set; }
  [JsonPropertyName("_path")]
  public Element _Path { get; set; }
  /// <summary>
  /// If "requestMethod" is specified then it will be used in place of "value". The "requestMethod" will evaluate against the last operation's request HTTP operation.
  /// </summary>
  [JsonPropertyName("requestMethod")]
  public string? RequestMethod { get; set; }
  [JsonPropertyName("_requestMethod")]
  public Element _RequestMethod { get; set; }
  /// <summary>
  /// If "requestURL" is specified then it will be used in place of "value". The "requestURL" will evaluate against the last operation's full request URL path string.
  /// </summary>
  [JsonPropertyName("requestURL")]
  public string? RequestURL { get; set; }
  [JsonPropertyName("_requestURL")]
  public Element _RequestURL { get; set; }
  /// <summary>
  /// This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://build.fhir.org/resourcelist.html for complete list of resource types; e.g. <assert > <resourceType value="Patient" </assert>.
  /// </summary>
  [JsonPropertyName("resource")]
  public string? Resource { get; set; }
  [JsonPropertyName("_resource")]
  public Element _Resource { get; set; }
  /// <summary>
  /// This is a shorter way of achieving similar verifications via "assert.responseCode".  If you need more control, then use "assert.responseCode"  e.g. <assert>  <contentType value="json" />  <response value="okay"/> </assert>.
  /// </summary>
  [JsonPropertyName("response")]
  public string? Response { get; set; }
  [JsonPropertyName("_response")]
  public Element _Response { get; set; }
  /// <summary>
  /// To be used with "operator" attribute value. Asserts that the response code equals this value if "operator" is not specified.   If the operator is "in" or "notIn" then the responseCode would be a comma-separated list of values e.g. "200,201". Otherwise, it's expected to be a numeric value.   If "fixture" is not specified, then the "responseBodyId" value of the last operation is assumed.
  /// </summary>
  [JsonPropertyName("responseCode")]
  public string? ResponseCode { get; set; }
  [JsonPropertyName("_responseCode")]
  public Element _ResponseCode { get; set; }
  /// <summary>
  /// This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.
  /// </summary>
  [JsonPropertyName("sourceId")]
  public string? SourceId { get; set; }
  [JsonPropertyName("_sourceId")]
  public Element _SourceId { get; set; }
  /// <summary>
  /// The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.
  /// </summary>
  [JsonPropertyName("validateProfileId")]
  public string? ValidateProfileId { get; set; }
  [JsonPropertyName("_validateProfileId")]
  public Element _ValidateProfileId { get; set; }
  /// <summary>
  /// The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.
  /// </summary>
  [JsonPropertyName("value")]
  public string? Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
  /// <summary>
  /// If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.
  /// </summary>
  [JsonPropertyName("warningOnly")]
  public bool WarningOnly { get; set; }
  [JsonPropertyName("_warningOnly")]
  public Element _WarningOnly { get; set; }
}
/// <summary>
/// Code Values for the TestScript.setup.action.assert.contentType field
/// </summary>
public sealed class TestScriptSetupActionAssertContentTypeCodes {
  public const string MIME = "Mime";
}
/// <summary>
/// Code Values for the TestScript.setup.action.assert.direction field
/// </summary>
public sealed class TestScriptSetupActionAssertDirectionCodes {
  public const string RESPONSE = "response";
  public const string REQUEST = "request";
}
/// <summary>
/// Code Values for the TestScript.setup.action.assert.operator field
/// </summary>
public sealed class TestScriptSetupActionAssertOperatorCodes {
  public const string EQUALS = "equals";
  public const string NOTEQUALS = "notEquals";
  public const string VAL_IN = "in";
  public const string NOTIN = "notIn";
  public const string GREATERTHAN = "greaterThan";
  public const string LESSTHAN = "lessThan";
  public const string EMPTY = "empty";
  public const string NOTEMPTY = "notEmpty";
  public const string CONTAINS = "contains";
  public const string NOTCONTAINS = "notContains";
  public const string EVAL = "eval";
}
/// <summary>
/// Code Values for the TestScript.setup.action.assert.requestMethod field
/// </summary>
public sealed class TestScriptSetupActionAssertRequestMethodCodes {
  public const string DELETE = "delete";
  public const string GET = "get";
  public const string OPTIONS = "options";
  public const string PATCH = "patch";
  public const string POST = "post";
  public const string PUT = "put";
  public const string HEAD = "head";
}
/// <summary>
/// Code Values for the TestScript.setup.action.assert.resource field
/// </summary>
public sealed class TestScriptSetupActionAssertResourceCodes {
  public const string RESOURCE = "Resource";
}
/// <summary>
/// Code Values for the TestScript.setup.action.assert.response field
/// </summary>
public sealed class TestScriptSetupActionAssertResponseCodes {
  public const string OKAY = "okay";
  public const string CREATED = "created";
  public const string NOCONTENT = "noContent";
  public const string NOTMODIFIED = "notModified";
  public const string BAD = "bad";
  public const string FORBIDDEN = "forbidden";
  public const string NOTFOUND = "notFound";
  public const string METHODNOTALLOWED = "methodNotAllowed";
  public const string CONFLICT = "conflict";
  public const string GONE = "gone";
  public const string PRECONDITIONFAILED = "preconditionFailed";
  public const string UNPROCESSABLE = "unprocessable";
}
/// <summary>
/// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
/// </summary>
public class TestScriptSetupAction : BackboneElement {
  /// <summary>
  /// In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
  /// </summary>
  [JsonPropertyName("assert")]
  public TestScriptSetupActionAssert? Assert { get; set; }
  [JsonPropertyName("_assert")]
  public Element _Assert { get; set; }
  /// <summary>
  /// The operation to perform.
  /// </summary>
  [JsonPropertyName("operation")]
  public TestScriptSetupActionOperation? Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element _Operation { get; set; }
}
/// <summary>
/// A series of required setup operations before tests are executed.
/// </summary>
public class TestScriptSetup : BackboneElement {
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonPropertyName("action")]
  public TestScriptSetupAction[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
}
/// <summary>
/// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
/// </summary>
public class TestScriptTestAction : BackboneElement {
  /// <summary>
  /// In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
  /// </summary>
  [JsonPropertyName("assert")]
  public TestScriptSetupActionAssert? Assert { get; set; }
  [JsonPropertyName("_assert")]
  public Element _Assert { get; set; }
  /// <summary>
  /// An operation would involve a REST request to a server.
  /// </summary>
  [JsonPropertyName("operation")]
  public TestScriptSetupActionOperation? Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element _Operation { get; set; }
}
/// <summary>
/// A test in this script.
/// </summary>
public class TestScriptTest : BackboneElement {
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonPropertyName("action")]
  public TestScriptTestAction[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
  /// <summary>
  /// A short description of the test used by test engines for tracking and reporting purposes.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The name of this test used for tracking/logging purposes by test engines.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
}
/// <summary>
/// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
/// </summary>
public class TestScriptTeardownAction : BackboneElement {
  /// <summary>
  /// An operation would involve a REST request to a server.
  /// </summary>
  [JsonPropertyName("operation")]
  public TestScriptSetupActionOperation Operation { get; set; }
  [JsonPropertyName("_operation")]
  public Element _Operation { get; set; }
}
/// <summary>
/// A series of operations required to clean up after all the tests are executed (successfully or otherwise).
/// </summary>
public class TestScriptTeardown : BackboneElement {
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonPropertyName("action")]
  public TestScriptTeardownAction[] Action { get; set; }
  [JsonPropertyName("_action")]
  public Element[] _Action { get; set; }
}
public class TestScript : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "TestScript";
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test script. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the test script was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test script as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the test script is presumed to be the predominant language in the place the test script was created).
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
  /// </summary>
  [JsonPropertyName("destination")]
  public TestScriptDestination?[] Destination { get; set; }
  [JsonPropertyName("_destination")]
  public Element[] _Destination { get; set; }
  /// <summary>
  /// Allows filtering of test scripts that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
  /// </summary>
  [JsonPropertyName("fixture")]
  public TestScriptFixture?[] Fixture { get; set; }
  [JsonPropertyName("_fixture")]
  public Element[] _Fixture { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this test script outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// It may be possible for the test script to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
  /// </summary>
  [JsonPropertyName("metadata")]
  public TestScriptMetadata? Metadata { get; set; }
  [JsonPropertyName("_metadata")]
  public Element _Metadata { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
  /// </summary>
  [JsonPropertyName("origin")]
  public TestScriptOrigin?[] Origin { get; set; }
  [JsonPropertyName("_origin")]
  public Element[] _Origin { get; set; }
  /// <summary>
  /// See http://build.fhir.org/resourcelist.html for complete list of resource types.
  /// </summary>
  [JsonPropertyName("profile")]
  public Reference?[] Profile { get; set; }
  [JsonPropertyName("_profile")]
  public Element[] _Profile { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the test script is the organization or individual primarily responsible for the maintenance and upkeep of the test script. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test script. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the test script. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test script.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// A series of required setup operations before tests are executed.
  /// </summary>
  [JsonPropertyName("setup")]
  public TestScriptSetup? Setup { get; set; }
  [JsonPropertyName("_setup")]
  public Element _Setup { get; set; }
  /// <summary>
  /// Allows filtering of test scripts that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// A series of operations required to clean up after all the tests are executed (successfully or otherwise).
  /// </summary>
  [JsonPropertyName("teardown")]
  public TestScriptTeardown? Teardown { get; set; }
  [JsonPropertyName("_teardown")]
  public Element _Teardown { get; set; }
  /// <summary>
  /// A test in this script.
  /// </summary>
  [JsonPropertyName("test")]
  public TestScriptTest?[] Test { get; set; }
  [JsonPropertyName("_test")]
  public Element[] _Test { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
  /// </summary>
  [JsonPropertyName("variable")]
  public TestScriptVariable?[] Variable { get; set; }
  [JsonPropertyName("_variable")]
  public Element[] _Variable { get; set; }
  /// <summary>
  /// There may be different test script instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the test script with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the TestScript.status field
/// </summary>
public sealed class TestScriptStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
/// </summary>
public class ValueSetComposeIncludeConceptDesignation : BackboneElement {
  /// <summary>
  /// In the absence of a language, the resource language applies.
  /// </summary>
  [JsonPropertyName("language")]
  public string? Language { get; set; }
  [JsonPropertyName("_language")]
  public Element _Language { get; set; }
  /// <summary>
  /// If no use is provided, the designation can be assumed to be suitable for general display to a human user.
  /// </summary>
  [JsonPropertyName("use")]
  public Coding? Use { get; set; }
  [JsonPropertyName("_use")]
  public Element _Use { get; set; }
  /// <summary>
  /// The text value for this designation.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the ValueSet.compose.include.concept.designation.language field
/// </summary>
public sealed class ValueSetComposeIncludeConceptDesignationLanguageCodes {
  public const string HUMAN = "Human";
}
/// <summary>
/// The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
/// </summary>
public class ValueSetComposeIncludeConcept : BackboneElement {
  /// <summary>
  /// Expressions are allowed if defined by the underlying code system.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Concepts have both a ```display``` and an array of ```designation```. The display is equivalent to a special designation with an implied ```designation.use``` of "primary code" and a language equal to the [Resource Language](resource.html#language).
  /// </summary>
  [JsonPropertyName("designation")]
  public ValueSetComposeIncludeConceptDesignation?[] Designation { get; set; }
  [JsonPropertyName("_designation")]
  public Element[] _Designation { get; set; }
  /// <summary>
  /// The value set resource allows for an alternative display to be specified for when this concept is used in this particular value set. See notes in the value set narrative about the correct use of this element.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
}
/// <summary>
/// Code Values for the ValueSet.compose.include.concept.code field
/// </summary>
public sealed class ValueSetComposeIncludeConceptCodeCodes {
  public const string CODE = "Code";
}
/// <summary>
/// Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
/// </summary>
public class ValueSetComposeIncludeFilter : BackboneElement {
  /// <summary>
  /// In case filter.property represents a property of the system, the operation applies to the selected property. In case filter.property represents a filter of the system, the operation SHALL match one of the CodeSystem.filter.operator values.
  /// </summary>
  [JsonPropertyName("op")]
  public string Op { get; set; }
  [JsonPropertyName("_op")]
  public Element _Op { get; set; }
  /// <summary>
  /// A code that identifies a property or a filter defined in the code system.
  /// </summary>
  [JsonPropertyName("property")]
  public string Property { get; set; }
  [JsonPropertyName("_property")]
  public Element _Property { get; set; }
  /// <summary>
  /// Use regex matching with care - full regex matching on every SNOMED CT term is prohibitive, for example.
  /// </summary>
  [JsonPropertyName("value")]
  public string Value { get; set; }
  [JsonPropertyName("_value")]
  public Element _Value { get; set; }
}
/// <summary>
/// Code Values for the ValueSet.compose.include.filter.op field
/// </summary>
public sealed class ValueSetComposeIncludeFilterOpCodes {
  public const string EQUALS = "=";
  public const string IS_A = "is-a";
  public const string DESCENDENT_OF = "descendent-of";
  public const string IS_NOT_A = "is-not-a";
  public const string REGEX = "regex";
  public const string VAL_IN = "in";
  public const string NOT_IN = "not-in";
  public const string GENERALIZES = "generalizes";
  public const string EXISTS = "exists";
}
/// <summary>
/// Code Values for the ValueSet.compose.include.filter.property field
/// </summary>
public sealed class ValueSetComposeIncludeFilterPropertyCodes {
  public const string A = "A";
}
/// <summary>
/// All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
/// </summary>
public class ValueSetComposeInclude : BackboneElement {
  /// <summary>
  /// The list of concepts is considered ordered, though the order might not have any particular significance. Typically, the order of an expansion follows that defined in the compose element.
  /// </summary>
  [JsonPropertyName("concept")]
  public ValueSetComposeIncludeConcept?[] Concept { get; set; }
  [JsonPropertyName("_concept")]
  public Element[] _Concept { get; set; }
  /// <summary>
  /// Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party.
  /// </summary>
  [JsonPropertyName("filter")]
  public ValueSetComposeIncludeFilter?[] Filter { get; set; }
  [JsonPropertyName("_filter")]
  public Element[] _Filter { get; set; }
  /// <summary>
  /// If there are no codes or filters, the entire code system is included. Note that the set of codes that are included may contain abstract codes. See ''Coding.system'' for further documentation about the correct value for the system element.
  /// </summary>
  [JsonPropertyName("system")]
  public string? System { get; set; }
  [JsonPropertyName("_system")]
  public Element _System { get; set; }
  /// <summary>
  /// The value set URI is either a logical reference to a defined value set such as a [SNOMED CT reference set](snomedct.html#implicit), or a direct reference to a value set definition using ValueSet.url. The reference might not refer to an actual FHIR ValueSet resource; in this case, whatever is referred to is an implicit definition of a value set that needs to be clear about how versions are resolved.
  /// </summary>
  [JsonPropertyName("valueSet")]
  public string?[] ValueSet { get; set; }
  [JsonPropertyName("_valueSet")]
  public Element[] _ValueSet { get; set; }
  /// <summary>
  /// This is used when selecting the descendants of a concept - they may change between versions. If no version is specified, then the exact contents of the value set might not be known until a context of use binds it to a particular version. The special value '*' means all versions; It is at server discretion regarding expansions and which versions must be supported.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
/// </summary>
public class ValueSetCompose : BackboneElement {
  /// <summary>
  /// Usually this is used to selectively exclude codes that were included by subsumption in the inclusions. Any display names specified for the codes are ignored.
  /// </summary>
  [JsonPropertyName("exclude")]
  public ValueSetComposeInclude?[] Exclude { get; set; }
  [JsonPropertyName("_exclude")]
  public Element[] _Exclude { get; set; }
  /// <summary>
  /// Note that in the FHIR terminology framework, "deprecated" does not mean inactive, but in some code systems, e.g. LOINC, "deprecated" does mean inactive. Code systems should define what codes are considered to be inactive. If this is not clearly defined (including in the FHIR code system resource), then all codes are assumed to be active.
  /// 
  /// The Value Set Definition specification defines an ActiveOnly element, which is the reverse of this element e.g. (ValueSet.compose.inactive=FALSE) is the same as (VSD.ActiveOnly=TRUE).
  /// </summary>
  [JsonPropertyName("inactive")]
  public bool? Inactive { get; set; }
  [JsonPropertyName("_inactive")]
  public Element _Inactive { get; set; }
  /// <summary>
  /// All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is 'include all the codes that meet all these conditions'.
  /// </summary>
  [JsonPropertyName("include")]
  public ValueSetComposeInclude[] Include { get; set; }
  [JsonPropertyName("_include")]
  public Element[] _Include { get; set; }
  /// <summary>
  /// With a defined lockedDate the value set is considered "Locked". Otherwise, the value set may have different expansions as underlying code systems and/or value sets evolve.  The interpretation of lockedDate is often dependent on the context - e.g. a SNOMED CT derived value set with a lockedDate will have a different expansion in USA than in UK.  If a value set specifies a version for include and exclude statements, and also specifies a locked date, the specified versions need to be available that date, or the value set will not be usable.
  /// </summary>
  [JsonPropertyName("lockedDate")]
  public string? LockedDate { get; set; }
  [JsonPropertyName("_lockedDate")]
  public Element _LockedDate { get; set; }
  /// <summary>
  /// Note that property names can clash, so using a URI is recommended.
  /// </summary>
  [JsonPropertyName("property")]
  public string?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
}
/// <summary>
/// The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).
/// </summary>
public class ValueSetExpansionParameter : BackboneElement {
  /// <summary>
  /// The names are assigned at the discretion of the server.
  /// </summary>
  [JsonPropertyName("name")]
  public string Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// The value of the parameter.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string? ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The value of the parameter.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool? ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// The value of the parameter.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int? ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// The value of the parameter.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal? ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
  /// <summary>
  /// The value of the parameter.
  /// </summary>
  [JsonPropertyName("valueUri")]
  public string? ValueUri { get; set; }
  [JsonPropertyName("_valueUri")]
  public Element _ValueUri { get; set; }
  /// <summary>
  /// The value of the parameter.
  /// </summary>
  [JsonPropertyName("valueCode")]
  public string? ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element _ValueCode { get; set; }
  /// <summary>
  /// The value of the parameter.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string? ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
}
/// <summary>
/// Code Values for the ValueSet.expansion.parameter.value[x] field
/// </summary>
public sealed class ValueSetExpansionParameterValueCodes {
  public const string VALUE = "Value";
}
/// <summary>
/// A property defines an additional slot through which additional information can be provided about a concept.
/// </summary>
public class ValueSetExpansionProperty : BackboneElement {
  /// <summary>
  /// A code that is used to identify the property. The code is used in ValueSet.expansion.contains.property.code.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.
  /// </summary>
  [JsonPropertyName("uri")]
  public string? Uri { get; set; }
  [JsonPropertyName("_uri")]
  public Element _Uri { get; set; }
}
/// <summary>
/// Code Values for the ValueSet.expansion.property.code field
/// </summary>
public sealed class ValueSetExpansionPropertyCodeCodes {
  public const string IDENTIFIES = "Identifies";
}
/// <summary>
/// A property value for this concept.
/// </summary>
public class ValueSetExpansionContainsProperty : BackboneElement {
  /// <summary>
  /// A code that is a reference to ValueSet.expansion.property.code.
  /// </summary>
  [JsonPropertyName("code")]
  public string Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueCode")]
  public string ValueCode { get; set; }
  [JsonPropertyName("_valueCode")]
  public Element _ValueCode { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueCoding")]
  public Coding ValueCoding { get; set; }
  [JsonPropertyName("_valueCoding")]
  public Element _ValueCoding { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueString")]
  public string ValueString { get; set; }
  [JsonPropertyName("_valueString")]
  public Element _ValueString { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueInteger")]
  public int ValueInteger { get; set; }
  [JsonPropertyName("_valueInteger")]
  public Element _ValueInteger { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueBoolean")]
  public bool ValueBoolean { get; set; }
  [JsonPropertyName("_valueBoolean")]
  public Element _ValueBoolean { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueDateTime")]
  public string ValueDateTime { get; set; }
  [JsonPropertyName("_valueDateTime")]
  public Element _ValueDateTime { get; set; }
  /// <summary>
  /// The value of this property.
  /// </summary>
  [JsonPropertyName("valueDecimal")]
  public decimal ValueDecimal { get; set; }
  [JsonPropertyName("_valueDecimal")]
  public Element _ValueDecimal { get; set; }
}
/// <summary>
/// Code Values for the ValueSet.expansion.contains.property.code field
/// </summary>
public sealed class ValueSetExpansionContainsPropertyCodeCodes {
  public const string REFERENCE = "Reference";
}
/// <summary>
/// Code Values for the ValueSet.expansion.contains.property.value[x] field
/// </summary>
public sealed class ValueSetExpansionContainsPropertyValueCodes {
  public const string VALUE = "Value";
}
/// <summary>
/// The codes that are contained in the value set expansion.
/// </summary>
public class ValueSetExpansionContains : BackboneElement {
  /// <summary>
  /// This should not be understood to exclude its use for searching (e.g. by subsumption testing). The client should know whether it is appropriate for the user to select an abstract code or not.
  /// </summary>
  [JsonPropertyName("abstract")]
  public bool? Abstract { get; set; }
  [JsonPropertyName("_abstract")]
  public Element _Abstract { get; set; }
  /// <summary>
  /// The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
  /// </summary>
  [JsonPropertyName("code")]
  public string? Code { get; set; }
  [JsonPropertyName("_code")]
  public Element _Code { get; set; }
  /// <summary>
  /// If the expansion uses this element, there is  no implication about the logical relationship between them, and the  structure cannot be used for logical inferencing. The structure  exists to provide navigational assistance for helping human users to  locate codes in the expansion.
  /// </summary>
  [JsonPropertyName("contains")]
  public ValueSetExpansionContains?[] Contains { get; set; }
  [JsonPropertyName("_contains")]
  public Element[] _Contains { get; set; }
  /// <summary>
  /// The designations provided must be based on the value set and code system definitions.
  /// </summary>
  [JsonPropertyName("designation")]
  public ValueSetComposeIncludeConceptDesignation?[] Designation { get; set; }
  [JsonPropertyName("_designation")]
  public Element[] _Designation { get; set; }
  /// <summary>
  /// The recommended display for this item in the expansion.
  /// </summary>
  [JsonPropertyName("display")]
  public string? Display { get; set; }
  [JsonPropertyName("_display")]
  public Element _Display { get; set; }
  /// <summary>
  /// This should only have a value if the concept is inactive.
  /// </summary>
  [JsonPropertyName("inactive")]
  public bool? Inactive { get; set; }
  [JsonPropertyName("_inactive")]
  public Element _Inactive { get; set; }
  /// <summary>
  /// A property value for this concept.
  /// </summary>
  [JsonPropertyName("property")]
  public ValueSetExpansionContainsProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// An absolute URI which is the code system in which the code for this item in the expansion is defined.
  /// </summary>
  [JsonPropertyName("system")]
  public string? System { get; set; }
  [JsonPropertyName("_system")]
  public Element _System { get; set; }
  /// <summary>
  /// The exact value of the version string is specified by the system from which the code is derived.
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the ValueSet.expansion.contains.code field
/// </summary>
public sealed class ValueSetExpansionContainsCodeCodes {
  public const string CODE = "Code";
}
/// <summary>
/// Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.
/// 
/// Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.
/// </summary>
public class ValueSetExpansion : BackboneElement {
  /// <summary>
  /// The codes that are contained in the value set expansion.
  /// </summary>
  [JsonPropertyName("contains")]
  public ValueSetExpansionContains?[] Contains { get; set; }
  [JsonPropertyName("_contains")]
  public Element[] _Contains { get; set; }
  /// <summary>
  /// Typically, this uri is a UUID (e.g. urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd).
  /// </summary>
  [JsonPropertyName("identifier")]
  public string? Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element _Identifier { get; set; }
  /// <summary>
  /// Paging only applies to flat expansions. If a filter is applied, the count is the number of concepts that matched the filter, not the number of concepts in an unfiltered view of the expansion.
  /// </summary>
  [JsonPropertyName("offset")]
  public int? Offset { get; set; }
  [JsonPropertyName("_offset")]
  public Element _Offset { get; set; }
  /// <summary>
  /// The server decides which parameters to include here, but at a minimum, the list SHOULD include all of the parameters that affect the $expand operation. If the expansion will be persisted all of these parameters SHALL be included. If the codeSystem on the server has a specified version then this version SHALL be provided as a parameter in the expansion (note that not all code systems have a version).
  /// </summary>
  [JsonPropertyName("parameter")]
  public ValueSetExpansionParameter?[] Parameter { get; set; }
  [JsonPropertyName("_parameter")]
  public Element[] _Parameter { get; set; }
  /// <summary>
  /// A property defines an additional slot through which additional information can be provided about a concept.
  /// </summary>
  [JsonPropertyName("property")]
  public ValueSetExpansionProperty?[] Property { get; set; }
  [JsonPropertyName("_property")]
  public Element[] _Property { get; set; }
  /// <summary>
  /// This SHOULD be a fully populated instant, but in some circumstances, value sets are expanded by hand, and the expansion is published without that precision.
  /// </summary>
  [JsonPropertyName("timestamp")]
  public string Timestamp { get; set; }
  [JsonPropertyName("_timestamp")]
  public Element _Timestamp { get; set; }
  /// <summary>
  /// Paging only applies to flat expansions.
  /// </summary>
  [JsonPropertyName("total")]
  public int? Total { get; set; }
  [JsonPropertyName("_total")]
  public Element _Total { get; set; }
}
public class ValueSet : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "ValueSet";
  /// <summary>
  /// A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
  /// </summary>
  [JsonPropertyName("compose")]
  public ValueSetCompose? Compose { get; set; }
  [JsonPropertyName("_compose")]
  public Element _Compose { get; set; }
  /// <summary>
  /// May be a web site, an email address, a telephone number, etc.
  /// </summary>
  [JsonPropertyName("contact")]
  public ContactDetail?[] Contact { get; set; }
  [JsonPropertyName("_contact")]
  public Element[] _Contact { get; set; }
  /// <summary>
  /// nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
  /// </summary>
  [JsonPropertyName("copyright")]
  public string? Copyright { get; set; }
  [JsonPropertyName("_copyright")]
  public Element _Copyright { get; set; }
  /// <summary>
  /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the value set. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// This description can be used to capture details such as why the value set was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the value set as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the value set is presumed to be the predominant language in the place the value set was created).The description is not intended to describe the semantics of the Value Set - there are no intrinsic semantics separate from the codes contained in its expansion. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes. A description should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a description.
  /// </summary>
  [JsonPropertyName("description")]
  public string? Description { get; set; }
  [JsonPropertyName("_description")]
  public Element _Description { get; set; }
  /// <summary>
  /// Expansion is performed to produce a collection of codes that are ready to use for data entry or validation. Value set expansions are always considered to be stateless - they are a record of the set of codes in the value set at a point in time under a given set of conditions, and are not subject to ongoing maintenance.
  /// 
  /// Expansion.parameter is  a simplified list of parameters - a subset of the features of the [Parameters](parameters.html) resource.
  /// </summary>
  [JsonPropertyName("expansion")]
  public ValueSetExpansion? Expansion { get; set; }
  [JsonPropertyName("_expansion")]
  public Element _Expansion { get; set; }
  /// <summary>
  /// Allows filtering of value sets that are appropriate for use versus not.
  /// </summary>
  [JsonPropertyName("experimental")]
  public bool? Experimental { get; set; }
  [JsonPropertyName("_experimental")]
  public Element _Experimental { get; set; }
  /// <summary>
  /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this value set outside of FHIR, where it is not possible to use the logical URI.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Normally immutability is set to 'false', which is the default assumption if it is not populated.  Note that the implication is that if this is set to 'true', there may be only one ValueSet version for this definition. Immutability tends to be set to 'true' in one of two cases: - Where the value set, by the nature of its usage, cannot change.  For example "All specializations of ACT in ActClassCode" - Where there's no safe way to express the "Purpose" such that someone else could safely make changes to the value set definition. Source workflow control must guarantee that the same URI always yields the same definition.
  /// </summary>
  [JsonPropertyName("immutable")]
  public bool? Immutable { get; set; }
  [JsonPropertyName("_immutable")]
  public Element _Immutable { get; set; }
  /// <summary>
  /// It may be possible for the value set to be used in jurisdictions other than those for which it was originally designed or intended.
  /// </summary>
  [JsonPropertyName("jurisdiction")]
  public CodeableConcept?[] Jurisdiction { get; set; }
  [JsonPropertyName("_jurisdiction")]
  public Element[] _Jurisdiction { get; set; }
  /// <summary>
  /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.A name should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a name.
  /// </summary>
  [JsonPropertyName("name")]
  public string? Name { get; set; }
  [JsonPropertyName("_name")]
  public Element _Name { get; set; }
  /// <summary>
  /// Usually an organization but may be an individual. The publisher (or steward) of the value set is the organization or individual primarily responsible for the maintenance and upkeep of the value set. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the value set. This item SHOULD be populated unless the information is available from context.
  /// </summary>
  [JsonPropertyName("publisher")]
  public string? Publisher { get; set; }
  [JsonPropertyName("_publisher")]
  public Element _Publisher { get; set; }
  /// <summary>
  /// This element does not describe the usage of the value set. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this value set.
  /// </summary>
  [JsonPropertyName("purpose")]
  public string? Purpose { get; set; }
  [JsonPropertyName("_purpose")]
  public Element _Purpose { get; set; }
  /// <summary>
  /// Allows filtering of value sets that are appropriate for use versus not.See also the [valueset-workflowStatus](extension-valueset-workflowstatus.html) extension for additional status information related to the editorial process.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
  /// </summary>
  [JsonPropertyName("title")]
  public string? Title { get; set; }
  [JsonPropertyName("_title")]
  public Element _Title { get; set; }
  /// <summary>
  /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
  /// 
  /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
  /// 
  /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
  /// </summary>
  [JsonPropertyName("url")]
  public string? Url { get; set; }
  [JsonPropertyName("_url")]
  public Element _Url { get; set; }
  /// <summary>
  /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
  /// </summary>
  [JsonPropertyName("useContext")]
  public UsageContext?[] UseContext { get; set; }
  [JsonPropertyName("_useContext")]
  public Element[] _UseContext { get; set; }
  /// <summary>
  /// There may be different value set instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the value set with the format [url]|[version].
  /// </summary>
  [JsonPropertyName("version")]
  public string? Version { get; set; }
  [JsonPropertyName("_version")]
  public Element _Version { get; set; }
}
/// <summary>
/// Code Values for the ValueSet.status field
/// </summary>
public sealed class ValueSetStatusCodes {
  public const string DRAFT = "draft";
  public const string ACTIVE = "active";
  public const string RETIRED = "retired";
  public const string UNKNOWN = "unknown";
}
/// <summary>
/// Information about the primary source(s) involved in validation.
/// </summary>
public class VerificationResultPrimarySource : BackboneElement {
  /// <summary>
  /// Ability of the primary source to push updates/alerts (yes; no; undetermined).
  /// </summary>
  [JsonPropertyName("canPushUpdates")]
  public CodeableConcept? CanPushUpdates { get; set; }
  [JsonPropertyName("_canPushUpdates")]
  public Element _CanPushUpdates { get; set; }
  /// <summary>
  /// Method for communicating with the primary source (manual; API; Push).
  /// </summary>
  [JsonPropertyName("communicationMethod")]
  public CodeableConcept?[] CommunicationMethod { get; set; }
  [JsonPropertyName("_communicationMethod")]
  public Element[] _CommunicationMethod { get; set; }
  /// <summary>
  /// Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).
  /// </summary>
  [JsonPropertyName("pushTypeAvailable")]
  public CodeableConcept?[] PushTypeAvailable { get; set; }
  [JsonPropertyName("_pushTypeAvailable")]
  public Element[] _PushTypeAvailable { get; set; }
  /// <summary>
  /// Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).
  /// </summary>
  [JsonPropertyName("type")]
  public CodeableConcept?[] Type { get; set; }
  [JsonPropertyName("_type")]
  public Element[] _Type { get; set; }
  /// <summary>
  /// When the target was validated against the primary source.
  /// </summary>
  [JsonPropertyName("validationDate")]
  public string? ValidationDate { get; set; }
  [JsonPropertyName("_validationDate")]
  public Element _ValidationDate { get; set; }
  /// <summary>
  /// Status of the validation of the target against the primary source (successful; failed; unknown).
  /// </summary>
  [JsonPropertyName("validationStatus")]
  public CodeableConcept? ValidationStatus { get; set; }
  [JsonPropertyName("_validationStatus")]
  public Element _ValidationStatus { get; set; }
  /// <summary>
  /// Reference to the primary source.
  /// </summary>
  [JsonPropertyName("who")]
  public Reference? Who { get; set; }
  [JsonPropertyName("_who")]
  public Element _Who { get; set; }
}
/// <summary>
/// Information about the entity attesting to information.
/// </summary>
public class VerificationResultAttestation : BackboneElement {
  /// <summary>
  /// The method by which attested information was submitted/retrieved (manual; API; Push).
  /// </summary>
  [JsonPropertyName("communicationMethod")]
  public CodeableConcept? CommunicationMethod { get; set; }
  [JsonPropertyName("_communicationMethod")]
  public Element _CommunicationMethod { get; set; }
  /// <summary>
  /// The date the information was attested to.
  /// </summary>
  [JsonPropertyName("date")]
  public string? Date { get; set; }
  [JsonPropertyName("_date")]
  public Element _Date { get; set; }
  /// <summary>
  /// When the who is asserting on behalf of another (organization or individual).
  /// </summary>
  [JsonPropertyName("onBehalfOf")]
  public Reference? OnBehalfOf { get; set; }
  [JsonPropertyName("_onBehalfOf")]
  public Element _OnBehalfOf { get; set; }
  /// <summary>
  /// A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
  /// </summary>
  [JsonPropertyName("proxyIdentityCertificate")]
  public string? ProxyIdentityCertificate { get; set; }
  [JsonPropertyName("_proxyIdentityCertificate")]
  public Element _ProxyIdentityCertificate { get; set; }
  /// <summary>
  /// Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
  /// </summary>
  [JsonPropertyName("proxySignature")]
  public Signature? ProxySignature { get; set; }
  [JsonPropertyName("_proxySignature")]
  public Element _ProxySignature { get; set; }
  /// <summary>
  /// A digital identity certificate associated with the attestation source.
  /// </summary>
  [JsonPropertyName("sourceIdentityCertificate")]
  public string? SourceIdentityCertificate { get; set; }
  [JsonPropertyName("_sourceIdentityCertificate")]
  public Element _SourceIdentityCertificate { get; set; }
  /// <summary>
  /// Signed assertion by the attestation source that they have attested to the information.
  /// </summary>
  [JsonPropertyName("sourceSignature")]
  public Signature? SourceSignature { get; set; }
  [JsonPropertyName("_sourceSignature")]
  public Element _SourceSignature { get; set; }
  /// <summary>
  /// The individual or organization attesting to information.
  /// </summary>
  [JsonPropertyName("who")]
  public Reference? Who { get; set; }
  [JsonPropertyName("_who")]
  public Element _Who { get; set; }
}
/// <summary>
/// Information about the entity validating information.
/// </summary>
public class VerificationResultValidator : BackboneElement {
  /// <summary>
  /// Signed assertion by the validator that they have validated the information.
  /// </summary>
  [JsonPropertyName("attestationSignature")]
  public Signature? AttestationSignature { get; set; }
  [JsonPropertyName("_attestationSignature")]
  public Element _AttestationSignature { get; set; }
  /// <summary>
  /// A digital identity certificate associated with the validator.
  /// </summary>
  [JsonPropertyName("identityCertificate")]
  public string? IdentityCertificate { get; set; }
  [JsonPropertyName("_identityCertificate")]
  public Element _IdentityCertificate { get; set; }
  /// <summary>
  /// Reference to the organization validating information.
  /// </summary>
  [JsonPropertyName("organization")]
  public Reference Organization { get; set; }
  [JsonPropertyName("_organization")]
  public Element _Organization { get; set; }
}
public class VerificationResult : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "VerificationResult";
  /// <summary>
  /// Information about the entity attesting to information.
  /// </summary>
  [JsonPropertyName("attestation")]
  public VerificationResultAttestation? Attestation { get; set; }
  [JsonPropertyName("_attestation")]
  public Element _Attestation { get; set; }
  /// <summary>
  /// The result if validation fails (fatal; warning; record only; none).
  /// </summary>
  [JsonPropertyName("failureAction")]
  public CodeableConcept? FailureAction { get; set; }
  [JsonPropertyName("_failureAction")]
  public Element _FailureAction { get; set; }
  /// <summary>
  /// Frequency of revalidation.
  /// </summary>
  [JsonPropertyName("frequency")]
  public Timing? Frequency { get; set; }
  [JsonPropertyName("_frequency")]
  public Element _Frequency { get; set; }
  /// <summary>
  /// The date/time validation was last completed (including failed validations).
  /// </summary>
  [JsonPropertyName("lastPerformed")]
  public string? LastPerformed { get; set; }
  [JsonPropertyName("_lastPerformed")]
  public Element _LastPerformed { get; set; }
  /// <summary>
  /// The frequency with which the target must be validated (none; initial; periodic).
  /// </summary>
  [JsonPropertyName("need")]
  public CodeableConcept? Need { get; set; }
  [JsonPropertyName("_need")]
  public Element _Need { get; set; }
  /// <summary>
  /// The date when target is next validated, if appropriate.
  /// </summary>
  [JsonPropertyName("nextScheduled")]
  public string? NextScheduled { get; set; }
  [JsonPropertyName("_nextScheduled")]
  public Element _NextScheduled { get; set; }
  /// <summary>
  /// Information about the primary source(s) involved in validation.
  /// </summary>
  [JsonPropertyName("primarySource")]
  public VerificationResultPrimarySource?[] PrimarySource { get; set; }
  [JsonPropertyName("_primarySource")]
  public Element[] _PrimarySource { get; set; }
  /// <summary>
  /// The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
  /// <summary>
  /// When the validation status was updated.
  /// </summary>
  [JsonPropertyName("statusDate")]
  public string? StatusDate { get; set; }
  [JsonPropertyName("_statusDate")]
  public Element _StatusDate { get; set; }
  /// <summary>
  /// A resource that was validated.
  /// </summary>
  [JsonPropertyName("target")]
  public Reference?[] Target { get; set; }
  [JsonPropertyName("_target")]
  public Element[] _Target { get; set; }
  /// <summary>
  /// The fhirpath location(s) within the resource that was validated.
  /// </summary>
  [JsonPropertyName("targetLocation")]
  public string?[] TargetLocation { get; set; }
  [JsonPropertyName("_targetLocation")]
  public Element[] _TargetLocation { get; set; }
  /// <summary>
  /// The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
  /// </summary>
  [JsonPropertyName("validationProcess")]
  public CodeableConcept?[] ValidationProcess { get; set; }
  [JsonPropertyName("_validationProcess")]
  public Element[] _ValidationProcess { get; set; }
  /// <summary>
  /// What the target is validated against (nothing; primary source; multiple sources).
  /// </summary>
  [JsonPropertyName("validationType")]
  public CodeableConcept? ValidationType { get; set; }
  [JsonPropertyName("_validationType")]
  public Element _ValidationType { get; set; }
  /// <summary>
  /// Information about the entity validating information.
  /// </summary>
  [JsonPropertyName("validator")]
  public VerificationResultValidator?[] Validator { get; set; }
  [JsonPropertyName("_validator")]
  public Element[] _Validator { get; set; }
}
/// <summary>
/// Code Values for the VerificationResult.status field
/// </summary>
public sealed class VerificationResultStatusCodes {
  public const string ATTESTED = "attested";
  public const string VALIDATED = "validated";
  public const string IN_PROCESS = "in-process";
  public const string REQ_REVALID = "req-revalid";
  public const string VAL_FAIL = "val-fail";
  public const string REVAL_FAIL = "reval-fail";
}
/// <summary>
/// Allows for adjustment on two axis.
/// </summary>
public class VisionPrescriptionLensSpecificationPrism : BackboneElement {
  /// <summary>
  /// Amount of prism to compensate for eye alignment in fractional units.
  /// </summary>
  [JsonPropertyName("amount")]
  public decimal Amount { get; set; }
  [JsonPropertyName("_amount")]
  public Element _Amount { get; set; }
  /// <summary>
  /// The relative base, or reference lens edge, for the prism.
  /// </summary>
  [JsonPropertyName("base")]
  public string Base { get; set; }
  [JsonPropertyName("_base")]
  public Element _Base { get; set; }
}
/// <summary>
/// Code Values for the VisionPrescription.lensSpecification.prism.base field
/// </summary>
public sealed class VisionPrescriptionLensSpecificationPrismBaseCodes {
  public const string UP = "up";
  public const string DOWN = "down";
  public const string VAL_IN = "in";
  public const string VAL_OUT = "out";
}
/// <summary>
/// Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
/// </summary>
public class VisionPrescriptionLensSpecification : BackboneElement {
  /// <summary>
  /// Power adjustment for multifocal lenses measured in dioptres (0.25 units).
  /// </summary>
  [JsonPropertyName("add")]
  public decimal? Add { get; set; }
  [JsonPropertyName("_add")]
  public Element _Add { get; set; }
  /// <summary>
  /// The limits are +180 and -180 degrees.
  /// </summary>
  [JsonPropertyName("axis")]
  public int? Axis { get; set; }
  [JsonPropertyName("_axis")]
  public Element _Axis { get; set; }
  /// <summary>
  /// Back curvature measured in millimetres.
  /// </summary>
  [JsonPropertyName("backCurve")]
  public decimal? BackCurve { get; set; }
  [JsonPropertyName("_backCurve")]
  public Element _BackCurve { get; set; }
  /// <summary>
  /// Brand recommendations or restrictions.
  /// </summary>
  [JsonPropertyName("brand")]
  public string? Brand { get; set; }
  [JsonPropertyName("_brand")]
  public Element _Brand { get; set; }
  /// <summary>
  /// Special color or pattern.
  /// </summary>
  [JsonPropertyName("color")]
  public string? Color { get; set; }
  [JsonPropertyName("_color")]
  public Element _Color { get; set; }
  /// <summary>
  /// Power adjustment for astigmatism measured in dioptres (0.25 units).
  /// </summary>
  [JsonPropertyName("cylinder")]
  public decimal? Cylinder { get; set; }
  [JsonPropertyName("_cylinder")]
  public Element _Cylinder { get; set; }
  /// <summary>
  /// Contact lens diameter measured in millimetres.
  /// </summary>
  [JsonPropertyName("diameter")]
  public decimal? Diameter { get; set; }
  [JsonPropertyName("_diameter")]
  public Element _Diameter { get; set; }
  /// <summary>
  /// The recommended maximum wear period for the lens.
  /// </summary>
  [JsonPropertyName("duration")]
  public Quantity? Duration { get; set; }
  [JsonPropertyName("_duration")]
  public Element _Duration { get; set; }
  /// <summary>
  /// May also appear as OD (oculus dexter) for the right eye and OS (oculus siniter) for the left eye.
  /// </summary>
  [JsonPropertyName("eye")]
  public string Eye { get; set; }
  [JsonPropertyName("_eye")]
  public Element _Eye { get; set; }
  /// <summary>
  /// Notes for special requirements such as coatings and lens materials.
  /// </summary>
  [JsonPropertyName("note")]
  public Annotation?[] Note { get; set; }
  [JsonPropertyName("_note")]
  public Element[] _Note { get; set; }
  /// <summary>
  /// Contact lens power measured in dioptres (0.25 units).
  /// </summary>
  [JsonPropertyName("power")]
  public decimal? Power { get; set; }
  [JsonPropertyName("_power")]
  public Element _Power { get; set; }
  /// <summary>
  /// Allows for adjustment on two axis.
  /// </summary>
  [JsonPropertyName("prism")]
  public VisionPrescriptionLensSpecificationPrism?[] Prism { get; set; }
  [JsonPropertyName("_prism")]
  public Element[] _Prism { get; set; }
  /// <summary>
  /// Identifies the type of vision correction product which is required for the patient.
  /// </summary>
  [JsonPropertyName("product")]
  public CodeableConcept Product { get; set; }
  [JsonPropertyName("_product")]
  public Element _Product { get; set; }
  /// <summary>
  /// The value is negative for near-sighted and positive for far sighted.
  /// Often insurance will not cover a lens with power between +75 and -75.
  /// </summary>
  [JsonPropertyName("sphere")]
  public decimal? Sphere { get; set; }
  [JsonPropertyName("_sphere")]
  public Element _Sphere { get; set; }
}
/// <summary>
/// Code Values for the VisionPrescription.lensSpecification.eye field
/// </summary>
public sealed class VisionPrescriptionLensSpecificationEyeCodes {
  public const string RIGHT = "right";
  public const string LEFT = "left";
}
public class VisionPrescription : DomainResource {
  /** Resource Type Name (for serialization) */
  [JsonPropertyName("resourceType")]
  public string ResourceType => "VisionPrescription";
  /// <summary>
  /// The date this resource was created.
  /// </summary>
  [JsonPropertyName("created")]
  public string Created { get; set; }
  [JsonPropertyName("_created")]
  public Element _Created { get; set; }
  /// <summary>
  /// Jurisdictions determine the valid lifetime of a prescription. Typically vision prescriptions are valid for two years from the date written.
  /// </summary>
  [JsonPropertyName("dateWritten")]
  public string DateWritten { get; set; }
  [JsonPropertyName("_dateWritten")]
  public Element _DateWritten { get; set; }
  /// <summary>
  /// A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
  /// </summary>
  [JsonPropertyName("encounter")]
  public Reference? Encounter { get; set; }
  [JsonPropertyName("_encounter")]
  public Element _Encounter { get; set; }
  /// <summary>
  /// A unique identifier assigned to this vision prescription.
  /// </summary>
  [JsonPropertyName("identifier")]
  public Identifier?[] Identifier { get; set; }
  [JsonPropertyName("_identifier")]
  public Element[] _Identifier { get; set; }
  /// <summary>
  /// Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
  /// </summary>
  [JsonPropertyName("lensSpecification")]
  public VisionPrescriptionLensSpecification[] LensSpecification { get; set; }
  [JsonPropertyName("_lensSpecification")]
  public Element[] _LensSpecification { get; set; }
  /// <summary>
  /// A resource reference to the person to whom the vision prescription applies.
  /// </summary>
  [JsonPropertyName("patient")]
  public Reference Patient { get; set; }
  [JsonPropertyName("_patient")]
  public Element _Patient { get; set; }
  /// <summary>
  /// The healthcare professional responsible for authorizing the prescription.
  /// </summary>
  [JsonPropertyName("prescriber")]
  public Reference Prescriber { get; set; }
  [JsonPropertyName("_prescriber")]
  public Element _Prescriber { get; set; }
  /// <summary>
  /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
  /// </summary>
  [JsonPropertyName("status")]
  public string Status { get; set; }
  [JsonPropertyName("_status")]
  public Element _Status { get; set; }
}
/// <summary>
/// Code Values for the VisionPrescription.status field
/// </summary>
public sealed class VisionPrescriptionStatusCodes {
  public const string ACTIVE = "active";
  public const string CANCELLED = "cancelled";
  public const string DRAFT = "draft";
  public const string ENTERED_IN_ERROR = "entered-in-error";
}
  public class ResourceConverter : JsonConverter
  {
    public override bool CanConvert(Type objectType)
    {
      return typeof(Resource).IsAssignableFrom(objectType);
    }
    public override bool CanWrite
    {
      get { return false; }
    }
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
      throw new NotImplementedException();
    }
    public override bool CanRead
    {
      get { return true; }
    }
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
      JObject jObject = JObject.Load(reader);
      string resourceType = jObject["resourceType"].Value<string>();
      object target = null;
      switch (resourceType)
      {
        case "Account":
          target = new Account();
          break;
        case "ActivityDefinition":
          target = new ActivityDefinition();
          break;
        case "AdministrableProductDefinition":
          target = new AdministrableProductDefinition();
          break;
        case "AdverseEvent":
          target = new AdverseEvent();
          break;
        case "AllergyIntolerance":
          target = new AllergyIntolerance();
          break;
        case "Appointment":
          target = new Appointment();
          break;
        case "AppointmentResponse":
          target = new AppointmentResponse();
          break;
        case "AuditEvent":
          target = new AuditEvent();
          break;
        case "Basic":
          target = new Basic();
          break;
        case "Binary":
          target = new Binary();
          break;
        case "BiologicallyDerivedProduct":
          target = new BiologicallyDerivedProduct();
          break;
        case "BodyStructure":
          target = new BodyStructure();
          break;
        case "Bundle":
          target = new Bundle();
          break;
        case "CapabilityStatement":
          target = new CapabilityStatement();
          break;
        case "CapabilityStatement2":
          target = new CapabilityStatement2();
          break;
        case "CarePlan":
          target = new CarePlan();
          break;
        case "CareTeam":
          target = new CareTeam();
          break;
        case "CatalogEntry":
          target = new CatalogEntry();
          break;
        case "ChargeItem":
          target = new ChargeItem();
          break;
        case "ChargeItemDefinition":
          target = new ChargeItemDefinition();
          break;
        case "Citation":
          target = new Citation();
          break;
        case "Claim":
          target = new Claim();
          break;
        case "ClaimResponse":
          target = new ClaimResponse();
          break;
        case "ClinicalImpression":
          target = new ClinicalImpression();
          break;
        case "ClinicalUseIssue":
          target = new ClinicalUseIssue();
          break;
        case "CodeSystem":
          target = new CodeSystem();
          break;
        case "Communication":
          target = new Communication();
          break;
        case "CommunicationRequest":
          target = new CommunicationRequest();
          break;
        case "CompartmentDefinition":
          target = new CompartmentDefinition();
          break;
        case "Composition":
          target = new Composition();
          break;
        case "ConceptMap":
          target = new ConceptMap();
          break;
        case "Condition":
          target = new Condition();
          break;
        case "ConditionDefinition":
          target = new ConditionDefinition();
          break;
        case "Consent":
          target = new Consent();
          break;
        case "Contract":
          target = new Contract();
          break;
        case "Coverage":
          target = new Coverage();
          break;
        case "CoverageEligibilityRequest":
          target = new CoverageEligibilityRequest();
          break;
        case "CoverageEligibilityResponse":
          target = new CoverageEligibilityResponse();
          break;
        case "DetectedIssue":
          target = new DetectedIssue();
          break;
        case "Device":
          target = new Device();
          break;
        case "DeviceDefinition":
          target = new DeviceDefinition();
          break;
        case "DeviceMetric":
          target = new DeviceMetric();
          break;
        case "DeviceRequest":
          target = new DeviceRequest();
          break;
        case "DeviceUseStatement":
          target = new DeviceUseStatement();
          break;
        case "DiagnosticReport":
          target = new DiagnosticReport();
          break;
        case "DocumentManifest":
          target = new DocumentManifest();
          break;
        case "DocumentReference":
          target = new DocumentReference();
          break;
        case "Encounter":
          target = new Encounter();
          break;
        case "Endpoint":
          target = new Endpoint();
          break;
        case "EnrollmentRequest":
          target = new EnrollmentRequest();
          break;
        case "EnrollmentResponse":
          target = new EnrollmentResponse();
          break;
        case "EpisodeOfCare":
          target = new EpisodeOfCare();
          break;
        case "EventDefinition":
          target = new EventDefinition();
          break;
        case "Evidence":
          target = new Evidence();
          break;
        case "EvidenceFocus":
          target = new EvidenceFocus();
          break;
        case "EvidenceVariable":
          target = new EvidenceVariable();
          break;
        case "ExampleScenario":
          target = new ExampleScenario();
          break;
        case "ExplanationOfBenefit":
          target = new ExplanationOfBenefit();
          break;
        case "FamilyMemberHistory":
          target = new FamilyMemberHistory();
          break;
        case "Flag":
          target = new Flag();
          break;
        case "Goal":
          target = new Goal();
          break;
        case "GraphDefinition":
          target = new GraphDefinition();
          break;
        case "Group":
          target = new Group();
          break;
        case "GuidanceResponse":
          target = new GuidanceResponse();
          break;
        case "HealthcareService":
          target = new HealthcareService();
          break;
        case "ImagingStudy":
          target = new ImagingStudy();
          break;
        case "Immunization":
          target = new Immunization();
          break;
        case "ImmunizationEvaluation":
          target = new ImmunizationEvaluation();
          break;
        case "ImmunizationRecommendation":
          target = new ImmunizationRecommendation();
          break;
        case "ImplementationGuide":
          target = new ImplementationGuide();
          break;
        case "Ingredient":
          target = new Ingredient();
          break;
        case "InsurancePlan":
          target = new InsurancePlan();
          break;
        case "Invoice":
          target = new Invoice();
          break;
        case "Library":
          target = new Library();
          break;
        case "Linkage":
          target = new Linkage();
          break;
        case "List":
          target = new List();
          break;
        case "Location":
          target = new Location();
          break;
        case "ManufacturedItemDefinition":
          target = new ManufacturedItemDefinition();
          break;
        case "Measure":
          target = new Measure();
          break;
        case "MeasureReport":
          target = new MeasureReport();
          break;
        case "Medication":
          target = new Medication();
          break;
        case "MedicationAdministration":
          target = new MedicationAdministration();
          break;
        case "MedicationDispense":
          target = new MedicationDispense();
          break;
        case "MedicationKnowledge":
          target = new MedicationKnowledge();
          break;
        case "MedicationRequest":
          target = new MedicationRequest();
          break;
        case "MedicationUsage":
          target = new MedicationUsage();
          break;
        case "MedicinalProductDefinition":
          target = new MedicinalProductDefinition();
          break;
        case "MessageDefinition":
          target = new MessageDefinition();
          break;
        case "MessageHeader":
          target = new MessageHeader();
          break;
        case "MolecularSequence":
          target = new MolecularSequence();
          break;
        case "NamingSystem":
          target = new NamingSystem();
          break;
        case "NutritionIntake":
          target = new NutritionIntake();
          break;
        case "NutritionOrder":
          target = new NutritionOrder();
          break;
        case "NutritionProduct":
          target = new NutritionProduct();
          break;
        case "Observation":
          target = new Observation();
          break;
        case "ObservationDefinition":
          target = new ObservationDefinition();
          break;
        case "OperationDefinition":
          target = new OperationDefinition();
          break;
        case "OperationOutcome":
          target = new OperationOutcome();
          break;
        case "Organization":
          target = new Organization();
          break;
        case "OrganizationAffiliation":
          target = new OrganizationAffiliation();
          break;
        case "PackagedProductDefinition":
          target = new PackagedProductDefinition();
          break;
        case "Parameters":
          target = new Parameters();
          break;
        case "Patient":
          target = new Patient();
          break;
        case "PaymentNotice":
          target = new PaymentNotice();
          break;
        case "PaymentReconciliation":
          target = new PaymentReconciliation();
          break;
        case "Permission":
          target = new Permission();
          break;
        case "Person":
          target = new Person();
          break;
        case "PlanDefinition":
          target = new PlanDefinition();
          break;
        case "Practitioner":
          target = new Practitioner();
          break;
        case "PractitionerRole":
          target = new PractitionerRole();
          break;
        case "Procedure":
          target = new Procedure();
          break;
        case "Provenance":
          target = new Provenance();
          break;
        case "Questionnaire":
          target = new Questionnaire();
          break;
        case "QuestionnaireResponse":
          target = new QuestionnaireResponse();
          break;
        case "RegulatedAuthorization":
          target = new RegulatedAuthorization();
          break;
        case "RelatedPerson":
          target = new RelatedPerson();
          break;
        case "RequestGroup":
          target = new RequestGroup();
          break;
        case "ResearchStudy":
          target = new ResearchStudy();
          break;
        case "ResearchSubject":
          target = new ResearchSubject();
          break;
        case "RiskAssessment":
          target = new RiskAssessment();
          break;
        case "Schedule":
          target = new Schedule();
          break;
        case "SearchParameter":
          target = new SearchParameter();
          break;
        case "ServiceRequest":
          target = new ServiceRequest();
          break;
        case "Slot":
          target = new Slot();
          break;
        case "Specimen":
          target = new Specimen();
          break;
        case "SpecimenDefinition":
          target = new SpecimenDefinition();
          break;
        case "StructureDefinition":
          target = new StructureDefinition();
          break;
        case "StructureMap":
          target = new StructureMap();
          break;
        case "Subscription":
          target = new Subscription();
          break;
        case "SubscriptionStatus":
          target = new SubscriptionStatus();
          break;
        case "SubscriptionTopic":
          target = new SubscriptionTopic();
          break;
        case "Substance":
          target = new Substance();
          break;
        case "SubstanceDefinition":
          target = new SubstanceDefinition();
          break;
        case "SubstanceNucleicAcid":
          target = new SubstanceNucleicAcid();
          break;
        case "SubstancePolymer":
          target = new SubstancePolymer();
          break;
        case "SubstanceProtein":
          target = new SubstanceProtein();
          break;
        case "SubstanceReferenceInformation":
          target = new SubstanceReferenceInformation();
          break;
        case "SubstanceSourceMaterial":
          target = new SubstanceSourceMaterial();
          break;
        case "SupplyDelivery":
          target = new SupplyDelivery();
          break;
        case "SupplyRequest":
          target = new SupplyRequest();
          break;
        case "Task":
          target = new Task();
          break;
        case "TerminologyCapabilities":
          target = new TerminologyCapabilities();
          break;
        case "TestReport":
          target = new TestReport();
          break;
        case "TestScript":
          target = new TestScript();
          break;
        case "ValueSet":
          target = new ValueSet();
          break;
        case "VerificationResult":
          target = new VerificationResult();
          break;
        case "VisionPrescription":
          target = new VisionPrescription();
          break;
        default:
          target = new Resource();
          break;
      }
      serializer.Populate(jObject.CreateReader(), target);
      return target;
    }
  }
