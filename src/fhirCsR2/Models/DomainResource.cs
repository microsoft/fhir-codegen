// <auto-generated />
// Built from: hl7.fhir.r2.core version: 1.0.2
  // Option: "NAMESPACE" = "fhirCsR2"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR2.Serialization;

namespace fhirCsR2.Models
{
  /// <summary>
  /// A resource that includes narrative, extensions, and contained resources.
  /// </summary>
  [JsonConverter(typeof(fhirCsR2.Serialization.JsonStreamResourceConverter))]
  public class DomainResource : Resource,  IFhirJsonSerializable {
    /// <summary>
    /// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
    /// </summary>
    public List<Resource> Contained { get; set; }
    /// <summary>
    /// May be used to represent additional information that is not part of the basic definition of the resource. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    /// </summary>
    public List<Extension> Extension { get; set; }
    /// <summary>
    /// May be used to represent additional information that is not part of the basic definition of the resource, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
    /// </summary>
    public List<Extension> ModifierExtension { get; set; }
    /// <summary>
    /// A human-readable narrative that contains a summary of the resource, and may be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
    /// </summary>
    public Narrative Text { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR2.Models.Resource)this).SerializeJson(writer, options, false);

      if (Text != null)
      {
        writer.WritePropertyName("text");
        Text.SerializeJson(writer, options);
      }

      if ((Contained != null) && (Contained.Count != 0))
      {
        writer.WritePropertyName("contained");
        writer.WriteStartArray();

        foreach (var resource in Contained)
        {
          resource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Extension != null) && (Extension.Count != 0))
      {
        writer.WritePropertyName("extension");
        writer.WriteStartArray();

        foreach (Extension valExtension in Extension)
        {
          valExtension.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ModifierExtension != null) && (ModifierExtension.Count != 0))
      {
        writer.WritePropertyName("modifierExtension");
        writer.WriteStartArray();

        foreach (Extension valModifierExtension in ModifierExtension)
        {
          valModifierExtension.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contained":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contained = new List<Resource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Resource resource = JsonSerializer.Deserialize<fhirCsR2.Models.Resource>(ref reader, options);
            Contained.Add(resource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contained.Count == 0)
          {
            Contained = null;
          }

          break;

        case "extension":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Extension = new List<Extension>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Extension objExtension = new fhirCsR2.Models.Extension();
            objExtension.DeserializeJson(ref reader, options);
            Extension.Add(objExtension);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Extension.Count == 0)
          {
            Extension = null;
          }

          break;

        case "modifierExtension":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ModifierExtension = new List<Extension>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR2.Models.Extension objModifierExtension = new fhirCsR2.Models.Extension();
            objModifierExtension.DeserializeJson(ref reader, options);
            ModifierExtension.Add(objModifierExtension);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ModifierExtension.Count == 0)
          {
            ModifierExtension = null;
          }

          break;

        case "text":
          Text = new fhirCsR2.Models.Narrative();
          Text.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR2.Models.Resource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
