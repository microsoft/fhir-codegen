// -------------------------------------------------------------------------------------------------
// <copyright file="FhirTypeBase.cs" company="Microsoft Corporation">
//     Copyright (c) Microsoft Corporation. All rights reserved.
//     Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
// </copyright>
// -------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;

namespace Microsoft.Health.Fhir.SpecManager.Models
{
    /// <summary>
    /// A base class for FHIR types to inherit from (common properties).
    /// </summary>
    public class FhirTypeBase
    {
        /// <summary>
        /// A natural language name identifying the structure definition. This name should be usable as an
        /// identifier for the module by machine processing applications such as code generation.
        /// </summary>
        ///
        /// <value>The name.</value>
        public string Name { get; set; }

        /// <summary>
        /// Name field with the first letter capitalized, useful in various languages and PascalCase joining.
        /// </summary>
        ///
        /// <value>The name capitalized.</value>
        public string NameCapitalized { get; set; }

        /// <summary>
        /// Status of this type in the standards process - use FhirCommon.StandardStatusCodes
        /// see: http://hl7.org/fhir/valueset-standards-status.html
        /// </summary>
        ///
        /// <value>The standard status.</value>
        public string StandardStatus { get; set; }

        /// <summary>
        /// The Name of the type this type inherits from (null if none).
        /// </summary>
        ///
        /// <value>The name of the base type.</value>
        public string BaseTypeName { get; set; }

        /// <summary>
        /// A concise description of what this element means (e.g. for use in autogenerated summaries).
        /// </summary>
        ///
        /// <value>The description.</value>
        public string ShortDescription { get; set; }

        /// <summary>
        /// Provides a complete explanation of the meaning of the data element for human readability.  For
        /// the case of elements derived from existing elements (e.g. constraints), the definition SHALL be
        /// consistent with the base definition, but convey the meaning of the element in the particular
        /// context of use of the resource. (Note: The text you are reading is specified in
        /// ElementDefinition.definition).
        /// </summary>
        ///
        /// <value>The definition.</value>
        public string Definition { get; set; }

        /// <summary>
        /// Explanatory notes and implementation guidance about the data element, including notes about how
        /// to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is
        /// specified in ElementDefinition.comment).
        /// </summary>
        ///
        /// <value>The comment.</value>
        public string Comment { get; set; }

        /// <summary>
        /// A RegEx string used to validate values of a type or property.
        /// </summary>
        ///
        /// <value>The validation RegEx.</value>
        public string ValidationRegEx { get; set; }

        /// <summary>Gets or sets a value indicating whether this object is placeholder.</summary>
        ///
        /// <value>True if this object is placeholder, false if not.</value>
        public bool IsPlaceholder { get; set; }

        /// <summary>Gets or sets the properties.</summary>
        ///
        /// <value>The properties.</value>
        public Dictionary<string, FhirProperty> Properties { get; set; }
    }
}
