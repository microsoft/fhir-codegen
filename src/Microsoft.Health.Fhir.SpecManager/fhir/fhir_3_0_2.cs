// <auto-generated/>
/** MODIFIED FILE **/
/** Generated by: ginoc at 2/3/2020 3:26:52 PM **/
/** Restricted to types: CapabilityStatement|CodeSystem|CompartmentDefinition|ConceptMap|NamingSystem|OperationDefinition|SearchParameter|StructureDefinition|StructureMap|ValueSet|Basic **/
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Health.Fhir.SpecManager.fhir.r3
{
	///<summary>
	///Base StructureDefinition for Age Type: A duration of time during which an organism (or a process) has existed.
	///</summary>
	///<source-file>c:/git/fhir\publish\age.profile.canonical.json</source-file>
	public class Age : Quantity
	{
	}
	///<summary>
	///Base StructureDefinition for BackboneType Type: Base definition for the few data types that are allowed to carry modifier extensions.
	///</summary>
	///<source-file>c:/git/fhir\publish\backbonetype.profile.canonical.json</source-file>
	public class BackboneType : DataType
	{
		///<summary>May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
		///
		/// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).</summary>
		[JsonProperty(PropertyName = "modifierExtension")]
		public Extension[] ModifierExtension { get; set; }
		///<summary>May contain extended information for property: 'ModifierExtension'</summary>
		[JsonProperty(PropertyName = "_modifierExtension")]
		public Element[] _ModifierExtension { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Base Type: Base definition for all types defined in FHIR type system.
	///</summary>
	///<source-file>c:/git/fhir\publish\base.profile.canonical.json</source-file>
	public class Base
	{
	}
	///<summary>
	///Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
	///</summary>
	///<source-file>c:/git/fhir\publish\basic.profile.canonical.json</source-file>
	public class Basic : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "Basic";
		///<summary>Indicates who was responsible for creating the resource instance.</summary>
		[JsonProperty(PropertyName = "author")]
		public Reference Author { get; set; }
		///<summary>May contain extended information for property: 'Author'</summary>
		[JsonProperty(PropertyName = "_author")]
		public Element _Author { get; set; }
		///<summary>Identifies the 'type' of resource - equivalent to the resource name for other resources.</summary>
		[JsonProperty(PropertyName = "code")]
		public CodeableConcept Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Identifies when the resource was first created.</summary>
		[JsonProperty(PropertyName = "created")]
		public string Created { get; set; }
		///<summary>May contain extended information for property: 'Created'</summary>
		[JsonProperty(PropertyName = "_created")]
		public Element _Created { get; set; }
		///<summary>Identifier assigned to the resource for business purposes, outside the context of FHIR.</summary>
		[JsonProperty(PropertyName = "identifier")]
		public Identifier[] Identifier { get; set; }
		///<summary>May contain extended information for property: 'Identifier'</summary>
		[JsonProperty(PropertyName = "_identifier")]
		public Element[] _Identifier { get; set; }
		///<summary>Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.</summary>
		[JsonProperty(PropertyName = "subject")]
		public Reference Subject { get; set; }
		///<summary>May contain extended information for property: 'Subject'</summary>
		[JsonProperty(PropertyName = "_subject")]
		public Element _Subject { get; set; }
	}
	///<summary>
	///A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatement : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "CapabilityStatement";
		///<summary>?</summary>
		[JsonProperty(PropertyName="acceptUnknown")]
		public string AcceptUnknown { get; set; }
		///<summary>May contain extended information for property: 'AcceptUnknown'</summary>
		[JsonProperty(PropertyName ="_acceptUnknown")]
		public Element _AcceptUnknown { get; set; }
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.</summary>
		[JsonProperty(PropertyName = "copyright")]
		public string Copyright { get; set; }
		///<summary>May contain extended information for property: 'Copyright'</summary>
		[JsonProperty(PropertyName = "_copyright")]
		public Element _Copyright { get; set; }
		///<summary>The date  (and optionally time) when the capability statement was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A document definition.</summary>
		[JsonProperty(PropertyName = "document")]
		public CapabilityStatementDocument[] Document { get; set; }
		///<summary>May contain extended information for property: 'Document'</summary>
		[JsonProperty(PropertyName = "_document")]
		public Element[] _Document { get; set; }
		///<summary>A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }
		///<summary>Servers may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement-operation-versions.html) operation). If they do, and the CapabilityStatement is requested from the server, then this fhirVersion will be either the version requested, or the server's default version.</summary>
		[JsonProperty(PropertyName = "fhirVersion")]
		public string FhirVersion { get; set; }
		///<summary>May contain extended information for property: 'FhirVersion'</summary>
		[JsonProperty(PropertyName = "_fhirVersion")]
		public Element _FhirVersion { get; set; }
		///<summary>"xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.</summary>
		[JsonProperty(PropertyName = "format")]
		public string[] Format { get; set; }
		///<summary>May contain extended information for property: 'Format'</summary>
		[JsonProperty(PropertyName = "_format")]
		public Element[] _Format { get; set; }
		///<summary>Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.</summary>
		[JsonProperty(PropertyName = "implementation")]
		public CapabilityStatementImplementation Implementation { get; set; }
		///<summary>May contain extended information for property: 'Implementation'</summary>
		[JsonProperty(PropertyName = "_implementation")]
		public Element _Implementation { get; set; }
		///<summary>A list of implementation guides that the server does (or should) support in their entirety.</summary>
		[JsonProperty(PropertyName = "implementationGuide")]
		public string[] ImplementationGuide { get; set; }
		///<summary>May contain extended information for property: 'ImplementationGuide'</summary>
		[JsonProperty(PropertyName = "_implementationGuide")]
		public Element[] _ImplementationGuide { get; set; }
		///<summary>Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.</summary>
		[JsonProperty(PropertyName = "instantiates")]
		public string[] Instantiates { get; set; }
		///<summary>May contain extended information for property: 'Instantiates'</summary>
		[JsonProperty(PropertyName = "_instantiates")]
		public Element[] _Instantiates { get; set; }
		///<summary>A legal or geographic region in which the capability statement is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).</summary>
		[JsonProperty(PropertyName = "kind")]
		public string Kind { get; set; }
		///<summary>May contain extended information for property: 'Kind'</summary>
		[JsonProperty(PropertyName = "_kind")]
		public Element _Kind { get; set; }
		///<summary>A description of the messaging capabilities of the solution.</summary>
		[JsonProperty(PropertyName = "messaging")]
		public CapabilityStatementMessaging[] Messaging { get; set; }
		///<summary>May contain extended information for property: 'Messaging'</summary>
		[JsonProperty(PropertyName = "_messaging")]
		public Element[] _Messaging { get; set; }
		///<summary>A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.</summary>
		[JsonProperty(PropertyName = "patchFormat")]
		public string[] PatchFormat { get; set; }
		///<summary>May contain extended information for property: 'PatchFormat'</summary>
		[JsonProperty(PropertyName = "_patchFormat")]
		public Element[] _PatchFormat { get; set; }
		///<summary>Profiles for use cases supported</summary>
		[JsonProperty(PropertyName = "profile")]
		public Reference[] Profile { get; set; }
		///<summary>May contain extended information for property: 'Profile'</summary>
		[JsonProperty(PropertyName = "_profile")]
		public Element[] _Profile { get; set; }
		///<summary>The name of the organization or individual that published the capability statement.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this capability statement is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>A definition of the restful capabilities of the solution, if any.</summary>
		[JsonProperty(PropertyName = "rest")]
		public CapabilityStatementRest[] Rest { get; set; }
		///<summary>May contain extended information for property: 'Rest'</summary>
		[JsonProperty(PropertyName = "_rest")]
		public Element[] _Rest { get; set; }
		///<summary>Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.</summary>
		[JsonProperty(PropertyName = "software")]
		public CapabilityStatementSoftware Software { get; set; }
		///<summary>May contain extended information for property: 'Software'</summary>
		[JsonProperty(PropertyName = "_software")]
		public Element _Software { get; set; }
		///<summary>Allows filtering of capability statements that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>A short, descriptive, user-friendly title for the capability statement.</summary>
		[JsonProperty(PropertyName = "title")]
		public string Title { get; set; }
		///<summary>May contain extended information for property: 'Title'</summary>
		[JsonProperty(PropertyName = "_title")]
		public Element _Title { get; set; }
		///<summary>An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///A document definition.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementDocument : Element
	{
		///<summary>A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>Mode of this document declaration - whether an application is a producer or consumer.</summary>
		[JsonProperty(PropertyName = "mode")]
		public string Mode { get; set; }
		///<summary>May contain extended information for property: 'Mode'</summary>
		[JsonProperty(PropertyName = "_mode")]
		public Element _Mode { get; set; }
		///<summary>A profile on the document Bundle that constrains which resources are present, and their contents.</summary>
		[JsonProperty(PropertyName = "profile")]
		public Reference Profile { get; set; }
		///<summary>May contain extended information for property: 'Profile'</summary>
		[JsonProperty(PropertyName = "_profile")]
		public Element _Profile { get; set; }
	}
	///<summary>
	///Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementImplementation : Element
	{
		///<summary>Information about the specific installation that this capability statement relates to.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
	}
	public class CapabilityStatementMessagingEvent : Element
	{
		[JsonProperty(PropertyName = "code")]
		public Coding Code { get; set; }
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		[JsonProperty(PropertyName = "category")]
		public string Category { get; set; }
		[JsonProperty(PropertyName = "_category")]
		public Element _Category { get; set; }
		[JsonProperty(PropertyName = "mode")]
		public string Mode { get; set; }
		[JsonProperty(PropertyName = "_mode")]
		public Element _Mode { get; set; }
		[JsonProperty(PropertyName = "focus")]
		public string Focus { get; set; }
		[JsonProperty(PropertyName = "_focus")]
		public Element _Focus { get; set; }
		[JsonProperty(PropertyName = "request")]
		public Reference Request { get; set; }
		[JsonProperty(PropertyName = "_request")]
		public Element _Request { get; set; }
		[JsonProperty(PropertyName = "response")]
		public Reference Response { get; set; }
		[JsonProperty(PropertyName = "_response")]
		public Element _Response { get; set; }
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
	}
	///<summary>
	///A description of the messaging capabilities of the solution.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementMessaging : Element
	{
		///<summary>Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>An endpoint (network accessible address) to which messages and/or replies are to be sent.</summary>
		[JsonProperty(PropertyName = "endpoint")]
		public CapabilityStatementMessagingEndpoint[] Endpoint { get; set; }
		///<summary>May contain extended information for property: 'Endpoint'</summary>
		[JsonProperty(PropertyName = "_endpoint")]
		public Element[] _Endpoint { get; set; }
		[JsonProperty(PropertyName = "event")]
		public CapabilityStatementMessagingEvent[] Event { get; set; }
		[JsonProperty(PropertyName = "_event")]
		public Element[] _Event { get; set; }
		///<summary>Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).</summary>
		[JsonProperty(PropertyName = "reliableCache")]
		public uint? ReliableCache { get; set; }
		///<summary>May contain extended information for property: 'ReliableCache'</summary>
		[JsonProperty(PropertyName = "_reliableCache")]
		public Element _ReliableCache { get; set; }
		///<summary>References to message definitions for messages this system can send or receive.</summary>
		[JsonProperty(PropertyName = "supportedMessage")]
		public CapabilityStatementMessagingSupportedMessage[] SupportedMessage { get; set; }
		///<summary>May contain extended information for property: 'SupportedMessage'</summary>
		[JsonProperty(PropertyName = "_supportedMessage")]
		public Element[] _SupportedMessage { get; set; }
	}
	///<summary>
	///An endpoint (network accessible address) to which messages and/or replies are to be sent.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementMessagingEndpoint : Element
	{
		///<summary>The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.</summary>
		[JsonProperty(PropertyName = "address")]
		public string Address { get; set; }
		///<summary>May contain extended information for property: 'Address'</summary>
		[JsonProperty(PropertyName = "_address")]
		public Element _Address { get; set; }
		///<summary>A list of the messaging transport protocol(s) identifiers, supported by this endpoint.</summary>
		[JsonProperty(PropertyName = "protocol")]
		public Coding Protocol { get; set; }
		///<summary>May contain extended information for property: 'Protocol'</summary>
		[JsonProperty(PropertyName = "_protocol")]
		public Element _Protocol { get; set; }
	}
	///<summary>
	///References to message definitions for messages this system can send or receive.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementMessagingSupportedMessage : Element
	{
		///<summary>Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.</summary>
		[JsonProperty(PropertyName = "definition")]
		public Reference Definition { get; set; }
		///<summary>May contain extended information for property: 'Definition'</summary>
		[JsonProperty(PropertyName = "_definition")]
		public Element _Definition { get; set; }
		///<summary>The mode of this event declaration - whether application is sender or receiver.</summary>
		[JsonProperty(PropertyName = "mode")]
		public string Mode { get; set; }
		///<summary>May contain extended information for property: 'Mode'</summary>
		[JsonProperty(PropertyName = "_mode")]
		public Element _Mode { get; set; }
	}
	///<summary>
	///A definition of the restful capabilities of the solution, if any.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementRest : Element
	{
		///<summary>An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .</summary>
		[JsonProperty(PropertyName = "compartment")]
		public string[] Compartment { get; set; }
		///<summary>May contain extended information for property: 'Compartment'</summary>
		[JsonProperty(PropertyName = "_compartment")]
		public Element[] _Compartment { get; set; }
		///<summary>Information about the system's restful capabilities that apply across all applications, such as security.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>A specification of restful operations supported by the system.</summary>
		[JsonProperty(PropertyName = "interaction")]
		public CapabilityStatementRestInteraction[] Interaction { get; set; }
		///<summary>May contain extended information for property: 'Interaction'</summary>
		[JsonProperty(PropertyName = "_interaction")]
		public Element[] _Interaction { get; set; }
		///<summary>Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.</summary>
		[JsonProperty(PropertyName = "mode")]
		public string Mode { get; set; }
		///<summary>May contain extended information for property: 'Mode'</summary>
		[JsonProperty(PropertyName = "_mode")]
		public Element _Mode { get; set; }
		///<summary>Definition of an operation or a named query together with its parameters and their meaning and type.</summary>
		[JsonProperty(PropertyName = "operation")]
		public CapabilityStatementRestOperation[] Operation { get; set; }
		///<summary>May contain extended information for property: 'Operation'</summary>
		[JsonProperty(PropertyName = "_operation")]
		public Element[] _Operation { get; set; }
		///<summary>A specification of the restful capabilities of the solution for a specific resource type.</summary>
		[JsonProperty(PropertyName = "resource")]
		public CapabilityStatementRestResource[] Resource { get; set; }
		///<summary>May contain extended information for property: 'Resource'</summary>
		[JsonProperty(PropertyName = "_resource")]
		public Element[] _Resource { get; set; }
		///<summary>Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.</summary>
		[JsonProperty(PropertyName = "searchParam")]
		public CapabilityStatementRestResourceSearchParam[] SearchParam { get; set; }
		///<summary>May contain extended information for property: 'SearchParam'</summary>
		[JsonProperty(PropertyName = "_searchParam")]
		public Element[] _SearchParam { get; set; }
		///<summary>Information about security implementation from an interface perspective - what a client needs to know.</summary>
		[JsonProperty(PropertyName = "security")]
		public CapabilityStatementRestSecurity Security { get; set; }
		///<summary>May contain extended information for property: 'Security'</summary>
		[JsonProperty(PropertyName = "_security")]
		public Element _Security { get; set; }
	}
	///<summary>
	///A specification of restful operations supported by the system.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementRestInteraction : Element
	{
		///<summary>A coded identifier of the operation, supported by the system.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
	}
	///<summary>
	///A specification of the restful capabilities of the solution for a specific resource type.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementRestResource : Element
	{
		///<summary>A flag that indicates that the server supports conditional create.</summary>
		[JsonProperty(PropertyName = "conditionalCreate")]
		public bool? ConditionalCreate { get; set; }
		///<summary>May contain extended information for property: 'ConditionalCreate'</summary>
		[JsonProperty(PropertyName = "_conditionalCreate")]
		public Element _ConditionalCreate { get; set; }
		///<summary>Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.</summary>
		[JsonProperty(PropertyName = "conditionalDelete")]
		public string ConditionalDelete { get; set; }
		///<summary>May contain extended information for property: 'ConditionalDelete'</summary>
		[JsonProperty(PropertyName = "_conditionalDelete")]
		public Element _ConditionalDelete { get; set; }
		///<summary>Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.</summary>
		[JsonProperty(PropertyName = "conditionalRead")]
		public string ConditionalRead { get; set; }
		///<summary>May contain extended information for property: 'ConditionalRead'</summary>
		[JsonProperty(PropertyName = "_conditionalRead")]
		public Element _ConditionalRead { get; set; }
		///<summary>A flag that indicates that the server supports conditional update.</summary>
		[JsonProperty(PropertyName = "conditionalUpdate")]
		public bool? ConditionalUpdate { get; set; }
		///<summary>May contain extended information for property: 'ConditionalUpdate'</summary>
		[JsonProperty(PropertyName = "_conditionalUpdate")]
		public Element _ConditionalUpdate { get; set; }
		///<summary>Additional information about the resource type used by the system.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>Identifies a restful operation supported by the solution.</summary>
		[JsonProperty(PropertyName = "interaction")]
		public CapabilityStatementRestResourceInteraction[] Interaction { get; set; }
		///<summary>May contain extended information for property: 'Interaction'</summary>
		[JsonProperty(PropertyName = "_interaction")]
		public Element[] _Interaction { get; set; }
		///<summary>A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).</summary>
		[JsonProperty(PropertyName = "profile")]
		public Reference Profile { get; set; }
		///<summary>May contain extended information for property: 'Profile'</summary>
		[JsonProperty(PropertyName = "_profile")]
		public Element _Profile { get; set; }
		///<summary>A flag for whether the server is able to return past versions as part of the vRead operation.</summary>
		[JsonProperty(PropertyName = "readHistory")]
		public bool? ReadHistory { get; set; }
		///<summary>May contain extended information for property: 'ReadHistory'</summary>
		[JsonProperty(PropertyName = "_readHistory")]
		public Element _ReadHistory { get; set; }
		///<summary>A set of flags that defines how references are supported.</summary>
		[JsonProperty(PropertyName = "referencePolicy")]
		public string[] ReferencePolicy { get; set; }
		///<summary>May contain extended information for property: 'ReferencePolicy'</summary>
		[JsonProperty(PropertyName = "_referencePolicy")]
		public Element[] _ReferencePolicy { get; set; }
		///<summary>A list of _include values supported by the server.</summary>
		[JsonProperty(PropertyName = "searchInclude")]
		public string[] SearchInclude { get; set; }
		///<summary>May contain extended information for property: 'SearchInclude'</summary>
		[JsonProperty(PropertyName = "_searchInclude")]
		public Element[] _SearchInclude { get; set; }
		///<summary>Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.</summary>
		[JsonProperty(PropertyName = "searchParam")]
		public CapabilityStatementRestResourceSearchParam[] SearchParam { get; set; }
		///<summary>May contain extended information for property: 'SearchParam'</summary>
		[JsonProperty(PropertyName = "_searchParam")]
		public Element[] _SearchParam { get; set; }
		///<summary>A list of _revinclude (reverse include) values supported by the server.</summary>
		[JsonProperty(PropertyName = "searchRevInclude")]
		public string[] SearchRevInclude { get; set; }
		///<summary>May contain extended information for property: 'SearchRevInclude'</summary>
		[JsonProperty(PropertyName = "_searchRevInclude")]
		public Element[] _SearchRevInclude { get; set; }
		public Element[] _SupportedProfile { get; set; }
		///<summary>A type of resource exposed via the restful interface.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.</summary>
		[JsonProperty(PropertyName = "updateCreate")]
		public bool? UpdateCreate { get; set; }
		///<summary>May contain extended information for property: 'UpdateCreate'</summary>
		[JsonProperty(PropertyName = "_updateCreate")]
		public Element _UpdateCreate { get; set; }
		///<summary>If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.</summary>
		[JsonProperty(PropertyName = "versioning")]
		public string Versioning { get; set; }
		///<summary>May contain extended information for property: 'Versioning'</summary>
		[JsonProperty(PropertyName = "_versioning")]
		public Element _Versioning { get; set; }
	}
	///<summary>
	///Identifies a restful operation supported by the solution.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementRestResourceInteraction : Element
	{
		///<summary>Coded identifier of the operation, supported by the system resource.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
	}
	///<summary>
	///Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementRestOperation : Element
	{
		///<summary>Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.</summary>
		[JsonProperty(PropertyName = "definition")]
		public Reference Definition { get; set; }
		///<summary>May contain extended information for property: 'Definition'</summary>
		[JsonProperty(PropertyName = "_definition")]
		public Element _Definition { get; set; }
		///<summary>The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
	}
	///<summary>
	///Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementRestResourceSearchParam : Element
	{
		///<summary>An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.</summary>
		[JsonProperty(PropertyName = "definition")]
		public string Definition { get; set; }
		///<summary>May contain extended information for property: 'Definition'</summary>
		[JsonProperty(PropertyName = "_definition")]
		public Element _Definition { get; set; }
		///<summary>This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>The name of the search parameter used in the interface.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
	}
	public class CapabilityStatementRestSecurityCertificate : Element
	{
		[JsonProperty(PropertyName ="type")]
		public string Type { get; set; }
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		[JsonProperty(PropertyName = "blob")]
		public string Blob { get; set; }
		[JsonProperty(PropertyName = "_blob")]
		public Element _Blob { get; set; }
	}
	///<summary>
	///Information about security implementation from an interface perspective - what a client needs to know.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementRestSecurity : Element
	{
		[JsonProperty(PropertyName = "certificate")]
		public CapabilityStatementRestSecurityCertificate[] Certificate { get; set; }
		[JsonProperty(PropertyName = "_certificate")]
		public Element[] _Certificate { get; set; }
		///<summary>Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.</summary>
		[JsonProperty(PropertyName = "cors")]
		public bool? Cors { get; set; }
		///<summary>May contain extended information for property: 'Cors'</summary>
		[JsonProperty(PropertyName = "_cors")]
		public Element _Cors { get; set; }
		///<summary>General description of how security works.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>Types of security services that are supported/required by the system.</summary>
		[JsonProperty(PropertyName = "service")]
		public CodeableConcept[] Service { get; set; }
		///<summary>May contain extended information for property: 'Service'</summary>
		[JsonProperty(PropertyName = "_service")]
		public Element[] _Service { get; set; }
	}
	///<summary>
	///Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
	///</summary>
	///<source-file>c:/git/fhir\publish\capabilitystatement.profile.canonical.json</source-file>
	public class CapabilityStatementSoftware : Element
	{
		///<summary>Name the software is known by.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>Date this version of the software was released.</summary>
		[JsonProperty(PropertyName = "releaseDate")]
		public string ReleaseDate { get; set; }
		///<summary>May contain extended information for property: 'ReleaseDate'</summary>
		[JsonProperty(PropertyName = "_releaseDate")]
		public Element _ReleaseDate { get; set; }
		///<summary>The version identifier for the software covered by this statement.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///Base StructureDefinition for CodeableConcept Type: A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
	///</summary>
	///<source-file>c:/git/fhir\publish\codeableconcept.profile.canonical.json</source-file>
	public class CodeableConcept : DataType
	{
		///<summary>A reference to a code defined by a terminology system.</summary>
		[JsonProperty(PropertyName = "coding")]
		public Coding[] Coding { get; set; }
		///<summary>May contain extended information for property: 'Coding'</summary>
		[JsonProperty(PropertyName = "_coding")]
		public Element[] _Coding { get; set; }
		///<summary>A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.</summary>
		[JsonProperty(PropertyName = "text")]
		public string Text { get; set; }
		///<summary>May contain extended information for property: 'Text'</summary>
		[JsonProperty(PropertyName = "_text")]
		public Element _Text { get; set; }
	}
	///<summary>
	///The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
	///</summary>
	///<source-file>c:/git/fhir\publish\codesystem.profile.canonical.json</source-file>
	public class CodeSystem : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "CodeSystem";
		///<summary>If code comparison is case sensitive when codes within this system are compared to each other.</summary>
		[JsonProperty(PropertyName = "caseSensitive")]
		public bool? CaseSensitive { get; set; }
		///<summary>May contain extended information for property: 'CaseSensitive'</summary>
		[JsonProperty(PropertyName = "_caseSensitive")]
		public Element _CaseSensitive { get; set; }
		///<summary>The code system defines a compositional (post-coordination) grammar.</summary>
		[JsonProperty(PropertyName = "compositional")]
		public bool? Compositional { get; set; }
		///<summary>May contain extended information for property: 'Compositional'</summary>
		[JsonProperty(PropertyName = "_compositional")]
		public Element _Compositional { get; set; }
		///<summary>Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.</summary>
		[JsonProperty(PropertyName = "concept")]
		public CodeSystemConcept[] Concept { get; set; }
		///<summary>May contain extended information for property: 'Concept'</summary>
		[JsonProperty(PropertyName = "_concept")]
		public Element[] _Concept { get; set; }
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.</summary>
		[JsonProperty(PropertyName = "content")]
		public string Content { get; set; }
		///<summary>May contain extended information for property: 'Content'</summary>
		[JsonProperty(PropertyName = "_content")]
		public Element _Content { get; set; }
		///<summary>A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.</summary>
		[JsonProperty(PropertyName = "copyright")]
		public string Copyright { get; set; }
		///<summary>May contain extended information for property: 'Copyright'</summary>
		[JsonProperty(PropertyName = "_copyright")]
		public Element _Copyright { get; set; }
		///<summary>The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.</summary>
		[JsonProperty(PropertyName = "count")]
		public uint? Count { get; set; }
		///<summary>May contain extended information for property: 'Count'</summary>
		[JsonProperty(PropertyName = "_count")]
		public Element _Count { get; set; }
		///<summary>The date  (and optionally time) when the code system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>A free text natural language description of the code system from a consumer's perspective.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }
		///<summary>A filter that can be used in a value set compose statement when selecting concepts using a filter.</summary>
		[JsonProperty(PropertyName = "filter")]
		public CodeSystemFilter[] Filter { get; set; }
		///<summary>May contain extended information for property: 'Filter'</summary>
		[JsonProperty(PropertyName = "_filter")]
		public Element[] _Filter { get; set; }
		///<summary>Note that other representations might have a different hierarchy or none at all, and represent the information using properties.</summary>
		[JsonProperty(PropertyName = "hierarchyMeaning")]
		public string HierarchyMeaning { get; set; }
		///<summary>May contain extended information for property: 'HierarchyMeaning'</summary>
		[JsonProperty(PropertyName = "_hierarchyMeaning")]
		public Element _HierarchyMeaning { get; set; }
		///<summary>A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.</summary>
		[JsonProperty(PropertyName = "identifier")]
		public Identifier Identifier { get; set; }
		///<summary>May contain extended information for property: 'Identifier'</summary>
		[JsonProperty(PropertyName = "_identifier")]
		public Element _Identifier { get; set; }
		///<summary>A legal or geographic region in which the code system is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>A property defines an additional slot through which additional information can be provided about a concept.</summary>
		[JsonProperty(PropertyName = "property")]
		public CodeSystemProperty[] Property { get; set; }
		///<summary>May contain extended information for property: 'Property'</summary>
		[JsonProperty(PropertyName = "_property")]
		public Element[] _Property { get; set; }
		///<summary>The name of the organization or individual that published the code system.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this code system is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>Allows filtering of code systems that are appropriate for use versus not.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>A short, descriptive, user-friendly title for the code system.</summary>
		[JsonProperty(PropertyName = "title")]
		public string Title { get; set; }
		///<summary>May contain extended information for property: 'Title'</summary>
		[JsonProperty(PropertyName = "_title")]
		public Element _Title { get; set; }
		///<summary>An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>Canonical reference to the value set that contains the entire code system.</summary>
		[JsonProperty(PropertyName = "valueSet")]
		public string ValueSet { get; set; }
		///<summary>May contain extended information for property: 'ValueSet'</summary>
		[JsonProperty(PropertyName = "_valueSet")]
		public Element _ValueSet { get; set; }
		///<summary>The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
		///<summary>This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.</summary>
		[JsonProperty(PropertyName = "versionNeeded")]
		public bool? VersionNeeded { get; set; }
		///<summary>May contain extended information for property: 'VersionNeeded'</summary>
		[JsonProperty(PropertyName = "_versionNeeded")]
		public Element _VersionNeeded { get; set; }
	}
	///<summary>
	///Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.
	///</summary>
	///<source-file>c:/git/fhir\publish\codesystem.profile.canonical.json</source-file>
	public class CodeSystemConcept : Element
	{
		///<summary>A code - a text symbol - that uniquely identifies the concept within the code system.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.</summary>
		[JsonProperty(PropertyName = "concept")]
		public CodeSystemConcept[] Concept { get; set; }
		///<summary>May contain extended information for property: 'Concept'</summary>
		[JsonProperty(PropertyName = "_concept")]
		public Element[] _Concept { get; set; }
		///<summary>The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.</summary>
		[JsonProperty(PropertyName = "definition")]
		public string Definition { get; set; }
		///<summary>May contain extended information for property: 'Definition'</summary>
		[JsonProperty(PropertyName = "_definition")]
		public Element _Definition { get; set; }
		///<summary>Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.</summary>
		[JsonProperty(PropertyName = "designation")]
		public CodeSystemConceptDesignation[] Designation { get; set; }
		///<summary>May contain extended information for property: 'Designation'</summary>
		[JsonProperty(PropertyName = "_designation")]
		public Element[] _Designation { get; set; }
		///<summary>A human readable string that is the recommended default way to present this concept to a user.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
		///<summary>A property value for this concept.</summary>
		[JsonProperty(PropertyName = "property")]
		public CodeSystemConceptProperty[] Property { get; set; }
		///<summary>May contain extended information for property: 'Property'</summary>
		[JsonProperty(PropertyName = "_property")]
		public Element[] _Property { get; set; }
	}
	///<summary>
	///Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
	///</summary>
	///<source-file>c:/git/fhir\publish\codesystem.profile.canonical.json</source-file>
	public class CodeSystemConceptDesignation : Element
	{
		///<summary>In the absence of a language, the resource language applies.</summary>
		[JsonProperty(PropertyName = "language")]
		public string Language { get; set; }
		///<summary>May contain extended information for property: 'Language'</summary>
		[JsonProperty(PropertyName = "_language")]
		public Element _Language { get; set; }
		///<summary>A code that details how this designation would be used.</summary>
		[JsonProperty(PropertyName = "use")]
		public Coding Use { get; set; }
		///<summary>May contain extended information for property: 'Use'</summary>
		[JsonProperty(PropertyName = "_use")]
		public Element _Use { get; set; }
		///<summary>The text value for this designation.</summary>
		[JsonProperty(PropertyName = "value")]
		public string Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///A property value for this concept.
	///</summary>
	///<source-file>c:/git/fhir\publish\codesystem.profile.canonical.json</source-file>
	public class CodeSystemConceptProperty : Element
	{
		///<summary>A code that is a reference to CodeSystem.property.code.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueBoolean")]
		public bool? ValueBoolean { get; set; }
		///<summary>May contain extended information for property: 'ValueBoolean'</summary>
		[JsonProperty(PropertyName = "_valueBoolean")]
		public Element _ValueBoolean { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueCode")]
		public string ValueCode { get; set; }
		///<summary>May contain extended information for property: 'ValueCode'</summary>
		[JsonProperty(PropertyName = "_valueCode")]
		public Element _ValueCode { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueCoding")]
		public Coding ValueCoding { get; set; }
		///<summary>May contain extended information for property: 'ValueCoding'</summary>
		[JsonProperty(PropertyName = "_valueCoding")]
		public Element _ValueCoding { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueDateTime")]
		public string ValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'ValueDateTime'</summary>
		[JsonProperty(PropertyName = "_valueDateTime")]
		public Element _ValueDateTime { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueInteger")]
		public int? ValueInteger { get; set; }
		///<summary>May contain extended information for property: 'ValueInteger'</summary>
		[JsonProperty(PropertyName = "_valueInteger")]
		public Element _ValueInteger { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueString")]
		public string ValueString { get; set; }
		///<summary>May contain extended information for property: 'ValueString'</summary>
		[JsonProperty(PropertyName = "_valueString")]
		public Element _ValueString { get; set; }
	}
	///<summary>
	///A filter that can be used in a value set compose statement when selecting concepts using a filter.
	///</summary>
	///<source-file>c:/git/fhir\publish\codesystem.profile.canonical.json</source-file>
	public class CodeSystemFilter : Element
	{
		///<summary>The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>A description of how or why the filter is used.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A list of operators that can be used with the filter.</summary>
		[JsonProperty(PropertyName = "operator")]
		public string[] Operator { get; set; }
		///<summary>May contain extended information for property: 'Operator'</summary>
		[JsonProperty(PropertyName = "_operator")]
		public Element[] _Operator { get; set; }
		///<summary>A description of what the value for the filter should be.</summary>
		[JsonProperty(PropertyName = "value")]
		public string Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///A property defines an additional slot through which additional information can be provided about a concept.
	///</summary>
	///<source-file>c:/git/fhir\publish\codesystem.profile.canonical.json</source-file>
	public class CodeSystemProperty : Element
	{
		///<summary>A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>A description of the property- why it is defined, and how its value might be used.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.</summary>
		[JsonProperty(PropertyName = "uri")]
		public string Uri { get; set; }
		///<summary>May contain extended information for property: 'Uri'</summary>
		[JsonProperty(PropertyName = "_uri")]
		public Element _Uri { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Coding Type: A reference to a code defined by a terminology system.
	///</summary>
	///<source-file>c:/git/fhir\publish\coding.profile.canonical.json</source-file>
	public class Coding : DataType
	{
		///<summary>A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>A representation of the meaning of the code in the system, following the rules of the system.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
		///<summary>The identification of the code system that defines the meaning of the symbol in the code.</summary>
		[JsonProperty(PropertyName = "system")]
		public string System { get; set; }
		///<summary>May contain extended information for property: 'System'</summary>
		[JsonProperty(PropertyName = "_system")]
		public Element _System { get; set; }
		///<summary>Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).</summary>
		[JsonProperty(PropertyName = "userSelected")]
		public bool? UserSelected { get; set; }
		///<summary>May contain extended information for property: 'UserSelected'</summary>
		[JsonProperty(PropertyName = "_userSelected")]
		public Element _UserSelected { get; set; }
		///<summary>The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///A compartment definition that defines how resources are accessed on a server.
	///</summary>
	///<source-file>c:/git/fhir\publish\compartmentdefinition.profile.canonical.json</source-file>
	public class CompartmentDefinition : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "CompartmentDefinition";
		///<summary>Only the specification can define the compartments that can exist. Servers can choose to support them.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>The date  (and optionally time) when the compartment definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>A free text natural language description of the compartment definition from a consumer's perspective.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }
		[JsonProperty(PropertyName ="jurisdiction")]
		public CodeableConcept[] Jursidiction { get; set; }
		[JsonProperty(PropertyName ="_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The name of the organization or individual that published the compartment definition.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this compartment definition is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>Information about how a resource is related to the compartment.</summary>
		[JsonProperty(PropertyName = "resource")]
		public CompartmentDefinitionResource[] Resource { get; set; }
		///<summary>May contain extended information for property: 'Resource'</summary>
		[JsonProperty(PropertyName = "_resource")]
		public Element[] _Resource { get; set; }
		///<summary>Whether the search syntax is supported,.</summary>
		[JsonProperty(PropertyName = "search")]
		public bool Search { get; set; }
		///<summary>May contain extended information for property: 'Search'</summary>
		[JsonProperty(PropertyName = "_search")]
		public Element _Search { get; set; }
		///<summary>Allows filtering of compartment definitions that are appropriate for use versus not.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		[JsonProperty(PropertyName ="title")]
		public string Title { get; set; }
		[JsonProperty(PropertyName ="_title")]
		public Element _Title { get; set; }
		///<summary>An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this compartment definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the compartment definition is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
	}
	///<summary>
	///Information about how a resource is related to the compartment.
	///</summary>
	///<source-file>c:/git/fhir\publish\compartmentdefinition.profile.canonical.json</source-file>
	public class CompartmentDefinitionResource : Element
	{
		///<summary>The name of a resource supported by the server.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Additional documentation about the resource and compartment.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.</summary>
		[JsonProperty(PropertyName = "param")]
		public string[] Param { get; set; }
		///<summary>May contain extended information for property: 'Param'</summary>
		[JsonProperty(PropertyName = "_param")]
		public Element[] _Param { get; set; }
	}
	///<summary>
	///A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
	///</summary>
	///<source-file>c:/git/fhir\publish\conceptmap.profile.canonical.json</source-file>
	public class ConceptMap : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "ConceptMap";
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.</summary>
		[JsonProperty(PropertyName = "copyright")]
		public string Copyright { get; set; }
		///<summary>May contain extended information for property: 'Copyright'</summary>
		[JsonProperty(PropertyName = "_copyright")]
		public Element _Copyright { get; set; }
		///<summary>The date  (and optionally time) when the concept map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>A free text natural language description of the concept map from a consumer's perspective.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }
		///<summary>A group of mappings that all have the same source and target system.</summary>
		[JsonProperty(PropertyName = "group")]
		public ConceptMapGroup[] Group { get; set; }
		///<summary>May contain extended information for property: 'Group'</summary>
		[JsonProperty(PropertyName = "_group")]
		public Element[] _Group { get; set; }
		///<summary>A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.</summary>
		[JsonProperty(PropertyName = "identifier")]
		public Identifier Identifier { get; set; }
		///<summary>May contain extended information for property: 'Identifier'</summary>
		[JsonProperty(PropertyName = "_identifier")]
		public Element _Identifier { get; set; }
		///<summary>A legal or geographic region in which the concept map is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The name of the organization or individual that published the concept map.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this concept map is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.</summary>
		[JsonProperty(PropertyName = "sourceCanonical")]
		public string SourceCanonical { get; set; }
		///<summary>May contain extended information for property: 'SourceCanonical'</summary>
		[JsonProperty(PropertyName = "_sourceCanonical")]
		public Element _SourceCanonical { get; set; }
		///<summary>Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.</summary>
		[JsonProperty(PropertyName = "sourceUri")]
		public string SourceUri { get; set; }
		///<summary>May contain extended information for property: 'SourceUri'</summary>
		[JsonProperty(PropertyName = "_sourceUri")]
		public Element _SourceUri { get; set; }
		///<summary>Allows filtering of concept maps that are appropriate for use versus not.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.</summary>
		[JsonProperty(PropertyName = "targetCanonical")]
		public string TargetCanonical { get; set; }
		///<summary>May contain extended information for property: 'TargetCanonical'</summary>
		[JsonProperty(PropertyName = "_targetCanonical")]
		public Element _TargetCanonical { get; set; }
		///<summary>The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.</summary>
		[JsonProperty(PropertyName = "targetUri")]
		public string TargetUri { get; set; }
		///<summary>May contain extended information for property: 'TargetUri'</summary>
		[JsonProperty(PropertyName = "_targetUri")]
		public Element _TargetUri { get; set; }
		///<summary>A short, descriptive, user-friendly title for the concept map.</summary>
		[JsonProperty(PropertyName = "title")]
		public string Title { get; set; }
		///<summary>May contain extended information for property: 'Title'</summary>
		[JsonProperty(PropertyName = "_title")]
		public Element _Title { get; set; }
		///<summary>An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///A group of mappings that all have the same source and target system.
	///</summary>
	///<source-file>c:/git/fhir\publish\conceptmap.profile.canonical.json</source-file>
	public class ConceptMapGroup : Element
	{
		///<summary>Mappings for an individual concept in the source to one or more concepts in the target.</summary>
		[JsonProperty(PropertyName = "element")]
		public ConceptMapGroupElement[] Element { get; set; }
		///<summary>May contain extended information for property: 'Element'</summary>
		[JsonProperty(PropertyName = "_element")]
		public Element[] _Element { get; set; }
		///<summary>An absolute URI that identifies the source system where the concepts to be mapped are defined.</summary>
		[JsonProperty(PropertyName = "source")]
		public string Source { get; set; }
		///<summary>May contain extended information for property: 'Source'</summary>
		[JsonProperty(PropertyName = "_source")]
		public Element _Source { get; set; }
		///<summary>The specific version of the code system, as determined by the code system authority.</summary>
		[JsonProperty(PropertyName = "sourceVersion")]
		public string SourceVersion { get; set; }
		///<summary>May contain extended information for property: 'SourceVersion'</summary>
		[JsonProperty(PropertyName = "_sourceVersion")]
		public Element _SourceVersion { get; set; }
		///<summary>An absolute URI that identifies the target system that the concepts will be mapped to.</summary>
		[JsonProperty(PropertyName = "target")]
		public string Target { get; set; }
		///<summary>May contain extended information for property: 'Target'</summary>
		[JsonProperty(PropertyName = "_target")]
		public Element _Target { get; set; }
		///<summary>The specific version of the code system, as determined by the code system authority.</summary>
		[JsonProperty(PropertyName = "targetVersion")]
		public string TargetVersion { get; set; }
		///<summary>May contain extended information for property: 'TargetVersion'</summary>
		[JsonProperty(PropertyName = "_targetVersion")]
		public Element _TargetVersion { get; set; }
		///<summary>What to do when there is no mapping to a target concept from the source concept.  This provides the "default" to be applied when there is no target concept mapping specified.  The 'unmapped' element is ignored if a code is specified to have relationship = not-related-to.</summary>
		[JsonProperty(PropertyName = "unmapped")]
		public ConceptMapGroupUnmapped Unmapped { get; set; }
		///<summary>May contain extended information for property: 'Unmapped'</summary>
		[JsonProperty(PropertyName = "_unmapped")]
		public Element _Unmapped { get; set; }
	}
	///<summary>
	///Mappings for an individual concept in the source to one or more concepts in the target.
	///</summary>
	///<source-file>c:/git/fhir\publish\conceptmap.profile.canonical.json</source-file>
	public class ConceptMapGroupElement : Element
	{
		///<summary>Identity (code or path) or the element/item being mapped.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>The display for the code. The display is only provided to help editors when editing the concept map.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
		///<summary>If noMap = true this indicates that no mapping to a target concept exists for this source concept.</summary>
		[JsonProperty(PropertyName = "noMap")]
		public bool? NoMap { get; set; }
		///<summary>May contain extended information for property: 'NoMap'</summary>
		[JsonProperty(PropertyName = "_noMap")]
		public Element _NoMap { get; set; }
		///<summary>A concept from the target value set that this concept maps to.</summary>
		[JsonProperty(PropertyName = "target")]
		public ConceptMapGroupElementTarget[] Target { get; set; }
		///<summary>May contain extended information for property: 'Target'</summary>
		[JsonProperty(PropertyName = "_target")]
		public Element[] _Target { get; set; }
	}
	///<summary>
	///A concept from the target value set that this concept maps to.
	///</summary>
	///<source-file>c:/git/fhir\publish\conceptmap.profile.canonical.json</source-file>
	public class ConceptMapGroupElementTarget : Element
	{
		///<summary>Identity (code or path) or the element/item that the map refers to.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>A description of status/issues in mapping that conveys additional information not represented in  the structured data.</summary>
		[JsonProperty(PropertyName = "comment")]
		public string Comment { get; set; }
		///<summary>May contain extended information for property: 'Comment'</summary>
		[JsonProperty(PropertyName = "_comment")]
		public Element _Comment { get; set; }
		///<summary>A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.</summary>
		[JsonProperty(PropertyName = "dependsOn")]
		public ConceptMapGroupElementTargetDependsOn[] DependsOn { get; set; }
		///<summary>May contain extended information for property: 'DependsOn'</summary>
		[JsonProperty(PropertyName = "_dependsOn")]
		public Element[] _DependsOn { get; set; }
		///<summary>The display for the code. The display is only provided to help editors when editing the concept map.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
		///<summary>A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the relationship (e.g., equivalent) cannot be relied on.</summary>
		[JsonProperty(PropertyName = "product")]
		public ConceptMapGroupElementTargetDependsOn[] Product { get; set; }
		///<summary>May contain extended information for property: 'Product'</summary>
		[JsonProperty(PropertyName = "_product")]
		public Element[] _Product { get; set; }
		///<summary>This element is labeled as a modifier because it may indicate that there is no mapping.</summary>
		[JsonProperty(PropertyName = "relationship")]
		public string Relationship { get; set; }
		///<summary>May contain extended information for property: 'Relationship'</summary>
		[JsonProperty(PropertyName = "_relationship")]
		public Element _Relationship { get; set; }
	}
	///<summary>
	///A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
	///</summary>
	///<source-file>c:/git/fhir\publish\conceptmap.profile.canonical.json</source-file>
	public class ConceptMapGroupElementTargetDependsOn : Element
	{
		///<summary>Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers to.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>The display for the code. The display is only provided to help editors when editing the concept map.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
		///<summary>A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somewhere that is labeled to correspond with a code system property.</summary>
		[JsonProperty(PropertyName = "property")]
		public string Property { get; set; }
		///<summary>May contain extended information for property: 'Property'</summary>
		[JsonProperty(PropertyName = "_property")]
		public Element _Property { get; set; }
		///<summary>An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).</summary>
		[JsonProperty(PropertyName = "system")]
		public string System { get; set; }
		///<summary>May contain extended information for property: 'System'</summary>
		[JsonProperty(PropertyName = "_system")]
		public Element _System { get; set; }
	}
	///<summary>
	///What to do when there is no mapping to a target concept from the source concept.  This provides the "default" to be applied when there is no target concept mapping specified.  The 'unmapped' element is ignored if a code is specified to have relationship = not-related-to.
	///</summary>
	///<source-file>c:/git/fhir\publish\conceptmap.profile.canonical.json</source-file>
	public class ConceptMapGroupUnmapped : Element
	{
		///<summary>The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>The display for the code. The display is only provided to help editors when editing the concept map.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
		///<summary>Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).</summary>
		[JsonProperty(PropertyName = "mode")]
		public string Mode { get; set; }
		///<summary>May contain extended information for property: 'Mode'</summary>
		[JsonProperty(PropertyName = "_mode")]
		public Element _Mode { get; set; }
		///<summary>The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
	}
	///<summary>
	///Base StructureDefinition for ContactDetail Type: Specifies contact information for a person or organization.
	///</summary>
	///<source-file>c:/git/fhir\publish\contactdetail.profile.canonical.json</source-file>
	public class ContactDetail : DataType
	{
		///<summary>The name of an individual to contact.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The contact details for the individual (if a name was provided) or the organization.</summary>
		[JsonProperty(PropertyName = "telecom")]
		public ContactPoint[] Telecom { get; set; }
		///<summary>May contain extended information for property: 'Telecom'</summary>
		[JsonProperty(PropertyName = "_telecom")]
		public Element[] _Telecom { get; set; }
	}
	///<summary>
	///Base StructureDefinition for ContactPoint Type: Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
	///</summary>
	///<source-file>c:/git/fhir\publish\contactpoint.profile.canonical.json</source-file>
	public class ContactPoint : DataType
	{
		///<summary>Time period when the contact point was/is in use.</summary>
		[JsonProperty(PropertyName = "period")]
		public Period Period { get; set; }
		///<summary>May contain extended information for property: 'Period'</summary>
		[JsonProperty(PropertyName = "_period")]
		public Element _Period { get; set; }
		///<summary>Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.</summary>
		[JsonProperty(PropertyName = "rank")]
		public uint? Rank { get; set; }
		///<summary>May contain extended information for property: 'Rank'</summary>
		[JsonProperty(PropertyName = "_rank")]
		public Element _Rank { get; set; }
		///<summary>Telecommunications form for contact point - what communications system is required to make use of the contact.</summary>
		[JsonProperty(PropertyName = "system")]
		public string System { get; set; }
		///<summary>May contain extended information for property: 'System'</summary>
		[JsonProperty(PropertyName = "_system")]
		public Element _System { get; set; }
		///<summary>Applications can assume that a contact is current unless it explicitly says that it is temporary or old.</summary>
		[JsonProperty(PropertyName = "use")]
		public string Use { get; set; }
		///<summary>May contain extended information for property: 'Use'</summary>
		[JsonProperty(PropertyName = "_use")]
		public Element _Use { get; set; }
		///<summary>The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).</summary>
		[JsonProperty(PropertyName = "value")]
		public string Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Contributor Type: A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
	///</summary>
	///<source-file>c:/git/fhir\publish\contributor.profile.canonical.json</source-file>
	public class Contributor : DataType
	{
		///<summary>Contact details to assist a user in finding and communicating with the contributor.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>The name of the individual or organization responsible for the contribution.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The type of contributor.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Count Type: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
	///</summary>
	///<source-file>c:/git/fhir\publish\count.profile.canonical.json</source-file>
	public class Count : Quantity
	{
	}
	///<summary>
	///Base StructureDefinition for DataRequirement Type: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
	///</summary>
	///<source-file>c:/git/fhir\publish\datarequirement.profile.canonical.json</source-file>
	public class DataRequirement : DataType
	{
		///<summary>Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.</summary>
		[JsonProperty(PropertyName = "codeFilter")]
		public DataRequirementCodeFilter[] CodeFilter { get; set; }
		///<summary>May contain extended information for property: 'CodeFilter'</summary>
		[JsonProperty(PropertyName = "_codeFilter")]
		public Element[] _CodeFilter { get; set; }
		///<summary>Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.</summary>
		[JsonProperty(PropertyName = "dateFilter")]
		public DataRequirementDateFilter[] DateFilter { get; set; }
		///<summary>May contain extended information for property: 'DateFilter'</summary>
		[JsonProperty(PropertyName = "_dateFilter")]
		public Element[] _DateFilter { get; set; }
		///<summary>Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.
		///
		/// The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).</summary>
		[JsonProperty(PropertyName = "mustSupport")]
		public string[] MustSupport { get; set; }
		///<summary>May contain extended information for property: 'MustSupport'</summary>
		[JsonProperty(PropertyName = "_mustSupport")]
		public Element[] _MustSupport { get; set; }
		///<summary>The profile of the required data, specified as the uri of the profile definition.</summary>
		[JsonProperty(PropertyName = "profile")]
		public string[] Profile { get; set; }
		///<summary>May contain extended information for property: 'Profile'</summary>
		[JsonProperty(PropertyName = "_profile")]
		public Element[] _Profile { get; set; }
		///<summary>The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.</summary>
		[JsonProperty(PropertyName = "subjectCodeableConcept")]
		public CodeableConcept SubjectCodeableConcept { get; set; }
		///<summary>May contain extended information for property: 'SubjectCodeableConcept'</summary>
		[JsonProperty(PropertyName = "_subjectCodeableConcept")]
		public Element _SubjectCodeableConcept { get; set; }
		///<summary>The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
	}
	///<summary>
	///Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
	///</summary>
	///<source-file>c:/git/fhir\publish\datarequirement.profile.canonical.json</source-file>
	public class DataRequirementCodeFilter : Element
	{
		///<summary>The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.</summary>
		[JsonProperty(PropertyName = "code")]
		public Coding[] Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element[] _Code { get; set; }
		///<summary>The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.</summary>
		[JsonProperty(PropertyName = "path")]
		public string Path { get; set; }
		///<summary>May contain extended information for property: 'Path'</summary>
		[JsonProperty(PropertyName = "_path")]
		public Element _Path { get; set; }
		///<summary>The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.</summary>
		[JsonProperty(PropertyName = "valueSetString")]
		public string ValueSetString { get; set; }
		///<summary>May contain extended information for property: 'ValueSet'</summary>
		[JsonProperty(PropertyName = "_valueSetString")]
		public Element _ValueSetString { get; set; }
		[JsonProperty(PropertyName = "valueSetReference")]
		public Reference ValueSetReference { get; set; }
		[JsonProperty(PropertyName = "_valueSetReference")]
		public Element _ValueSetReference { get; set; }
		[JsonProperty(PropertyName = "valueCode")]
		public string[] ValueCode { get; set; }
		[JsonProperty(PropertyName = "_valueCode")]
		public Element[] _ValueCode { get; set; }
		[JsonProperty(PropertyName = "valueCoding")]
		public Coding[] ValueCoding { get; set; }
		[JsonProperty(PropertyName = "_valueCoding")]
		public Element[] _ValueCoding { get; set; }
		[JsonProperty(PropertyName = "valueCodeableConcept")]
		public CodeableConcept[] ValueCodeableConcept { get; set; }
		[JsonProperty(PropertyName = "_valueCodeableConcept")]
		public Element[] _ValueCodeableConcept { get; set; }
	}
	///<summary>
	///Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
	///</summary>
	///<source-file>c:/git/fhir\publish\datarequirement.profile.canonical.json</source-file>
	public class DataRequirementDateFilter : Element
	{
		///<summary>The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.</summary>
		[JsonProperty(PropertyName = "path")]
		public string Path { get; set; }
		///<summary>May contain extended information for property: 'Path'</summary>
		[JsonProperty(PropertyName = "_path")]
		public Element _Path { get; set; }
		///<summary>The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.</summary>
		[JsonProperty(PropertyName = "valueDateTime")]
		public string ValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'ValueDateTime'</summary>
		[JsonProperty(PropertyName = "_valueDateTime")]
		public Element _ValueDateTime { get; set; }
		///<summary>The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.</summary>
		[JsonProperty(PropertyName = "valueDuration")]
		public Duration ValueDuration { get; set; }
		///<summary>May contain extended information for property: 'ValueDuration'</summary>
		[JsonProperty(PropertyName = "_valueDuration")]
		public Element _ValueDuration { get; set; }
		///<summary>The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.</summary>
		[JsonProperty(PropertyName = "valuePeriod")]
		public Period ValuePeriod { get; set; }
		///<summary>May contain extended information for property: 'ValuePeriod'</summary>
		[JsonProperty(PropertyName = "_valuePeriod")]
		public Element _ValuePeriod { get; set; }
	}
	///<summary>
	///Base StructureDefinition for DataType Type: The base class for all re-useable types defined as part of the FHIR Specification.
	///</summary>
	///<source-file>c:/git/fhir\publish\datatype.profile.canonical.json</source-file>
	public class DataType : Element
	{
	}
	///<summary>
	///Base StructureDefinition for Distance Type: A length - a value with a unit that is a physical distance.
	///</summary>
	///<source-file>c:/git/fhir\publish\distance.profile.canonical.json</source-file>
	public class Distance : Quantity
	{
	}
	///<summary>
	///A resource that includes narrative, extensions, and contained resources.
	///</summary>
	///<source-file>c:/git/fhir\publish\domainresource.profile.canonical.json</source-file>
	public class DomainResource : Resource
	{
		///<summary>These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.</summary>
		[JsonProperty(PropertyName = "contained")]
		public Resource[] Contained { get; set; }
		///<summary>May contain extended information for property: 'Contained'</summary>
		[JsonProperty(PropertyName = "_contained")]
		public Element[] _Contained { get; set; }
		///<summary>May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.</summary>
		[JsonProperty(PropertyName = "extension")]
		public Extension[] Extension { get; set; }
		///<summary>May contain extended information for property: 'Extension'</summary>
		[JsonProperty(PropertyName = "_extension")]
		public Element[] _Extension { get; set; }
		///<summary>May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
		///
		/// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).</summary>
		[JsonProperty(PropertyName = "modifierExtension")]
		public Extension[] ModifierExtension { get; set; }
		///<summary>May contain extended information for property: 'ModifierExtension'</summary>
		[JsonProperty(PropertyName = "_modifierExtension")]
		public Element[] _ModifierExtension { get; set; }
		///<summary>A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.</summary>
		[JsonProperty(PropertyName = "text")]
		public Narrative Text { get; set; }
		///<summary>May contain extended information for property: 'Text'</summary>
		[JsonProperty(PropertyName = "_text")]
		public Element _Text { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Duration Type: A length of time.
	///</summary>
	///<source-file>c:/git/fhir\publish\duration.profile.canonical.json</source-file>
	public class Duration : Quantity
	{
	}
	///<summary>
	///Base StructureDefinition for Element Type: Base definition for all elements in a resource.
	///</summary>
	///<source-file>c:/git/fhir\publish\element.profile.canonical.json</source-file>
	public class Element
	{
		///<summary>May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.</summary>
		[JsonProperty(PropertyName = "extension")]
		public Extension[] Extension { get; set; }
		///<summary>May contain extended information for property: 'Extension'</summary>
		[JsonProperty(PropertyName = "_extension")]
		public Element[] _Extension { get; set; }
		///<summary>Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.</summary>
		[JsonProperty(PropertyName = "id")]
		public string Id { get; set; }
		///<summary>May contain extended information for property: 'Id'</summary>
		[JsonProperty(PropertyName = "_id")]
		public Element _Id { get; set; }
	}
	///<summary>
	///Base StructureDefinition for ElementDefinition Type: Captures constraints on each element within the resource, profile, or extension.
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinition : BackboneType
	{
		///<summary>Identifies additional names by which this element might also be known.</summary>
		[JsonProperty(PropertyName = "alias")]
		public string[] Alias { get; set; }
		///<summary>May contain extended information for property: 'Alias'</summary>
		[JsonProperty(PropertyName = "_alias")]
		public Element[] _Alias { get; set; }
		///<summary>Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.</summary>
		[JsonProperty(PropertyName = "base")]
		public ElementDefinitionBase Base { get; set; }
		///<summary>May contain extended information for property: 'Base'</summary>
		[JsonProperty(PropertyName = "_base")]
		public Element _Base { get; set; }
		///<summary>Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).</summary>
		[JsonProperty(PropertyName = "binding")]
		public ElementDefinitionBinding Binding { get; set; }
		///<summary>May contain extended information for property: 'Binding'</summary>
		[JsonProperty(PropertyName = "_binding")]
		public Element _Binding { get; set; }
		///<summary>A code that has the same meaning as the element in a particular terminology.</summary>
		[JsonProperty(PropertyName = "code")]
		public Coding[] Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element[] _Code { get; set; }
		///<summary>Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).</summary>
		[JsonProperty(PropertyName = "comment")]
		public string Comment { get; set; }
		///<summary>May contain extended information for property: 'Comment'</summary>
		[JsonProperty(PropertyName = "_comment")]
		public Element _Comment { get; set; }
		///<summary>A reference to an invariant that may make additional statements about the cardinality or value in the instance.</summary>
		[JsonProperty(PropertyName = "condition")]
		public string[] Condition { get; set; }
		///<summary>May contain extended information for property: 'Condition'</summary>
		[JsonProperty(PropertyName = "_condition")]
		public Element[] _Condition { get; set; }
		///<summary>Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.</summary>
		[JsonProperty(PropertyName = "constraint")]
		public ElementDefinitionConstraint[] Constraint { get; set; }
		///<summary>May contain extended information for property: 'Constraint'</summary>
		[JsonProperty(PropertyName = "_constraint")]
		public Element[] _Constraint { get; set; }
		///<summary>Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.</summary>
		[JsonProperty(PropertyName = "contentReference")]
		public string ContentReference { get; set; }
		///<summary>May contain extended information for property: 'ContentReference'</summary>
		[JsonProperty(PropertyName = "_contentReference")]
		public Element _ContentReference { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueAge")]
		public Age DefaultValueAge { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueAge'</summary>
		[JsonProperty(PropertyName = "_defaultValueAge")]
		public Element _DefaultValueAge { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueBase64Binary")]
		public string DefaultValueBase64Binary { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueBase64Binary'</summary>
		[JsonProperty(PropertyName = "_defaultValueBase64Binary")]
		public Element _DefaultValueBase64Binary { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueBoolean")]
		public bool? DefaultValueBoolean { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueBoolean'</summary>
		[JsonProperty(PropertyName = "_defaultValueBoolean")]
		public Element _DefaultValueBoolean { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueCanonical")]
		public string DefaultValueCanonical { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCanonical'</summary>
		[JsonProperty(PropertyName = "_defaultValueCanonical")]
		public Element _DefaultValueCanonical { get; set; }
		///<summary>Specifying a default value means that the property can never been unknown - it must always have a value. Further, the default value can never be changed, or changed in constraints on content models. Defining default values creates many difficulties in implementation (e.g. when is a value missing?). For these reasons, default values are (and should be) used extremely sparingly.
		///
		/// No default values are ever defined in the FHIR specification, nor can they be defined in constraints ("profiles") on data types or resources. This element only exists so that default values may be defined in logical models.</summary>
		[JsonProperty(PropertyName = "defaultValueCode")]
		public string DefaultValueCode { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCode'</summary>
		[JsonProperty(PropertyName = "_defaultValueCode")]
		public Element _DefaultValueCode { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueCodeableConcept")]
		public CodeableConcept DefaultValueCodeableConcept { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCodeableConcept'</summary>
		[JsonProperty(PropertyName = "_defaultValueCodeableConcept")]
		public Element _DefaultValueCodeableConcept { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueCoding")]
		public Coding DefaultValueCoding { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCoding'</summary>
		[JsonProperty(PropertyName = "_defaultValueCoding")]
		public Element _DefaultValueCoding { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueContactDetail")]
		public ContactDetail DefaultValueContactDetail { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueContactDetail'</summary>
		[JsonProperty(PropertyName = "_defaultValueContactDetail")]
		public Element _DefaultValueContactDetail { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueContactPoint")]
		public ContactPoint DefaultValueContactPoint { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueContactPoint'</summary>
		[JsonProperty(PropertyName = "_defaultValueContactPoint")]
		public Element _DefaultValueContactPoint { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueContributor")]
		public Contributor DefaultValueContributor { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueContributor'</summary>
		[JsonProperty(PropertyName = "_defaultValueContributor")]
		public Element _DefaultValueContributor { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueCount")]
		public Count DefaultValueCount { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCount'</summary>
		[JsonProperty(PropertyName = "_defaultValueCount")]
		public Element _DefaultValueCount { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueDataRequirement")]
		public DataRequirement DefaultValueDataRequirement { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDataRequirement'</summary>
		[JsonProperty(PropertyName = "_defaultValueDataRequirement")]
		public Element _DefaultValueDataRequirement { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueDate")]
		public string DefaultValueDate { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDate'</summary>
		[JsonProperty(PropertyName = "_defaultValueDate")]
		public Element _DefaultValueDate { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueDateTime")]
		public string DefaultValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDateTime'</summary>
		[JsonProperty(PropertyName = "_defaultValueDateTime")]
		public Element _DefaultValueDateTime { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueDecimal")]
		public decimal? DefaultValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDecimal'</summary>
		[JsonProperty(PropertyName = "_defaultValueDecimal")]
		public Element _DefaultValueDecimal { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueDistance")]
		public Distance DefaultValueDistance { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDistance'</summary>
		[JsonProperty(PropertyName = "_defaultValueDistance")]
		public Element _DefaultValueDistance { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueDuration")]
		public Duration DefaultValueDuration { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDuration'</summary>
		[JsonProperty(PropertyName = "_defaultValueDuration")]
		public Element _DefaultValueDuration { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueHumanName")]
		public HumanName DefaultValueHumanName { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueHumanName'</summary>
		[JsonProperty(PropertyName = "_defaultValueHumanName")]
		public Element _DefaultValueHumanName { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueId")]
		public string DefaultValueId { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueId'</summary>
		[JsonProperty(PropertyName = "_defaultValueId")]
		public Element _DefaultValueId { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueIdentifier")]
		public Identifier DefaultValueIdentifier { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueIdentifier'</summary>
		[JsonProperty(PropertyName = "_defaultValueIdentifier")]
		public Element _DefaultValueIdentifier { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueInstant")]
		public string DefaultValueInstant { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueInstant'</summary>
		[JsonProperty(PropertyName = "_defaultValueInstant")]
		public Element _DefaultValueInstant { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueInteger")]
		public int? DefaultValueInteger { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueInteger'</summary>
		[JsonProperty(PropertyName = "_defaultValueInteger")]
		public Element _DefaultValueInteger { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueMarkdown")]
		public string DefaultValueMarkdown { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueMarkdown'</summary>
		[JsonProperty(PropertyName = "_defaultValueMarkdown")]
		public Element _DefaultValueMarkdown { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueMeta")]
		public Meta DefaultValueMeta { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueMeta'</summary>
		[JsonProperty(PropertyName = "_defaultValueMeta")]
		public Element _DefaultValueMeta { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueMoney")]
		public Money DefaultValueMoney { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueMoney'</summary>
		[JsonProperty(PropertyName = "_defaultValueMoney")]
		public Element _DefaultValueMoney { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueOid")]
		public string DefaultValueOid { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueOid'</summary>
		[JsonProperty(PropertyName = "_defaultValueOid")]
		public Element _DefaultValueOid { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueParameterDefinition")]
		public ParameterDefinition DefaultValueParameterDefinition { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueParameterDefinition'</summary>
		[JsonProperty(PropertyName = "_defaultValueParameterDefinition")]
		public Element _DefaultValueParameterDefinition { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValuePeriod")]
		public Period DefaultValuePeriod { get; set; }
		///<summary>May contain extended information for property: 'DefaultValuePeriod'</summary>
		[JsonProperty(PropertyName = "_defaultValuePeriod")]
		public Element _DefaultValuePeriod { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValuePositiveInt")]
		public uint? DefaultValuePositiveInt { get; set; }
		///<summary>May contain extended information for property: 'DefaultValuePositiveInt'</summary>
		[JsonProperty(PropertyName = "_defaultValuePositiveInt")]
		public Element _DefaultValuePositiveInt { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueQuantity")]
		public Quantity DefaultValueQuantity { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueQuantity'</summary>
		[JsonProperty(PropertyName = "_defaultValueQuantity")]
		public Element _DefaultValueQuantity { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueRange")]
		public Range DefaultValueRange { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueRange'</summary>
		[JsonProperty(PropertyName = "_defaultValueRange")]
		public Element _DefaultValueRange { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueRatio")]
		public Ratio DefaultValueRatio { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueRatio'</summary>
		[JsonProperty(PropertyName = "_defaultValueRatio")]
		public Element _DefaultValueRatio { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueReference")]
		public Reference DefaultValueReference { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueReference'</summary>
		[JsonProperty(PropertyName = "_defaultValueReference")]
		public Element _DefaultValueReference { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueSampledData")]
		public SampledData DefaultValueSampledData { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueSampledData'</summary>
		[JsonProperty(PropertyName = "_defaultValueSampledData")]
		public Element _DefaultValueSampledData { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueSignature")]
		public Signature DefaultValueSignature { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueSignature'</summary>
		[JsonProperty(PropertyName = "_defaultValueSignature")]
		public Element _DefaultValueSignature { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueString")]
		public string DefaultValueString { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueString'</summary>
		[JsonProperty(PropertyName = "_defaultValueString")]
		public Element _DefaultValueString { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueTime")]
		public string DefaultValueTime { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueTime'</summary>
		[JsonProperty(PropertyName = "_defaultValueTime")]
		public Element _DefaultValueTime { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueTiming")]
		public Timing DefaultValueTiming { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueTiming'</summary>
		[JsonProperty(PropertyName = "_defaultValueTiming")]
		public Element _DefaultValueTiming { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueTriggerDefinition")]
		public TriggerDefinition DefaultValueTriggerDefinition { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueTriggerDefinition'</summary>
		[JsonProperty(PropertyName = "_defaultValueTriggerDefinition")]
		public Element _DefaultValueTriggerDefinition { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueUnsignedInt")]
		public uint? DefaultValueUnsignedInt { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUnsignedInt'</summary>
		[JsonProperty(PropertyName = "_defaultValueUnsignedInt")]
		public Element _DefaultValueUnsignedInt { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueUri")]
		public string DefaultValueUri { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUri'</summary>
		[JsonProperty(PropertyName = "_defaultValueUri")]
		public Element _DefaultValueUri { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueUrl")]
		public string DefaultValueUrl { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUrl'</summary>
		[JsonProperty(PropertyName = "_defaultValueUrl")]
		public Element _DefaultValueUrl { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueUsageContext")]
		public UsageContext DefaultValueUsageContext { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUsageContext'</summary>
		[JsonProperty(PropertyName = "_defaultValueUsageContext")]
		public Element _DefaultValueUsageContext { get; set; }
		///<summary>The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').</summary>
		[JsonProperty(PropertyName = "defaultValueUuid")]
		public Guid? DefaultValueUuid { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUuid'</summary>
		[JsonProperty(PropertyName = "_defaultValueUuid")]
		public Element _DefaultValueUuid { get; set; }
		///<summary>Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).</summary>
		[JsonProperty(PropertyName = "definition")]
		public string Definition { get; set; }
		///<summary>May contain extended information for property: 'Definition'</summary>
		[JsonProperty(PropertyName = "_definition")]
		public Element _Definition { get; set; }
		///<summary>A sample value for this element demonstrating the type of information that would typically be found in the element.</summary>
		[JsonProperty(PropertyName = "example")]
		public ElementDefinitionExample[] Example { get; set; }
		///<summary>May contain extended information for property: 'Example'</summary>
		[JsonProperty(PropertyName = "_example")]
		public Element[] _Example { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedAge")]
		public Age FixedAge { get; set; }
		///<summary>May contain extended information for property: 'FixedAge'</summary>
		[JsonProperty(PropertyName = "_fixedAge")]
		public Element _FixedAge { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedBase64Binary")]
		public string FixedBase64Binary { get; set; }
		///<summary>May contain extended information for property: 'FixedBase64Binary'</summary>
		[JsonProperty(PropertyName = "_fixedBase64Binary")]
		public Element _FixedBase64Binary { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedBoolean")]
		public bool? FixedBoolean { get; set; }
		///<summary>May contain extended information for property: 'FixedBoolean'</summary>
		[JsonProperty(PropertyName = "_fixedBoolean")]
		public Element _FixedBoolean { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedCanonical")]
		public string FixedCanonical { get; set; }
		///<summary>May contain extended information for property: 'FixedCanonical'</summary>
		[JsonProperty(PropertyName = "_fixedCanonical")]
		public Element _FixedCanonical { get; set; }
		///<summary>This is not recommended for Coding and CodeableConcept since these often have highly contextual properties such as version or display.</summary>
		[JsonProperty(PropertyName = "fixedCode")]
		public string FixedCode { get; set; }
		///<summary>May contain extended information for property: 'FixedCode'</summary>
		[JsonProperty(PropertyName = "_fixedCode")]
		public Element _FixedCode { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedCodeableConcept")]
		public CodeableConcept FixedCodeableConcept { get; set; }
		///<summary>May contain extended information for property: 'FixedCodeableConcept'</summary>
		[JsonProperty(PropertyName = "_fixedCodeableConcept")]
		public Element _FixedCodeableConcept { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedCoding")]
		public Coding FixedCoding { get; set; }
		///<summary>May contain extended information for property: 'FixedCoding'</summary>
		[JsonProperty(PropertyName = "_fixedCoding")]
		public Element _FixedCoding { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedContactDetail")]
		public ContactDetail FixedContactDetail { get; set; }
		///<summary>May contain extended information for property: 'FixedContactDetail'</summary>
		[JsonProperty(PropertyName = "_fixedContactDetail")]
		public Element _FixedContactDetail { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedContactPoint")]
		public ContactPoint FixedContactPoint { get; set; }
		///<summary>May contain extended information for property: 'FixedContactPoint'</summary>
		[JsonProperty(PropertyName = "_fixedContactPoint")]
		public Element _FixedContactPoint { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedContributor")]
		public Contributor FixedContributor { get; set; }
		///<summary>May contain extended information for property: 'FixedContributor'</summary>
		[JsonProperty(PropertyName = "_fixedContributor")]
		public Element _FixedContributor { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedCount")]
		public Count FixedCount { get; set; }
		///<summary>May contain extended information for property: 'FixedCount'</summary>
		[JsonProperty(PropertyName = "_fixedCount")]
		public Element _FixedCount { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedDataRequirement")]
		public DataRequirement FixedDataRequirement { get; set; }
		///<summary>May contain extended information for property: 'FixedDataRequirement'</summary>
		[JsonProperty(PropertyName = "_fixedDataRequirement")]
		public Element _FixedDataRequirement { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedDate")]
		public string FixedDate { get; set; }
		///<summary>May contain extended information for property: 'FixedDate'</summary>
		[JsonProperty(PropertyName = "_fixedDate")]
		public Element _FixedDate { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedDateTime")]
		public string FixedDateTime { get; set; }
		///<summary>May contain extended information for property: 'FixedDateTime'</summary>
		[JsonProperty(PropertyName = "_fixedDateTime")]
		public Element _FixedDateTime { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedDecimal")]
		public decimal? FixedDecimal { get; set; }
		///<summary>May contain extended information for property: 'FixedDecimal'</summary>
		[JsonProperty(PropertyName = "_fixedDecimal")]
		public Element _FixedDecimal { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedDistance")]
		public Distance FixedDistance { get; set; }
		///<summary>May contain extended information for property: 'FixedDistance'</summary>
		[JsonProperty(PropertyName = "_fixedDistance")]
		public Element _FixedDistance { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedDuration")]
		public Duration FixedDuration { get; set; }
		///<summary>May contain extended information for property: 'FixedDuration'</summary>
		[JsonProperty(PropertyName = "_fixedDuration")]
		public Element _FixedDuration { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedHumanName")]
		public HumanName FixedHumanName { get; set; }
		///<summary>May contain extended information for property: 'FixedHumanName'</summary>
		[JsonProperty(PropertyName = "_fixedHumanName")]
		public Element _FixedHumanName { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedId")]
		public string FixedId { get; set; }
		///<summary>May contain extended information for property: 'FixedId'</summary>
		[JsonProperty(PropertyName = "_fixedId")]
		public Element _FixedId { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedIdentifier")]
		public Identifier FixedIdentifier { get; set; }
		///<summary>May contain extended information for property: 'FixedIdentifier'</summary>
		[JsonProperty(PropertyName = "_fixedIdentifier")]
		public Element _FixedIdentifier { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedInstant")]
		public string FixedInstant { get; set; }
		///<summary>May contain extended information for property: 'FixedInstant'</summary>
		[JsonProperty(PropertyName = "_fixedInstant")]
		public Element _FixedInstant { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedInteger")]
		public int? FixedInteger { get; set; }
		///<summary>May contain extended information for property: 'FixedInteger'</summary>
		[JsonProperty(PropertyName = "_fixedInteger")]
		public Element _FixedInteger { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedMarkdown")]
		public string FixedMarkdown { get; set; }
		///<summary>May contain extended information for property: 'FixedMarkdown'</summary>
		[JsonProperty(PropertyName = "_fixedMarkdown")]
		public Element _FixedMarkdown { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedMeta")]
		public Meta FixedMeta { get; set; }
		///<summary>May contain extended information for property: 'FixedMeta'</summary>
		[JsonProperty(PropertyName = "_fixedMeta")]
		public Element _FixedMeta { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedMoney")]
		public Money FixedMoney { get; set; }
		///<summary>May contain extended information for property: 'FixedMoney'</summary>
		[JsonProperty(PropertyName = "_fixedMoney")]
		public Element _FixedMoney { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedOid")]
		public string FixedOid { get; set; }
		///<summary>May contain extended information for property: 'FixedOid'</summary>
		[JsonProperty(PropertyName = "_fixedOid")]
		public Element _FixedOid { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedParameterDefinition")]
		public ParameterDefinition FixedParameterDefinition { get; set; }
		///<summary>May contain extended information for property: 'FixedParameterDefinition'</summary>
		[JsonProperty(PropertyName = "_fixedParameterDefinition")]
		public Element _FixedParameterDefinition { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedPeriod")]
		public Period FixedPeriod { get; set; }
		///<summary>May contain extended information for property: 'FixedPeriod'</summary>
		[JsonProperty(PropertyName = "_fixedPeriod")]
		public Element _FixedPeriod { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedPositiveInt")]
		public uint? FixedPositiveInt { get; set; }
		///<summary>May contain extended information for property: 'FixedPositiveInt'</summary>
		[JsonProperty(PropertyName = "_fixedPositiveInt")]
		public Element _FixedPositiveInt { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedQuantity")]
		public Quantity FixedQuantity { get; set; }
		///<summary>May contain extended information for property: 'FixedQuantity'</summary>
		[JsonProperty(PropertyName = "_fixedQuantity")]
		public Element _FixedQuantity { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedRange")]
		public Range FixedRange { get; set; }
		///<summary>May contain extended information for property: 'FixedRange'</summary>
		[JsonProperty(PropertyName = "_fixedRange")]
		public Element _FixedRange { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedRatio")]
		public Ratio FixedRatio { get; set; }
		///<summary>May contain extended information for property: 'FixedRatio'</summary>
		[JsonProperty(PropertyName = "_fixedRatio")]
		public Element _FixedRatio { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedReference")]
		public Reference FixedReference { get; set; }
		///<summary>May contain extended information for property: 'FixedReference'</summary>
		[JsonProperty(PropertyName = "_fixedReference")]
		public Element _FixedReference { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedSampledData")]
		public SampledData FixedSampledData { get; set; }
		///<summary>May contain extended information for property: 'FixedSampledData'</summary>
		[JsonProperty(PropertyName = "_fixedSampledData")]
		public Element _FixedSampledData { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedSignature")]
		public Signature FixedSignature { get; set; }
		///<summary>May contain extended information for property: 'FixedSignature'</summary>
		[JsonProperty(PropertyName = "_fixedSignature")]
		public Element _FixedSignature { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedString")]
		public string FixedString { get; set; }
		///<summary>May contain extended information for property: 'FixedString'</summary>
		[JsonProperty(PropertyName = "_fixedString")]
		public Element _FixedString { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedTime")]
		public string FixedTime { get; set; }
		///<summary>May contain extended information for property: 'FixedTime'</summary>
		[JsonProperty(PropertyName = "_fixedTime")]
		public Element _FixedTime { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedTiming")]
		public Timing FixedTiming { get; set; }
		///<summary>May contain extended information for property: 'FixedTiming'</summary>
		[JsonProperty(PropertyName = "_fixedTiming")]
		public Element _FixedTiming { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedTriggerDefinition")]
		public TriggerDefinition FixedTriggerDefinition { get; set; }
		///<summary>May contain extended information for property: 'FixedTriggerDefinition'</summary>
		[JsonProperty(PropertyName = "_fixedTriggerDefinition")]
		public Element _FixedTriggerDefinition { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedUnsignedInt")]
		public uint? FixedUnsignedInt { get; set; }
		///<summary>May contain extended information for property: 'FixedUnsignedInt'</summary>
		[JsonProperty(PropertyName = "_fixedUnsignedInt")]
		public Element _FixedUnsignedInt { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedUri")]
		public string FixedUri { get; set; }
		///<summary>May contain extended information for property: 'FixedUri'</summary>
		[JsonProperty(PropertyName = "_fixedUri")]
		public Element _FixedUri { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedUrl")]
		public string FixedUrl { get; set; }
		///<summary>May contain extended information for property: 'FixedUrl'</summary>
		[JsonProperty(PropertyName = "_fixedUrl")]
		public Element _FixedUrl { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedUsageContext")]
		public UsageContext FixedUsageContext { get; set; }
		///<summary>May contain extended information for property: 'FixedUsageContext'</summary>
		[JsonProperty(PropertyName = "_fixedUsageContext")]
		public Element _FixedUsageContext { get; set; }
		///<summary>Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.</summary>
		[JsonProperty(PropertyName = "fixedUuid")]
		public Guid? FixedUuid { get; set; }
		///<summary>May contain extended information for property: 'FixedUuid'</summary>
		[JsonProperty(PropertyName = "_fixedUuid")]
		public Element _FixedUuid { get; set; }
		///<summary>If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.</summary>
		[JsonProperty(PropertyName = "isModifier")]
		public bool? IsModifier { get; set; }
		///<summary>May contain extended information for property: 'IsModifier'</summary>
		[JsonProperty(PropertyName = "_isModifier")]
		public Element _IsModifier { get; set; }
		///<summary>Explains how that element affects the interpretation of the resource or element that contains it.</summary>
		[JsonProperty(PropertyName = "isModifierReason")]
		public string IsModifierReason { get; set; }
		///<summary>May contain extended information for property: 'IsModifierReason'</summary>
		[JsonProperty(PropertyName = "_isModifierReason")]
		public Element _IsModifierReason { get; set; }
		///<summary>Whether the element should be included if a client requests a search with the parameter _summary=true.</summary>
		[JsonProperty(PropertyName = "isSummary")]
		public bool? IsSummary { get; set; }
		///<summary>May contain extended information for property: 'IsSummary'</summary>
		[JsonProperty(PropertyName = "_isSummary")]
		public Element _IsSummary { get; set; }
		///<summary>A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.</summary>
		[JsonProperty(PropertyName = "label")]
		public string Label { get; set; }
		///<summary>May contain extended information for property: 'Label'</summary>
		[JsonProperty(PropertyName = "_label")]
		public Element _Label { get; set; }
		///<summary>Identifies a concept from an external specification that roughly corresponds to this element.</summary>
		[JsonProperty(PropertyName = "mapping")]
		public ElementDefinitionMapping[] Mapping { get; set; }
		///<summary>May contain extended information for property: 'Mapping'</summary>
		[JsonProperty(PropertyName = "_mapping")]
		public Element[] _Mapping { get; set; }
		///<summary>The maximum number of times this element is permitted to appear in the instance.</summary>
		[JsonProperty(PropertyName = "max")]
		public string Max { get; set; }
		///<summary>May contain extended information for property: 'Max'</summary>
		[JsonProperty(PropertyName = "_max")]
		public Element _Max { get; set; }
		///<summary>Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.</summary>
		[JsonProperty(PropertyName = "maxLength")]
		public int? MaxLength { get; set; }
		///<summary>May contain extended information for property: 'MaxLength'</summary>
		[JsonProperty(PropertyName = "_maxLength")]
		public Element _MaxLength { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValueDate")]
		public string MaxValueDate { get; set; }
		///<summary>May contain extended information for property: 'MaxValueDate'</summary>
		[JsonProperty(PropertyName = "_maxValueDate")]
		public Element _MaxValueDate { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValueDateTime")]
		public string MaxValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'MaxValueDateTime'</summary>
		[JsonProperty(PropertyName = "_maxValueDateTime")]
		public Element _MaxValueDateTime { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValueDecimal")]
		public decimal? MaxValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'MaxValueDecimal'</summary>
		[JsonProperty(PropertyName = "_maxValueDecimal")]
		public Element _MaxValueDecimal { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValueInstant")]
		public string MaxValueInstant { get; set; }
		///<summary>May contain extended information for property: 'MaxValueInstant'</summary>
		[JsonProperty(PropertyName = "_maxValueInstant")]
		public Element _MaxValueInstant { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValueInteger")]
		public int? MaxValueInteger { get; set; }
		///<summary>May contain extended information for property: 'MaxValueInteger'</summary>
		[JsonProperty(PropertyName = "_maxValueInteger")]
		public Element _MaxValueInteger { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValuePositiveInt")]
		public uint? MaxValuePositiveInt { get; set; }
		///<summary>May contain extended information for property: 'MaxValuePositiveInt'</summary>
		[JsonProperty(PropertyName = "_maxValuePositiveInt")]
		public Element _MaxValuePositiveInt { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValueQuantity")]
		public Quantity MaxValueQuantity { get; set; }
		///<summary>May contain extended information for property: 'MaxValueQuantity'</summary>
		[JsonProperty(PropertyName = "_maxValueQuantity")]
		public Element _MaxValueQuantity { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValueTime")]
		public string MaxValueTime { get; set; }
		///<summary>May contain extended information for property: 'MaxValueTime'</summary>
		[JsonProperty(PropertyName = "_maxValueTime")]
		public Element _MaxValueTime { get; set; }
		///<summary>The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "maxValueUnsignedInt")]
		public uint? MaxValueUnsignedInt { get; set; }
		///<summary>May contain extended information for property: 'MaxValueUnsignedInt'</summary>
		[JsonProperty(PropertyName = "_maxValueUnsignedInt")]
		public Element _MaxValueUnsignedInt { get; set; }
		///<summary>The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').</summary>
		[JsonProperty(PropertyName = "meaningWhenMissing")]
		public string MeaningWhenMissing { get; set; }
		///<summary>May contain extended information for property: 'MeaningWhenMissing'</summary>
		[JsonProperty(PropertyName = "_meaningWhenMissing")]
		public Element _MeaningWhenMissing { get; set; }
		///<summary>The minimum number of times this element SHALL appear in the instance.</summary>
		[JsonProperty(PropertyName = "min")]
		public uint? Min { get; set; }
		///<summary>May contain extended information for property: 'Min'</summary>
		[JsonProperty(PropertyName = "_min")]
		public Element _Min { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValueDate")]
		public string MinValueDate { get; set; }
		///<summary>May contain extended information for property: 'MinValueDate'</summary>
		[JsonProperty(PropertyName = "_minValueDate")]
		public Element _MinValueDate { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValueDateTime")]
		public string MinValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'MinValueDateTime'</summary>
		[JsonProperty(PropertyName = "_minValueDateTime")]
		public Element _MinValueDateTime { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValueDecimal")]
		public decimal? MinValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'MinValueDecimal'</summary>
		[JsonProperty(PropertyName = "_minValueDecimal")]
		public Element _MinValueDecimal { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValueInstant")]
		public string MinValueInstant { get; set; }
		///<summary>May contain extended information for property: 'MinValueInstant'</summary>
		[JsonProperty(PropertyName = "_minValueInstant")]
		public Element _MinValueInstant { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValueInteger")]
		public int? MinValueInteger { get; set; }
		///<summary>May contain extended information for property: 'MinValueInteger'</summary>
		[JsonProperty(PropertyName = "_minValueInteger")]
		public Element _MinValueInteger { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValuePositiveInt")]
		public uint? MinValuePositiveInt { get; set; }
		///<summary>May contain extended information for property: 'MinValuePositiveInt'</summary>
		[JsonProperty(PropertyName = "_minValuePositiveInt")]
		public Element _MinValuePositiveInt { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValueQuantity")]
		public Quantity MinValueQuantity { get; set; }
		///<summary>May contain extended information for property: 'MinValueQuantity'</summary>
		[JsonProperty(PropertyName = "_minValueQuantity")]
		public Element _MinValueQuantity { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValueTime")]
		public string MinValueTime { get; set; }
		///<summary>May contain extended information for property: 'MinValueTime'</summary>
		[JsonProperty(PropertyName = "_minValueTime")]
		public Element _MinValueTime { get; set; }
		///<summary>The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.</summary>
		[JsonProperty(PropertyName = "minValueUnsignedInt")]
		public uint? MinValueUnsignedInt { get; set; }
		///<summary>May contain extended information for property: 'MinValueUnsignedInt'</summary>
		[JsonProperty(PropertyName = "_minValueUnsignedInt")]
		public Element _MinValueUnsignedInt { get; set; }
		///<summary>If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.</summary>
		[JsonProperty(PropertyName = "mustSupport")]
		public bool? MustSupport { get; set; }
		///<summary>May contain extended information for property: 'MustSupport'</summary>
		[JsonProperty(PropertyName = "_mustSupport")]
		public Element _MustSupport { get; set; }
		///<summary>If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.</summary>
		[JsonProperty(PropertyName = "orderMeaning")]
		public string OrderMeaning { get; set; }
		///<summary>May contain extended information for property: 'OrderMeaning'</summary>
		[JsonProperty(PropertyName = "_orderMeaning")]
		public Element _OrderMeaning { get; set; }
		///<summary>The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.</summary>
		[JsonProperty(PropertyName = "path")]
		public string Path { get; set; }
		///<summary>May contain extended information for property: 'Path'</summary>
		[JsonProperty(PropertyName = "_path")]
		public Element _Path { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternAge")]
		public Age PatternAge { get; set; }
		///<summary>May contain extended information for property: 'PatternAge'</summary>
		[JsonProperty(PropertyName = "_patternAge")]
		public Element _PatternAge { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternBase64Binary")]
		public string PatternBase64Binary { get; set; }
		///<summary>May contain extended information for property: 'PatternBase64Binary'</summary>
		[JsonProperty(PropertyName = "_patternBase64Binary")]
		public Element _PatternBase64Binary { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternBoolean")]
		public bool? PatternBoolean { get; set; }
		///<summary>May contain extended information for property: 'PatternBoolean'</summary>
		[JsonProperty(PropertyName = "_patternBoolean")]
		public Element _PatternBoolean { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternCanonical")]
		public string PatternCanonical { get; set; }
		///<summary>May contain extended information for property: 'PatternCanonical'</summary>
		[JsonProperty(PropertyName = "_patternCanonical")]
		public Element _PatternCanonical { get; set; }
		///<summary>Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not intended for use with primitive types, where is has the same meaning as fixed[x].</summary>
		[JsonProperty(PropertyName = "patternCode")]
		public string PatternCode { get; set; }
		///<summary>May contain extended information for property: 'PatternCode'</summary>
		[JsonProperty(PropertyName = "_patternCode")]
		public Element _PatternCode { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternCodeableConcept")]
		public CodeableConcept PatternCodeableConcept { get; set; }
		///<summary>May contain extended information for property: 'PatternCodeableConcept'</summary>
		[JsonProperty(PropertyName = "_patternCodeableConcept")]
		public Element _PatternCodeableConcept { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternCoding")]
		public Coding PatternCoding { get; set; }
		///<summary>May contain extended information for property: 'PatternCoding'</summary>
		[JsonProperty(PropertyName = "_patternCoding")]
		public Element _PatternCoding { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternContactDetail")]
		public ContactDetail PatternContactDetail { get; set; }
		///<summary>May contain extended information for property: 'PatternContactDetail'</summary>
		[JsonProperty(PropertyName = "_patternContactDetail")]
		public Element _PatternContactDetail { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternContactPoint")]
		public ContactPoint PatternContactPoint { get; set; }
		///<summary>May contain extended information for property: 'PatternContactPoint'</summary>
		[JsonProperty(PropertyName = "_patternContactPoint")]
		public Element _PatternContactPoint { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternContributor")]
		public Contributor PatternContributor { get; set; }
		///<summary>May contain extended information for property: 'PatternContributor'</summary>
		[JsonProperty(PropertyName = "_patternContributor")]
		public Element _PatternContributor { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternCount")]
		public Count PatternCount { get; set; }
		///<summary>May contain extended information for property: 'PatternCount'</summary>
		[JsonProperty(PropertyName = "_patternCount")]
		public Element _PatternCount { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternDataRequirement")]
		public DataRequirement PatternDataRequirement { get; set; }
		///<summary>May contain extended information for property: 'PatternDataRequirement'</summary>
		[JsonProperty(PropertyName = "_patternDataRequirement")]
		public Element _PatternDataRequirement { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternDate")]
		public string PatternDate { get; set; }
		///<summary>May contain extended information for property: 'PatternDate'</summary>
		[JsonProperty(PropertyName = "_patternDate")]
		public Element _PatternDate { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternDateTime")]
		public string PatternDateTime { get; set; }
		///<summary>May contain extended information for property: 'PatternDateTime'</summary>
		[JsonProperty(PropertyName = "_patternDateTime")]
		public Element _PatternDateTime { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternDecimal")]
		public decimal? PatternDecimal { get; set; }
		///<summary>May contain extended information for property: 'PatternDecimal'</summary>
		[JsonProperty(PropertyName = "_patternDecimal")]
		public Element _PatternDecimal { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternDistance")]
		public Distance PatternDistance { get; set; }
		///<summary>May contain extended information for property: 'PatternDistance'</summary>
		[JsonProperty(PropertyName = "_patternDistance")]
		public Element _PatternDistance { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternDuration")]
		public Duration PatternDuration { get; set; }
		///<summary>May contain extended information for property: 'PatternDuration'</summary>
		[JsonProperty(PropertyName = "_patternDuration")]
		public Element _PatternDuration { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternHumanName")]
		public HumanName PatternHumanName { get; set; }
		///<summary>May contain extended information for property: 'PatternHumanName'</summary>
		[JsonProperty(PropertyName = "_patternHumanName")]
		public Element _PatternHumanName { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternId")]
		public string PatternId { get; set; }
		///<summary>May contain extended information for property: 'PatternId'</summary>
		[JsonProperty(PropertyName = "_patternId")]
		public Element _PatternId { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternIdentifier")]
		public Identifier PatternIdentifier { get; set; }
		///<summary>May contain extended information for property: 'PatternIdentifier'</summary>
		[JsonProperty(PropertyName = "_patternIdentifier")]
		public Element _PatternIdentifier { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternInstant")]
		public string PatternInstant { get; set; }
		///<summary>May contain extended information for property: 'PatternInstant'</summary>
		[JsonProperty(PropertyName = "_patternInstant")]
		public Element _PatternInstant { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternInteger")]
		public int? PatternInteger { get; set; }
		///<summary>May contain extended information for property: 'PatternInteger'</summary>
		[JsonProperty(PropertyName = "_patternInteger")]
		public Element _PatternInteger { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternMarkdown")]
		public string PatternMarkdown { get; set; }
		///<summary>May contain extended information for property: 'PatternMarkdown'</summary>
		[JsonProperty(PropertyName = "_patternMarkdown")]
		public Element _PatternMarkdown { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternMeta")]
		public Meta PatternMeta { get; set; }
		///<summary>May contain extended information for property: 'PatternMeta'</summary>
		[JsonProperty(PropertyName = "_patternMeta")]
		public Element _PatternMeta { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternMoney")]
		public Money PatternMoney { get; set; }
		///<summary>May contain extended information for property: 'PatternMoney'</summary>
		[JsonProperty(PropertyName = "_patternMoney")]
		public Element _PatternMoney { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternOid")]
		public string PatternOid { get; set; }
		///<summary>May contain extended information for property: 'PatternOid'</summary>
		[JsonProperty(PropertyName = "_patternOid")]
		public Element _PatternOid { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternParameterDefinition")]
		public ParameterDefinition PatternParameterDefinition { get; set; }
		///<summary>May contain extended information for property: 'PatternParameterDefinition'</summary>
		[JsonProperty(PropertyName = "_patternParameterDefinition")]
		public Element _PatternParameterDefinition { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternPeriod")]
		public Period PatternPeriod { get; set; }
		///<summary>May contain extended information for property: 'PatternPeriod'</summary>
		[JsonProperty(PropertyName = "_patternPeriod")]
		public Element _PatternPeriod { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternPositiveInt")]
		public uint? PatternPositiveInt { get; set; }
		///<summary>May contain extended information for property: 'PatternPositiveInt'</summary>
		[JsonProperty(PropertyName = "_patternPositiveInt")]
		public Element _PatternPositiveInt { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternQuantity")]
		public Quantity PatternQuantity { get; set; }
		///<summary>May contain extended information for property: 'PatternQuantity'</summary>
		[JsonProperty(PropertyName = "_patternQuantity")]
		public Element _PatternQuantity { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternRange")]
		public Range PatternRange { get; set; }
		///<summary>May contain extended information for property: 'PatternRange'</summary>
		[JsonProperty(PropertyName = "_patternRange")]
		public Element _PatternRange { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternRatio")]
		public Ratio PatternRatio { get; set; }
		///<summary>May contain extended information for property: 'PatternRatio'</summary>
		[JsonProperty(PropertyName = "_patternRatio")]
		public Element _PatternRatio { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternReference")]
		public Reference PatternReference { get; set; }
		///<summary>May contain extended information for property: 'PatternReference'</summary>
		[JsonProperty(PropertyName = "_patternReference")]
		public Element _PatternReference { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternSampledData")]
		public SampledData PatternSampledData { get; set; }
		///<summary>May contain extended information for property: 'PatternSampledData'</summary>
		[JsonProperty(PropertyName = "_patternSampledData")]
		public Element _PatternSampledData { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternSignature")]
		public Signature PatternSignature { get; set; }
		///<summary>May contain extended information for property: 'PatternSignature'</summary>
		[JsonProperty(PropertyName = "_patternSignature")]
		public Element _PatternSignature { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternString")]
		public string PatternString { get; set; }
		///<summary>May contain extended information for property: 'PatternString'</summary>
		[JsonProperty(PropertyName = "_patternString")]
		public Element _PatternString { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternTime")]
		public string PatternTime { get; set; }
		///<summary>May contain extended information for property: 'PatternTime'</summary>
		[JsonProperty(PropertyName = "_patternTime")]
		public Element _PatternTime { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternTiming")]
		public Timing PatternTiming { get; set; }
		///<summary>May contain extended information for property: 'PatternTiming'</summary>
		[JsonProperty(PropertyName = "_patternTiming")]
		public Element _PatternTiming { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternTriggerDefinition")]
		public TriggerDefinition PatternTriggerDefinition { get; set; }
		///<summary>May contain extended information for property: 'PatternTriggerDefinition'</summary>
		[JsonProperty(PropertyName = "_patternTriggerDefinition")]
		public Element _PatternTriggerDefinition { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternUnsignedInt")]
		public uint? PatternUnsignedInt { get; set; }
		///<summary>May contain extended information for property: 'PatternUnsignedInt'</summary>
		[JsonProperty(PropertyName = "_patternUnsignedInt")]
		public Element _PatternUnsignedInt { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternUri")]
		public string PatternUri { get; set; }
		///<summary>May contain extended information for property: 'PatternUri'</summary>
		[JsonProperty(PropertyName = "_patternUri")]
		public Element _PatternUri { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternUrl")]
		public string PatternUrl { get; set; }
		///<summary>May contain extended information for property: 'PatternUrl'</summary>
		[JsonProperty(PropertyName = "_patternUrl")]
		public Element _PatternUrl { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternUsageContext")]
		public UsageContext PatternUsageContext { get; set; }
		///<summary>May contain extended information for property: 'PatternUsageContext'</summary>
		[JsonProperty(PropertyName = "_patternUsageContext")]
		public Element _PatternUsageContext { get; set; }
		///<summary>Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
		///
		/// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
		///
		/// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
		///
		/// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
		///
		/// 1. If primitive: it must match exactly the pattern value
		/// 2. If a complex object: it must match (recursively) the pattern value
		/// 3. If an array: it must match (recursively) the pattern value.</summary>
		[JsonProperty(PropertyName = "patternUuid")]
		public Guid? PatternUuid { get; set; }
		///<summary>May contain extended information for property: 'PatternUuid'</summary>
		[JsonProperty(PropertyName = "_patternUuid")]
		public Element _PatternUuid { get; set; }
		///<summary>In resources, this is rarely used except for special cases where the representation deviates from the normal, and can only be done in the base standard (and profiles must reproduce what the base standard does). This element is used quite commonly in Logical models when the logical models represent a specific serialization format (e.g. CDA, v2 etc.).</summary>
		[JsonProperty(PropertyName = "representation")]
		public string[] Representation { get; set; }
		///<summary>May contain extended information for property: 'Representation'</summary>
		[JsonProperty(PropertyName = "_representation")]
		public Element[] _Representation { get; set; }
		///<summary>This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.</summary>
		[JsonProperty(PropertyName = "requirements")]
		public string Requirements { get; set; }
		///<summary>May contain extended information for property: 'Requirements'</summary>
		[JsonProperty(PropertyName = "_requirements")]
		public Element _Requirements { get; set; }
		///<summary>A concise description of what this element means (e.g. for use in autogenerated summaries).</summary>
		[JsonProperty(PropertyName = "short")]
		public string Short { get; set; }
		///<summary>May contain extended information for property: 'Short'</summary>
		[JsonProperty(PropertyName = "_short")]
		public Element _Short { get; set; }
		///<summary>If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.</summary>
		[JsonProperty(PropertyName = "sliceIsConstraining")]
		public bool? SliceIsConstraining { get; set; }
		///<summary>May contain extended information for property: 'SliceIsConstraining'</summary>
		[JsonProperty(PropertyName = "_sliceIsConstraining")]
		public Element _SliceIsConstraining { get; set; }
		///<summary>The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.</summary>
		[JsonProperty(PropertyName = "sliceName")]
		public string SliceName { get; set; }
		///<summary>May contain extended information for property: 'SliceName'</summary>
		[JsonProperty(PropertyName = "_sliceName")]
		public Element _SliceName { get; set; }
		///<summary>Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).</summary>
		[JsonProperty(PropertyName = "slicing")]
		public ElementDefinitionSlicing Slicing { get; set; }
		///<summary>May contain extended information for property: 'Slicing'</summary>
		[JsonProperty(PropertyName = "_slicing")]
		public Element _Slicing { get; set; }
		///<summary>The data type or resource that the value of this element is permitted to be.</summary>
		[JsonProperty(PropertyName = "type")]
		public ElementDefinitionType[] Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element[] _Type { get; set; }
	}
	///<summary>
	///Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinitionBase : Element
	{
		///<summary>Maximum cardinality of the base element identified by the path.</summary>
		[JsonProperty(PropertyName = "max")]
		public string Max { get; set; }
		///<summary>May contain extended information for property: 'Max'</summary>
		[JsonProperty(PropertyName = "_max")]
		public Element _Max { get; set; }
		///<summary>Minimum cardinality of the base element identified by the path.</summary>
		[JsonProperty(PropertyName = "min")]
		public uint Min { get; set; }
		///<summary>May contain extended information for property: 'Min'</summary>
		[JsonProperty(PropertyName = "_min")]
		public Element _Min { get; set; }
		///<summary>The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.</summary>
		[JsonProperty(PropertyName = "path")]
		public string Path { get; set; }
		///<summary>May contain extended information for property: 'Path'</summary>
		[JsonProperty(PropertyName = "_path")]
		public Element _Path { get; set; }
	}
	///<summary>
	///Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinitionBinding : Element
	{
		///<summary>Describes the intended use of this particular set of codes.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>For further discussion, see [Using Terminologies](terminologies.html).</summary>
		[JsonProperty(PropertyName = "strength")]
		public string Strength { get; set; }
		///<summary>May contain extended information for property: 'Strength'</summary>
		[JsonProperty(PropertyName = "_strength")]
		public Element _Strength { get; set; }
		///<summary>Refers to the value set that identifies the set of codes the binding refers to.</summary>
		[JsonProperty(PropertyName = "valueSet")]
		public string ValueSet { get; set; }
		///<summary>May contain extended information for property: 'ValueSet'</summary>
		[JsonProperty(PropertyName = "_valueSet")]
		public Element _ValueSet { get; set; }
	}
	///<summary>
	///Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinitionConstraint : Element
	{
		///<summary>A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.</summary>
		[JsonProperty(PropertyName = "expression")]
		public string Expression { get; set; }
		///<summary>May contain extended information for property: 'Expression'</summary>
		[JsonProperty(PropertyName = "_expression")]
		public Element _Expression { get; set; }
		///<summary>Text that can be used to describe the constraint in messages identifying that the constraint has been violated.</summary>
		[JsonProperty(PropertyName = "human")]
		public string Human { get; set; }
		///<summary>May contain extended information for property: 'Human'</summary>
		[JsonProperty(PropertyName = "_human")]
		public Element _Human { get; set; }
		///<summary>Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.</summary>
		[JsonProperty(PropertyName = "key")]
		public string Key { get; set; }
		///<summary>May contain extended information for property: 'Key'</summary>
		[JsonProperty(PropertyName = "_key")]
		public Element _Key { get; set; }
		///<summary>Description of why this constraint is necessary or appropriate.</summary>
		[JsonProperty(PropertyName = "requirements")]
		public string Requirements { get; set; }
		///<summary>May contain extended information for property: 'Requirements'</summary>
		[JsonProperty(PropertyName = "_requirements")]
		public Element _Requirements { get; set; }
		///<summary>This allows constraints to be asserted as "shall" (error) and "should" (warning).</summary>
		[JsonProperty(PropertyName = "severity")]
		public string Severity { get; set; }
		///<summary>May contain extended information for property: 'Severity'</summary>
		[JsonProperty(PropertyName = "_severity")]
		public Element _Severity { get; set; }
		///<summary>A reference to the original source of the constraint, for traceability purposes.</summary>
		[JsonProperty(PropertyName = "source")]
		public string Source { get; set; }
		///<summary>May contain extended information for property: 'Source'</summary>
		[JsonProperty(PropertyName = "_source")]
		public Element _Source { get; set; }
		///<summary>An XPath expression of constraint that can be executed to see if this constraint is met.</summary>
		[JsonProperty(PropertyName = "xpath")]
		public string Xpath { get; set; }
		///<summary>May contain extended information for property: 'Xpath'</summary>
		[JsonProperty(PropertyName = "_xpath")]
		public Element _Xpath { get; set; }
	}
	///<summary>
	///A sample value for this element demonstrating the type of information that would typically be found in the element.
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinitionExample : Element
	{
		///<summary>Describes the purpose of this example amoung the set of examples.</summary>
		[JsonProperty(PropertyName = "label")]
		public string Label { get; set; }
		///<summary>May contain extended information for property: 'Label'</summary>
		[JsonProperty(PropertyName = "_label")]
		public Element _Label { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueAge")]
		public Age ValueAge { get; set; }
		///<summary>May contain extended information for property: 'ValueAge'</summary>
		[JsonProperty(PropertyName = "_valueAge")]
		public Element _ValueAge { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueBase64Binary")]
		public string ValueBase64Binary { get; set; }
		///<summary>May contain extended information for property: 'ValueBase64Binary'</summary>
		[JsonProperty(PropertyName = "_valueBase64Binary")]
		public Element _ValueBase64Binary { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueBoolean")]
		public bool? ValueBoolean { get; set; }
		///<summary>May contain extended information for property: 'ValueBoolean'</summary>
		[JsonProperty(PropertyName = "_valueBoolean")]
		public Element _ValueBoolean { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueCanonical")]
		public string ValueCanonical { get; set; }
		///<summary>May contain extended information for property: 'ValueCanonical'</summary>
		[JsonProperty(PropertyName = "_valueCanonical")]
		public Element _ValueCanonical { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueCode")]
		public string ValueCode { get; set; }
		///<summary>May contain extended information for property: 'ValueCode'</summary>
		[JsonProperty(PropertyName = "_valueCode")]
		public Element _ValueCode { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueCodeableConcept")]
		public CodeableConcept ValueCodeableConcept { get; set; }
		///<summary>May contain extended information for property: 'ValueCodeableConcept'</summary>
		[JsonProperty(PropertyName = "_valueCodeableConcept")]
		public Element _ValueCodeableConcept { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueCoding")]
		public Coding ValueCoding { get; set; }
		///<summary>May contain extended information for property: 'ValueCoding'</summary>
		[JsonProperty(PropertyName = "_valueCoding")]
		public Element _ValueCoding { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueContactDetail")]
		public ContactDetail ValueContactDetail { get; set; }
		///<summary>May contain extended information for property: 'ValueContactDetail'</summary>
		[JsonProperty(PropertyName = "_valueContactDetail")]
		public Element _ValueContactDetail { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueContactPoint")]
		public ContactPoint ValueContactPoint { get; set; }
		///<summary>May contain extended information for property: 'ValueContactPoint'</summary>
		[JsonProperty(PropertyName = "_valueContactPoint")]
		public Element _ValueContactPoint { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueContributor")]
		public Contributor ValueContributor { get; set; }
		///<summary>May contain extended information for property: 'ValueContributor'</summary>
		[JsonProperty(PropertyName = "_valueContributor")]
		public Element _ValueContributor { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueCount")]
		public Count ValueCount { get; set; }
		///<summary>May contain extended information for property: 'ValueCount'</summary>
		[JsonProperty(PropertyName = "_valueCount")]
		public Element _ValueCount { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueDataRequirement")]
		public DataRequirement ValueDataRequirement { get; set; }
		///<summary>May contain extended information for property: 'ValueDataRequirement'</summary>
		[JsonProperty(PropertyName = "_valueDataRequirement")]
		public Element _ValueDataRequirement { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueDate")]
		public string ValueDate { get; set; }
		///<summary>May contain extended information for property: 'ValueDate'</summary>
		[JsonProperty(PropertyName = "_valueDate")]
		public Element _ValueDate { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueDateTime")]
		public string ValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'ValueDateTime'</summary>
		[JsonProperty(PropertyName = "_valueDateTime")]
		public Element _ValueDateTime { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueDecimal")]
		public decimal? ValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'ValueDecimal'</summary>
		[JsonProperty(PropertyName = "_valueDecimal")]
		public Element _ValueDecimal { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueDistance")]
		public Distance ValueDistance { get; set; }
		///<summary>May contain extended information for property: 'ValueDistance'</summary>
		[JsonProperty(PropertyName = "_valueDistance")]
		public Element _ValueDistance { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueDuration")]
		public Duration ValueDuration { get; set; }
		///<summary>May contain extended information for property: 'ValueDuration'</summary>
		[JsonProperty(PropertyName = "_valueDuration")]
		public Element _ValueDuration { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueHumanName")]
		public HumanName ValueHumanName { get; set; }
		///<summary>May contain extended information for property: 'ValueHumanName'</summary>
		[JsonProperty(PropertyName = "_valueHumanName")]
		public Element _ValueHumanName { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueId")]
		public string ValueId { get; set; }
		///<summary>May contain extended information for property: 'ValueId'</summary>
		[JsonProperty(PropertyName = "_valueId")]
		public Element _ValueId { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueIdentifier")]
		public Identifier ValueIdentifier { get; set; }
		///<summary>May contain extended information for property: 'ValueIdentifier'</summary>
		[JsonProperty(PropertyName = "_valueIdentifier")]
		public Element _ValueIdentifier { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueInstant")]
		public string ValueInstant { get; set; }
		///<summary>May contain extended information for property: 'ValueInstant'</summary>
		[JsonProperty(PropertyName = "_valueInstant")]
		public Element _ValueInstant { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueInteger")]
		public int? ValueInteger { get; set; }
		///<summary>May contain extended information for property: 'ValueInteger'</summary>
		[JsonProperty(PropertyName = "_valueInteger")]
		public Element _ValueInteger { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueMarkdown")]
		public string ValueMarkdown { get; set; }
		///<summary>May contain extended information for property: 'ValueMarkdown'</summary>
		[JsonProperty(PropertyName = "_valueMarkdown")]
		public Element _ValueMarkdown { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueMeta")]
		public Meta ValueMeta { get; set; }
		///<summary>May contain extended information for property: 'ValueMeta'</summary>
		[JsonProperty(PropertyName = "_valueMeta")]
		public Element _ValueMeta { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueMoney")]
		public Money ValueMoney { get; set; }
		///<summary>May contain extended information for property: 'ValueMoney'</summary>
		[JsonProperty(PropertyName = "_valueMoney")]
		public Element _ValueMoney { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueOid")]
		public string ValueOid { get; set; }
		///<summary>May contain extended information for property: 'ValueOid'</summary>
		[JsonProperty(PropertyName = "_valueOid")]
		public Element _ValueOid { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueParameterDefinition")]
		public ParameterDefinition ValueParameterDefinition { get; set; }
		///<summary>May contain extended information for property: 'ValueParameterDefinition'</summary>
		[JsonProperty(PropertyName = "_valueParameterDefinition")]
		public Element _ValueParameterDefinition { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valuePeriod")]
		public Period ValuePeriod { get; set; }
		///<summary>May contain extended information for property: 'ValuePeriod'</summary>
		[JsonProperty(PropertyName = "_valuePeriod")]
		public Element _ValuePeriod { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valuePositiveInt")]
		public uint? ValuePositiveInt { get; set; }
		///<summary>May contain extended information for property: 'ValuePositiveInt'</summary>
		[JsonProperty(PropertyName = "_valuePositiveInt")]
		public Element _ValuePositiveInt { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueQuantity")]
		public Quantity ValueQuantity { get; set; }
		///<summary>May contain extended information for property: 'ValueQuantity'</summary>
		[JsonProperty(PropertyName = "_valueQuantity")]
		public Element _ValueQuantity { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueRange")]
		public Range ValueRange { get; set; }
		///<summary>May contain extended information for property: 'ValueRange'</summary>
		[JsonProperty(PropertyName = "_valueRange")]
		public Element _ValueRange { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueRatio")]
		public Ratio ValueRatio { get; set; }
		///<summary>May contain extended information for property: 'ValueRatio'</summary>
		[JsonProperty(PropertyName = "_valueRatio")]
		public Element _ValueRatio { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueReference")]
		public Reference ValueReference { get; set; }
		///<summary>May contain extended information for property: 'ValueReference'</summary>
		[JsonProperty(PropertyName = "_valueReference")]
		public Element _ValueReference { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueSampledData")]
		public SampledData ValueSampledData { get; set; }
		///<summary>May contain extended information for property: 'ValueSampledData'</summary>
		[JsonProperty(PropertyName = "_valueSampledData")]
		public Element _ValueSampledData { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueSignature")]
		public Signature ValueSignature { get; set; }
		///<summary>May contain extended information for property: 'ValueSignature'</summary>
		[JsonProperty(PropertyName = "_valueSignature")]
		public Element _ValueSignature { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueString")]
		public string ValueString { get; set; }
		///<summary>May contain extended information for property: 'ValueString'</summary>
		[JsonProperty(PropertyName = "_valueString")]
		public Element _ValueString { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueTime")]
		public string ValueTime { get; set; }
		///<summary>May contain extended information for property: 'ValueTime'</summary>
		[JsonProperty(PropertyName = "_valueTime")]
		public Element _ValueTime { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueTiming")]
		public Timing ValueTiming { get; set; }
		///<summary>May contain extended information for property: 'ValueTiming'</summary>
		[JsonProperty(PropertyName = "_valueTiming")]
		public Element _ValueTiming { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueTriggerDefinition")]
		public TriggerDefinition ValueTriggerDefinition { get; set; }
		///<summary>May contain extended information for property: 'ValueTriggerDefinition'</summary>
		[JsonProperty(PropertyName = "_valueTriggerDefinition")]
		public Element _ValueTriggerDefinition { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueUnsignedInt")]
		public uint? ValueUnsignedInt { get; set; }
		///<summary>May contain extended information for property: 'ValueUnsignedInt'</summary>
		[JsonProperty(PropertyName = "_valueUnsignedInt")]
		public Element _ValueUnsignedInt { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueUri")]
		public string ValueUri { get; set; }
		///<summary>May contain extended information for property: 'ValueUri'</summary>
		[JsonProperty(PropertyName = "_valueUri")]
		public Element _ValueUri { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueUrl")]
		public string ValueUrl { get; set; }
		///<summary>May contain extended information for property: 'ValueUrl'</summary>
		[JsonProperty(PropertyName = "_valueUrl")]
		public Element _ValueUrl { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueUsageContext")]
		public UsageContext ValueUsageContext { get; set; }
		///<summary>May contain extended information for property: 'ValueUsageContext'</summary>
		[JsonProperty(PropertyName = "_valueUsageContext")]
		public Element _ValueUsageContext { get; set; }
		///<summary>The actual value for the element, which must be one of the types allowed for this element.</summary>
		[JsonProperty(PropertyName = "valueUuid")]
		public Guid? ValueUuid { get; set; }
		///<summary>May contain extended information for property: 'ValueUuid'</summary>
		[JsonProperty(PropertyName = "_valueUuid")]
		public Element _ValueUuid { get; set; }
	}
	///<summary>
	///Identifies a concept from an external specification that roughly corresponds to this element.
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinitionMapping : Element
	{
		///<summary>Comments that provide information about the mapping or its use.</summary>
		[JsonProperty(PropertyName = "comment")]
		public string Comment { get; set; }
		///<summary>May contain extended information for property: 'Comment'</summary>
		[JsonProperty(PropertyName = "_comment")]
		public Element _Comment { get; set; }
		///<summary>An internal reference to the definition of a mapping.</summary>
		[JsonProperty(PropertyName = "identity")]
		public string Identity { get; set; }
		///<summary>May contain extended information for property: 'Identity'</summary>
		[JsonProperty(PropertyName = "_identity")]
		public Element _Identity { get; set; }
		///<summary>If omitted, then there can be no expectation of computational interpretation of the mapping.</summary>
		[JsonProperty(PropertyName = "language")]
		public string Language { get; set; }
		///<summary>May contain extended information for property: 'Language'</summary>
		[JsonProperty(PropertyName = "_language")]
		public Element _Language { get; set; }
		///<summary>Expresses what part of the target specification corresponds to this element.</summary>
		[JsonProperty(PropertyName = "map")]
		public string Map { get; set; }
		///<summary>May contain extended information for property: 'Map'</summary>
		[JsonProperty(PropertyName = "_map")]
		public Element _Map { get; set; }
	}
	///<summary>
	///Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinitionSlicing : Element
	{
		///<summary>A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.</summary>
		[JsonProperty(PropertyName = "discriminator")]
		public ElementDefinitionSlicingDiscriminator[] Discriminator { get; set; }
		///<summary>May contain extended information for property: 'Discriminator'</summary>
		[JsonProperty(PropertyName = "_discriminator")]
		public Element[] _Discriminator { get; set; }
		///<summary>If the matching elements have to occur in the same order as defined in the profile.</summary>
		[JsonProperty(PropertyName = "ordered")]
		public bool? Ordered { get; set; }
		///<summary>May contain extended information for property: 'Ordered'</summary>
		[JsonProperty(PropertyName = "_ordered")]
		public Element _Ordered { get; set; }
		///<summary>Allowing additional elements makes for a much for flexible template - it's open for use in wider contexts, but also means that the content of the resource is not closed, and applications have to decide how to handle content not described by the profile.</summary>
		[JsonProperty(PropertyName = "rules")]
		public string Rules { get; set; }
		///<summary>May contain extended information for property: 'Rules'</summary>
		[JsonProperty(PropertyName = "_rules")]
		public Element _Rules { get; set; }
	}
	///<summary>
	///Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinitionSlicingDiscriminator : Element
	{
		///<summary>A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.</summary>
		[JsonProperty(PropertyName = "path")]
		public string Path { get; set; }
		///<summary>May contain extended information for property: 'Path'</summary>
		[JsonProperty(PropertyName = "_path")]
		public Element _Path { get; set; }
		///<summary>How the element value is interpreted when discrimination is evaluated.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
	}
	///<summary>
	///The data type or resource that the value of this element is permitted to be.
	///</summary>
	///<source-file>c:/git/fhir\publish\elementdefinition.profile.canonical.json</source-file>
	public class ElementDefinitionType : Element
	{
		///<summary>See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.</summary>
		[JsonProperty(PropertyName = "aggregation")]
		public string[] Aggregation { get; set; }
		///<summary>May contain extended information for property: 'Aggregation'</summary>
		[JsonProperty(PropertyName = "_aggregation")]
		public Element[] _Aggregation { get; set; }
		///<summary>URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.</summary>
		[JsonProperty(PropertyName = "profile")]
		public string Profile { get; set; }
		///<summary>May contain extended information for property: 'Profile'</summary>
		[JsonProperty(PropertyName = "_profile")]
		public Element _Profile { get; set; }
		///<summary>Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.</summary>
		[JsonProperty(PropertyName = "targetProfile")]
		public string TargetProfile { get; set; }
		///<summary>May contain extended information for property: 'TargetProfile'</summary>
		[JsonProperty(PropertyName = "_targetProfile")]
		public Element _TargetProfile { get; set; }
		///<summary>The base specification never makes a rule as to which form is allowed, but implementation guides may do this. See [Aggregation Rules](elementdefinition.html#aggregation) for further clarification.</summary>
		[JsonProperty(PropertyName = "versioning")]
		public string Versioning { get; set; }
		///<summary>May contain extended information for property: 'Versioning'</summary>
		[JsonProperty(PropertyName = "_versioning")]
		public Element _Versioning { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Extension Type: Optional Extension Element - found in all resources.
	///</summary>
	///<source-file>c:/git/fhir\publish\extension.profile.canonical.json</source-file>
	public class Extension : DataType
	{
		///<summary>Source of the definition for the extension code - a logical name or a URL.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueAge")]
		public Age ValueAge { get; set; }
		///<summary>May contain extended information for property: 'ValueAge'</summary>
		[JsonProperty(PropertyName = "_valueAge")]
		public Element _ValueAge { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueBase64Binary")]
		public string ValueBase64Binary { get; set; }
		///<summary>May contain extended information for property: 'ValueBase64Binary'</summary>
		[JsonProperty(PropertyName = "_valueBase64Binary")]
		public Element _ValueBase64Binary { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueBoolean")]
		public bool? ValueBoolean { get; set; }
		///<summary>May contain extended information for property: 'ValueBoolean'</summary>
		[JsonProperty(PropertyName = "_valueBoolean")]
		public Element _ValueBoolean { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueCanonical")]
		public string ValueCanonical { get; set; }
		///<summary>May contain extended information for property: 'ValueCanonical'</summary>
		[JsonProperty(PropertyName = "_valueCanonical")]
		public Element _ValueCanonical { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueCode")]
		public string ValueCode { get; set; }
		///<summary>May contain extended information for property: 'ValueCode'</summary>
		[JsonProperty(PropertyName = "_valueCode")]
		public Element _ValueCode { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueCodeableConcept")]
		public CodeableConcept ValueCodeableConcept { get; set; }
		///<summary>May contain extended information for property: 'ValueCodeableConcept'</summary>
		[JsonProperty(PropertyName = "_valueCodeableConcept")]
		public Element _ValueCodeableConcept { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueCoding")]
		public Coding ValueCoding { get; set; }
		///<summary>May contain extended information for property: 'ValueCoding'</summary>
		[JsonProperty(PropertyName = "_valueCoding")]
		public Element _ValueCoding { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueContactDetail")]
		public ContactDetail ValueContactDetail { get; set; }
		///<summary>May contain extended information for property: 'ValueContactDetail'</summary>
		[JsonProperty(PropertyName = "_valueContactDetail")]
		public Element _ValueContactDetail { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueContactPoint")]
		public ContactPoint ValueContactPoint { get; set; }
		///<summary>May contain extended information for property: 'ValueContactPoint'</summary>
		[JsonProperty(PropertyName = "_valueContactPoint")]
		public Element _ValueContactPoint { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueContributor")]
		public Contributor ValueContributor { get; set; }
		///<summary>May contain extended information for property: 'ValueContributor'</summary>
		[JsonProperty(PropertyName = "_valueContributor")]
		public Element _ValueContributor { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueCount")]
		public Count ValueCount { get; set; }
		///<summary>May contain extended information for property: 'ValueCount'</summary>
		[JsonProperty(PropertyName = "_valueCount")]
		public Element _ValueCount { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueDataRequirement")]
		public DataRequirement ValueDataRequirement { get; set; }
		///<summary>May contain extended information for property: 'ValueDataRequirement'</summary>
		[JsonProperty(PropertyName = "_valueDataRequirement")]
		public Element _ValueDataRequirement { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueDate")]
		public string ValueDate { get; set; }
		///<summary>May contain extended information for property: 'ValueDate'</summary>
		[JsonProperty(PropertyName = "_valueDate")]
		public Element _ValueDate { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueDateTime")]
		public string ValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'ValueDateTime'</summary>
		[JsonProperty(PropertyName = "_valueDateTime")]
		public Element _ValueDateTime { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueDecimal")]
		public decimal? ValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'ValueDecimal'</summary>
		[JsonProperty(PropertyName = "_valueDecimal")]
		public Element _ValueDecimal { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueDistance")]
		public Distance ValueDistance { get; set; }
		///<summary>May contain extended information for property: 'ValueDistance'</summary>
		[JsonProperty(PropertyName = "_valueDistance")]
		public Element _ValueDistance { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueDuration")]
		public Duration ValueDuration { get; set; }
		///<summary>May contain extended information for property: 'ValueDuration'</summary>
		[JsonProperty(PropertyName = "_valueDuration")]
		public Element _ValueDuration { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueHumanName")]
		public HumanName ValueHumanName { get; set; }
		///<summary>May contain extended information for property: 'ValueHumanName'</summary>
		[JsonProperty(PropertyName = "_valueHumanName")]
		public Element _ValueHumanName { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueId")]
		public string ValueId { get; set; }
		///<summary>May contain extended information for property: 'ValueId'</summary>
		[JsonProperty(PropertyName = "_valueId")]
		public Element _ValueId { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueIdentifier")]
		public Identifier ValueIdentifier { get; set; }
		///<summary>May contain extended information for property: 'ValueIdentifier'</summary>
		[JsonProperty(PropertyName = "_valueIdentifier")]
		public Element _ValueIdentifier { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueInstant")]
		public string ValueInstant { get; set; }
		///<summary>May contain extended information for property: 'ValueInstant'</summary>
		[JsonProperty(PropertyName = "_valueInstant")]
		public Element _ValueInstant { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueInteger")]
		public int? ValueInteger { get; set; }
		///<summary>May contain extended information for property: 'ValueInteger'</summary>
		[JsonProperty(PropertyName = "_valueInteger")]
		public Element _ValueInteger { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueMarkdown")]
		public string ValueMarkdown { get; set; }
		///<summary>May contain extended information for property: 'ValueMarkdown'</summary>
		[JsonProperty(PropertyName = "_valueMarkdown")]
		public Element _ValueMarkdown { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueMeta")]
		public Meta ValueMeta { get; set; }
		///<summary>May contain extended information for property: 'ValueMeta'</summary>
		[JsonProperty(PropertyName = "_valueMeta")]
		public Element _ValueMeta { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueMoney")]
		public Money ValueMoney { get; set; }
		///<summary>May contain extended information for property: 'ValueMoney'</summary>
		[JsonProperty(PropertyName = "_valueMoney")]
		public Element _ValueMoney { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueOid")]
		public string ValueOid { get; set; }
		///<summary>May contain extended information for property: 'ValueOid'</summary>
		[JsonProperty(PropertyName = "_valueOid")]
		public Element _ValueOid { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueParameterDefinition")]
		public ParameterDefinition ValueParameterDefinition { get; set; }
		///<summary>May contain extended information for property: 'ValueParameterDefinition'</summary>
		[JsonProperty(PropertyName = "_valueParameterDefinition")]
		public Element _ValueParameterDefinition { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valuePeriod")]
		public Period ValuePeriod { get; set; }
		///<summary>May contain extended information for property: 'ValuePeriod'</summary>
		[JsonProperty(PropertyName = "_valuePeriod")]
		public Element _ValuePeriod { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valuePositiveInt")]
		public uint? ValuePositiveInt { get; set; }
		///<summary>May contain extended information for property: 'ValuePositiveInt'</summary>
		[JsonProperty(PropertyName = "_valuePositiveInt")]
		public Element _ValuePositiveInt { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueQuantity")]
		public Quantity ValueQuantity { get; set; }
		///<summary>May contain extended information for property: 'ValueQuantity'</summary>
		[JsonProperty(PropertyName = "_valueQuantity")]
		public Element _ValueQuantity { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueRange")]
		public Range ValueRange { get; set; }
		///<summary>May contain extended information for property: 'ValueRange'</summary>
		[JsonProperty(PropertyName = "_valueRange")]
		public Element _ValueRange { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueRatio")]
		public Ratio ValueRatio { get; set; }
		///<summary>May contain extended information for property: 'ValueRatio'</summary>
		[JsonProperty(PropertyName = "_valueRatio")]
		public Element _ValueRatio { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueReference")]
		public Reference ValueReference { get; set; }
		///<summary>May contain extended information for property: 'ValueReference'</summary>
		[JsonProperty(PropertyName = "_valueReference")]
		public Element _ValueReference { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueSampledData")]
		public SampledData ValueSampledData { get; set; }
		///<summary>May contain extended information for property: 'ValueSampledData'</summary>
		[JsonProperty(PropertyName = "_valueSampledData")]
		public Element _ValueSampledData { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueSignature")]
		public Signature ValueSignature { get; set; }
		///<summary>May contain extended information for property: 'ValueSignature'</summary>
		[JsonProperty(PropertyName = "_valueSignature")]
		public Element _ValueSignature { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueString")]
		public string ValueString { get; set; }
		///<summary>May contain extended information for property: 'ValueString'</summary>
		[JsonProperty(PropertyName = "_valueString")]
		public Element _ValueString { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueTime")]
		public string ValueTime { get; set; }
		///<summary>May contain extended information for property: 'ValueTime'</summary>
		[JsonProperty(PropertyName = "_valueTime")]
		public Element _ValueTime { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueTiming")]
		public Timing ValueTiming { get; set; }
		///<summary>May contain extended information for property: 'ValueTiming'</summary>
		[JsonProperty(PropertyName = "_valueTiming")]
		public Element _ValueTiming { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueTriggerDefinition")]
		public TriggerDefinition ValueTriggerDefinition { get; set; }
		///<summary>May contain extended information for property: 'ValueTriggerDefinition'</summary>
		[JsonProperty(PropertyName = "_valueTriggerDefinition")]
		public Element _ValueTriggerDefinition { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueUnsignedInt")]
		public uint? ValueUnsignedInt { get; set; }
		///<summary>May contain extended information for property: 'ValueUnsignedInt'</summary>
		[JsonProperty(PropertyName = "_valueUnsignedInt")]
		public Element _ValueUnsignedInt { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueUri")]
		public string ValueUri { get; set; }
		///<summary>May contain extended information for property: 'ValueUri'</summary>
		[JsonProperty(PropertyName = "_valueUri")]
		public Element _ValueUri { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueUrl")]
		public string ValueUrl { get; set; }
		///<summary>May contain extended information for property: 'ValueUrl'</summary>
		[JsonProperty(PropertyName = "_valueUrl")]
		public Element _ValueUrl { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueUsageContext")]
		public UsageContext ValueUsageContext { get; set; }
		///<summary>May contain extended information for property: 'ValueUsageContext'</summary>
		[JsonProperty(PropertyName = "_valueUsageContext")]
		public Element _ValueUsageContext { get; set; }
		///<summary>Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).</summary>
		[JsonProperty(PropertyName = "valueUuid")]
		public Guid? ValueUuid { get; set; }
		///<summary>May contain extended information for property: 'ValueUuid'</summary>
		[JsonProperty(PropertyName = "_valueUuid")]
		public Element _ValueUuid { get; set; }
	}
	///<summary>
	///Base StructureDefinition for HumanName Type: A human's name with the ability to identify parts and usage.
	///</summary>
	///<source-file>c:/git/fhir\publish\humanname.profile.canonical.json</source-file>
	public class HumanName : DataType
	{
		///<summary>The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.</summary>
		[JsonProperty(PropertyName = "family")]
		public string Family { get; set; }
		///<summary>May contain extended information for property: 'Family'</summary>
		[JsonProperty(PropertyName = "_family")]
		public Element _Family { get; set; }
		///<summary>Given name.</summary>
		[JsonProperty(PropertyName = "given")]
		public string[] Given { get; set; }
		///<summary>May contain extended information for property: 'Given'</summary>
		[JsonProperty(PropertyName = "_given")]
		public Element[] _Given { get; set; }
		///<summary>Indicates the period of time when this name was valid for the named person.</summary>
		[JsonProperty(PropertyName = "period")]
		public Period Period { get; set; }
		///<summary>May contain extended information for property: 'Period'</summary>
		[JsonProperty(PropertyName = "_period")]
		public Element _Period { get; set; }
		///<summary>Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.</summary>
		[JsonProperty(PropertyName = "prefix")]
		public string[] Prefix { get; set; }
		///<summary>May contain extended information for property: 'Prefix'</summary>
		[JsonProperty(PropertyName = "_prefix")]
		public Element[] _Prefix { get; set; }
		///<summary>Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.</summary>
		[JsonProperty(PropertyName = "suffix")]
		public string[] Suffix { get; set; }
		///<summary>May contain extended information for property: 'Suffix'</summary>
		[JsonProperty(PropertyName = "_suffix")]
		public Element[] _Suffix { get; set; }
		///<summary>Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.</summary>
		[JsonProperty(PropertyName = "text")]
		public string Text { get; set; }
		///<summary>May contain extended information for property: 'Text'</summary>
		[JsonProperty(PropertyName = "_text")]
		public Element _Text { get; set; }
		///<summary>Applications can assume that a name is current unless it explicitly says that it is temporary or old.</summary>
		[JsonProperty(PropertyName = "use")]
		public string Use { get; set; }
		///<summary>May contain extended information for property: 'Use'</summary>
		[JsonProperty(PropertyName = "_use")]
		public Element _Use { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Identifier Type: An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
	///</summary>
	///<source-file>c:/git/fhir\publish\identifier.profile.canonical.json</source-file>
	public class Identifier : DataType
	{
		///<summary>Organization that issued/manages the identifier.</summary>
		[JsonProperty(PropertyName = "assigner")]
		public Reference Assigner { get; set; }
		///<summary>May contain extended information for property: 'Assigner'</summary>
		[JsonProperty(PropertyName = "_assigner")]
		public Element _Assigner { get; set; }
		///<summary>Time period during which identifier is/was valid for use.</summary>
		[JsonProperty(PropertyName = "period")]
		public Period Period { get; set; }
		///<summary>May contain extended information for property: 'Period'</summary>
		[JsonProperty(PropertyName = "_period")]
		public Element _Period { get; set; }
		///<summary>Establishes the namespace for the value - that is, a URL that describes a set values that are unique.</summary>
		[JsonProperty(PropertyName = "system")]
		public string System { get; set; }
		///<summary>May contain extended information for property: 'System'</summary>
		[JsonProperty(PropertyName = "_system")]
		public Element _System { get; set; }
		///<summary>A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.</summary>
		[JsonProperty(PropertyName = "type")]
		public CodeableConcept Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>Applications can assume that an identifier is permanent unless it explicitly says that it is temporary.</summary>
		[JsonProperty(PropertyName = "use")]
		public string Use { get; set; }
		///<summary>May contain extended information for property: 'Use'</summary>
		[JsonProperty(PropertyName = "_use")]
		public Element _Use { get; set; }
		///<summary>The portion of the identifier typically relevant to the user and which is unique within the context of the system.</summary>
		[JsonProperty(PropertyName = "value")]
		public string Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Meta Type: The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	///</summary>
	///<source-file>c:/git/fhir\publish\meta.profile.canonical.json</source-file>
	public class Meta : DataType
	{
		///<summary>When the resource last changed - e.g. when the version changed.</summary>
		[JsonProperty(PropertyName = "lastUpdated")]
		public string LastUpdated { get; set; }
		///<summary>May contain extended information for property: 'LastUpdated'</summary>
		[JsonProperty(PropertyName = "_lastUpdated")]
		public Element _LastUpdated { get; set; }
		///<summary>A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).</summary>
		[JsonProperty(PropertyName = "profile")]
		public string[] Profile { get; set; }
		///<summary>May contain extended information for property: 'Profile'</summary>
		[JsonProperty(PropertyName = "_profile")]
		public Element[] _Profile { get; set; }
		///<summary>Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.</summary>
		[JsonProperty(PropertyName = "security")]
		public Coding[] Security { get; set; }
		///<summary>May contain extended information for property: 'Security'</summary>
		[JsonProperty(PropertyName = "_security")]
		public Element[] _Security { get; set; }
		///<summary>A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.</summary>
		[JsonProperty(PropertyName = "source")]
		public string Source { get; set; }
		///<summary>May contain extended information for property: 'Source'</summary>
		[JsonProperty(PropertyName = "_source")]
		public Element _Source { get; set; }
		///<summary>Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.</summary>
		[JsonProperty(PropertyName = "tag")]
		public Coding[] Tag { get; set; }
		///<summary>May contain extended information for property: 'Tag'</summary>
		[JsonProperty(PropertyName = "_tag")]
		public Element[] _Tag { get; set; }
		///<summary>The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.</summary>
		[JsonProperty(PropertyName = "versionId")]
		public string VersionId { get; set; }
		///<summary>May contain extended information for property: 'VersionId'</summary>
		[JsonProperty(PropertyName = "_versionId")]
		public Element _VersionId { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Money Type: An amount of economic utility in some recognized currency.
	///</summary>
	///<source-file>c:/git/fhir\publish\money.profile.canonical.json</source-file>
	public class Money : DataType
	{
		///<summary>ISO 4217 Currency Code.</summary>
		[JsonProperty(PropertyName = "currency")]
		public string Currency { get; set; }
		///<summary>May contain extended information for property: 'Currency'</summary>
		[JsonProperty(PropertyName = "_currency")]
		public Element _Currency { get; set; }
		///<summary>Numerical value (with implicit precision).</summary>
		[JsonProperty(PropertyName = "value")]
		public decimal? Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
	///</summary>
	///<source-file>c:/git/fhir\publish\namingsystem.profile.canonical.json</source-file>
	public class NamingSystem : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "NamingSystem";
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>The date  (and optionally time) when the naming system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A legal or geographic region in which the naming system is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>Indicates the purpose for the naming system - what kinds of things does it make unique?</summary>
		[JsonProperty(PropertyName = "kind")]
		public string Kind { get; set; }
		///<summary>May contain extended information for property: 'Kind'</summary>
		[JsonProperty(PropertyName = "_kind")]
		public Element _Kind { get; set; }
		///<summary>A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The name of the organization or individual that published the naming system.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }

		[JsonProperty(PropertyName ="replacedBy")]
		public Reference ReplacedBy { get; set; }
		[JsonProperty(PropertyName ="_replacedBy")]
		public Element _ReplacedBy { get; set; }

		///<summary>The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.</summary>
		[JsonProperty(PropertyName = "responsible")]
		public string Responsible { get; set; }
		///<summary>May contain extended information for property: 'Responsible'</summary>
		[JsonProperty(PropertyName = "_responsible")]
		public Element _Responsible { get; set; }
		///<summary>Allows filtering of naming systems that are appropriate for use versus not.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>Categorizes a naming system for easier search by grouping related naming systems.</summary>
		[JsonProperty(PropertyName = "type")]
		public CodeableConcept Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>Indicates how the system may be identified when referenced in electronic exchange.</summary>
		[JsonProperty(PropertyName = "uniqueId")]
		public NamingSystemUniqueId[] UniqueId { get; set; }
		///<summary>May contain extended information for property: 'UniqueId'</summary>
		[JsonProperty(PropertyName = "_uniqueId")]
		public Element[] _UniqueId { get; set; }
		///<summary>An absolute URI that is used to identify this naming system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this naming system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the naming system is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.</summary>
		[JsonProperty(PropertyName = "usage")]
		public string Usage { get; set; }
		///<summary>May contain extended information for property: 'Usage'</summary>
		[JsonProperty(PropertyName = "_usage")]
		public Element _Usage { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>The identifier that is used to identify this version of the naming system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the naming system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///Indicates how the system may be identified when referenced in electronic exchange.
	///</summary>
	///<source-file>c:/git/fhir\publish\namingsystem.profile.canonical.json</source-file>
	public class NamingSystemUniqueId : Element
	{
		///<summary>Notes about the past or intended usage of this identifier.</summary>
		[JsonProperty(PropertyName = "comment")]
		public string Comment { get; set; }
		///<summary>May contain extended information for property: 'Comment'</summary>
		[JsonProperty(PropertyName = "_comment")]
		public Element _Comment { get; set; }
		///<summary>Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.</summary>
		[JsonProperty(PropertyName = "period")]
		public Period Period { get; set; }
		///<summary>May contain extended information for property: 'Period'</summary>
		[JsonProperty(PropertyName = "_period")]
		public Element _Period { get; set; }
		///<summary>Indicates whether this identifier is the "preferred" identifier of this type.</summary>
		[JsonProperty(PropertyName = "preferred")]
		public bool? Preferred { get; set; }
		///<summary>May contain extended information for property: 'Preferred'</summary>
		[JsonProperty(PropertyName = "_preferred")]
		public Element _Preferred { get; set; }
		///<summary>Different identifier types may be used in different types of communications (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2 code name strings, etc.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>The string that should be sent over the wire to identify the code system or identifier system.</summary>
		[JsonProperty(PropertyName = "value")]
		public string Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Narrative Type: A human-readable summary of the resource conveying the essential clinical and business information for the resource.
	///</summary>
	///<source-file>c:/git/fhir\publish\narrative.profile.canonical.json</source-file>
	public class Narrative : DataType
	{
		///<summary>The actual narrative content, a stripped down version of XHTML.</summary>
		[JsonProperty(PropertyName = "div")]
		public string Div { get; set; }
		///<summary>May contain extended information for property: 'Div'</summary>
		[JsonProperty(PropertyName = "_div")]
		public Element _Div { get; set; }
		///<summary>The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
	}
	///<summary>
	///A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
	///</summary>
	///<source-file>c:/git/fhir\publish\operationdefinition.profile.canonical.json</source-file>
	public class OperationDefinition : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "OperationDefinition";
		///<summary>Indicates that this operation definition is a constraining profile on the base.</summary>
		[JsonProperty(PropertyName = "base")]
		public Reference Base { get; set; }
		///<summary>May contain extended information for property: 'Base'</summary>
		[JsonProperty(PropertyName = "_base")]
		public Element _Base { get; set; }
		///<summary>The name used to invoke the operation.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Additional information about how to use this operation or named query.</summary>
		[JsonProperty(PropertyName = "comment")]
		public string Comment { get; set; }
		///<summary>May contain extended information for property: 'Comment'</summary>
		[JsonProperty(PropertyName = "_comment")]
		public Element _Comment { get; set; }
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>The date  (and optionally time) when the operation definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>A free text natural language description of the operation definition from a consumer's perspective.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }
		///<summary>Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.</summary>
		[JsonProperty(PropertyName = "idempotent")]
		public bool? Idempotent { get; set; }
		///<summary>May contain extended information for property: 'AffectsState'</summary>
		[JsonProperty(PropertyName = "_idempotent")]
		public Element _Idempotent { get; set; }
		///<summary>Indicates whether this operation can be invoked on a particular instance of one of the given types.</summary>
		[JsonProperty(PropertyName = "instance")]
		public bool Instance { get; set; }
		///<summary>May contain extended information for property: 'Instance'</summary>
		[JsonProperty(PropertyName = "_instance")]
		public Element _Instance { get; set; }
		///<summary>A legal or geographic region in which the operation definition is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>Named queries are invoked differently, and have different capabilities.</summary>
		[JsonProperty(PropertyName = "kind")]
		public string Kind { get; set; }
		///<summary>May contain extended information for property: 'Kind'</summary>
		[JsonProperty(PropertyName = "_kind")]
		public Element _Kind { get; set; }
		///<summary>A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.</summary>
		[JsonProperty(PropertyName = "overload")]
		public OperationDefinitionOverload[] Overload { get; set; }
		///<summary>May contain extended information for property: 'Overload'</summary>
		[JsonProperty(PropertyName = "_overload")]
		public Element[] _Overload { get; set; }
		///<summary>The parameters for the operation/query.</summary>
		[JsonProperty(PropertyName = "parameter")]
		public OperationDefinitionParameter[] Parameter { get; set; }
		///<summary>May contain extended information for property: 'Parameter'</summary>
		[JsonProperty(PropertyName = "_parameter")]
		public Element[] _Parameter { get; set; }
		///<summary>The name of the organization or individual that published the operation definition.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this operation definition is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>If the type is an abstract resource ("Resource" or "DomainResource") then the operation can be invoked on any concrete specialization.</summary>
		[JsonProperty(PropertyName = "resource")]
		public string[] Resource { get; set; }
		///<summary>May contain extended information for property: 'Resource'</summary>
		[JsonProperty(PropertyName = "_resource")]
		public Element[] _Resource { get; set; }
		///<summary>Allows filtering of operation definitions that are appropriate for use versus not.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).</summary>
		[JsonProperty(PropertyName = "system")]
		public bool System { get; set; }
		///<summary>May contain extended information for property: 'System'</summary>
		[JsonProperty(PropertyName = "_system")]
		public Element _System { get; set; }
		///<summary>Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).</summary>
		[JsonProperty(PropertyName = "type")]
		public bool Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
	///</summary>
	///<source-file>c:/git/fhir\publish\operationdefinition.profile.canonical.json</source-file>
	public class OperationDefinitionOverload : Element
	{
		///<summary>Comments to go on overload.</summary>
		[JsonProperty(PropertyName = "comment")]
		public string Comment { get; set; }
		///<summary>May contain extended information for property: 'Comment'</summary>
		[JsonProperty(PropertyName = "_comment")]
		public Element _Comment { get; set; }
		///<summary>Name of parameter to include in overload.</summary>
		[JsonProperty(PropertyName = "parameterName")]
		public string[] ParameterName { get; set; }
		///<summary>May contain extended information for property: 'ParameterName'</summary>
		[JsonProperty(PropertyName = "_parameterName")]
		public Element[] _ParameterName { get; set; }
	}
	///<summary>
	///The parameters for the operation/query.
	///</summary>
	///<source-file>c:/git/fhir\publish\operationdefinition.profile.canonical.json</source-file>
	public class OperationDefinitionParameter : Element
	{
		///<summary>Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).</summary>
		[JsonProperty(PropertyName = "binding")]
		public OperationDefinitionParameterBinding Binding { get; set; }
		///<summary>May contain extended information for property: 'Binding'</summary>
		[JsonProperty(PropertyName = "_binding")]
		public Element _Binding { get; set; }
		///<summary>Describes the meaning or use of this parameter.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>The maximum number of times this element is permitted to appear in the request or response.</summary>
		[JsonProperty(PropertyName = "max")]
		public string Max { get; set; }
		///<summary>May contain extended information for property: 'Max'</summary>
		[JsonProperty(PropertyName = "_max")]
		public Element _Max { get; set; }
		///<summary>The minimum number of times this parameter SHALL appear in the request or response.</summary>
		[JsonProperty(PropertyName = "min")]
		public int Min { get; set; }
		///<summary>May contain extended information for property: 'Min'</summary>
		[JsonProperty(PropertyName = "_min")]
		public Element _Min { get; set; }
		///<summary>This name must be a token (start with a letter in a..z, and only contain letters, numerals, and underscore. Note that for search parameters (type = string, with a search type), the name may be altered by the search modifiers.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The parts of a nested Parameter.</summary>
		[JsonProperty(PropertyName = "part")]
		public OperationDefinitionParameter[] Part { get; set; }
		///<summary>May contain extended information for property: 'Part'</summary>
		[JsonProperty(PropertyName = "_part")]
		public Element[] _Part { get; set; }
		///<summary>Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.</summary>
		[JsonProperty(PropertyName = "profile")]
		public Reference Profile { get; set; }
		///<summary>May contain extended information for property: 'TargetProfile'</summary>
		[JsonProperty(PropertyName = "_profile")]
		public Element _Profile { get; set; }
		///<summary>How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.</summary>
		[JsonProperty(PropertyName = "searchType")]
		public string SearchType { get; set; }
		///<summary>May contain extended information for property: 'SearchType'</summary>
		[JsonProperty(PropertyName = "_searchType")]
		public Element _SearchType { get; set; }
		///<summary>if there is no stated parameter, then the parameter is a multi-part parameter; type and must have at least one part defined.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.</summary>
		[JsonProperty(PropertyName = "use")]
		public string Use { get; set; }
		///<summary>May contain extended information for property: 'Use'</summary>
		[JsonProperty(PropertyName = "_use")]
		public Element _Use { get; set; }
	}
	///<summary>
	///Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
	///</summary>
	///<source-file>c:/git/fhir\publish\operationdefinition.profile.canonical.json</source-file>
	public class OperationDefinitionParameterBinding : Element
	{
		///<summary>For further discussion, see [Using Terminologies](terminologies.html).</summary>
		[JsonProperty(PropertyName = "strength")]
		public string Strength { get; set; }
		///<summary>May contain extended information for property: 'Strength'</summary>
		[JsonProperty(PropertyName = "_strength")]
		public Element _Strength { get; set; }
		[JsonProperty(PropertyName = "valueSetUri")]
		public string ValueSetUri { get; set; }
		[JsonProperty(PropertyName = "_valueSetUri")]
		public Element _ValueSetUri { get; set; }

		[JsonProperty(PropertyName = "valueSetReference")]
		public Reference ValueSetReference { get; set; }
		[JsonProperty(PropertyName = "_valueSetReference")]
		public Element _ValueSetReference { get; set; }

	}
	///<summary>
	///Base StructureDefinition for ParameterDefinition Type: The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
	///</summary>
	///<source-file>c:/git/fhir\publish\parameterdefinition.profile.canonical.json</source-file>
	public class ParameterDefinition : DataType
	{
		///<summary>A brief discussion of what the parameter is for and how it is used by the module.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>The maximum number of times this element is permitted to appear in the request or response.</summary>
		[JsonProperty(PropertyName = "max")]
		public string Max { get; set; }
		///<summary>May contain extended information for property: 'Max'</summary>
		[JsonProperty(PropertyName = "_max")]
		public Element _Max { get; set; }
		///<summary>The minimum number of times this parameter SHALL appear in the request or response.</summary>
		[JsonProperty(PropertyName = "min")]
		public int? Min { get; set; }
		///<summary>May contain extended information for property: 'Min'</summary>
		[JsonProperty(PropertyName = "_min")]
		public Element _Min { get; set; }
		///<summary>The name of the parameter used to allow access to the value of the parameter in evaluation contexts.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.</summary>
		[JsonProperty(PropertyName = "profile")]
		public string Profile { get; set; }
		///<summary>May contain extended information for property: 'Profile'</summary>
		[JsonProperty(PropertyName = "_profile")]
		public Element _Profile { get; set; }
		///<summary>The type of the parameter.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>Whether the parameter is input or output for the module.</summary>
		[JsonProperty(PropertyName = "use")]
		public string Use { get; set; }
		///<summary>May contain extended information for property: 'Use'</summary>
		[JsonProperty(PropertyName = "_use")]
		public Element _Use { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Period Type: A time period defined by a start and end date and optionally time.
	///</summary>
	///<source-file>c:/git/fhir\publish\period.profile.canonical.json</source-file>
	public class Period : DataType
	{
		///<summary>The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.</summary>
		[JsonProperty(PropertyName = "end")]
		public string End { get; set; }
		///<summary>May contain extended information for property: 'End'</summary>
		[JsonProperty(PropertyName = "_end")]
		public Element _End { get; set; }
		///<summary>The start of the period. The boundary is inclusive.</summary>
		[JsonProperty(PropertyName = "start")]
		public string Start { get; set; }
		///<summary>May contain extended information for property: 'Start'</summary>
		[JsonProperty(PropertyName = "_start")]
		public Element _Start { get; set; }
	}
	///<summary>
	///There SHALL be a code if there is a value and it SHALL be an expression of currency.  If system is present, it SHALL be ISO 4217 (system = "urn:iso:std:iso:4217" - currency).
	///</summary>
	///<source-file>c:/git/fhir\publish\moneyquantity.profile.canonical.json</source-file>
	public class Quantity : Element
	{
		///<summary>The preferred system is UCUM, but SNOMED CT can also be used (for customary units) or ISO 4217 for currency.  The context of use may additionally require a code from a particular system.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.</summary>
		[JsonProperty(PropertyName = "comparator")]
		public string Comparator { get; set; }
		///<summary>May contain extended information for property: 'Comparator'</summary>
		[JsonProperty(PropertyName = "_comparator")]
		public Element _Comparator { get; set; }
		///<summary>The identification of the system that provides the coded form of the unit.</summary>
		[JsonProperty(PropertyName = "system")]
		public string System { get; set; }
		///<summary>May contain extended information for property: 'System'</summary>
		[JsonProperty(PropertyName = "_system")]
		public Element _System { get; set; }
		///<summary>A human-readable form of the unit.</summary>
		[JsonProperty(PropertyName = "unit")]
		public string Unit { get; set; }
		///<summary>May contain extended information for property: 'Unit'</summary>
		[JsonProperty(PropertyName = "_unit")]
		public Element _Unit { get; set; }
		///<summary>The value of the measured amount. The value includes an implicit precision in the presentation of the value.</summary>
		[JsonProperty(PropertyName = "value")]
		public decimal? Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Range Type: A set of ordered Quantities defined by a low and high limit.
	///</summary>
	///<source-file>c:/git/fhir\publish\range.profile.canonical.json</source-file>
	public class Range : DataType
	{
		///<summary>The high limit. The boundary is inclusive.</summary>
		[JsonProperty(PropertyName = "high")]
		public Quantity High { get; set; }
		///<summary>May contain extended information for property: 'High'</summary>
		[JsonProperty(PropertyName = "_high")]
		public Element _High { get; set; }
		///<summary>The low limit. The boundary is inclusive.</summary>
		[JsonProperty(PropertyName = "low")]
		public Quantity Low { get; set; }
		///<summary>May contain extended information for property: 'Low'</summary>
		[JsonProperty(PropertyName = "_low")]
		public Element _Low { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Ratio Type: A relationship of two Quantity values - expressed as a numerator and a denominator.
	///</summary>
	///<source-file>c:/git/fhir\publish\ratio.profile.canonical.json</source-file>
	public class Ratio : DataType
	{
		///<summary>The value of the denominator.</summary>
		[JsonProperty(PropertyName = "denominator")]
		public Quantity Denominator { get; set; }
		///<summary>May contain extended information for property: 'Denominator'</summary>
		[JsonProperty(PropertyName = "_denominator")]
		public Element _Denominator { get; set; }
		///<summary>The value of the numerator.</summary>
		[JsonProperty(PropertyName = "numerator")]
		public Quantity Numerator { get; set; }
		///<summary>May contain extended information for property: 'Numerator'</summary>
		[JsonProperty(PropertyName = "_numerator")]
		public Element _Numerator { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Reference Type: A reference from one resource to another.
	///</summary>
	///<source-file>c:/git/fhir\publish\reference.profile.canonical.json</source-file>
	public class Reference : DataType
	{
		///<summary>Plain text narrative that identifies the resource in addition to the resource reference.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
		///<summary>An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.</summary>
		[JsonProperty(PropertyName = "identifier")]
		public Identifier Identifier { get; set; }
		///<summary>May contain extended information for property: 'Identifier'</summary>
		[JsonProperty(PropertyName = "_identifier")]
		public Element _Identifier { get; set; }
		///<summary>A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.</summary>
		[JsonProperty(PropertyName = "reference")]
		public string reference { get; set; }
		///<summary>May contain extended information for property: 'reference'</summary>
		[JsonProperty(PropertyName = "_reference")]
		public Element _reference { get; set; }
		///<summary>The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.
		///
		/// The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
	}
	///<summary>
	///This is the base resource type for everything.
	///</summary>
	///<source-file>c:/git/fhir\publish\resource.profile.canonical.json</source-file>
	public class Resource : Base
	{
		///<summary>The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.</summary>
		[JsonProperty(PropertyName = "id")]
		public string Id { get; set; }
		///<summary>May contain extended information for property: 'Id'</summary>
		[JsonProperty(PropertyName = "_id")]
		public Element _Id { get; set; }
		///<summary>A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.</summary>
		[JsonProperty(PropertyName = "implicitRules")]
		public string ImplicitRules { get; set; }
		///<summary>May contain extended information for property: 'ImplicitRules'</summary>
		[JsonProperty(PropertyName = "_implicitRules")]
		public Element _ImplicitRules { get; set; }
		///<summary>Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).</summary>
		[JsonProperty(PropertyName = "language")]
		public string Language { get; set; }
		///<summary>May contain extended information for property: 'Language'</summary>
		[JsonProperty(PropertyName = "_language")]
		public Element _Language { get; set; }
		///<summary>The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.</summary>
		[JsonProperty(PropertyName = "meta")]
		public Meta Meta { get; set; }
		///<summary>May contain extended information for property: 'Meta'</summary>
		[JsonProperty(PropertyName = "_meta")]
		public Element _Meta { get; set; }
	}
	///<summary>
	///Base StructureDefinition for SampledData Type: A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
	///</summary>
	///<source-file>c:/git/fhir\publish\sampleddata.profile.canonical.json</source-file>
	public class SampledData : DataType
	{
		///<summary>A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.</summary>
		[JsonProperty(PropertyName = "data")]
		public string Data { get; set; }
		///<summary>May contain extended information for property: 'Data'</summary>
		[JsonProperty(PropertyName = "_data")]
		public Element _Data { get; set; }
		///<summary>The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.</summary>
		[JsonProperty(PropertyName = "dimensions")]
		public uint Dimensions { get; set; }
		///<summary>May contain extended information for property: 'Dimensions'</summary>
		[JsonProperty(PropertyName = "_dimensions")]
		public Element _Dimensions { get; set; }
		///<summary>A correction factor that is applied to the sampled data points before they are added to the origin.</summary>
		[JsonProperty(PropertyName = "factor")]
		public decimal? Factor { get; set; }
		///<summary>May contain extended information for property: 'Factor'</summary>
		[JsonProperty(PropertyName = "_factor")]
		public Element _Factor { get; set; }
		///<summary>The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).</summary>
		[JsonProperty(PropertyName = "lowerLimit")]
		public decimal? LowerLimit { get; set; }
		///<summary>May contain extended information for property: 'LowerLimit'</summary>
		[JsonProperty(PropertyName = "_lowerLimit")]
		public Element _LowerLimit { get; set; }
		///<summary>The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.</summary>
		[JsonProperty(PropertyName = "origin")]
		public Quantity Origin { get; set; }
		///<summary>May contain extended information for property: 'Origin'</summary>
		[JsonProperty(PropertyName = "_origin")]
		public Element _Origin { get; set; }
		///<summary>The length of time between sampling times, measured in milliseconds.</summary>
		[JsonProperty(PropertyName = "period")]
		public decimal Period { get; set; }
		///<summary>May contain extended information for property: 'Period'</summary>
		[JsonProperty(PropertyName = "_period")]
		public Element _Period { get; set; }
		///<summary>The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).</summary>
		[JsonProperty(PropertyName = "upperLimit")]
		public decimal? UpperLimit { get; set; }
		///<summary>May contain extended information for property: 'UpperLimit'</summary>
		[JsonProperty(PropertyName = "_upperLimit")]
		public Element _UpperLimit { get; set; }
	}
	///<summary>
	///A search parameter that defines a named search item that can be used to search/filter on a resource.
	///</summary>
	///<source-file>c:/git/fhir\publish\searchparameter.profile.canonical.json</source-file>
	public class SearchParameter : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "SearchParameter";
		///<summary>A search parameter must always apply to at least one resource type. When search parameters apply to more than one resource type, they can be used against any of the listed resource types, or in a cross-type search (see [Cross Resource Search](http.html#xres-search)).</summary>
		[JsonProperty(PropertyName = "base")]
		public string[] Base { get; set; }
		///<summary>May contain extended information for property: 'Base'</summary>
		[JsonProperty(PropertyName = "_base")]
		public Element[] _Base { get; set; }
		///<summary>Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.</summary>
		[JsonProperty(PropertyName = "chain")]
		public string[] Chain { get; set; }
		///<summary>May contain extended information for property: 'Chain'</summary>
		[JsonProperty(PropertyName = "_chain")]
		public Element[] _Chain { get; set; }
		///<summary>For maximum compatibility, use only lowercase ASCII characters.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>If no comparators are listed, clients should not expect servers to support any comparators.</summary>
		[JsonProperty(PropertyName = "comparator")]
		public string[] Comparator { get; set; }
		///<summary>May contain extended information for property: 'Comparator'</summary>
		[JsonProperty(PropertyName = "_comparator")]
		public Element[] _Comparator { get; set; }
		///<summary>Used to define the parts of a composite search parameter.</summary>
		[JsonProperty(PropertyName = "component")]
		public SearchParameterComponent[] Component { get; set; }
		///<summary>May contain extended information for property: 'Component'</summary>
		[JsonProperty(PropertyName = "_component")]
		public Element[] _Component { get; set; }
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>The date  (and optionally time) when the search parameter was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.</summary>
		[JsonProperty(PropertyName = "derivedFrom")]
		public string DerivedFrom { get; set; }
		///<summary>May contain extended information for property: 'DerivedFrom'</summary>
		[JsonProperty(PropertyName = "_derivedFrom")]
		public Element _DerivedFrom { get; set; }
		///<summary>And how it used.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }
		///<summary>A FHIRPath expression that returns a set of elements for the search parameter.</summary>
		[JsonProperty(PropertyName = "expression")]
		public string Expression { get; set; }
		///<summary>May contain extended information for property: 'Expression'</summary>
		[JsonProperty(PropertyName = "_expression")]
		public Element _Expression { get; set; }
		///<summary>A legal or geographic region in which the search parameter is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>A modifier supported for the search parameter.</summary>
		[JsonProperty(PropertyName = "modifier")]
		public string[] Modifier { get; set; }
		///<summary>May contain extended information for property: 'Modifier'</summary>
		[JsonProperty(PropertyName = "_modifier")]
		public Element[] _Modifier { get; set; }
		///<summary>A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The name of the organization or individual that published the search parameter.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this search parameter is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>Allows filtering of search parameters that are appropriate for use versus not.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>Types of resource (if a resource is referenced).</summary>
		[JsonProperty(PropertyName = "target")]
		public string[] Target { get; set; }
		///<summary>May contain extended information for property: 'Target'</summary>
		[JsonProperty(PropertyName = "_target")]
		public Element[] _Target { get; set; }
		///<summary>The type of value that a search parameter may contain, and how the content is interpreted.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
		///<summary>An XPath expression that returns a set of elements for the search parameter.</summary>
		[JsonProperty(PropertyName = "xpath")]
		public string Xpath { get; set; }
		///<summary>May contain extended information for property: 'Xpath'</summary>
		[JsonProperty(PropertyName = "_xpath")]
		public Element _Xpath { get; set; }
		///<summary>How the search parameter relates to the set of elements returned by evaluating the xpath query.</summary>
		[JsonProperty(PropertyName = "xpathUsage")]
		public string XpathUsage { get; set; }
		///<summary>May contain extended information for property: 'XpathUsage'</summary>
		[JsonProperty(PropertyName = "_xpathUsage")]
		public Element _XpathUsage { get; set; }
	}
	///<summary>
	///Used to define the parts of a composite search parameter.
	///</summary>
	///<source-file>c:/git/fhir\publish\searchparameter.profile.canonical.json</source-file>
	public class SearchParameterComponent : Element
	{
		///<summary>The definition of the search parameter that describes this part.</summary>
		[JsonProperty(PropertyName = "definition")]
		public Reference Definition { get; set; }
		///<summary>May contain extended information for property: 'Definition'</summary>
		[JsonProperty(PropertyName = "_definition")]
		public Element _Definition { get; set; }
		///<summary>A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.</summary>
		[JsonProperty(PropertyName = "expression")]
		public string Expression { get; set; }
		///<summary>May contain extended information for property: 'Expression'</summary>
		[JsonProperty(PropertyName = "_expression")]
		public Element _Expression { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Signature Type: A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
	///</summary>
	///<source-file>c:/git/fhir\publish\signature.profile.canonical.json</source-file>
	public class Signature : DataType
	{
		///<summary>The actual signature content (XML DigSig. JWT, picture, etc.)</summary>
		[JsonProperty(PropertyName = "blob")]
		public string Blob { get; set; }
		///<summary>May contain extended information for property: 'Blob'</summary>
		[JsonProperty(PropertyName = "_blob")]
		public Element _Blob { get; set; }
		///<summary>The technical format of the signature</summary>
		[JsonProperty(PropertyName = "contentType")]
		public string ContentType { get; set; }
		///<summary>May contain extended information for property: 'ContentType'</summary>
		[JsonProperty(PropertyName = "_contentType")]
		public Element _ContentType { get; set; }
		///<summary>A reference to an application-usable description of the identity that is represented by the signature.</summary>
		[JsonProperty(PropertyName = "onBehalfOfUri")]
		public Reference OnBehalfOfUri { get; set; }
		///<summary>May contain extended information for property: 'OnBehalfOf'</summary>
		[JsonProperty(PropertyName = "_onBehalfOfUri")]
		public Element _OnBehalfOfUri { get; set; }
		///<summary>A reference to an application-usable description of the identity that is represented by the signature.</summary>
		[JsonProperty(PropertyName = "onBehalfOfReference")]
		public Reference OnBehalfOfReference { get; set; }
		///<summary>May contain extended information for property: 'OnBehalfOf'</summary>
		[JsonProperty(PropertyName = "_onBehalfOfReference")]
		public Element _OnBehalfOfReference { get; set; }
		///<summary>An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.</summary>
		[JsonProperty(PropertyName = "type")]
		public Coding[] Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element[] _Type { get; set; }
		///<summary>When the digital signature was signed.</summary>
		[JsonProperty(PropertyName = "when")]
		public string When { get; set; }
		///<summary>May contain extended information for property: 'When'</summary>
		[JsonProperty(PropertyName = "_when")]
		public Element _When { get; set; }
		///<summary>A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).</summary>
		[JsonProperty(PropertyName = "whoUri")]
		public Reference WhoUri { get; set; }
		///<summary>May contain extended information for property: 'Who'</summary>
		[JsonProperty(PropertyName = "_whoUri")]
		public Element _WhoUri { get; set; }
		///<summary>A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).</summary>
		[JsonProperty(PropertyName = "whoReference")]
		public Reference WhoReference { get; set; }
		///<summary>May contain extended information for property: 'Who'</summary>
		[JsonProperty(PropertyName = "_whoReference")]
		public Element _WhoReference { get; set; }
	}
	///<summary>
	///A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuredefinition.profile.canonical.json</source-file>
	public class StructureDefinition : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "StructureDefinition";
		///<summary>Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.</summary>
		[JsonProperty(PropertyName = "abstract")]
		public bool Abstract { get; set; }
		///<summary>May contain extended information for property: 'Abstract'</summary>
		[JsonProperty(PropertyName = "_abstract")]
		public Element _Abstract { get; set; }
		///<summary>An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.</summary>
		[JsonProperty(PropertyName = "baseDefinition")]
		public string BaseDefinition { get; set; }
		///<summary>May contain extended information for property: 'BaseDefinition'</summary>
		[JsonProperty(PropertyName = "_baseDefinition")]
		public Element _BaseDefinition { get; set; }
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>Identifies the types of resource or data type elements to which the extension can be applied.</summary>
		[JsonProperty(PropertyName = "context")]
		public string[] Context { get; set; }
		///<summary>May contain extended information for property: 'Context'</summary>
		[JsonProperty(PropertyName = "_context")]
		public Element[] _Context { get; set; }

		[JsonProperty(PropertyName = "contextType")]
		public string ContextType { get; set; }
		[JsonProperty(PropertyName = "_contextType")]
		public Element _ContextType { get; set; }

		///<summary>A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.</summary>
		[JsonProperty(PropertyName = "contextInvariant")]
		public string[] ContextInvariant { get; set; }
		///<summary>May contain extended information for property: 'ContextInvariant'</summary>
		[JsonProperty(PropertyName = "_contextInvariant")]
		public Element[] _ContextInvariant { get; set; }
		///<summary>A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.</summary>
		[JsonProperty(PropertyName = "copyright")]
		public string Copyright { get; set; }
		///<summary>May contain extended information for property: 'Copyright'</summary>
		[JsonProperty(PropertyName = "_copyright")]
		public Element _Copyright { get; set; }
		///<summary>The date  (and optionally time) when the structure definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>If the definition is a specialization, then it adds new elements in the differential, and the snapshot includes the inherited elements.  If the definition is a constraint, then it cannot define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources)).</summary>
		[JsonProperty(PropertyName = "derivation")]
		public string Derivation { get; set; }
		///<summary>May contain extended information for property: 'Derivation'</summary>
		[JsonProperty(PropertyName = "_derivation")]
		public Element _Derivation { get; set; }
		///<summary>A free text natural language description of the structure definition from a consumer's perspective.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.</summary>
		[JsonProperty(PropertyName = "differential")]
		public StructureDefinitionDifferential Differential { get; set; }
		///<summary>May contain extended information for property: 'Differential'</summary>
		[JsonProperty(PropertyName = "_differential")]
		public Element _Differential { get; set; }
		///<summary>A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }
		///<summary>A StructureDefinition does not need to specify the target it applies to as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired.</summary>
		[JsonProperty(PropertyName = "fhirVersion")]
		public string FhirVersion { get; set; }
		///<summary>May contain extended information for property: 'FhirVersion'</summary>
		[JsonProperty(PropertyName = "_fhirVersion")]
		public Element _FhirVersion { get; set; }
		///<summary>A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.</summary>
		[JsonProperty(PropertyName = "identifier")]
		public Identifier[] Identifier { get; set; }
		///<summary>May contain extended information for property: 'Identifier'</summary>
		[JsonProperty(PropertyName = "_identifier")]
		public Element[] _Identifier { get; set; }
		///<summary>A legal or geographic region in which the structure definition is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.</summary>
		[JsonProperty(PropertyName = "keyword")]
		public Coding[] Keyword { get; set; }
		///<summary>May contain extended information for property: 'Keyword'</summary>
		[JsonProperty(PropertyName = "_keyword")]
		public Element[] _Keyword { get; set; }
		///<summary>Defines the kind of structure that this definition is describing.</summary>
		[JsonProperty(PropertyName = "kind")]
		public string Kind { get; set; }
		///<summary>May contain extended information for property: 'Kind'</summary>
		[JsonProperty(PropertyName = "_kind")]
		public Element _Kind { get; set; }
		///<summary>An external specification that the content is mapped to.</summary>
		[JsonProperty(PropertyName = "mapping")]
		public StructureDefinitionMapping[] Mapping { get; set; }
		///<summary>May contain extended information for property: 'Mapping'</summary>
		[JsonProperty(PropertyName = "_mapping")]
		public Element[] _Mapping { get; set; }
		///<summary>A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The name of the organization or individual that published the structure definition.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this structure definition is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.</summary>
		[JsonProperty(PropertyName = "snapshot")]
		public StructureDefinitionSnapshot Snapshot { get; set; }
		///<summary>May contain extended information for property: 'Snapshot'</summary>
		[JsonProperty(PropertyName = "_snapshot")]
		public Element _Snapshot { get; set; }
		///<summary>Allows filtering of structure definitions that are appropriate for use versus not.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>A short, descriptive, user-friendly title for the structure definition.</summary>
		[JsonProperty(PropertyName = "title")]
		public string Title { get; set; }
		///<summary>May contain extended information for property: 'Title'</summary>
		[JsonProperty(PropertyName = "_title")]
		public Element _Title { get; set; }
		///<summary>The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuredefinition.profile.canonical.json</source-file>
	public class StructureDefinitionDifferential : Element
	{
		///<summary>Captures constraints on each element within the resource.</summary>
		[JsonProperty(PropertyName = "element")]
		public ElementDefinition[] Element { get; set; }
		///<summary>May contain extended information for property: 'Element'</summary>
		[JsonProperty(PropertyName = "_element")]
		public Element[] _Element { get; set; }
	}
	///<summary>
	///An external specification that the content is mapped to.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuredefinition.profile.canonical.json</source-file>
	public class StructureDefinitionMapping : Element
	{
		///<summary>Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.</summary>
		[JsonProperty(PropertyName = "comment")]
		public string Comment { get; set; }
		///<summary>May contain extended information for property: 'Comment'</summary>
		[JsonProperty(PropertyName = "_comment")]
		public Element _Comment { get; set; }
		///<summary>An Internal id that is used to identify this mapping set when specific mappings are made.</summary>
		[JsonProperty(PropertyName = "identity")]
		public string Identity { get; set; }
		///<summary>May contain extended information for property: 'Identity'</summary>
		[JsonProperty(PropertyName = "_identity")]
		public Element _Identity { get; set; }
		///<summary>A name for the specification that is being mapped to.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>An absolute URI that identifies the specification that this mapping is expressed to.</summary>
		[JsonProperty(PropertyName = "uri")]
		public string Uri { get; set; }
		///<summary>May contain extended information for property: 'Uri'</summary>
		[JsonProperty(PropertyName = "_uri")]
		public Element _Uri { get; set; }
	}
	///<summary>
	///A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuredefinition.profile.canonical.json</source-file>
	public class StructureDefinitionSnapshot : Element
	{
		///<summary>Captures constraints on each element within the resource.</summary>
		[JsonProperty(PropertyName = "element")]
		public ElementDefinition[] Element { get; set; }
		///<summary>May contain extended information for property: 'Element'</summary>
		[JsonProperty(PropertyName = "_element")]
		public Element[] _Element { get; set; }
	}
	///<summary>
	///A Map of relationships between 2 structures that can be used to transform data.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMap : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "StructureMap";
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.</summary>
		[JsonProperty(PropertyName = "copyright")]
		public string Copyright { get; set; }
		///<summary>May contain extended information for property: 'Copyright'</summary>
		[JsonProperty(PropertyName = "_copyright")]
		public Element _Copyright { get; set; }
		///<summary>The date  (and optionally time) when the structure map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>A free text natural language description of the structure map from a consumer's perspective.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }
		///<summary>Organizes the mapping into manageable chunks for human review/ease of maintenance.</summary>
		[JsonProperty(PropertyName = "group")]
		public StructureMapGroup[] Group { get; set; }
		///<summary>May contain extended information for property: 'Group'</summary>
		[JsonProperty(PropertyName = "_group")]
		public Element[] _Group { get; set; }
		///<summary>A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.</summary>
		[JsonProperty(PropertyName = "identifier")]
		public Identifier[] Identifier { get; set; }
		///<summary>May contain extended information for property: 'Identifier'</summary>
		[JsonProperty(PropertyName = "_identifier")]
		public Element[] _Identifier { get; set; }
		///<summary>Other maps used by this map (canonical URLs).</summary>
		[JsonProperty(PropertyName = "import")]
		public string[] Import { get; set; }
		///<summary>May contain extended information for property: 'Import'</summary>
		[JsonProperty(PropertyName = "_import")]
		public Element[] _Import { get; set; }
		///<summary>A legal or geographic region in which the structure map is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The name of the organization or individual that published the structure map.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this structure map is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>Allows filtering of structure maps that are appropriate for use versus not.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.</summary>
		[JsonProperty(PropertyName = "structure")]
		public StructureMapStructure[] Structure { get; set; }
		///<summary>May contain extended information for property: 'Structure'</summary>
		[JsonProperty(PropertyName = "_structure")]
		public Element[] _Structure { get; set; }
		///<summary>A short, descriptive, user-friendly title for the structure map.</summary>
		[JsonProperty(PropertyName = "title")]
		public string Title { get; set; }
		///<summary>May contain extended information for property: 'Title'</summary>
		[JsonProperty(PropertyName = "_title")]
		public Element _Title { get; set; }
		///<summary>An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///Organizes the mapping into manageable chunks for human review/ease of maintenance.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMapGroup : Element
	{
		///<summary>Additional supporting documentation that explains the purpose of the group and the types of mappings within it.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>Another group that this group adds rules to.</summary>
		[JsonProperty(PropertyName = "extends")]
		public string Extends { get; set; }
		///<summary>May contain extended information for property: 'Extends'</summary>
		[JsonProperty(PropertyName = "_extends")]
		public Element _Extends { get; set; }
		///<summary>A name assigned to an instance of data. The instance must be provided when the mapping is invoked.</summary>
		[JsonProperty(PropertyName = "input")]
		public StructureMapGroupInput[] Input { get; set; }
		///<summary>May contain extended information for property: 'Input'</summary>
		[JsonProperty(PropertyName = "_input")]
		public Element[] _Input { get; set; }
		///<summary>A unique name for the group for the convenience of human readers.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>Transform Rule from source to target.</summary>
		[JsonProperty(PropertyName = "rule")]
		public StructureMapGroupRule[] Rule { get; set; }
		///<summary>May contain extended information for property: 'Rule'</summary>
		[JsonProperty(PropertyName = "_rule")]
		public Element[] _Rule { get; set; }
		///<summary>Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination.</summary>
		[JsonProperty(PropertyName = "typeMode")]
		public string TypeMode { get; set; }
		///<summary>May contain extended information for property: 'TypeMode'</summary>
		[JsonProperty(PropertyName = "_typeMode")]
		public Element _TypeMode { get; set; }
	}
	///<summary>
	///A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMapGroupInput : Element
	{
		///<summary>Documentation for this instance of data.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>Mode for this instance of data.</summary>
		[JsonProperty(PropertyName = "mode")]
		public string Mode { get; set; }
		///<summary>May contain extended information for property: 'Mode'</summary>
		[JsonProperty(PropertyName = "_mode")]
		public Element _Mode { get; set; }
		///<summary>Name for this instance of data.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>Type for this instance of data.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
	}
	///<summary>
	///Transform Rule from source to target.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMapGroupRule : Element
	{
		///<summary>Which other rules to apply in the context of this rule.</summary>
		[JsonProperty(PropertyName = "dependent")]
		public StructureMapGroupRuleDependent[] Dependent { get; set; }
		///<summary>May contain extended information for property: 'Dependent'</summary>
		[JsonProperty(PropertyName = "_dependent")]
		public Element[] _Dependent { get; set; }
		///<summary>Documentation for this instance of data.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>Name of the rule for internal references.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>Rules contained in this rule.</summary>
		[JsonProperty(PropertyName = "rule")]
		public StructureMapGroupRule[] Rule { get; set; }
		///<summary>May contain extended information for property: 'Rule'</summary>
		[JsonProperty(PropertyName = "_rule")]
		public Element[] _Rule { get; set; }
		///<summary>Source inputs to the mapping.</summary>
		[JsonProperty(PropertyName = "source")]
		public StructureMapGroupRuleSource[] Source { get; set; }
		///<summary>May contain extended information for property: 'Source'</summary>
		[JsonProperty(PropertyName = "_source")]
		public Element[] _Source { get; set; }
		///<summary>Content to create because of this mapping rule.</summary>
		[JsonProperty(PropertyName = "target")]
		public StructureMapGroupRuleTarget[] Target { get; set; }
		///<summary>May contain extended information for property: 'Target'</summary>
		[JsonProperty(PropertyName = "_target")]
		public Element[] _Target { get; set; }
	}
	///<summary>
	///Which other rules to apply in the context of this rule.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMapGroupRuleDependent : Element
	{
		///<summary>Name of a rule or group to apply.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>Variable to pass to the rule or group.</summary>
		[JsonProperty(PropertyName = "variable")]
		public string[] Variable { get; set; }
		///<summary>May contain extended information for property: 'Variable'</summary>
		[JsonProperty(PropertyName = "_variable")]
		public Element[] _Variable { get; set; }
	}
	///<summary>
	///Source inputs to the mapping.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMapGroupRuleSource : Element
	{
		///<summary>FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.</summary>
		[JsonProperty(PropertyName = "check")]
		public string Check { get; set; }
		///<summary>May contain extended information for property: 'Check'</summary>
		[JsonProperty(PropertyName = "_check")]
		public Element _Check { get; set; }
		///<summary>FHIRPath expression  - must be true or the rule does not apply.</summary>
		[JsonProperty(PropertyName = "condition")]
		public string Condition { get; set; }
		///<summary>May contain extended information for property: 'Condition'</summary>
		[JsonProperty(PropertyName = "_condition")]
		public Element _Condition { get; set; }
		///<summary>Type or variable this rule applies to.</summary>
		[JsonProperty(PropertyName = "context")]
		public string Context { get; set; }
		///<summary>May contain extended information for property: 'Context'</summary>
		[JsonProperty(PropertyName = "_context")]
		public Element _Context { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueAge")]
		public Age DefaultValueAge { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueAge'</summary>
		[JsonProperty(PropertyName = "_defaultValueAge")]
		public Element _DefaultValueAge { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueBase64Binary")]
		public string DefaultValueBase64Binary { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueBase64Binary'</summary>
		[JsonProperty(PropertyName = "_defaultValueBase64Binary")]
		public Element _DefaultValueBase64Binary { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueBoolean")]
		public bool? DefaultValueBoolean { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueBoolean'</summary>
		[JsonProperty(PropertyName = "_defaultValueBoolean")]
		public Element _DefaultValueBoolean { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueCanonical")]
		public string DefaultValueCanonical { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCanonical'</summary>
		[JsonProperty(PropertyName = "_defaultValueCanonical")]
		public Element _DefaultValueCanonical { get; set; }
		///<summary>If there's a default value on an item that can repeat, it will only be used once.</summary>
		[JsonProperty(PropertyName = "defaultValueCode")]
		public string DefaultValueCode { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCode'</summary>
		[JsonProperty(PropertyName = "_defaultValueCode")]
		public Element _DefaultValueCode { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueCodeableConcept")]
		public CodeableConcept DefaultValueCodeableConcept { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCodeableConcept'</summary>
		[JsonProperty(PropertyName = "_defaultValueCodeableConcept")]
		public Element _DefaultValueCodeableConcept { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueCoding")]
		public Coding DefaultValueCoding { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCoding'</summary>
		[JsonProperty(PropertyName = "_defaultValueCoding")]
		public Element _DefaultValueCoding { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueContactDetail")]
		public ContactDetail DefaultValueContactDetail { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueContactDetail'</summary>
		[JsonProperty(PropertyName = "_defaultValueContactDetail")]
		public Element _DefaultValueContactDetail { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueContactPoint")]
		public ContactPoint DefaultValueContactPoint { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueContactPoint'</summary>
		[JsonProperty(PropertyName = "_defaultValueContactPoint")]
		public Element _DefaultValueContactPoint { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueContributor")]
		public Contributor DefaultValueContributor { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueContributor'</summary>
		[JsonProperty(PropertyName = "_defaultValueContributor")]
		public Element _DefaultValueContributor { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueCount")]
		public Count DefaultValueCount { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueCount'</summary>
		[JsonProperty(PropertyName = "_defaultValueCount")]
		public Element _DefaultValueCount { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueDataRequirement")]
		public DataRequirement DefaultValueDataRequirement { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDataRequirement'</summary>
		[JsonProperty(PropertyName = "_defaultValueDataRequirement")]
		public Element _DefaultValueDataRequirement { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueDate")]
		public string DefaultValueDate { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDate'</summary>
		[JsonProperty(PropertyName = "_defaultValueDate")]
		public Element _DefaultValueDate { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueDateTime")]
		public string DefaultValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDateTime'</summary>
		[JsonProperty(PropertyName = "_defaultValueDateTime")]
		public Element _DefaultValueDateTime { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueDecimal")]
		public decimal? DefaultValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDecimal'</summary>
		[JsonProperty(PropertyName = "_defaultValueDecimal")]
		public Element _DefaultValueDecimal { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueDistance")]
		public Distance DefaultValueDistance { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDistance'</summary>
		[JsonProperty(PropertyName = "_defaultValueDistance")]
		public Element _DefaultValueDistance { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueDuration")]
		public Duration DefaultValueDuration { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueDuration'</summary>
		[JsonProperty(PropertyName = "_defaultValueDuration")]
		public Element _DefaultValueDuration { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueHumanName")]
		public HumanName DefaultValueHumanName { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueHumanName'</summary>
		[JsonProperty(PropertyName = "_defaultValueHumanName")]
		public Element _DefaultValueHumanName { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueId")]
		public string DefaultValueId { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueId'</summary>
		[JsonProperty(PropertyName = "_defaultValueId")]
		public Element _DefaultValueId { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueIdentifier")]
		public Identifier DefaultValueIdentifier { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueIdentifier'</summary>
		[JsonProperty(PropertyName = "_defaultValueIdentifier")]
		public Element _DefaultValueIdentifier { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueInstant")]
		public string DefaultValueInstant { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueInstant'</summary>
		[JsonProperty(PropertyName = "_defaultValueInstant")]
		public Element _DefaultValueInstant { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueInteger")]
		public int? DefaultValueInteger { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueInteger'</summary>
		[JsonProperty(PropertyName = "_defaultValueInteger")]
		public Element _DefaultValueInteger { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueMarkdown")]
		public string DefaultValueMarkdown { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueMarkdown'</summary>
		[JsonProperty(PropertyName = "_defaultValueMarkdown")]
		public Element _DefaultValueMarkdown { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueMeta")]
		public Meta DefaultValueMeta { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueMeta'</summary>
		[JsonProperty(PropertyName = "_defaultValueMeta")]
		public Element _DefaultValueMeta { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueMoney")]
		public Money DefaultValueMoney { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueMoney'</summary>
		[JsonProperty(PropertyName = "_defaultValueMoney")]
		public Element _DefaultValueMoney { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueOid")]
		public string DefaultValueOid { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueOid'</summary>
		[JsonProperty(PropertyName = "_defaultValueOid")]
		public Element _DefaultValueOid { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueParameterDefinition")]
		public ParameterDefinition DefaultValueParameterDefinition { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueParameterDefinition'</summary>
		[JsonProperty(PropertyName = "_defaultValueParameterDefinition")]
		public Element _DefaultValueParameterDefinition { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValuePeriod")]
		public Period DefaultValuePeriod { get; set; }
		///<summary>May contain extended information for property: 'DefaultValuePeriod'</summary>
		[JsonProperty(PropertyName = "_defaultValuePeriod")]
		public Element _DefaultValuePeriod { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValuePositiveInt")]
		public uint? DefaultValuePositiveInt { get; set; }
		///<summary>May contain extended information for property: 'DefaultValuePositiveInt'</summary>
		[JsonProperty(PropertyName = "_defaultValuePositiveInt")]
		public Element _DefaultValuePositiveInt { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueQuantity")]
		public Quantity DefaultValueQuantity { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueQuantity'</summary>
		[JsonProperty(PropertyName = "_defaultValueQuantity")]
		public Element _DefaultValueQuantity { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueRange")]
		public Range DefaultValueRange { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueRange'</summary>
		[JsonProperty(PropertyName = "_defaultValueRange")]
		public Element _DefaultValueRange { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueRatio")]
		public Ratio DefaultValueRatio { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueRatio'</summary>
		[JsonProperty(PropertyName = "_defaultValueRatio")]
		public Element _DefaultValueRatio { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueReference")]
		public Reference DefaultValueReference { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueReference'</summary>
		[JsonProperty(PropertyName = "_defaultValueReference")]
		public Element _DefaultValueReference { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueSampledData")]
		public SampledData DefaultValueSampledData { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueSampledData'</summary>
		[JsonProperty(PropertyName = "_defaultValueSampledData")]
		public Element _DefaultValueSampledData { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueSignature")]
		public Signature DefaultValueSignature { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueSignature'</summary>
		[JsonProperty(PropertyName = "_defaultValueSignature")]
		public Element _DefaultValueSignature { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueString")]
		public string DefaultValueString { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueString'</summary>
		[JsonProperty(PropertyName = "_defaultValueString")]
		public Element _DefaultValueString { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueTime")]
		public string DefaultValueTime { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueTime'</summary>
		[JsonProperty(PropertyName = "_defaultValueTime")]
		public Element _DefaultValueTime { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueTiming")]
		public Timing DefaultValueTiming { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueTiming'</summary>
		[JsonProperty(PropertyName = "_defaultValueTiming")]
		public Element _DefaultValueTiming { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueTriggerDefinition")]
		public TriggerDefinition DefaultValueTriggerDefinition { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueTriggerDefinition'</summary>
		[JsonProperty(PropertyName = "_defaultValueTriggerDefinition")]
		public Element _DefaultValueTriggerDefinition { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueUnsignedInt")]
		public uint? DefaultValueUnsignedInt { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUnsignedInt'</summary>
		[JsonProperty(PropertyName = "_defaultValueUnsignedInt")]
		public Element _DefaultValueUnsignedInt { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueUri")]
		public string DefaultValueUri { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUri'</summary>
		[JsonProperty(PropertyName = "_defaultValueUri")]
		public Element _DefaultValueUri { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueUrl")]
		public string DefaultValueUrl { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUrl'</summary>
		[JsonProperty(PropertyName = "_defaultValueUrl")]
		public Element _DefaultValueUrl { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueUsageContext")]
		public UsageContext DefaultValueUsageContext { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUsageContext'</summary>
		[JsonProperty(PropertyName = "_defaultValueUsageContext")]
		public Element _DefaultValueUsageContext { get; set; }
		///<summary>A value to use if there is no existing value in the source object.</summary>
		[JsonProperty(PropertyName = "defaultValueUuid")]
		public Guid? DefaultValueUuid { get; set; }
		///<summary>May contain extended information for property: 'DefaultValueUuid'</summary>
		[JsonProperty(PropertyName = "_defaultValueUuid")]
		public Element _DefaultValueUuid { get; set; }
		///<summary>Optional field for this source.</summary>
		[JsonProperty(PropertyName = "element")]
		public string Element { get; set; }
		///<summary>May contain extended information for property: 'Element'</summary>
		[JsonProperty(PropertyName = "_element")]
		public Element _Element { get; set; }
		///<summary>How to handle the list mode for this element.</summary>
		[JsonProperty(PropertyName = "listMode")]
		public string ListMode { get; set; }
		///<summary>May contain extended information for property: 'ListMode'</summary>
		[JsonProperty(PropertyName = "_listMode")]
		public Element _ListMode { get; set; }
		///<summary>Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).</summary>
		[JsonProperty(PropertyName = "max")]
		public string Max { get; set; }
		///<summary>May contain extended information for property: 'Max'</summary>
		[JsonProperty(PropertyName = "_max")]
		public Element _Max { get; set; }
		///<summary>Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.</summary>
		[JsonProperty(PropertyName = "min")]
		public int? Min { get; set; }
		///<summary>May contain extended information for property: 'Min'</summary>
		[JsonProperty(PropertyName = "_min")]
		public Element _Min { get; set; }
		///<summary>Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
		///<summary>Named context for field, if a field is specified.</summary>
		[JsonProperty(PropertyName = "variable")]
		public string Variable { get; set; }
		///<summary>May contain extended information for property: 'Variable'</summary>
		[JsonProperty(PropertyName = "_variable")]
		public Element _Variable { get; set; }
	}
	///<summary>
	///Content to create because of this mapping rule.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMapGroupRuleTarget : Element
	{
		///<summary>Type or variable this rule applies to.</summary>
		[JsonProperty(PropertyName = "context")]
		public string Context { get; set; }
		///<summary>May contain extended information for property: 'Context'</summary>
		[JsonProperty(PropertyName = "_context")]
		public Element _Context { get; set; }
		///<summary>How to interpret the context.</summary>
		[JsonProperty(PropertyName = "contextType")]
		public string ContextType { get; set; }
		///<summary>May contain extended information for property: 'ContextType'</summary>
		[JsonProperty(PropertyName = "_contextType")]
		public Element _ContextType { get; set; }
		///<summary>Field to create in the context.</summary>
		[JsonProperty(PropertyName = "element")]
		public string Element { get; set; }
		///<summary>May contain extended information for property: 'Element'</summary>
		[JsonProperty(PropertyName = "_element")]
		public Element _Element { get; set; }
		///<summary>If field is a list, how to manage the list.</summary>
		[JsonProperty(PropertyName = "listMode")]
		public string[] ListMode { get; set; }
		///<summary>May contain extended information for property: 'ListMode'</summary>
		[JsonProperty(PropertyName = "_listMode")]
		public Element[] _ListMode { get; set; }
		///<summary>Internal rule reference for shared list items.</summary>
		[JsonProperty(PropertyName = "listRuleId")]
		public string ListRuleId { get; set; }
		///<summary>May contain extended information for property: 'ListRuleId'</summary>
		[JsonProperty(PropertyName = "_listRuleId")]
		public Element _ListRuleId { get; set; }
		///<summary>Parameters to the transform.</summary>
		[JsonProperty(PropertyName = "parameter")]
		public StructureMapGroupRuleTargetParameter[] Parameter { get; set; }
		///<summary>May contain extended information for property: 'Parameter'</summary>
		[JsonProperty(PropertyName = "_parameter")]
		public Element[] _Parameter { get; set; }
		///<summary>How the data is copied / created.</summary>
		[JsonProperty(PropertyName = "transform")]
		public string Transform { get; set; }
		///<summary>May contain extended information for property: 'Transform'</summary>
		[JsonProperty(PropertyName = "_transform")]
		public Element _Transform { get; set; }
		///<summary>Named context for field, if desired, and a field is specified.</summary>
		[JsonProperty(PropertyName = "variable")]
		public string Variable { get; set; }
		///<summary>May contain extended information for property: 'Variable'</summary>
		[JsonProperty(PropertyName = "_variable")]
		public Element _Variable { get; set; }
	}
	///<summary>
	///Parameters to the transform.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMapGroupRuleTargetParameter : Element
	{
		///<summary>Parameter value - variable or literal.</summary>
		[JsonProperty(PropertyName = "valueBoolean")]
		public bool? ValueBoolean { get; set; }
		///<summary>May contain extended information for property: 'ValueBoolean'</summary>
		[JsonProperty(PropertyName = "_valueBoolean")]
		public Element _ValueBoolean { get; set; }
		///<summary>Parameter value - variable or literal.</summary>
		[JsonProperty(PropertyName = "valueDecimal")]
		public decimal? ValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'ValueDecimal'</summary>
		[JsonProperty(PropertyName = "_valueDecimal")]
		public Element _ValueDecimal { get; set; }
		///<summary>Parameter value - variable or literal.</summary>
		[JsonProperty(PropertyName = "valueId")]
		public string ValueId { get; set; }
		///<summary>May contain extended information for property: 'ValueId'</summary>
		[JsonProperty(PropertyName = "_valueId")]
		public Element _ValueId { get; set; }
		///<summary>Parameter value - variable or literal.</summary>
		[JsonProperty(PropertyName = "valueInteger")]
		public int? ValueInteger { get; set; }
		///<summary>May contain extended information for property: 'ValueInteger'</summary>
		[JsonProperty(PropertyName = "_valueInteger")]
		public Element _ValueInteger { get; set; }
		///<summary>Parameter value - variable or literal.</summary>
		[JsonProperty(PropertyName = "valueString")]
		public string ValueString { get; set; }
		///<summary>May contain extended information for property: 'ValueString'</summary>
		[JsonProperty(PropertyName = "_valueString")]
		public Element _ValueString { get; set; }
	}
	///<summary>
	///A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
	///</summary>
	///<source-file>c:/git/fhir\publish\structuremap.profile.canonical.json</source-file>
	public class StructureMapStructure : Element
	{
		///<summary>The name used for this type in the map.</summary>
		[JsonProperty(PropertyName = "alias")]
		public string Alias { get; set; }
		///<summary>May contain extended information for property: 'Alias'</summary>
		[JsonProperty(PropertyName = "_alias")]
		public Element _Alias { get; set; }
		///<summary>Documentation that describes how the structure is used in the mapping.</summary>
		[JsonProperty(PropertyName = "documentation")]
		public string Documentation { get; set; }
		///<summary>May contain extended information for property: 'Documentation'</summary>
		[JsonProperty(PropertyName = "_documentation")]
		public Element _Documentation { get; set; }
		///<summary>How the referenced structure is used in this mapping.</summary>
		[JsonProperty(PropertyName = "mode")]
		public string Mode { get; set; }
		///<summary>May contain extended information for property: 'Mode'</summary>
		[JsonProperty(PropertyName = "_mode")]
		public Element _Mode { get; set; }
		///<summary>The canonical reference to the structure.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
	}
	///<summary>
	///Base StructureDefinition for Timing Type: Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
	///</summary>
	///<source-file>c:/git/fhir\publish\timing.profile.canonical.json</source-file>
	public class Timing : BackboneType
	{
		///<summary>A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).</summary>
		[JsonProperty(PropertyName = "code")]
		public CodeableConcept Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Identifies specific times when the event occurs.</summary>
		[JsonProperty(PropertyName = "event")]
		public string[] Event { get; set; }
		///<summary>May contain extended information for property: 'Event'</summary>
		[JsonProperty(PropertyName = "_event")]
		public Element[] _Event { get; set; }
		///<summary>A set of rules that describe when the event is scheduled.</summary>
		[JsonProperty(PropertyName = "repeat")]
		public TimingRepeat Repeat { get; set; }
		///<summary>May contain extended information for property: 'Repeat'</summary>
		[JsonProperty(PropertyName = "_repeat")]
		public Element _Repeat { get; set; }
	}
	///<summary>
	///A set of rules that describe when the event is scheduled.
	///</summary>
	///<source-file>c:/git/fhir\publish\timing.profile.canonical.json</source-file>
	public class TimingRepeat : Element
	{
		///<summary>Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.</summary>
		[JsonProperty(PropertyName = "boundsDuration")]
		public Duration BoundsDuration { get; set; }
		///<summary>May contain extended information for property: 'BoundsDuration'</summary>
		[JsonProperty(PropertyName = "_boundsDuration")]
		public Element _BoundsDuration { get; set; }
		///<summary>Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.</summary>
		[JsonProperty(PropertyName = "boundsPeriod")]
		public Period BoundsPeriod { get; set; }
		///<summary>May contain extended information for property: 'BoundsPeriod'</summary>
		[JsonProperty(PropertyName = "_boundsPeriod")]
		public Element _BoundsPeriod { get; set; }
		///<summary>Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.</summary>
		[JsonProperty(PropertyName = "boundsRange")]
		public Range BoundsRange { get; set; }
		///<summary>May contain extended information for property: 'BoundsRange'</summary>
		[JsonProperty(PropertyName = "_boundsRange")]
		public Element _BoundsRange { get; set; }
		///<summary>A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.</summary>
		[JsonProperty(PropertyName = "count")]
		public uint? Count { get; set; }
		///<summary>May contain extended information for property: 'Count'</summary>
		[JsonProperty(PropertyName = "_count")]
		public Element _Count { get; set; }
		///<summary>If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.</summary>
		[JsonProperty(PropertyName = "countMax")]
		public uint? CountMax { get; set; }
		///<summary>May contain extended information for property: 'CountMax'</summary>
		[JsonProperty(PropertyName = "_countMax")]
		public Element _CountMax { get; set; }
		///<summary>If no days are specified, the action is assumed to happen every day as otherwise specified. The elements frequency and period cannot be used as well as dayOfWeek.</summary>
		[JsonProperty(PropertyName = "dayOfWeek")]
		public string[] DayOfWeek { get; set; }
		///<summary>May contain extended information for property: 'DayOfWeek'</summary>
		[JsonProperty(PropertyName = "_dayOfWeek")]
		public Element[] _DayOfWeek { get; set; }
		///<summary>How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.</summary>
		[JsonProperty(PropertyName = "duration")]
		public decimal? Duration { get; set; }
		///<summary>May contain extended information for property: 'Duration'</summary>
		[JsonProperty(PropertyName = "_duration")]
		public Element _Duration { get; set; }
		///<summary>If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.</summary>
		[JsonProperty(PropertyName = "durationMax")]
		public decimal? DurationMax { get; set; }
		///<summary>May contain extended information for property: 'DurationMax'</summary>
		[JsonProperty(PropertyName = "_durationMax")]
		public Element _DurationMax { get; set; }
		///<summary>The units of time for the duration, in UCUM units.</summary>
		[JsonProperty(PropertyName = "durationUnit")]
		public string DurationUnit { get; set; }
		///<summary>May contain extended information for property: 'DurationUnit'</summary>
		[JsonProperty(PropertyName = "_durationUnit")]
		public Element _DurationUnit { get; set; }
		///<summary>The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.</summary>
		[JsonProperty(PropertyName = "frequency")]
		public uint? Frequency { get; set; }
		///<summary>May contain extended information for property: 'Frequency'</summary>
		[JsonProperty(PropertyName = "_frequency")]
		public Element _Frequency { get; set; }
		///<summary>If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.</summary>
		[JsonProperty(PropertyName = "frequencyMax")]
		public uint? FrequencyMax { get; set; }
		///<summary>May contain extended information for property: 'FrequencyMax'</summary>
		[JsonProperty(PropertyName = "_frequencyMax")]
		public Element _FrequencyMax { get; set; }
		///<summary>The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.</summary>
		[JsonProperty(PropertyName = "offset")]
		public uint? Offset { get; set; }
		///<summary>May contain extended information for property: 'Offset'</summary>
		[JsonProperty(PropertyName = "_offset")]
		public Element _Offset { get; set; }
		///<summary>Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.</summary>
		[JsonProperty(PropertyName = "period")]
		public decimal? Period { get; set; }
		///<summary>May contain extended information for property: 'Period'</summary>
		[JsonProperty(PropertyName = "_period")]
		public Element _Period { get; set; }
		///<summary>If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.</summary>
		[JsonProperty(PropertyName = "periodMax")]
		public decimal? PeriodMax { get; set; }
		///<summary>May contain extended information for property: 'PeriodMax'</summary>
		[JsonProperty(PropertyName = "_periodMax")]
		public Element _PeriodMax { get; set; }
		///<summary>The units of time for the period in UCUM units.</summary>
		[JsonProperty(PropertyName = "periodUnit")]
		public string PeriodUnit { get; set; }
		///<summary>May contain extended information for property: 'PeriodUnit'</summary>
		[JsonProperty(PropertyName = "_periodUnit")]
		public Element _PeriodUnit { get; set; }
		///<summary>Specified time of day for action to take place.</summary>
		[JsonProperty(PropertyName = "timeOfDay")]
		public string[] TimeOfDay { get; set; }
		///<summary>May contain extended information for property: 'TimeOfDay'</summary>
		[JsonProperty(PropertyName = "_timeOfDay")]
		public Element[] _TimeOfDay { get; set; }
		///<summary>When more than one event is listed, the event is tied to the union of the specified events.</summary>
		[JsonProperty(PropertyName = "when")]
		public string[] When { get; set; }
		///<summary>May contain extended information for property: 'When'</summary>
		[JsonProperty(PropertyName = "_when")]
		public Element[] _When { get; set; }
	}
	///<summary>
	///Base StructureDefinition for TriggerDefinition Type: A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
	///</summary>
	///<source-file>c:/git/fhir\publish\triggerdefinition.profile.canonical.json</source-file>
	public class TriggerDefinition : DataType
	{
		///<summary>The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.</summary>
		[JsonProperty(PropertyName = "eventData")]
		public DataRequirement[] EventData { get; set; }
		///<summary>May contain extended information for property: 'Data'</summary>
		[JsonProperty(PropertyName = "_eventData")]
		public Element[] _EventData { get; set; }
		///<summary>A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.</summary>
		[JsonProperty(PropertyName = "eventName")]
		public string EventName { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_eventName")]
		public Element _EventName { get; set; }
		///<summary>The timing of the event (if this is a periodic trigger).</summary>
		[JsonProperty(PropertyName = "eventTimingDate")]
		public string EventTimingDate { get; set; }
		///<summary>May contain extended information for property: 'TimingDate'</summary>
		[JsonProperty(PropertyName = "_eventTimingDate")]
		public Element _EventTimingDate { get; set; }
		///<summary>The timing of the event (if this is a periodic trigger).</summary>
		[JsonProperty(PropertyName = "eventTimingDateTime")]
		public string EventTimingDateTime { get; set; }
		///<summary>May contain extended information for property: 'TimingDateTime'</summary>
		[JsonProperty(PropertyName = "_eventTimingDateTime")]
		public Element _EventTimingDateTime { get; set; }
		///<summary>The timing of the event (if this is a periodic trigger).</summary>
		[JsonProperty(PropertyName = "eventTimingReference")]
		public Reference EventTimingReference { get; set; }
		///<summary>May contain extended information for property: 'TimingReference'</summary>
		[JsonProperty(PropertyName = "_eventTimingReference")]
		public Element _EventTimingReference { get; set; }
		///<summary>The timing of the event (if this is a periodic trigger).</summary>
		[JsonProperty(PropertyName = "eventTimingTiming")]
		public Timing EventTimingTiming { get; set; }
		///<summary>May contain extended information for property: 'TimingTiming'</summary>
		[JsonProperty(PropertyName = "_eventTimingTiming")]
		public Element _EventTimingTiming { get; set; }
		///<summary>The type of triggering event.</summary>
		[JsonProperty(PropertyName = "type")]
		public string Type { get; set; }
		///<summary>May contain extended information for property: 'Type'</summary>
		[JsonProperty(PropertyName = "_type")]
		public Element _Type { get; set; }
	}
	///<summary>
	///Base StructureDefinition for UsageContext Type: Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
	///</summary>
	///<source-file>c:/git/fhir\publish\usagecontext.profile.canonical.json</source-file>
	public class UsageContext : DataType
	{
		///<summary>A code that identifies the type of context being specified by this usage context.</summary>
		[JsonProperty(PropertyName = "code")]
		public Coding Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.</summary>
		[JsonProperty(PropertyName = "valueCodeableConcept")]
		public CodeableConcept ValueCodeableConcept { get; set; }
		///<summary>May contain extended information for property: 'ValueCodeableConcept'</summary>
		[JsonProperty(PropertyName = "_valueCodeableConcept")]
		public Element _ValueCodeableConcept { get; set; }
		///<summary>A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.</summary>
		[JsonProperty(PropertyName = "valueQuantity")]
		public Quantity ValueQuantity { get; set; }
		///<summary>May contain extended information for property: 'ValueQuantity'</summary>
		[JsonProperty(PropertyName = "_valueQuantity")]
		public Element _ValueQuantity { get; set; }
		///<summary>A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.</summary>
		[JsonProperty(PropertyName = "valueRange")]
		public Range ValueRange { get; set; }
		///<summary>May contain extended information for property: 'ValueRange'</summary>
		[JsonProperty(PropertyName = "_valueRange")]
		public Element _ValueRange { get; set; }
	}
	///<summary>
	///A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSet : DomainResource
	{
		///<summary>Resource Type Name (for serialization)</summary>
		[JsonProperty(PropertyName = "resourceType")]
		public string ResourceType => "ValueSet";
		///<summary>A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).</summary>
		[JsonProperty(PropertyName = "compose")]
		public ValueSetCompose Compose { get; set; }
		///<summary>May contain extended information for property: 'Compose'</summary>
		[JsonProperty(PropertyName = "_compose")]
		public Element _Compose { get; set; }
		///<summary>Contact details to assist a user in finding and communicating with the publisher.</summary>
		[JsonProperty(PropertyName = "contact")]
		public ContactDetail[] Contact { get; set; }
		///<summary>May contain extended information for property: 'Contact'</summary>
		[JsonProperty(PropertyName = "_contact")]
		public Element[] _Contact { get; set; }
		///<summary>A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.</summary>
		[JsonProperty(PropertyName = "copyright")]
		public string Copyright { get; set; }
		///<summary>May contain extended information for property: 'Copyright'</summary>
		[JsonProperty(PropertyName = "_copyright")]
		public Element _Copyright { get; set; }
		///<summary>The date (and optionally time) when the value set was created or revised (e.g. the 'content logical definition').</summary>
		[JsonProperty(PropertyName = "date")]
		public string Date { get; set; }
		///<summary>May contain extended information for property: 'Date'</summary>
		[JsonProperty(PropertyName = "_date")]
		public Element _Date { get; set; }
		///<summary>A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.</summary>
		[JsonProperty(PropertyName = "description")]
		public string Description { get; set; }
		///<summary>May contain extended information for property: 'Description'</summary>
		[JsonProperty(PropertyName = "_description")]
		public Element _Description { get; set; }
		///<summary>A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.</summary>
		[JsonProperty(PropertyName = "expansion")]
		public ValueSetExpansion Expansion { get; set; }
		///<summary>May contain extended information for property: 'Expansion'</summary>
		[JsonProperty(PropertyName = "_expansion")]
		public Element _Expansion { get; set; }
		///<summary>A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.</summary>
		[JsonProperty(PropertyName = "experimental")]
		public bool? Experimental { get; set; }
		///<summary>May contain extended information for property: 'Experimental'</summary>
		[JsonProperty(PropertyName = "_experimental")]
		public Element _Experimental { get; set; }

		[JsonProperty(PropertyName ="extensible")]
		public bool? Extensible { get; set; }
		[JsonProperty(PropertyName ="_extensible")]
		public Element _Extensible { get; set; }

		///<summary>A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.</summary>
		[JsonProperty(PropertyName = "identifier")]
		public Identifier[] Identifier { get; set; }
		///<summary>May contain extended information for property: 'Identifier'</summary>
		[JsonProperty(PropertyName = "_identifier")]
		public Element[] _Identifier { get; set; }
		///<summary>If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.</summary>
		[JsonProperty(PropertyName = "immutable")]
		public bool? Immutable { get; set; }
		///<summary>May contain extended information for property: 'Immutable'</summary>
		[JsonProperty(PropertyName = "_immutable")]
		public Element _Immutable { get; set; }
		///<summary>A legal or geographic region in which the value set is intended to be used.</summary>
		[JsonProperty(PropertyName = "jurisdiction")]
		public CodeableConcept[] Jurisdiction { get; set; }
		///<summary>May contain extended information for property: 'Jurisdiction'</summary>
		[JsonProperty(PropertyName = "_jurisdiction")]
		public Element[] _Jurisdiction { get; set; }
		///<summary>A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The name of the organization or individual that published the value set.</summary>
		[JsonProperty(PropertyName = "publisher")]
		public string Publisher { get; set; }
		///<summary>May contain extended information for property: 'Publisher'</summary>
		[JsonProperty(PropertyName = "_publisher")]
		public Element _Publisher { get; set; }
		///<summary>Explanation of why this value set is needed and why it has been designed as it has.</summary>
		[JsonProperty(PropertyName = "purpose")]
		public string Purpose { get; set; }
		///<summary>May contain extended information for property: 'Purpose'</summary>
		[JsonProperty(PropertyName = "_purpose")]
		public Element _Purpose { get; set; }
		///<summary>Allows filtering of value sets that are appropriate for use versus not.See also the [valueset-workflowStatus](extension-valueset-workflowstatus.html) extension for additional status information related to the editorial process.</summary>
		[JsonProperty(PropertyName = "status")]
		public string Status { get; set; }
		///<summary>May contain extended information for property: 'Status'</summary>
		[JsonProperty(PropertyName = "_status")]
		public Element _Status { get; set; }
		///<summary>A short, descriptive, user-friendly title for the value set.</summary>
		[JsonProperty(PropertyName = "title")]
		public string Title { get; set; }
		///<summary>May contain extended information for property: 'Title'</summary>
		[JsonProperty(PropertyName = "_title")]
		public Element _Title { get; set; }
		///<summary>An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.</summary>
		[JsonProperty(PropertyName = "url")]
		public string Url { get; set; }
		///<summary>May contain extended information for property: 'Url'</summary>
		[JsonProperty(PropertyName = "_url")]
		public Element _Url { get; set; }
		///<summary>The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.</summary>
		[JsonProperty(PropertyName = "useContext")]
		public UsageContext[] UseContext { get; set; }
		///<summary>May contain extended information for property: 'UseContext'</summary>
		[JsonProperty(PropertyName = "_useContext")]
		public Element[] _UseContext { get; set; }
		///<summary>The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetCompose : Element
	{
		///<summary>Exclude one or more codes from the value set based on code system filters and/or other value sets.</summary>
		[JsonProperty(PropertyName = "exclude")]
		public ValueSetComposeInclude[] Exclude { get; set; }
		///<summary>May contain extended information for property: 'Exclude'</summary>
		[JsonProperty(PropertyName = "_exclude")]
		public Element[] _Exclude { get; set; }
		///<summary>Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).</summary>
		[JsonProperty(PropertyName = "inactive")]
		public bool? Inactive { get; set; }
		///<summary>May contain extended information for property: 'Inactive'</summary>
		[JsonProperty(PropertyName = "_inactive")]
		public Element _Inactive { get; set; }
		///<summary>Include one or more codes from a code system or other value set(s).</summary>
		[JsonProperty(PropertyName = "include")]
		public ValueSetComposeInclude[] Include { get; set; }
		///<summary>May contain extended information for property: 'Include'</summary>
		[JsonProperty(PropertyName = "_include")]
		public Element[] _Include { get; set; }
		///<summary>The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.</summary>
		[JsonProperty(PropertyName = "lockedDate")]
		public string LockedDate { get; set; }
		///<summary>May contain extended information for property: 'LockedDate'</summary>
		[JsonProperty(PropertyName = "_lockedDate")]
		public Element _LockedDate { get; set; }
		///<summary>A property to return in the expansion, if the client doesn't ask for any particular properties. May be either a code from the code system definition (convenient) or a the formal URI that refers to the property. The special value '*' means all properties known to the server.</summary>
		[JsonProperty(PropertyName = "property")]
		public string[] Property { get; set; }
		///<summary>May contain extended information for property: 'Property'</summary>
		[JsonProperty(PropertyName = "_property")]
		public Element[] _Property { get; set; }
	}
	///<summary>
	///Include one or more codes from a code system or other value set(s).
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetComposeInclude : Element
	{
		///<summary>Specifies a concept to be included or excluded.</summary>
		[JsonProperty(PropertyName = "concept")]
		public ValueSetComposeIncludeConcept[] Concept { get; set; }
		///<summary>May contain extended information for property: 'Concept'</summary>
		[JsonProperty(PropertyName = "_concept")]
		public Element[] _Concept { get; set; }
		///<summary>Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.</summary>
		[JsonProperty(PropertyName = "filter")]
		public ValueSetComposeIncludeFilter[] Filter { get; set; }
		///<summary>May contain extended information for property: 'Filter'</summary>
		[JsonProperty(PropertyName = "_filter")]
		public Element[] _Filter { get; set; }
		///<summary>An absolute URI which is the code system from which the selected codes come from.</summary>
		[JsonProperty(PropertyName = "system")]
		public string System { get; set; }
		///<summary>May contain extended information for property: 'System'</summary>
		[JsonProperty(PropertyName = "_system")]
		public Element _System { get; set; }
		///<summary>Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the union of the contents of all of the referenced value sets.</summary>
		[JsonProperty(PropertyName = "valueSet")]
		public string[] ValueSet { get; set; }
		///<summary>May contain extended information for property: 'ValueSet'</summary>
		[JsonProperty(PropertyName = "_valueSet")]
		public Element[] _ValueSet { get; set; }
		///<summary>The version of the code system that the codes are selected from, or the special version '*' for all versions.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///Specifies a concept to be included or excluded.
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetComposeIncludeConcept : Element
	{
		///<summary>Expressions are allowed if defined by the underlying code system.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.</summary>
		[JsonProperty(PropertyName = "designation")]
		public ValueSetComposeIncludeConceptDesignation[] Designation { get; set; }
		///<summary>May contain extended information for property: 'Designation'</summary>
		[JsonProperty(PropertyName = "_designation")]
		public Element[] _Designation { get; set; }
		///<summary>The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
	}
	///<summary>
	///Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetComposeIncludeConceptDesignation : Element
	{
		///<summary>In the absence of a language, the resource language applies.</summary>
		[JsonProperty(PropertyName = "language")]
		public string Language { get; set; }
		///<summary>May contain extended information for property: 'Language'</summary>
		[JsonProperty(PropertyName = "_language")]
		public Element _Language { get; set; }
		///<summary>A code that represents types of uses of designations.</summary>
		[JsonProperty(PropertyName = "use")]
		public Coding Use { get; set; }
		///<summary>May contain extended information for property: 'Use'</summary>
		[JsonProperty(PropertyName = "_use")]
		public Element _Use { get; set; }
		///<summary>The text value for this designation.</summary>
		[JsonProperty(PropertyName = "value")]
		public string Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetComposeIncludeFilter : Element
	{
		///<summary>In case filter.property represents a property of the system, the operation applies to the selected property. In case filter.property represents a filter of the system, the operation SHALL match one of the CodeSystem.filter.operator values.</summary>
		[JsonProperty(PropertyName = "op")]
		public string Op { get; set; }
		///<summary>May contain extended information for property: 'Op'</summary>
		[JsonProperty(PropertyName = "_op")]
		public Element _Op { get; set; }
		///<summary>A code that identifies a property or a filter defined in the code system.</summary>
		[JsonProperty(PropertyName = "property")]
		public string Property { get; set; }
		///<summary>May contain extended information for property: 'Property'</summary>
		[JsonProperty(PropertyName = "_property")]
		public Element _Property { get; set; }
		///<summary>The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.</summary>
		[JsonProperty(PropertyName = "value")]
		public string Value { get; set; }
		///<summary>May contain extended information for property: 'Value'</summary>
		[JsonProperty(PropertyName = "_value")]
		public Element _Value { get; set; }
	}
	///<summary>
	///A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetExpansion : Element
	{
		///<summary>The codes that are contained in the value set expansion.</summary>
		[JsonProperty(PropertyName = "contains")]
		public ValueSetExpansionContains[] Contains { get; set; }
		///<summary>May contain extended information for property: 'Contains'</summary>
		[JsonProperty(PropertyName = "_contains")]
		public Element[] _Contains { get; set; }
		///<summary>An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.</summary>
		[JsonProperty(PropertyName = "identifier")]
		public string Identifier { get; set; }
		///<summary>May contain extended information for property: 'Identifier'</summary>
		[JsonProperty(PropertyName = "_identifier")]
		public Element _Identifier { get; set; }
		///<summary>If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.</summary>
		[JsonProperty(PropertyName = "offset")]
		public int? Offset { get; set; }
		///<summary>May contain extended information for property: 'Offset'</summary>
		[JsonProperty(PropertyName = "_offset")]
		public Element _Offset { get; set; }
		///<summary>A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.</summary>
		[JsonProperty(PropertyName = "parameter")]
		public ValueSetExpansionParameter[] Parameter { get; set; }
		///<summary>May contain extended information for property: 'Parameter'</summary>
		[JsonProperty(PropertyName = "_parameter")]
		public Element[] _Parameter { get; set; }
		///<summary>A property defines an additional slot through which additional information can be provided about a concept.</summary>
		[JsonProperty(PropertyName = "property")]
		public ValueSetExpansionProperty[] Property { get; set; }
		///<summary>May contain extended information for property: 'Property'</summary>
		[JsonProperty(PropertyName = "_property")]
		public Element[] _Property { get; set; }
		///<summary>The time at which the expansion was produced by the expanding system.</summary>
		[JsonProperty(PropertyName = "timestamp")]
		public string Timestamp { get; set; }
		///<summary>May contain extended information for property: 'Timestamp'</summary>
		[JsonProperty(PropertyName = "_timestamp")]
		public Element _Timestamp { get; set; }
		///<summary>The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.</summary>
		[JsonProperty(PropertyName = "total")]
		public int? Total { get; set; }
		///<summary>May contain extended information for property: 'Total'</summary>
		[JsonProperty(PropertyName = "_total")]
		public Element _Total { get; set; }
	}
	///<summary>
	///The codes that are contained in the value set expansion.
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetExpansionContains : Element
	{
		///<summary>If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.</summary>
		[JsonProperty(PropertyName = "abstract")]
		public bool? Abstract { get; set; }
		///<summary>May contain extended information for property: 'Abstract'</summary>
		[JsonProperty(PropertyName = "_abstract")]
		public Element _Abstract { get; set; }
		///<summary>The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Other codes and entries contained under this entry in the hierarchy.</summary>
		[JsonProperty(PropertyName = "contains")]
		public ValueSetExpansionContains[] Contains { get; set; }
		///<summary>May contain extended information for property: 'Contains'</summary>
		[JsonProperty(PropertyName = "_contains")]
		public Element[] _Contains { get; set; }
		///<summary>Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.</summary>
		[JsonProperty(PropertyName = "designation")]
		public ValueSetComposeIncludeConceptDesignation[] Designation { get; set; }
		///<summary>May contain extended information for property: 'Designation'</summary>
		[JsonProperty(PropertyName = "_designation")]
		public Element[] _Designation { get; set; }
		///<summary>The recommended display for this item in the expansion.</summary>
		[JsonProperty(PropertyName = "display")]
		public string Display { get; set; }
		///<summary>May contain extended information for property: 'Display'</summary>
		[JsonProperty(PropertyName = "_display")]
		public Element _Display { get; set; }
		///<summary>If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether an concept is inactive (and it may depend on the context of use).</summary>
		[JsonProperty(PropertyName = "inactive")]
		public bool? Inactive { get; set; }
		///<summary>May contain extended information for property: 'Inactive'</summary>
		[JsonProperty(PropertyName = "_inactive")]
		public Element _Inactive { get; set; }
		///<summary>A property value for this concept.</summary>
		[JsonProperty(PropertyName = "property")]
		public ValueSetExpansionContainsProperty[] Property { get; set; }
		///<summary>May contain extended information for property: 'Property'</summary>
		[JsonProperty(PropertyName = "_property")]
		public Element[] _Property { get; set; }
		///<summary>An absolute URI which is the code system in which the code for this item in the expansion is defined.</summary>
		[JsonProperty(PropertyName = "system")]
		public string System { get; set; }
		///<summary>May contain extended information for property: 'System'</summary>
		[JsonProperty(PropertyName = "_system")]
		public Element _System { get; set; }
		///<summary>The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.</summary>
		[JsonProperty(PropertyName = "version")]
		public string Version { get; set; }
		///<summary>May contain extended information for property: 'Version'</summary>
		[JsonProperty(PropertyName = "_version")]
		public Element _Version { get; set; }
	}
	///<summary>
	///A property value for this concept.
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetExpansionContainsProperty : Element
	{
		///<summary>A code that is a reference to ValueSet.expansion.property.code.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueBoolean")]
		public bool? ValueBoolean { get; set; }
		///<summary>May contain extended information for property: 'ValueBoolean'</summary>
		[JsonProperty(PropertyName = "_valueBoolean")]
		public Element _ValueBoolean { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueCode")]
		public string ValueCode { get; set; }
		///<summary>May contain extended information for property: 'ValueCode'</summary>
		[JsonProperty(PropertyName = "_valueCode")]
		public Element _ValueCode { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueCoding")]
		public Coding ValueCoding { get; set; }
		///<summary>May contain extended information for property: 'ValueCoding'</summary>
		[JsonProperty(PropertyName = "_valueCoding")]
		public Element _ValueCoding { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueDateTime")]
		public string ValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'ValueDateTime'</summary>
		[JsonProperty(PropertyName = "_valueDateTime")]
		public Element _ValueDateTime { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueDecimal")]
		public decimal? ValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'ValueDecimal'</summary>
		[JsonProperty(PropertyName = "_valueDecimal")]
		public Element _ValueDecimal { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueInteger")]
		public int? ValueInteger { get; set; }
		///<summary>May contain extended information for property: 'ValueInteger'</summary>
		[JsonProperty(PropertyName = "_valueInteger")]
		public Element _ValueInteger { get; set; }
		///<summary>The value of this property.</summary>
		[JsonProperty(PropertyName = "valueString")]
		public string ValueString { get; set; }
		///<summary>May contain extended information for property: 'ValueString'</summary>
		[JsonProperty(PropertyName = "_valueString")]
		public Element _ValueString { get; set; }
	}
	///<summary>
	///A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetExpansionParameter : Element
	{
		///<summary>Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.</summary>
		[JsonProperty(PropertyName = "name")]
		public string Name { get; set; }
		///<summary>May contain extended information for property: 'Name'</summary>
		[JsonProperty(PropertyName = "_name")]
		public Element _Name { get; set; }
		///<summary>The value of the parameter.</summary>
		[JsonProperty(PropertyName = "valueBoolean")]
		public bool? ValueBoolean { get; set; }
		///<summary>May contain extended information for property: 'ValueBoolean'</summary>
		[JsonProperty(PropertyName = "_valueBoolean")]
		public Element _ValueBoolean { get; set; }
		///<summary>The value of the parameter.</summary>
		[JsonProperty(PropertyName = "valueCode")]
		public string ValueCode { get; set; }
		///<summary>May contain extended information for property: 'ValueCode'</summary>
		[JsonProperty(PropertyName = "_valueCode")]
		public Element _ValueCode { get; set; }
		///<summary>The value of the parameter.</summary>
		[JsonProperty(PropertyName = "valueDateTime")]
		public string ValueDateTime { get; set; }
		///<summary>May contain extended information for property: 'ValueDateTime'</summary>
		[JsonProperty(PropertyName = "_valueDateTime")]
		public Element _ValueDateTime { get; set; }
		///<summary>The value of the parameter.</summary>
		[JsonProperty(PropertyName = "valueDecimal")]
		public decimal? ValueDecimal { get; set; }
		///<summary>May contain extended information for property: 'ValueDecimal'</summary>
		[JsonProperty(PropertyName = "_valueDecimal")]
		public Element _ValueDecimal { get; set; }
		///<summary>The value of the parameter.</summary>
		[JsonProperty(PropertyName = "valueInteger")]
		public int? ValueInteger { get; set; }
		///<summary>May contain extended information for property: 'ValueInteger'</summary>
		[JsonProperty(PropertyName = "_valueInteger")]
		public Element _ValueInteger { get; set; }
		///<summary>The value of the parameter.</summary>
		[JsonProperty(PropertyName = "valueString")]
		public string ValueString { get; set; }
		///<summary>May contain extended information for property: 'ValueString'</summary>
		[JsonProperty(PropertyName = "_valueString")]
		public Element _ValueString { get; set; }
		///<summary>The value of the parameter.</summary>
		[JsonProperty(PropertyName = "valueUri")]
		public string ValueUri { get; set; }
		///<summary>May contain extended information for property: 'ValueUri'</summary>
		[JsonProperty(PropertyName = "_valueUri")]
		public Element _ValueUri { get; set; }
	}
	///<summary>
	///A property defines an additional slot through which additional information can be provided about a concept.
	///</summary>
	///<source-file>c:/git/fhir\publish\valueset.profile.canonical.json</source-file>
	public class ValueSetExpansionProperty : Element
	{
		///<summary>A code that is used to identify the property. The code is used in ValueSet.expansion.contains.property.code.</summary>
		[JsonProperty(PropertyName = "code")]
		public string Code { get; set; }
		///<summary>May contain extended information for property: 'Code'</summary>
		[JsonProperty(PropertyName = "_code")]
		public Element _Code { get; set; }
		///<summary>Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.</summary>
		[JsonProperty(PropertyName = "uri")]
		public string Uri { get; set; }
		///<summary>May contain extended information for property: 'Uri'</summary>
		[JsonProperty(PropertyName = "_uri")]
		public Element _Uri { get; set; }
	}
	public class ResourceConverter : JsonConverter
	{
		public override bool CanConvert(Type objectType)
		{
			return typeof(Resource).IsAssignableFrom(objectType);
		}
		public override bool CanWrite
		{
			get { return false; }
		}
		public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
		{
			throw new NotImplementedException();
		}
		public override bool CanRead
		{
			get { return true; }
		}
		public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
		{
			JObject jObject = JObject.Load(reader);
			string resourceType = jObject["resourceType"].Value<string>();
			object target = null;
			switch (resourceType)
			{
				case "Basic":
					target = new Basic();
					break;
				case "DomainResource":
					target = new DomainResource();
					break;
				case "CapabilityStatement":
					target = new CapabilityStatement();
					break;
				case "CodeSystem":
					target = new CodeSystem();
					break;
				case "CompartmentDefinition":
					target = new CompartmentDefinition();
					break;
				case "ConceptMap":
					target = new ConceptMap();
					break;
				case "NamingSystem":
					target = new NamingSystem();
					break;
				case "OperationDefinition":
					target = new OperationDefinition();
					break;
				case "SearchParameter":
					target = new SearchParameter();
					break;
				case "StructureDefinition":
					target = new StructureDefinition();
					break;
				case "StructureMap":
					target = new StructureMap();
					break;
				case "ValueSet":
					target = new ValueSet();
					break;
				default:
					target = new Resource();
					break;
			}
			serializer.Populate(jObject.CreateReader(), target);
			return target;
		}
	}
} // close namespace: Microsoft.Health.Fhir.SpecManager.fhir.v3
/** END OF GENERATED FILE **/
